var TripleBuilder=function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e,n){"use strict";n.r(e),n.d(e,"ACESFilmicToneMapping",(function(){return lt})),n.d(e,"AddEquation",(function(){return L})),n.d(e,"AddOperation",(function(){return nt})),n.d(e,"AdditiveBlending",(function(){return T})),n.d(e,"AlphaFormat",(function(){return Gt})),n.d(e,"AlwaysDepth",(function(){return X})),n.d(e,"AlwaysStencilFunc",(function(){return on})),n.d(e,"AmbientLight",(function(){return Yh})),n.d(e,"AmbientLightProbe",(function(){return vu})),n.d(e,"AnimationClip",(function(){return eh})),n.d(e,"AnimationLoader",(function(){return ch})),n.d(e,"AnimationMixer",(function(){return Xu})),n.d(e,"AnimationObjectGroup",(function(){return ku})),n.d(e,"AnimationUtils",(function(){return Gc})),n.d(e,"ArcCurve",(function(){return vh})),n.d(e,"ArrayCamera",(function(){return ds})),n.d(e,"ArrowHelper",(function(){return Xq})),n.d(e,"Audio",(function(){return Eu})),n.d(e,"AudioAnalyser",(function(){return Cu})),n.d(e,"AudioContext",(function(){return qu})),n.d(e,"AudioListener",(function(){return Tu})),n.d(e,"AudioLoader",(function(){return mu})),n.d(e,"AxesHelper",(function(){return Yq})),n.d(e,"AxisHelper",(function(){return ym})),n.d(e,"BackSide",(function(){return v})),n.d(e,"BasicDepthPacking",(function(){return Fe})),n.d(e,"BasicShadowMap",(function(){return q})),n.d(e,"BinaryTextureLoader",(function(){return Sm})),n.d(e,"Bone",(function(){return Ys})),n.d(e,"BooleanKeyframeTrack",(function(){return Yc})),n.d(e,"BoundingBoxHelper",(function(){return _m})),n.d(e,"Box2",(function(){return nq})),n.d(e,"Box3",(function(){return gi})),n.d(e,"Box3Helper",(function(){return Gq})),n.d(e,"BoxBufferGeometry",(function(){return Zr})),n.d(e,"BoxGeometry",(function(){return Yr})),n.d(e,"BoxHelper",(function(){return Hq})),n.d(e,"BufferAttribute",(function(){return ir})),n.d(e,"BufferGeometry",(function(){return br})),n.d(e,"BufferGeometryLoader",(function(){return tu})),n.d(e,"ByteType",(function(){return Pt})),n.d(e,"Cache",(function(){return ih})),n.d(e,"Camera",(function(){return na})),n.d(e,"CameraHelper",(function(){return Bq})),n.d(e,"CanvasRenderer",(function(){return Em})),n.d(e,"CanvasTexture",(function(){return fl})),n.d(e,"CatmullRomCurve3",(function(){return wh})),n.d(e,"CineonToneMapping",(function(){return st})),n.d(e,"CircleBufferGeometry",(function(){return zc})),n.d(e,"CircleGeometry",(function(){return Ac})),n.d(e,"ClampToEdgeWrapping",(function(){return xt})),n.d(e,"Clock",(function(){return _u})),n.d(e,"ClosedSplineCurve3",(function(){return vm})),n.d(e,"Color",(function(){return Zi})),n.d(e,"ColorKeyframeTrack",(function(){return Zc})),n.d(e,"CompressedTexture",(function(){return pl})),n.d(e,"CompressedTextureLoader",(function(){return hh})),n.d(e,"ConeBufferGeometry",(function(){return Ec})),n.d(e,"ConeGeometry",(function(){return Tc})),n.d(e,"CubeCamera",(function(){return oa})),n.d(e,"CubeGeometry",(function(){return Yr})),n.d(e,"CubeReflectionMapping",(function(){return ht})),n.d(e,"CubeRefractionMapping",(function(){return ut})),n.d(e,"CubeTexture",(function(){return La})),n.d(e,"CubeTextureLoader",(function(){return mh})),n.d(e,"CubeUVReflectionMapping",(function(){return pt})),n.d(e,"CubeUVRefractionMapping",(function(){return ft})),n.d(e,"CubicBezierCurve",(function(){return Eh})),n.d(e,"CubicBezierCurve3",(function(){return Ah})),n.d(e,"CubicInterpolant",(function(){return jc})),n.d(e,"CullFaceBack",(function(){return s})),n.d(e,"CullFaceFront",(function(){return l})),n.d(e,"CullFaceFrontBack",(function(){return c})),n.d(e,"CullFaceNone",(function(){return o})),n.d(e,"Curve",(function(){return ph})),n.d(e,"CurvePath",(function(){return Ih})),n.d(e,"CustomBlending",(function(){return z})),n.d(e,"CylinderBufferGeometry",(function(){return Sc})),n.d(e,"CylinderGeometry",(function(){return Mc})),n.d(e,"Cylindrical",(function(){return tq})),n.d(e,"DataTexture",(function(){return la})),n.d(e,"DataTexture2DArray",(function(){return Pa})),n.d(e,"DataTexture3D",(function(){return Ra})),n.d(e,"DataTextureLoader",(function(){return uh})),n.d(e,"DecrementStencilOp",(function(){return Ye})),n.d(e,"DecrementWrapStencilOp",(function(){return Je})),n.d(e,"DefaultLoadingManager",(function(){return ah})),n.d(e,"DepthFormat",(function(){return Yt})),n.d(e,"DepthStencilFormat",(function(){return Zt})),n.d(e,"DepthTexture",(function(){return vl})),n.d(e,"DirectionalLight",(function(){return Xh})),n.d(e,"DirectionalLightHelper",(function(){return Iq})),n.d(e,"DirectionalLightShadow",(function(){return Wh})),n.d(e,"DiscreteInterpolant",(function(){return Wc})),n.d(e,"DodecahedronBufferGeometry",(function(){return Ll})),n.d(e,"DodecahedronGeometry",(function(){return zl})),n.d(e,"DoubleSide",(function(){return x})),n.d(e,"DstAlphaFactor",(function(){return H})),n.d(e,"DstColorFactor",(function(){return V})),n.d(e,"DynamicBufferAttribute",(function(){return sm})),n.d(e,"DynamicCopyUsage",(function(){return dn})),n.d(e,"DynamicDrawUsage",(function(){return ln})),n.d(e,"DynamicReadUsage",(function(){return un})),n.d(e,"EdgesGeometry",(function(){return wc})),n.d(e,"EdgesHelper",(function(){return bm})),n.d(e,"EllipseCurve",(function(){return fh})),n.d(e,"EqualDepth",(function(){return J})),n.d(e,"EqualStencilFunc",(function(){return tn})),n.d(e,"EquirectangularReflectionMapping",(function(){return qt})),n.d(e,"EquirectangularRefractionMapping",(function(){return mt})),n.d(e,"Euler",(function(){return jn})),n.d(e,"EventDispatcher",(function(){return fn})),n.d(e,"ExtrudeBufferGeometry",(function(){return cc})),n.d(e,"ExtrudeGeometry",(function(){return lc})),n.d(e,"Face3",(function(){return $i})),n.d(e,"Face4",(function(){return Zq})),n.d(e,"FaceColors",(function(){return b})),n.d(e,"FaceNormalsHelper",(function(){return Pq})),n.d(e,"FileLoader",(function(){return lh})),n.d(e,"FlatShading",(function(){return g})),n.d(e,"Float32Attribute",(function(){return pm})),n.d(e,"Float32BufferAttribute",(function(){return ur})),n.d(e,"Float64Attribute",(function(){return fm})),n.d(e,"Float64BufferAttribute",(function(){return qr})),n.d(e,"FloatType",(function(){return Dt})),n.d(e,"Fog",(function(){return ws})),n.d(e,"FogExp2",(function(){return bs})),n.d(e,"Font",(function(){return cu})),n.d(e,"FontLoader",(function(){return uu})),n.d(e,"FrontFaceDirectionCCW",(function(){return u})),n.d(e,"FrontFaceDirectionCW",(function(){return h})),n.d(e,"FrontSide",(function(){return f})),n.d(e,"Frustum",(function(){return ua})),n.d(e,"GammaEncoding",(function(){return Oe})),n.d(e,"Geometry",(function(){return Xr})),n.d(e,"GeometryUtils",(function(){return Tm})),n.d(e,"GreaterDepth",(function(){return K})),n.d(e,"GreaterEqualDepth",(function(){return Q})),n.d(e,"GreaterEqualStencilFunc",(function(){return an})),n.d(e,"GreaterStencilFunc",(function(){return nn})),n.d(e,"GridHelper",(function(){return Sq})),n.d(e,"Group",(function(){return ms})),n.d(e,"HalfFloatType",(function(){return Nt})),n.d(e,"HemisphereLight",(function(){return Uh})),n.d(e,"HemisphereLightHelper",(function(){return wq})),n.d(e,"HemisphereLightProbe",(function(){return fu})),n.d(e,"IcosahedronBufferGeometry",(function(){return Al})),n.d(e,"IcosahedronGeometry",(function(){return El})),n.d(e,"ImageBitmapLoader",(function(){return su})),n.d(e,"ImageLoader",(function(){return qh})),n.d(e,"ImageUtils",(function(){return An})),n.d(e,"ImmediateRenderObject",(function(){return oq})),n.d(e,"IncrementStencilOp",(function(){return Xe})),n.d(e,"IncrementWrapStencilOp",(function(){return Ze})),n.d(e,"InstancedBufferAttribute",(function(){return $h})),n.d(e,"InstancedBufferGeometry",(function(){return Kh})),n.d(e,"InstancedInterleavedBuffer",(function(){return Zu})),n.d(e,"InstancedMesh",(function(){return Zs})),n.d(e,"Int16Attribute",(function(){return um})),n.d(e,"Int16BufferAttribute",(function(){return sr})),n.d(e,"Int32Attribute",(function(){return mm})),n.d(e,"Int32BufferAttribute",(function(){return cr})),n.d(e,"Int8Attribute",(function(){return lm})),n.d(e,"Int8BufferAttribute",(function(){return rr})),n.d(e,"IntType",(function(){return Ot})),n.d(e,"InterleavedBuffer",(function(){return Ms})),n.d(e,"InterleavedBufferAttribute",(function(){return Ss})),n.d(e,"Interpolant",(function(){return Vc})),n.d(e,"InterpolateDiscrete",(function(){return we})),n.d(e,"InterpolateLinear",(function(){return Me})),n.d(e,"InterpolateSmooth",(function(){return Se})),n.d(e,"InvertStencilOp",(function(){return Qe})),n.d(e,"JSONLoader",(function(){return Am})),n.d(e,"KeepStencilOp",(function(){return ke})),n.d(e,"KeyframeTrack",(function(){return Xc})),n.d(e,"LOD",(function(){return Vs})),n.d(e,"LatheBufferGeometry",(function(){return gc})),n.d(e,"LatheGeometry",(function(){return xc})),n.d(e,"Layers",(function(){return kn})),n.d(e,"LensFlare",(function(){return Lm})),n.d(e,"LessDepth",(function(){return Y})),n.d(e,"LessEqualDepth",(function(){return Z})),n.d(e,"LessEqualStencilFunc",(function(){return en})),n.d(e,"LessStencilFunc",(function(){return $e})),n.d(e,"Light",(function(){return Bh})),n.d(e,"LightProbe",(function(){return pu})),n.d(e,"LightProbeHelper",(function(){return Mq})),n.d(e,"LightShadow",(function(){return Fh})),n.d(e,"Line",(function(){return nl})),n.d(e,"Line3",(function(){return aq})),n.d(e,"LineBasicMaterial",(function(){return Js})),n.d(e,"LineCurve",(function(){return zh})),n.d(e,"LineCurve3",(function(){return Lh})),n.d(e,"LineDashedMaterial",(function(){return Fc})),n.d(e,"LineLoop",(function(){return ol})),n.d(e,"LinePieces",(function(){return Qq})),n.d(e,"LineSegments",(function(){return al})),n.d(e,"LineStrip",(function(){return Jq})),n.d(e,"LinearEncoding",(function(){return Re})),n.d(e,"LinearFilter",(function(){return St})),n.d(e,"LinearInterpolant",(function(){return kc})),n.d(e,"LinearMipMapLinearFilter",(function(){return zt})),n.d(e,"LinearMipMapNearestFilter",(function(){return Et})),n.d(e,"LinearMipmapLinearFilter",(function(){return At})),n.d(e,"LinearMipmapNearestFilter",(function(){return Tt})),n.d(e,"LinearToneMapping",(function(){return rt})),n.d(e,"Loader",(function(){return oh})),n.d(e,"LoaderUtils",(function(){return Qh})),n.d(e,"LoadingManager",(function(){return rh})),n.d(e,"LogLuvEncoding",(function(){return De})),n.d(e,"LoopOnce",(function(){return ye})),n.d(e,"LoopPingPong",(function(){return be})),n.d(e,"LoopRepeat",(function(){return _e})),n.d(e,"LuminanceAlphaFormat",(function(){return Wt})),n.d(e,"LuminanceFormat",(function(){return kt})),n.d(e,"MOUSE",(function(){return r})),n.d(e,"Material",(function(){return er})),n.d(e,"MaterialLoader",(function(){return Jh})),n.d(e,"Math",(function(){return gn})),n.d(e,"Matrix3",(function(){return En})),n.d(e,"Matrix4",(function(){return Hn})),n.d(e,"MaxEquation",(function(){return O})),n.d(e,"Mesh",(function(){return Fr})),n.d(e,"MeshBasicMaterial",(function(){return nr})),n.d(e,"MeshDepthMaterial",(function(){return is})),n.d(e,"MeshDistanceMaterial",(function(){return rs})),n.d(e,"MeshFaceMaterial",(function(){return Kq})),n.d(e,"MeshLambertMaterial",(function(){return Bc})),n.d(e,"MeshMatcapMaterial",(function(){return Uc})),n.d(e,"MeshNormalMaterial",(function(){return Nc})),n.d(e,"MeshPhongMaterial",(function(){return Ic})),n.d(e,"MeshPhysicalMaterial",(function(){return Oc})),n.d(e,"MeshStandardMaterial",(function(){return Cc})),n.d(e,"MeshToonMaterial",(function(){return Dc})),n.d(e,"MinEquation",(function(){return C})),n.d(e,"MirroredRepeatWrapping",(function(){return gt})),n.d(e,"MixOperation",(function(){return et})),n.d(e,"MultiMaterial",(function(){return $q})),n.d(e,"MultiplyBlending",(function(){return A})),n.d(e,"MultiplyOperation",(function(){return tt})),n.d(e,"NearestFilter",(function(){return yt})),n.d(e,"NearestMipMapLinearFilter",(function(){return Mt})),n.d(e,"NearestMipMapNearestFilter",(function(){return bt})),n.d(e,"NearestMipmapLinearFilter",(function(){return wt})),n.d(e,"NearestMipmapNearestFilter",(function(){return _t})),n.d(e,"NeverDepth",(function(){return W})),n.d(e,"NeverStencilFunc",(function(){return Ke})),n.d(e,"NoBlending",(function(){return M})),n.d(e,"NoColors",(function(){return _})),n.d(e,"NoToneMapping",(function(){return it})),n.d(e,"NormalBlending",(function(){return S})),n.d(e,"NotEqualDepth",(function(){return $})),n.d(e,"NotEqualStencilFunc",(function(){return rn})),n.d(e,"NumberKeyframeTrack",(function(){return Jc})),n.d(e,"Object3D",(function(){return ai})),n.d(e,"ObjectLoader",(function(){return nu})),n.d(e,"ObjectSpaceNormalMap",(function(){return Ve})),n.d(e,"OctahedronBufferGeometry",(function(){return Tl})),n.d(e,"OctahedronGeometry",(function(){return Sl})),n.d(e,"OneFactor",(function(){return D})),n.d(e,"OneMinusDstAlphaFactor",(function(){return G})),n.d(e,"OneMinusDstColorFactor",(function(){return j})),n.d(e,"OneMinusSrcAlphaFactor",(function(){return F})),n.d(e,"OneMinusSrcColorFactor",(function(){return B})),n.d(e,"OrthographicCamera",(function(){return kh})),n.d(e,"PCFShadowMap",(function(){return m})),n.d(e,"PCFSoftShadowMap",(function(){return d})),n.d(e,"ParametricBufferGeometry",(function(){return yl})),n.d(e,"ParametricGeometry",(function(){return gl})),n.d(e,"Particle",(function(){return em})),n.d(e,"ParticleBasicMaterial",(function(){return rm})),n.d(e,"ParticleSystem",(function(){return nm})),n.d(e,"ParticleSystemMaterial",(function(){return am})),n.d(e,"Path",(function(){return Dh})),n.d(e,"PerspectiveCamera",(function(){return ia})),n.d(e,"Plane",(function(){return Oi})),n.d(e,"PlaneBufferGeometry",(function(){return xa})),n.d(e,"PlaneGeometry",(function(){return va})),n.d(e,"PlaneHelper",(function(){return Vq})),n.d(e,"PointCloud",(function(){return tm})),n.d(e,"PointCloudMaterial",(function(){return im})),n.d(e,"PointLight",(function(){return jh})),n.d(e,"PointLightHelper",(function(){return xq})),n.d(e,"Points",(function(){return ql})),n.d(e,"PointsMaterial",(function(){return sl})),n.d(e,"PolarGridHelper",(function(){return Tq})),n.d(e,"PolyhedronBufferGeometry",(function(){return bl})),n.d(e,"PolyhedronGeometry",(function(){return _l})),n.d(e,"PositionalAudio",(function(){return Ru})),n.d(e,"PositionalAudioHelper",(function(){return Eq})),n.d(e,"PropertyBinding",(function(){return ju})),n.d(e,"PropertyMixer",(function(){return Ou})),n.d(e,"QuadraticBezierCurve",(function(){return Ph})),n.d(e,"QuadraticBezierCurve3",(function(){return Rh})),n.d(e,"Quaternion",(function(){return _n})),n.d(e,"QuaternionKeyframeTrack",(function(){return Kc})),n.d(e,"QuaternionLinearInterpolant",(function(){return Qc})),n.d(e,"REVISION",(function(){return i})),n.d(e,"RGBADepthPacking",(function(){return He})),n.d(e,"RGBAFormat",(function(){return jt})),n.d(e,"RGBA_ASTC_10x10_Format",(function(){return ve})),n.d(e,"RGBA_ASTC_10x5_Format",(function(){return de})),n.d(e,"RGBA_ASTC_10x6_Format",(function(){return pe})),n.d(e,"RGBA_ASTC_10x8_Format",(function(){return fe})),n.d(e,"RGBA_ASTC_12x10_Format",(function(){return xe})),n.d(e,"RGBA_ASTC_12x12_Format",(function(){return ge})),n.d(e,"RGBA_ASTC_4x4_Format",(function(){return oe})),n.d(e,"RGBA_ASTC_5x4_Format",(function(){return se})),n.d(e,"RGBA_ASTC_5x5_Format",(function(){return le})),n.d(e,"RGBA_ASTC_6x5_Format",(function(){return ce})),n.d(e,"RGBA_ASTC_6x6_Format",(function(){return he})),n.d(e,"RGBA_ASTC_8x5_Format",(function(){return ue})),n.d(e,"RGBA_ASTC_8x6_Format",(function(){return qe})),n.d(e,"RGBA_ASTC_8x8_Format",(function(){return me})),n.d(e,"RGBA_PVRTC_2BPPV1_Format",(function(){return re})),n.d(e,"RGBA_PVRTC_4BPPV1_Format",(function(){return ie})),n.d(e,"RGBA_S3TC_DXT1_Format",(function(){return Kt})),n.d(e,"RGBA_S3TC_DXT3_Format",(function(){return $t})),n.d(e,"RGBA_S3TC_DXT5_Format",(function(){return te})),n.d(e,"RGBDEncoding",(function(){return Ue})),n.d(e,"RGBEEncoding",(function(){return Ie})),n.d(e,"RGBEFormat",(function(){return Xt})),n.d(e,"RGBFormat",(function(){return Vt})),n.d(e,"RGBM16Encoding",(function(){return Be})),n.d(e,"RGBM7Encoding",(function(){return Ne})),n.d(e,"RGB_ETC1_Format",(function(){return ae})),n.d(e,"RGB_PVRTC_2BPPV1_Format",(function(){return ne})),n.d(e,"RGB_PVRTC_4BPPV1_Format",(function(){return ee})),n.d(e,"RGB_S3TC_DXT1_Format",(function(){return Qt})),n.d(e,"RawShaderMaterial",(function(){return Rc})),n.d(e,"Ray",(function(){return Li})),n.d(e,"Raycaster",(function(){return Ju})),n.d(e,"RectAreaLight",(function(){return Zh})),n.d(e,"RectAreaLightHelper",(function(){return gq})),n.d(e,"RedFormat",(function(){return Jt})),n.d(e,"ReinhardToneMapping",(function(){return at})),n.d(e,"RepeatWrapping",(function(){return vt})),n.d(e,"ReplaceStencilOp",(function(){return We})),n.d(e,"ReverseSubtractEquation",(function(){return R})),n.d(e,"RingBufferGeometry",(function(){return vc})),n.d(e,"RingGeometry",(function(){return fc})),n.d(e,"Scene",(function(){return oi})),n.d(e,"SceneUtils",(function(){return zm})),n.d(e,"ShaderChunk",(function(){return qa})),n.d(e,"ShaderLib",(function(){return da})),n.d(e,"ShaderMaterial",(function(){return ea})),n.d(e,"ShadowMaterial",(function(){return Pc})),n.d(e,"Shape",(function(){return Nh})),n.d(e,"ShapeBufferGeometry",(function(){return _c})),n.d(e,"ShapeGeometry",(function(){return yc})),n.d(e,"ShapePath",(function(){return lu})),n.d(e,"ShapeUtils",(function(){return ac})),n.d(e,"ShortType",(function(){return Rt})),n.d(e,"Skeleton",(function(){return Xs})),n.d(e,"SkeletonHelper",(function(){return vq})),n.d(e,"SkinnedMesh",(function(){return js})),n.d(e,"SmoothShading",(function(){return y})),n.d(e,"Sphere",(function(){return bi})),n.d(e,"SphereBufferGeometry",(function(){return pc})),n.d(e,"SphereGeometry",(function(){return dc})),n.d(e,"Spherical",(function(){return $u})),n.d(e,"SphericalHarmonics3",(function(){return du})),n.d(e,"SphericalReflectionMapping",(function(){return dt})),n.d(e,"Spline",(function(){return gm})),n.d(e,"SplineCurve",(function(){return Ch})),n.d(e,"SplineCurve3",(function(){return xm})),n.d(e,"SpotLight",(function(){return Gh})),n.d(e,"SpotLightHelper",(function(){return mq})),n.d(e,"SpotLightShadow",(function(){return Hh})),n.d(e,"Sprite",(function(){return Us})),n.d(e,"SpriteMaterial",(function(){return Ts})),n.d(e,"SrcAlphaFactor",(function(){return U})),n.d(e,"SrcAlphaSaturateFactor",(function(){return k})),n.d(e,"SrcColorFactor",(function(){return N})),n.d(e,"StaticCopyUsage",(function(){return mn})),n.d(e,"StaticDrawUsage",(function(){return sn})),n.d(e,"StaticReadUsage",(function(){return hn})),n.d(e,"StereoCamera",(function(){return yu})),n.d(e,"StreamCopyUsage",(function(){return pn})),n.d(e,"StreamDrawUsage",(function(){return cn})),n.d(e,"StreamReadUsage",(function(){return qn})),n.d(e,"StringKeyframeTrack",(function(){return $c})),n.d(e,"SubtractEquation",(function(){return P})),n.d(e,"SubtractiveBlending",(function(){return E})),n.d(e,"TOUCH",(function(){return a})),n.d(e,"TangentSpaceNormalMap",(function(){return Ge})),n.d(e,"TetrahedronBufferGeometry",(function(){return Ml})),n.d(e,"TetrahedronGeometry",(function(){return wl})),n.d(e,"TextBufferGeometry",(function(){return mc})),n.d(e,"TextGeometry",(function(){return qc})),n.d(e,"Texture",(function(){return Ln})),n.d(e,"TextureLoader",(function(){return dh})),n.d(e,"TorusBufferGeometry",(function(){return Dl})),n.d(e,"TorusGeometry",(function(){return Il})),n.d(e,"TorusKnotBufferGeometry",(function(){return Ol})),n.d(e,"TorusKnotGeometry",(function(){return Cl})),n.d(e,"Triangle",(function(){return ki})),n.d(e,"TriangleFanDrawMode",(function(){return Pe})),n.d(e,"TriangleStripDrawMode",(function(){return Le})),n.d(e,"TrianglesDrawMode",(function(){return ze})),n.d(e,"TubeBufferGeometry",(function(){return Rl})),n.d(e,"TubeGeometry",(function(){return Pl})),n.d(e,"UVMapping",(function(){return ct})),n.d(e,"Uint16Attribute",(function(){return qm})),n.d(e,"Uint16BufferAttribute",(function(){return lr})),n.d(e,"Uint32Attribute",(function(){return dm})),n.d(e,"Uint32BufferAttribute",(function(){return hr})),n.d(e,"Uint8Attribute",(function(){return cm})),n.d(e,"Uint8BufferAttribute",(function(){return ar})),n.d(e,"Uint8ClampedAttribute",(function(){return hm})),n.d(e,"Uint8ClampedBufferAttribute",(function(){return or})),n.d(e,"Uncharted2ToneMapping",(function(){return ot})),n.d(e,"Uniform",(function(){return Yu})),n.d(e,"UniformsLib",(function(){return ma})),n.d(e,"UniformsUtils",(function(){return Kr})),n.d(e,"UnsignedByteType",(function(){return Lt})),n.d(e,"UnsignedInt248Type",(function(){return Ht})),n.d(e,"UnsignedIntType",(function(){return It})),n.d(e,"UnsignedShort4444Type",(function(){return Bt})),n.d(e,"UnsignedShort5551Type",(function(){return Ut})),n.d(e,"UnsignedShort565Type",(function(){return Ft})),n.d(e,"UnsignedShortType",(function(){return Ct})),n.d(e,"VSMShadowMap",(function(){return p})),n.d(e,"Vector2",(function(){return yn})),n.d(e,"Vector3",(function(){return Mn})),n.d(e,"Vector4",(function(){return Pn})),n.d(e,"VectorKeyframeTrack",(function(){return th})),n.d(e,"Vertex",(function(){return om})),n.d(e,"VertexColors",(function(){return w})),n.d(e,"VertexNormalsHelper",(function(){return uq})),n.d(e,"VideoTexture",(function(){return dl})),n.d(e,"WebGLMultisampleRenderTarget",(function(){return Cn})),n.d(e,"WebGLRenderTarget",(function(){return Rn})),n.d(e,"WebGLRenderTargetCube",(function(){return sa})),n.d(e,"WebGLRenderer",(function(){return _s})),n.d(e,"WebGLUtils",(function(){return hs})),n.d(e,"WireframeGeometry",(function(){return xl})),n.d(e,"WireframeHelper",(function(){return wm})),n.d(e,"WrapAroundEnding",(function(){return Ae})),n.d(e,"XHRLoader",(function(){return Mm})),n.d(e,"ZeroCurvatureEnding",(function(){return Te})),n.d(e,"ZeroFactor",(function(){return I})),n.d(e,"ZeroSlopeEnding",(function(){return Ee})),n.d(e,"ZeroStencilOp",(function(){return je})),n.d(e,"sRGBEncoding",(function(){return Ce})),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t}),void 0===Math.sign&&(Math.sign=function(t){return t<0?-1:t>0?1:+t}),"name"in Function.prototype==!1&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}}),void 0===Object.assign&&(Object.assign=function(t){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i)for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(e[r]=i[r])}return e});var i="110",r={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},a={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},o=0,s=1,l=2,c=3,h=0,u=1,q=0,m=1,d=2,p=3,f=0,v=1,x=2,g=1,y=2,_=0,b=1,w=2,M=0,S=1,T=2,E=3,A=4,z=5,L=100,P=101,R=102,C=103,O=104,I=200,D=201,N=202,B=203,U=204,F=205,H=206,G=207,V=208,j=209,k=210,W=0,X=1,Y=2,Z=3,J=4,Q=5,K=6,$=7,tt=0,et=1,nt=2,it=0,rt=1,at=2,ot=3,st=4,lt=5,ct=300,ht=301,ut=302,qt=303,mt=304,dt=305,pt=306,ft=307,vt=1e3,xt=1001,gt=1002,yt=1003,_t=1004,bt=1004,wt=1005,Mt=1005,St=1006,Tt=1007,Et=1007,At=1008,zt=1008,Lt=1009,Pt=1010,Rt=1011,Ct=1012,Ot=1013,It=1014,Dt=1015,Nt=1016,Bt=1017,Ut=1018,Ft=1019,Ht=1020,Gt=1021,Vt=1022,jt=1023,kt=1024,Wt=1025,Xt=jt,Yt=1026,Zt=1027,Jt=1028,Qt=33776,Kt=33777,$t=33778,te=33779,ee=35840,ne=35841,ie=35842,re=35843,ae=36196,oe=37808,se=37809,le=37810,ce=37811,he=37812,ue=37813,qe=37814,me=37815,de=37816,pe=37817,fe=37818,ve=37819,xe=37820,ge=37821,ye=2200,_e=2201,be=2202,we=2300,Me=2301,Se=2302,Te=2400,Ee=2401,Ae=2402,ze=0,Le=1,Pe=2,Re=3e3,Ce=3001,Oe=3007,Ie=3002,De=3003,Ne=3004,Be=3005,Ue=3006,Fe=3200,He=3201,Ge=0,Ve=1,je=0,ke=7680,We=7681,Xe=7682,Ye=7683,Ze=34055,Je=34056,Qe=5386,Ke=512,$e=513,tn=514,en=515,nn=516,rn=517,an=518,on=519,sn=35044,ln=35048,cn=35040,hn=35045,un=35049,qn=35041,mn=35046,dn=35050,pn=35042;function fn(){}Object.assign(fn.prototype,{addEventListener:function(t,e){void 0===this._listeners&&(this._listeners={});var n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)},hasEventListener:function(t,e){if(void 0===this._listeners)return!1;var n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)},removeEventListener:function(t,e){if(void 0!==this._listeners){var n=this._listeners[t];if(void 0!==n){var i=n.indexOf(e);-1!==i&&n.splice(i,1)}}},dispatchEvent:function(t){if(void 0!==this._listeners){var e=this._listeners[t.type];if(void 0!==e){t.target=this;for(var n=e.slice(0),i=0,r=n.length;i<r;i++)n[i].call(this,t)}}}});for(var vn=[],xn=0;xn<256;xn++)vn[xn]=(xn<16?"0":"")+xn.toString(16);var gn={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(vn[255&t]+vn[t>>8&255]+vn[t>>16&255]+vn[t>>24&255]+"-"+vn[255&e]+vn[e>>8&255]+"-"+vn[e>>16&15|64]+vn[e>>24&255]+"-"+vn[63&n|128]+vn[n>>8&255]+"-"+vn[n>>16&255]+vn[n>>24&255]+vn[255&i]+vn[i>>8&255]+vn[i>>16&255]+vn[i>>24&255]).toUpperCase()},clamp:function(t,e,n){return Math.max(e,Math.min(n,t))},euclideanModulo:function(t,e){return(t%e+e)%e},mapLinear:function(t,e,n,i,r){return i+(t-e)*(r-i)/(n-e)},lerp:function(t,e,n){return(1-n)*t+n*e},smoothstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*(3-2*t)},smootherstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},degToRad:function(t){return t*gn.DEG2RAD},radToDeg:function(t){return t*gn.RAD2DEG},isPowerOfTwo:function(t){return 0==(t&t-1)&&0!==t},ceilPowerOfTwo:function(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))},floorPowerOfTwo:function(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}};function yn(t,e){this.x=t||0,this.y=e||0}function _n(t,e,n,i){this._x=t||0,this._y=e||0,this._z=n||0,this._w=void 0!==i?i:1}Object.defineProperties(yn.prototype,{width:{get:function(){return this.x},set:function(t){this.x=t}},height:{get:function(){return this.y},set:function(t){this.y=t}}}),Object.assign(yn.prototype,{isVector2:!0,set:function(t,e){return this.x=t,this.y=e,this},setScalar:function(t){return this.x=t,this.y=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(t){return this.x=t.x,this.y=t.y,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)},addScalar:function(t){return this.x+=t,this.y+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)},subScalar:function(t){return this.x-=t,this.y-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this},multiply:function(t){return this.x*=t.x,this.y*=t.y,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this},divide:function(t){return this.x/=t.x,this.y/=t.y,this},divideScalar:function(t){return this.multiplyScalar(1/t)},applyMatrix3:function(t){var e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this},clampScalar:function(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this},clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(t){return this.x*t.x+this.y*t.y},cross:function(t){return this.x*t.y-this.y*t.x},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var t=Math.atan2(this.y,this.x);return t<0&&(t+=2*Math.PI),t},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,n=this.y-t.y;return e*e+n*n},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this},rotateAround:function(t,e){var n=Math.cos(e),i=Math.sin(e),r=this.x-t.x,a=this.y-t.y;return this.x=r*n-a*i+t.x,this.y=r*i+a*n+t.y,this}}),Object.assign(_n,{slerp:function(t,e,n,i){return n.copy(t).slerp(e,i)},slerpFlat:function(t,e,n,i,r,a,o){var s=n[i+0],l=n[i+1],c=n[i+2],h=n[i+3],u=r[a+0],q=r[a+1],m=r[a+2],d=r[a+3];if(h!==d||s!==u||l!==q||c!==m){var p=1-o,f=s*u+l*q+c*m+h*d,v=f>=0?1:-1,x=1-f*f;if(x>Number.EPSILON){var g=Math.sqrt(x),y=Math.atan2(g,f*v);p=Math.sin(p*y)/g,o=Math.sin(o*y)/g}var _=o*v;if(s=s*p+u*_,l=l*p+q*_,c=c*p+m*_,h=h*p+d*_,p===1-o){var b=1/Math.sqrt(s*s+l*l+c*c+h*h);s*=b,l*=b,c*=b,h*=b}}t[e]=s,t[e+1]=l,t[e+2]=c,t[e+3]=h}}),Object.defineProperties(_n.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this._onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this._onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this._onChangeCallback()}},w:{get:function(){return this._w},set:function(t){this._w=t,this._onChangeCallback()}}}),Object.assign(_n.prototype,{isQuaternion:!0,set:function(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this},setFromEuler:function(t,e){if(!t||!t.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var n=t._x,i=t._y,r=t._z,a=t.order,o=Math.cos,s=Math.sin,l=o(n/2),c=o(i/2),h=o(r/2),u=s(n/2),q=s(i/2),m=s(r/2);return"XYZ"===a?(this._x=u*c*h+l*q*m,this._y=l*q*h-u*c*m,this._z=l*c*m+u*q*h,this._w=l*c*h-u*q*m):"YXZ"===a?(this._x=u*c*h+l*q*m,this._y=l*q*h-u*c*m,this._z=l*c*m-u*q*h,this._w=l*c*h+u*q*m):"ZXY"===a?(this._x=u*c*h-l*q*m,this._y=l*q*h+u*c*m,this._z=l*c*m+u*q*h,this._w=l*c*h-u*q*m):"ZYX"===a?(this._x=u*c*h-l*q*m,this._y=l*q*h+u*c*m,this._z=l*c*m-u*q*h,this._w=l*c*h+u*q*m):"YZX"===a?(this._x=u*c*h+l*q*m,this._y=l*q*h+u*c*m,this._z=l*c*m-u*q*h,this._w=l*c*h-u*q*m):"XZY"===a&&(this._x=u*c*h-l*q*m,this._y=l*q*h-u*c*m,this._z=l*c*m+u*q*h,this._w=l*c*h+u*q*m),!1!==e&&this._onChangeCallback(),this},setFromAxisAngle:function(t,e){var n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this},setFromRotationMatrix:function(t){var e,n=t.elements,i=n[0],r=n[4],a=n[8],o=n[1],s=n[5],l=n[9],c=n[2],h=n[6],u=n[10],q=i+s+u;return q>0?(e=.5/Math.sqrt(q+1),this._w=.25/e,this._x=(h-l)*e,this._y=(a-c)*e,this._z=(o-r)*e):i>s&&i>u?(e=2*Math.sqrt(1+i-s-u),this._w=(h-l)/e,this._x=.25*e,this._y=(r+o)/e,this._z=(a+c)/e):s>u?(e=2*Math.sqrt(1+s-i-u),this._w=(a-c)/e,this._x=(r+o)/e,this._y=.25*e,this._z=(l+h)/e):(e=2*Math.sqrt(1+u-i-s),this._w=(o-r)/e,this._x=(a+c)/e,this._y=(l+h)/e,this._z=.25*e),this._onChangeCallback(),this},setFromUnitVectors:function(t,e){var n=t.dot(e)+1;return n<1e-6?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()},angleTo:function(t){return 2*Math.acos(Math.abs(gn.clamp(this.dot(t),-1,1)))},rotateTowards:function(t,e){var n=this.angleTo(t);if(0===n)return this;var i=Math.min(1,e/n);return this.slerp(t,i),this},inverse:function(){return this.conjugate()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this},dot:function(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)},premultiply:function(t){return this.multiplyQuaternions(t,this)},multiplyQuaternions:function(t,e){var n=t._x,i=t._y,r=t._z,a=t._w,o=e._x,s=e._y,l=e._z,c=e._w;return this._x=n*c+a*o+i*l-r*s,this._y=i*c+a*s+r*o-n*l,this._z=r*c+a*l+n*s-i*o,this._w=a*c-n*o-i*s-r*l,this._onChangeCallback(),this},slerp:function(t,e){if(0===e)return this;if(1===e)return this.copy(t);var n=this._x,i=this._y,r=this._z,a=this._w,o=a*t._w+n*t._x+i*t._y+r*t._z;if(o<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,o=-o):this.copy(t),o>=1)return this._w=a,this._x=n,this._y=i,this._z=r,this;var s=1-o*o;if(s<=Number.EPSILON){var l=1-e;return this._w=l*a+e*this._w,this._x=l*n+e*this._x,this._y=l*i+e*this._y,this._z=l*r+e*this._z,this.normalize(),this._onChangeCallback(),this}var c=Math.sqrt(s),h=Math.atan2(c,o),u=Math.sin((1-e)*h)/c,q=Math.sin(e*h)/c;return this._w=a*u+this._w*q,this._x=n*u+this._x*q,this._y=i*u+this._y*q,this._z=r*u+this._z*q,this._onChangeCallback(),this},equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w},fromArray:function(t,e){return void 0===e&&(e=0),this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t},_onChange:function(t){return this._onChangeCallback=t,this},_onChangeCallback:function(){}});var bn=new Mn,wn=new _n;function Mn(t,e,n){this.x=t||0,this.y=e||0,this.z=n||0}Object.assign(Mn.prototype,{isVector3:!0,set:function(t,e,n){return this.x=t,this.y=e,this.z=n,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)},subScalar:function(t){return this.x-=t,this.y-=t,this.z-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this},multiplyVectors:function(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this},applyEuler:function(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(wn.setFromEuler(t))},applyAxisAngle:function(t,e){return this.applyQuaternion(wn.setFromAxisAngle(t,e))},applyMatrix3:function(t){var e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6]*i,this.y=r[1]*e+r[4]*n+r[7]*i,this.z=r[2]*e+r[5]*n+r[8]*i,this},applyMatrix4:function(t){var e=this.x,n=this.y,i=this.z,r=t.elements,a=1/(r[3]*e+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*e+r[4]*n+r[8]*i+r[12])*a,this.y=(r[1]*e+r[5]*n+r[9]*i+r[13])*a,this.z=(r[2]*e+r[6]*n+r[10]*i+r[14])*a,this},applyQuaternion:function(t){var e=this.x,n=this.y,i=this.z,r=t.x,a=t.y,o=t.z,s=t.w,l=s*e+a*i-o*n,c=s*n+o*e-r*i,h=s*i+r*n-a*e,u=-r*e-a*n-o*i;return this.x=l*s+u*-r+c*-o-h*-a,this.y=c*s+u*-a+h*-r-l*-o,this.z=h*s+u*-o+l*-a-c*-r,this},project:function(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)},unproject:function(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)},transformDirection:function(t){var e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[4]*n+r[8]*i,this.y=r[1]*e+r[5]*n+r[9]*i,this.z=r[2]*e+r[6]*n+r[10]*i,this.normalize()},divide:function(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this},divideScalar:function(t){return this.multiplyScalar(1/t)},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this},clampScalar:function(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this},clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},cross:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)},crossVectors:function(t,e){var n=t.x,i=t.y,r=t.z,a=e.x,o=e.y,s=e.z;return this.x=i*s-r*o,this.y=r*a-n*s,this.z=n*o-i*a,this},projectOnVector:function(t){var e=t.dot(this)/t.lengthSq();return this.copy(t).multiplyScalar(e)},projectOnPlane:function(t){return bn.copy(this).projectOnVector(t),this.sub(bn)},reflect:function(t){return this.sub(bn.copy(t).multiplyScalar(2*this.dot(t)))},angleTo:function(t){var e=Math.sqrt(this.lengthSq()*t.lengthSq());0===e&&console.error("THREE.Vector3: angleTo() can't handle zero length vectors.");var n=this.dot(t)/e;return Math.acos(gn.clamp(n,-1,1))},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)},setFromSpherical:function(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)},setFromSphericalCoords:function(t,e,n){var i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this},setFromCylindrical:function(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)},setFromCylindricalCoords:function(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this},setFromMatrixPosition:function(t){var e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this},setFromMatrixScale:function(t){var e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this},setFromMatrixColumn:function(t,e){return this.fromArray(t.elements,4*e)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}});var Sn,Tn=new Mn;function En(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}Object.assign(En.prototype,{isMatrix3:!0,set:function(t,e,n,i,r,a,o,s,l){var c=this.elements;return c[0]=t,c[1]=i,c[2]=o,c[3]=e,c[4]=r,c[5]=s,c[6]=n,c[7]=a,c[8]=l,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(t){var e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this},setFromMatrix4:function(t){var e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this},applyToBufferAttribute:function(t){for(var e=0,n=t.count;e<n;e++)Tn.x=t.getX(e),Tn.y=t.getY(e),Tn.z=t.getZ(e),Tn.applyMatrix3(this),t.setXYZ(e,Tn.x,Tn.y,Tn.z);return t},multiply:function(t){return this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(t,e){var n=t.elements,i=e.elements,r=this.elements,a=n[0],o=n[3],s=n[6],l=n[1],c=n[4],h=n[7],u=n[2],q=n[5],m=n[8],d=i[0],p=i[3],f=i[6],v=i[1],x=i[4],g=i[7],y=i[2],_=i[5],b=i[8];return r[0]=a*d+o*v+s*y,r[3]=a*p+o*x+s*_,r[6]=a*f+o*g+s*b,r[1]=l*d+c*v+h*y,r[4]=l*p+c*x+h*_,r[7]=l*f+c*g+h*b,r[2]=u*d+q*v+m*y,r[5]=u*p+q*x+m*_,r[8]=u*f+q*g+m*b,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this},determinant:function(){var t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],o=t[5],s=t[6],l=t[7],c=t[8];return e*a*c-e*o*l-n*r*c+n*o*s+i*r*l-i*a*s},getInverse:function(t,e){t&&t.isMatrix4&&console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");var n=t.elements,i=this.elements,r=n[0],a=n[1],o=n[2],s=n[3],l=n[4],c=n[5],h=n[6],u=n[7],q=n[8],m=q*l-c*u,d=c*h-q*s,p=u*s-l*h,f=r*m+a*d+o*p;if(0===f){var v="THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";if(!0===e)throw new Error(v);return console.warn(v),this.identity()}var x=1/f;return i[0]=m*x,i[1]=(o*u-q*a)*x,i[2]=(c*a-o*l)*x,i[3]=d*x,i[4]=(q*r-o*h)*x,i[5]=(o*s-c*r)*x,i[6]=p*x,i[7]=(a*h-u*r)*x,i[8]=(l*r-a*s)*x,this},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this},getNormalMatrix:function(t){return this.setFromMatrix4(t).getInverse(this).transpose()},transposeIntoArray:function(t){var e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this},setUvTransform:function(t,e,n,i,r,a,o){var s=Math.cos(r),l=Math.sin(r);this.set(n*s,n*l,-n*(s*a+l*o)+a+t,-i*l,i*s,-i*(-l*a+s*o)+o+e,0,0,1)},scale:function(t,e){var n=this.elements;return n[0]*=t,n[3]*=t,n[6]*=t,n[1]*=e,n[4]*=e,n[7]*=e,this},rotate:function(t){var e=Math.cos(t),n=Math.sin(t),i=this.elements,r=i[0],a=i[3],o=i[6],s=i[1],l=i[4],c=i[7];return i[0]=e*r+n*s,i[3]=e*a+n*l,i[6]=e*o+n*c,i[1]=-n*r+e*s,i[4]=-n*a+e*l,i[7]=-n*o+e*c,this},translate:function(t,e){var n=this.elements;return n[0]+=t*n[2],n[3]+=t*n[5],n[6]+=t*n[8],n[1]+=e*n[2],n[4]+=e*n[5],n[7]+=e*n[8],this},equals:function(t){for(var e=this.elements,n=t.elements,i=0;i<9;i++)if(e[i]!==n[i])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var n=0;n<9;n++)this.elements[n]=t[n+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}});var An={getDataURL:function(t){var e;if("undefined"==typeof HTMLCanvasElement)return t.src;if(t instanceof HTMLCanvasElement)e=t;else{void 0===Sn&&(Sn=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),Sn.width=t.width,Sn.height=t.height;var n=Sn.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=Sn}return e.width>2048||e.height>2048?e.toDataURL("image/jpeg",.6):e.toDataURL("image/png")}},zn=0;function Ln(t,e,n,i,r,a,o,s,l,c){Object.defineProperty(this,"id",{value:zn++}),this.uuid=gn.generateUUID(),this.name="",this.image=void 0!==t?t:Ln.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==e?e:Ln.DEFAULT_MAPPING,this.wrapS=void 0!==n?n:xt,this.wrapT=void 0!==i?i:xt,this.magFilter=void 0!==r?r:St,this.minFilter=void 0!==a?a:At,this.anisotropy=void 0!==l?l:1,this.format=void 0!==o?o:jt,this.type=void 0!==s?s:Lt,this.offset=new yn(0,0),this.repeat=new yn(1,1),this.center=new yn(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new En,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==c?c:Re,this.version=0,this.onUpdate=null}function Pn(t,e,n,i){this.x=t||0,this.y=e||0,this.z=n||0,this.w=void 0!==i?i:1}function Rn(t,e,n){this.width=t,this.height=e,this.scissor=new Pn(0,0,t,e),this.scissorTest=!1,this.viewport=new Pn(0,0,t,e),n=n||{},this.texture=new Ln(void 0,void 0,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.image={},this.texture.image.width=t,this.texture.image.height=e,this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:St,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0===n.stencilBuffer||n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null}function Cn(t,e,n){Rn.call(this,t,e,n),this.samples=4}Ln.DEFAULT_IMAGE=void 0,Ln.DEFAULT_MAPPING=ct,Ln.prototype=Object.assign(Object.create(fn.prototype),{constructor:Ln,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this},toJSON:function(t){var e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];var n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){var i=this.image;if(void 0===i.uuid&&(i.uuid=gn.generateUUID()),!e&&void 0===t.images[i.uuid]){var r;if(Array.isArray(i)){r=[];for(var a=0,o=i.length;a<o;a++)r.push(An.getDataURL(i[a]))}else r=An.getDataURL(i);t.images[i.uuid]={uuid:i.uuid,url:r}}n.image=i.uuid}return e||(t.textures[this.uuid]=n),n},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(t){if(this.mapping!==ct)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case vt:t.x=t.x-Math.floor(t.x);break;case xt:t.x=t.x<0?0:1;break;case gt:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case vt:t.y=t.y-Math.floor(t.y);break;case xt:t.y=t.y<0?0:1;break;case gt:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}}),Object.defineProperty(Ln.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.defineProperties(Pn.prototype,{width:{get:function(){return this.z},set:function(t){this.z=t}},height:{get:function(){return this.w},set:function(t){this.w=t}}}),Object.assign(Pn.prototype,{isVector4:!0,set:function(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this.w=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setW:function(t){return this.w=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)},subScalar:function(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this},applyMatrix4:function(t){var e=this.x,n=this.y,i=this.z,r=this.w,a=t.elements;return this.x=a[0]*e+a[4]*n+a[8]*i+a[12]*r,this.y=a[1]*e+a[5]*n+a[9]*i+a[13]*r,this.z=a[2]*e+a[6]*n+a[10]*i+a[14]*r,this.w=a[3]*e+a[7]*n+a[11]*i+a[15]*r,this},divideScalar:function(t){return this.multiplyScalar(1/t)},setAxisAngleFromQuaternion:function(t){this.w=2*Math.acos(t.w);var e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this},setAxisAngleFromRotationMatrix:function(t){var e,n,i,r,a=t.elements,o=a[0],s=a[4],l=a[8],c=a[1],h=a[5],u=a[9],q=a[2],m=a[6],d=a[10];if(Math.abs(s-c)<.01&&Math.abs(l-q)<.01&&Math.abs(u-m)<.01){if(Math.abs(s+c)<.1&&Math.abs(l+q)<.1&&Math.abs(u+m)<.1&&Math.abs(o+h+d-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;var p=(o+1)/2,f=(h+1)/2,v=(d+1)/2,x=(s+c)/4,g=(l+q)/4,y=(u+m)/4;return p>f&&p>v?p<.01?(n=0,i=.707106781,r=.707106781):(i=x/(n=Math.sqrt(p)),r=g/n):f>v?f<.01?(n=.707106781,i=0,r=.707106781):(n=x/(i=Math.sqrt(f)),r=y/i):v<.01?(n=.707106781,i=.707106781,r=0):(n=g/(r=Math.sqrt(v)),i=y/r),this.set(n,i,r,e),this}var _=Math.sqrt((m-u)*(m-u)+(l-q)*(l-q)+(c-s)*(c-s));return Math.abs(_)<.001&&(_=1),this.x=(m-u)/_,this.y=(l-q)/_,this.z=(c-s)/_,this.w=Math.acos((o+h+d-1)/2),this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this},clampScalar:function(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this},clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}}),Rn.prototype=Object.assign(Object.create(fn.prototype),{constructor:Rn,isWebGLRenderTarget:!0,setSize:function(t,e){this.width===t&&this.height===e||(this.width=t,this.height=e,this.texture.image.width=t,this.texture.image.height=e,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.width=t.width,this.height=t.height,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Cn.prototype=Object.assign(Object.create(Rn.prototype),{constructor:Cn,isWebGLMultisampleRenderTarget:!0,copy:function(t){return Rn.prototype.copy.call(this,t),this.samples=t.samples,this}});var On=new Mn,In=new Hn,Dn=new Mn(0,0,0),Nn=new Mn(1,1,1),Bn=new Mn,Un=new Mn,Fn=new Mn;function Hn(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}Object.assign(Hn.prototype,{isMatrix4:!0,set:function(t,e,n,i,r,a,o,s,l,c,h,u,q,m,d,p){var f=this.elements;return f[0]=t,f[4]=e,f[8]=n,f[12]=i,f[1]=r,f[5]=a,f[9]=o,f[13]=s,f[2]=l,f[6]=c,f[10]=h,f[14]=u,f[3]=q,f[7]=m,f[11]=d,f[15]=p,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new Hn).fromArray(this.elements)},copy:function(t){var e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this},copyPosition:function(t){var e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this},extractBasis:function(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this},makeBasis:function(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this},extractRotation:function(t){var e=this.elements,n=t.elements,i=1/On.setFromMatrixColumn(t,0).length(),r=1/On.setFromMatrixColumn(t,1).length(),a=1/On.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*r,e[5]=n[5]*r,e[6]=n[6]*r,e[7]=0,e[8]=n[8]*a,e[9]=n[9]*a,e[10]=n[10]*a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this},makeRotationFromEuler:function(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var e=this.elements,n=t.x,i=t.y,r=t.z,a=Math.cos(n),o=Math.sin(n),s=Math.cos(i),l=Math.sin(i),c=Math.cos(r),h=Math.sin(r);if("XYZ"===t.order){var u=a*c,q=a*h,m=o*c,d=o*h;e[0]=s*c,e[4]=-s*h,e[8]=l,e[1]=q+m*l,e[5]=u-d*l,e[9]=-o*s,e[2]=d-u*l,e[6]=m+q*l,e[10]=a*s}else if("YXZ"===t.order){var p=s*c,f=s*h,v=l*c,x=l*h;e[0]=p+x*o,e[4]=v*o-f,e[8]=a*l,e[1]=a*h,e[5]=a*c,e[9]=-o,e[2]=f*o-v,e[6]=x+p*o,e[10]=a*s}else if("ZXY"===t.order){p=s*c,f=s*h,v=l*c,x=l*h;e[0]=p-x*o,e[4]=-a*h,e[8]=v+f*o,e[1]=f+v*o,e[5]=a*c,e[9]=x-p*o,e[2]=-a*l,e[6]=o,e[10]=a*s}else if("ZYX"===t.order){u=a*c,q=a*h,m=o*c,d=o*h;e[0]=s*c,e[4]=m*l-q,e[8]=u*l+d,e[1]=s*h,e[5]=d*l+u,e[9]=q*l-m,e[2]=-l,e[6]=o*s,e[10]=a*s}else if("YZX"===t.order){var g=a*s,y=a*l,_=o*s,b=o*l;e[0]=s*c,e[4]=b-g*h,e[8]=_*h+y,e[1]=h,e[5]=a*c,e[9]=-o*c,e[2]=-l*c,e[6]=y*h+_,e[10]=g-b*h}else if("XZY"===t.order){g=a*s,y=a*l,_=o*s,b=o*l;e[0]=s*c,e[4]=-h,e[8]=l*c,e[1]=g*h+b,e[5]=a*c,e[9]=y*h-_,e[2]=_*h-y,e[6]=o*c,e[10]=b*h+g}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this},makeRotationFromQuaternion:function(t){return this.compose(Dn,t,Nn)},lookAt:function(t,e,n){var i=this.elements;return Fn.subVectors(t,e),0===Fn.lengthSq()&&(Fn.z=1),Fn.normalize(),Bn.crossVectors(n,Fn),0===Bn.lengthSq()&&(1===Math.abs(n.z)?Fn.x+=1e-4:Fn.z+=1e-4,Fn.normalize(),Bn.crossVectors(n,Fn)),Bn.normalize(),Un.crossVectors(Fn,Bn),i[0]=Bn.x,i[4]=Un.x,i[8]=Fn.x,i[1]=Bn.y,i[5]=Un.y,i[9]=Fn.y,i[2]=Bn.z,i[6]=Un.z,i[10]=Fn.z,this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(t,e){var n=t.elements,i=e.elements,r=this.elements,a=n[0],o=n[4],s=n[8],l=n[12],c=n[1],h=n[5],u=n[9],q=n[13],m=n[2],d=n[6],p=n[10],f=n[14],v=n[3],x=n[7],g=n[11],y=n[15],_=i[0],b=i[4],w=i[8],M=i[12],S=i[1],T=i[5],E=i[9],A=i[13],z=i[2],L=i[6],P=i[10],R=i[14],C=i[3],O=i[7],I=i[11],D=i[15];return r[0]=a*_+o*S+s*z+l*C,r[4]=a*b+o*T+s*L+l*O,r[8]=a*w+o*E+s*P+l*I,r[12]=a*M+o*A+s*R+l*D,r[1]=c*_+h*S+u*z+q*C,r[5]=c*b+h*T+u*L+q*O,r[9]=c*w+h*E+u*P+q*I,r[13]=c*M+h*A+u*R+q*D,r[2]=m*_+d*S+p*z+f*C,r[6]=m*b+d*T+p*L+f*O,r[10]=m*w+d*E+p*P+f*I,r[14]=m*M+d*A+p*R+f*D,r[3]=v*_+x*S+g*z+y*C,r[7]=v*b+x*T+g*L+y*O,r[11]=v*w+x*E+g*P+y*I,r[15]=v*M+x*A+g*R+y*D,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this},applyToBufferAttribute:function(t){for(var e=0,n=t.count;e<n;e++)On.x=t.getX(e),On.y=t.getY(e),On.z=t.getZ(e),On.applyMatrix4(this),t.setXYZ(e,On.x,On.y,On.z);return t},determinant:function(){var t=this.elements,e=t[0],n=t[4],i=t[8],r=t[12],a=t[1],o=t[5],s=t[9],l=t[13],c=t[2],h=t[6],u=t[10],q=t[14];return t[3]*(+r*s*h-i*l*h-r*o*u+n*l*u+i*o*q-n*s*q)+t[7]*(+e*s*q-e*l*u+r*a*u-i*a*q+i*l*c-r*s*c)+t[11]*(+e*l*h-e*o*q-r*a*h+n*a*q+r*o*c-n*l*c)+t[15]*(-i*o*c-e*s*h+e*o*u+i*a*h-n*a*u+n*s*c)},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this},setPosition:function(t,e,n){var i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this},getInverse:function(t,e){var n=this.elements,i=t.elements,r=i[0],a=i[1],o=i[2],s=i[3],l=i[4],c=i[5],h=i[6],u=i[7],q=i[8],m=i[9],d=i[10],p=i[11],f=i[12],v=i[13],x=i[14],g=i[15],y=m*x*u-v*d*u+v*h*p-c*x*p-m*h*g+c*d*g,_=f*d*u-q*x*u-f*h*p+l*x*p+q*h*g-l*d*g,b=q*v*u-f*m*u+f*c*p-l*v*p-q*c*g+l*m*g,w=f*m*h-q*v*h-f*c*d+l*v*d+q*c*x-l*m*x,M=r*y+a*_+o*b+s*w;if(0===M){var S="THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";if(!0===e)throw new Error(S);return console.warn(S),this.identity()}var T=1/M;return n[0]=y*T,n[1]=(v*d*s-m*x*s-v*o*p+a*x*p+m*o*g-a*d*g)*T,n[2]=(c*x*s-v*h*s+v*o*u-a*x*u-c*o*g+a*h*g)*T,n[3]=(m*h*s-c*d*s-m*o*u+a*d*u+c*o*p-a*h*p)*T,n[4]=_*T,n[5]=(q*x*s-f*d*s+f*o*p-r*x*p-q*o*g+r*d*g)*T,n[6]=(f*h*s-l*x*s-f*o*u+r*x*u+l*o*g-r*h*g)*T,n[7]=(l*d*s-q*h*s+q*o*u-r*d*u-l*o*p+r*h*p)*T,n[8]=b*T,n[9]=(f*m*s-q*v*s-f*a*p+r*v*p+q*a*g-r*m*g)*T,n[10]=(l*v*s-f*c*s+f*a*u-r*v*u-l*a*g+r*c*g)*T,n[11]=(q*c*s-l*m*s-q*a*u+r*m*u+l*a*p-r*c*p)*T,n[12]=w*T,n[13]=(q*v*o-f*m*o+f*a*d-r*v*d-q*a*x+r*m*x)*T,n[14]=(f*c*o-l*v*o-f*a*h+r*v*h+l*a*x-r*c*x)*T,n[15]=(l*m*o-q*c*o+q*a*h-r*m*h-l*a*d+r*c*d)*T,this},scale:function(t){var e=this.elements,n=t.x,i=t.y,r=t.z;return e[0]*=n,e[4]*=i,e[8]*=r,e[1]*=n,e[5]*=i,e[9]*=r,e[2]*=n,e[6]*=i,e[10]*=r,e[3]*=n,e[7]*=i,e[11]*=r,this},getMaxScaleOnAxis:function(){var t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))},makeTranslation:function(t,e,n){return this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this},makeRotationX:function(t){var e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this},makeRotationY:function(t){var e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this},makeRotationZ:function(t){var e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(t,e){var n=Math.cos(e),i=Math.sin(e),r=1-n,a=t.x,o=t.y,s=t.z,l=r*a,c=r*o;return this.set(l*a+n,l*o-i*s,l*s+i*o,0,l*o+i*s,c*o+n,c*s-i*a,0,l*s-i*o,c*s+i*a,r*s*s+n,0,0,0,0,1),this},makeScale:function(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this},makeShear:function(t,e,n){return this.set(1,e,n,0,t,1,n,0,t,e,1,0,0,0,0,1),this},compose:function(t,e,n){var i=this.elements,r=e._x,a=e._y,o=e._z,s=e._w,l=r+r,c=a+a,h=o+o,u=r*l,q=r*c,m=r*h,d=a*c,p=a*h,f=o*h,v=s*l,x=s*c,g=s*h,y=n.x,_=n.y,b=n.z;return i[0]=(1-(d+f))*y,i[1]=(q+g)*y,i[2]=(m-x)*y,i[3]=0,i[4]=(q-g)*_,i[5]=(1-(u+f))*_,i[6]=(p+v)*_,i[7]=0,i[8]=(m+x)*b,i[9]=(p-v)*b,i[10]=(1-(u+d))*b,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this},decompose:function(t,e,n){var i=this.elements,r=On.set(i[0],i[1],i[2]).length(),a=On.set(i[4],i[5],i[6]).length(),o=On.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),t.x=i[12],t.y=i[13],t.z=i[14],In.copy(this);var s=1/r,l=1/a,c=1/o;return In.elements[0]*=s,In.elements[1]*=s,In.elements[2]*=s,In.elements[4]*=l,In.elements[5]*=l,In.elements[6]*=l,In.elements[8]*=c,In.elements[9]*=c,In.elements[10]*=c,e.setFromRotationMatrix(In),n.x=r,n.y=a,n.z=o,this},makePerspective:function(t,e,n,i,r,a){void 0===a&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var o=this.elements,s=2*r/(e-t),l=2*r/(n-i),c=(e+t)/(e-t),h=(n+i)/(n-i),u=-(a+r)/(a-r),q=-2*a*r/(a-r);return o[0]=s,o[4]=0,o[8]=c,o[12]=0,o[1]=0,o[5]=l,o[9]=h,o[13]=0,o[2]=0,o[6]=0,o[10]=u,o[14]=q,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this},makeOrthographic:function(t,e,n,i,r,a){var o=this.elements,s=1/(e-t),l=1/(n-i),c=1/(a-r),h=(e+t)*s,u=(n+i)*l,q=(a+r)*c;return o[0]=2*s,o[4]=0,o[8]=0,o[12]=-h,o[1]=0,o[5]=2*l,o[9]=0,o[13]=-u,o[2]=0,o[6]=0,o[10]=-2*c,o[14]=-q,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this},equals:function(t){for(var e=this.elements,n=t.elements,i=0;i<16;i++)if(e[i]!==n[i])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var n=0;n<16;n++)this.elements[n]=t[n+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}});var Gn=new Hn,Vn=new _n;function jn(t,e,n,i){this._x=t||0,this._y=e||0,this._z=n||0,this._order=i||jn.DefaultOrder}function kn(){this.mask=1}jn.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],jn.DefaultOrder="XYZ",Object.defineProperties(jn.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this._onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this._onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this._onChangeCallback()}},order:{get:function(){return this._order},set:function(t){this._order=t,this._onChangeCallback()}}}),Object.assign(jn.prototype,{isEuler:!0,set:function(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._order=i||this._order,this._onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this},setFromRotationMatrix:function(t,e,n){var i=gn.clamp,r=t.elements,a=r[0],o=r[4],s=r[8],l=r[1],c=r[5],h=r[9],u=r[2],q=r[6],m=r[10];return"XYZ"===(e=e||this._order)?(this._y=Math.asin(i(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(-h,m),this._z=Math.atan2(-o,a)):(this._x=Math.atan2(q,c),this._z=0)):"YXZ"===e?(this._x=Math.asin(-i(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(s,m),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-u,a),this._z=0)):"ZXY"===e?(this._x=Math.asin(i(q,-1,1)),Math.abs(q)<.9999999?(this._y=Math.atan2(-u,m),this._z=Math.atan2(-o,c)):(this._y=0,this._z=Math.atan2(l,a))):"ZYX"===e?(this._y=Math.asin(-i(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(q,m),this._z=Math.atan2(l,a)):(this._x=0,this._z=Math.atan2(-o,c))):"YZX"===e?(this._z=Math.asin(i(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-u,a)):(this._x=0,this._y=Math.atan2(s,m))):"XZY"===e?(this._z=Math.asin(-i(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(q,c),this._y=Math.atan2(s,a)):(this._x=Math.atan2(-h,m),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+e),this._order=e,!1!==n&&this._onChangeCallback(),this},setFromQuaternion:function(t,e,n){return Gn.makeRotationFromQuaternion(t),this.setFromRotationMatrix(Gn,e,n)},setFromVector3:function(t,e){return this.set(t.x,t.y,t.z,e||this._order)},reorder:function(t){return Vn.setFromEuler(this),this.setFromQuaternion(Vn,t)},equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order},fromArray:function(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t},toVector3:function(t){return t?t.set(this._x,this._y,this._z):new Mn(this._x,this._y,this._z)},_onChange:function(t){return this._onChangeCallback=t,this},_onChangeCallback:function(){}}),Object.assign(kn.prototype,{set:function(t){this.mask=1<<t|0},enable:function(t){this.mask|=1<<t|0},enableAll:function(){this.mask=-1},toggle:function(t){this.mask^=1<<t|0},disable:function(t){this.mask&=~(1<<t|0)},disableAll:function(){this.mask=0},test:function(t){return 0!=(this.mask&t.mask)}});var Wn=0,Xn=new Mn,Yn=new _n,Zn=new Hn,Jn=new Mn,Qn=new Mn,Kn=new Mn,$n=new _n,ti=new Mn(1,0,0),ei=new Mn(0,1,0),ni=new Mn(0,0,1),ii={type:"added"},ri={type:"removed"};function ai(){Object.defineProperty(this,"id",{value:Wn++}),this.uuid=gn.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=ai.DefaultUp.clone();var t=new Mn,e=new jn,n=new _n,i=new Mn(1,1,1);e._onChange((function(){n.setFromEuler(e,!1)})),n._onChange((function(){e.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new Hn},normalMatrix:{value:new En}}),this.matrix=new Hn,this.matrixWorld=new Hn,this.matrixAutoUpdate=ai.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new kn,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}function oi(){ai.call(this),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}ai.DefaultUp=new Mn(0,1,0),ai.DefaultMatrixAutoUpdate=!0,ai.prototype=Object.assign(Object.create(fn.prototype),{constructor:ai,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(t){return this.quaternion.premultiply(t),this},setRotationFromAxisAngle:function(t,e){this.quaternion.setFromAxisAngle(t,e)},setRotationFromEuler:function(t){this.quaternion.setFromEuler(t,!0)},setRotationFromMatrix:function(t){this.quaternion.setFromRotationMatrix(t)},setRotationFromQuaternion:function(t){this.quaternion.copy(t)},rotateOnAxis:function(t,e){return Yn.setFromAxisAngle(t,e),this.quaternion.multiply(Yn),this},rotateOnWorldAxis:function(t,e){return Yn.setFromAxisAngle(t,e),this.quaternion.premultiply(Yn),this},rotateX:function(t){return this.rotateOnAxis(ti,t)},rotateY:function(t){return this.rotateOnAxis(ei,t)},rotateZ:function(t){return this.rotateOnAxis(ni,t)},translateOnAxis:function(t,e){return Xn.copy(t).applyQuaternion(this.quaternion),this.position.add(Xn.multiplyScalar(e)),this},translateX:function(t){return this.translateOnAxis(ti,t)},translateY:function(t){return this.translateOnAxis(ei,t)},translateZ:function(t){return this.translateOnAxis(ni,t)},localToWorld:function(t){return t.applyMatrix4(this.matrixWorld)},worldToLocal:function(t){return t.applyMatrix4(Zn.getInverse(this.matrixWorld))},lookAt:function(t,e,n){t.isVector3?Jn.copy(t):Jn.set(t,e,n);var i=this.parent;this.updateWorldMatrix(!0,!1),Qn.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Zn.lookAt(Qn,Jn,this.up):Zn.lookAt(Jn,Qn,this.up),this.quaternion.setFromRotationMatrix(Zn),i&&(Zn.extractRotation(i.matrixWorld),Yn.setFromRotationMatrix(Zn),this.quaternion.premultiply(Yn.inverse()))},add:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(ii)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)},remove:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}var n=this.children.indexOf(t);return-1!==n&&(t.parent=null,this.children.splice(n,1),t.dispatchEvent(ri)),this},attach:function(t){return this.updateWorldMatrix(!0,!1),Zn.getInverse(this.matrixWorld),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),Zn.multiply(t.parent.matrixWorld)),t.applyMatrix(Zn),t.updateWorldMatrix(!1,!1),this.add(t),this},getObjectById:function(t){return this.getObjectByProperty("id",t)},getObjectByName:function(t){return this.getObjectByProperty("name",t)},getObjectByProperty:function(t,e){if(this[t]===e)return this;for(var n=0,i=this.children.length;n<i;n++){var r=this.children[n].getObjectByProperty(t,e);if(void 0!==r)return r}},getWorldPosition:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),t=new Mn),this.updateMatrixWorld(!0),t.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),t=new _n),this.updateMatrixWorld(!0),this.matrixWorld.decompose(Qn,t,Kn),t},getWorldScale:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),t=new Mn),this.updateMatrixWorld(!0),this.matrixWorld.decompose(Qn,$n,t),t},getWorldDirection:function(t){void 0===t&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),t=new Mn),this.updateMatrixWorld(!0);var e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()},raycast:function(){},traverse:function(t){t(this);for(var e=this.children,n=0,i=e.length;n<i;n++)e[n].traverse(t)},traverseVisible:function(t){if(!1!==this.visible){t(this);for(var e=this.children,n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}},traverseAncestors:function(t){var e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);for(var e=this.children,n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t)},updateWorldMatrix:function(t,e){var n=this.parent;if(!0===t&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e)for(var i=this.children,r=0,a=i.length;r<a;r++)i[r].updateWorldMatrix(!1,!0)},toJSON:function(t){var e=void 0===t||"string"==typeof t,n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var i={};function r(e,n){return void 0===e[n.uuid]&&(e[n.uuid]=n.toJSON(t)),n.uuid}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),this.isMesh&&this.drawMode!==ze&&(i.drawMode=this.drawMode),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON()),this.isMesh||this.isLine||this.isPoints){i.geometry=r(t.geometries,this.geometry);var a=this.geometry.parameters;if(void 0!==a&&void 0!==a.shapes){var o=a.shapes;if(Array.isArray(o))for(var s=0,l=o.length;s<l;s++){var c=o[s];r(t.shapes,c)}else r(t.shapes,o)}}if(void 0!==this.material)if(Array.isArray(this.material)){var h=[];for(s=0,l=this.material.length;s<l;s++)h.push(r(t.materials,this.material[s]));i.material=h}else i.material=r(t.materials,this.material);if(this.children.length>0){i.children=[];for(s=0;s<this.children.length;s++)i.children.push(this.children[s].toJSON(t).object)}if(e){var u=p(t.geometries),q=p(t.materials),m=p(t.textures),d=p(t.images);o=p(t.shapes);u.length>0&&(n.geometries=u),q.length>0&&(n.materials=q),m.length>0&&(n.textures=m),d.length>0&&(n.images=d),o.length>0&&(n.shapes=o)}return n.object=i,n;function p(t){var e=[];for(var n in t){var i=t[n];delete i.metadata,e.push(i)}return e}},clone:function(t){return(new this.constructor).copy(this,t)},copy:function(t,e){if(void 0===e&&(e=!0),this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(var n=0;n<t.children.length;n++){var i=t.children[n];this.add(i.clone())}return this}}),oi.prototype=Object.assign(Object.create(ai.prototype),{constructor:oi,isScene:!0,copy:function(t,e){return ai.prototype.copy.call(this,t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this},toJSON:function(t){var e=ai.prototype.toJSON.call(this,t);return null!==this.background&&(e.object.background=this.background.toJSON(t)),null!==this.fog&&(e.object.fog=this.fog.toJSON()),e},dispose:function(){this.dispatchEvent({type:"dispose"})}});var si=[new Mn,new Mn,new Mn,new Mn,new Mn,new Mn,new Mn,new Mn],li=new Mn,ci=new Mn,hi=new Mn,ui=new Mn,qi=new Mn,mi=new Mn,di=new Mn,pi=new Mn,fi=new Mn,vi=new Mn,xi=new Mn;function gi(t,e){this.min=void 0!==t?t:new Mn(1/0,1/0,1/0),this.max=void 0!==e?e:new Mn(-1/0,-1/0,-1/0)}function yi(t,e,n,i,r){var a,o;for(a=0,o=t.length-3;a<=o;a+=3){xi.fromArray(t,a);var s=r.x*Math.abs(xi.x)+r.y*Math.abs(xi.y)+r.z*Math.abs(xi.z),l=e.dot(xi),c=n.dot(xi),h=i.dot(xi);if(Math.max(-Math.max(l,c,h),Math.min(l,c,h))>s)return!1}return!0}Object.assign(gi.prototype,{isBox3:!0,set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromArray:function(t){for(var e=1/0,n=1/0,i=1/0,r=-1/0,a=-1/0,o=-1/0,s=0,l=t.length;s<l;s+=3){var c=t[s],h=t[s+1],u=t[s+2];c<e&&(e=c),h<n&&(n=h),u<i&&(i=u),c>r&&(r=c),h>a&&(a=h),u>o&&(o=u)}return this.min.set(e,n,i),this.max.set(r,a,o),this},setFromBufferAttribute:function(t){for(var e=1/0,n=1/0,i=1/0,r=-1/0,a=-1/0,o=-1/0,s=0,l=t.count;s<l;s++){var c=t.getX(s),h=t.getY(s),u=t.getZ(s);c<e&&(e=c),h<n&&(n=h),u<i&&(i=u),c>r&&(r=c),h>a&&(a=h),u>o&&(o=u)}return this.min.set(e,n,i),this.max.set(r,a,o),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(t,e){var n=li.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this},setFromObject:function(t){return this.makeEmpty(),this.expandByObject(t)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(t){return void 0===t&&(console.warn("THREE.Box3: .getCenter() target is now required"),t=new Mn),this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn("THREE.Box3: .getSize() target is now required"),t=new Mn),this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},expandByObject:function(t){var e,n;t.updateWorldMatrix(!1,!1);var i=t.geometry;if(void 0!==i)if(i.isGeometry){var r=i.vertices;for(e=0,n=r.length;e<n;e++)li.copy(r[e]),li.applyMatrix4(t.matrixWorld),this.expandByPoint(li)}else if(i.isBufferGeometry){var a=i.attributes.position;if(void 0!==a)for(e=0,n=a.count;e<n;e++)li.fromBufferAttribute(a,e).applyMatrix4(t.matrixWorld),this.expandByPoint(li)}var o=t.children;for(e=0,n=o.length;e<n;e++)this.expandByObject(o[e]);return this},containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z},getParameter:function(t,e){return void 0===e&&(console.warn("THREE.Box3: .getParameter() target is now required"),e=new Mn),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)},intersectsSphere:function(t){return this.clampPoint(t.center,li),li.distanceToSquared(t.center)<=t.radius*t.radius},intersectsPlane:function(t){var e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant},intersectsTriangle:function(t){if(this.isEmpty())return!1;this.getCenter(pi),fi.subVectors(this.max,pi),ci.subVectors(t.a,pi),hi.subVectors(t.b,pi),ui.subVectors(t.c,pi),qi.subVectors(hi,ci),mi.subVectors(ui,hi),di.subVectors(ci,ui);var e=[0,-qi.z,qi.y,0,-mi.z,mi.y,0,-di.z,di.y,qi.z,0,-qi.x,mi.z,0,-mi.x,di.z,0,-di.x,-qi.y,qi.x,0,-mi.y,mi.x,0,-di.y,di.x,0];return!!yi(e,ci,hi,ui,fi)&&(!!yi(e=[1,0,0,0,1,0,0,0,1],ci,hi,ui,fi)&&(vi.crossVectors(qi,mi),yi(e=[vi.x,vi.y,vi.z],ci,hi,ui,fi)))},clampPoint:function(t,e){return void 0===e&&(console.warn("THREE.Box3: .clampPoint() target is now required"),e=new Mn),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(t){return li.copy(t).clamp(this.min,this.max).sub(t).length()},getBoundingSphere:function(t){return void 0===t&&console.error("THREE.Box3: .getBoundingSphere() target is now required"),this.getCenter(t.center),t.radius=.5*this.getSize(li).length(),t},intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},applyMatrix4:function(t){return this.isEmpty()?this:(si[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),si[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),si[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),si[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),si[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),si[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),si[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),si[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(si),this)},translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}});var _i=new gi;function bi(t,e){this.center=void 0!==t?t:new Mn,this.radius=void 0!==e?e:0}Object.assign(bi.prototype,{set:function(t,e){return this.center.copy(t),this.radius=e,this},setFromPoints:function(t,e){var n=this.center;void 0!==e?n.copy(e):_i.setFromPoints(t).getCenter(n);for(var i=0,r=0,a=t.length;r<a;r++)i=Math.max(i,n.distanceToSquared(t[r]));return this.radius=Math.sqrt(i),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.center.copy(t.center),this.radius=t.radius,this},empty:function(){return this.radius<=0},containsPoint:function(t){return t.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(t){return t.distanceTo(this.center)-this.radius},intersectsSphere:function(t){var e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e},intersectsBox:function(t){return t.intersectsSphere(this)},intersectsPlane:function(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius},clampPoint:function(t,e){var n=this.center.distanceToSquared(t);return void 0===e&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),e=new Mn),e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e},getBoundingBox:function(t){return void 0===t&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),t=new gi),t.set(this.center,this.center),t.expandByScalar(this.radius),t},applyMatrix4:function(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this},translate:function(t){return this.center.add(t),this},equals:function(t){return t.center.equals(this.center)&&t.radius===this.radius}});var wi=new Mn,Mi=new Mn,Si=new Mn,Ti=new Mn,Ei=new Mn,Ai=new Mn,zi=new Mn;function Li(t,e){this.origin=void 0!==t?t:new Mn,this.direction=void 0!==e?e:new Mn}Object.assign(Li.prototype,{set:function(t,e){return this.origin.copy(t),this.direction.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this},at:function(t,e){return void 0===e&&(console.warn("THREE.Ray: .at() target is now required"),e=new Mn),e.copy(this.direction).multiplyScalar(t).add(this.origin)},lookAt:function(t){return this.direction.copy(t).sub(this.origin).normalize(),this},recast:function(t){return this.origin.copy(this.at(t,wi)),this},closestPointToPoint:function(t,e){void 0===e&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),e=new Mn),e.subVectors(t,this.origin);var n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(n).add(this.origin)},distanceToPoint:function(t){return Math.sqrt(this.distanceSqToPoint(t))},distanceSqToPoint:function(t){var e=wi.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(wi.copy(this.direction).multiplyScalar(e).add(this.origin),wi.distanceToSquared(t))},distanceSqToSegment:function(t,e,n,i){Mi.copy(t).add(e).multiplyScalar(.5),Si.copy(e).sub(t).normalize(),Ti.copy(this.origin).sub(Mi);var r,a,o,s,l=.5*t.distanceTo(e),c=-this.direction.dot(Si),h=Ti.dot(this.direction),u=-Ti.dot(Si),q=Ti.lengthSq(),m=Math.abs(1-c*c);if(m>0)if(a=c*h-u,s=l*m,(r=c*u-h)>=0)if(a>=-s)if(a<=s){var d=1/m;o=(r*=d)*(r+c*(a*=d)+2*h)+a*(c*r+a+2*u)+q}else a=l,o=-(r=Math.max(0,-(c*a+h)))*r+a*(a+2*u)+q;else a=-l,o=-(r=Math.max(0,-(c*a+h)))*r+a*(a+2*u)+q;else a<=-s?o=-(r=Math.max(0,-(-c*l+h)))*r+(a=r>0?-l:Math.min(Math.max(-l,-u),l))*(a+2*u)+q:a<=s?(r=0,o=(a=Math.min(Math.max(-l,-u),l))*(a+2*u)+q):o=-(r=Math.max(0,-(c*l+h)))*r+(a=r>0?l:Math.min(Math.max(-l,-u),l))*(a+2*u)+q;else a=c>0?-l:l,o=-(r=Math.max(0,-(c*a+h)))*r+a*(a+2*u)+q;return n&&n.copy(this.direction).multiplyScalar(r).add(this.origin),i&&i.copy(Si).multiplyScalar(a).add(Mi),o},intersectSphere:function(t,e){wi.subVectors(t.center,this.origin);var n=wi.dot(this.direction),i=wi.dot(wi)-n*n,r=t.radius*t.radius;if(i>r)return null;var a=Math.sqrt(r-i),o=n-a,s=n+a;return o<0&&s<0?null:o<0?this.at(s,e):this.at(o,e)},intersectsSphere:function(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius},distanceToPlane:function(t){var e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;var n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null},intersectPlane:function(t,e){var n=this.distanceToPlane(t);return null===n?null:this.at(n,e)},intersectsPlane:function(t){var e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0},intersectBox:function(t,e){var n,i,r,a,o,s,l=1/this.direction.x,c=1/this.direction.y,h=1/this.direction.z,u=this.origin;return l>=0?(n=(t.min.x-u.x)*l,i=(t.max.x-u.x)*l):(n=(t.max.x-u.x)*l,i=(t.min.x-u.x)*l),c>=0?(r=(t.min.y-u.y)*c,a=(t.max.y-u.y)*c):(r=(t.max.y-u.y)*c,a=(t.min.y-u.y)*c),n>a||r>i?null:((r>n||n!=n)&&(n=r),(a<i||i!=i)&&(i=a),h>=0?(o=(t.min.z-u.z)*h,s=(t.max.z-u.z)*h):(o=(t.max.z-u.z)*h,s=(t.min.z-u.z)*h),n>s||o>i?null:((o>n||n!=n)&&(n=o),(s<i||i!=i)&&(i=s),i<0?null:this.at(n>=0?n:i,e)))},intersectsBox:function(t){return null!==this.intersectBox(t,wi)},intersectTriangle:function(t,e,n,i,r){Ei.subVectors(e,t),Ai.subVectors(n,t),zi.crossVectors(Ei,Ai);var a,o=this.direction.dot(zi);if(o>0){if(i)return null;a=1}else{if(!(o<0))return null;a=-1,o=-o}Ti.subVectors(this.origin,t);var s=a*this.direction.dot(Ai.crossVectors(Ti,Ai));if(s<0)return null;var l=a*this.direction.dot(Ei.cross(Ti));if(l<0)return null;if(s+l>o)return null;var c=-a*Ti.dot(zi);return c<0?null:this.at(c/o,r)},applyMatrix4:function(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this},equals:function(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}});var Pi=new Mn,Ri=new Mn,Ci=new En;function Oi(t,e){this.normal=void 0!==t?t:new Mn(1,0,0),this.constant=void 0!==e?e:0}Object.assign(Oi.prototype,{isPlane:!0,set:function(t,e){return this.normal.copy(t),this.constant=e,this},setComponents:function(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this},setFromNormalAndCoplanarPoint:function(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this},setFromCoplanarPoints:function(t,e,n){var i=Pi.subVectors(n,e).cross(Ri.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.normal.copy(t.normal),this.constant=t.constant,this},normalize:function(){var t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(t){return this.normal.dot(t)+this.constant},distanceToSphere:function(t){return this.distanceToPoint(t.center)-t.radius},projectPoint:function(t,e){return void 0===e&&(console.warn("THREE.Plane: .projectPoint() target is now required"),e=new Mn),e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)},intersectLine:function(t,e){void 0===e&&(console.warn("THREE.Plane: .intersectLine() target is now required"),e=new Mn);var n=t.delta(Pi),i=this.normal.dot(n);if(0===i)return 0===this.distanceToPoint(t.start)?e.copy(t.start):void 0;var r=-(t.start.dot(this.normal)+this.constant)/i;return r<0||r>1?void 0:e.copy(n).multiplyScalar(r).add(t.start)},intersectsLine:function(t){var e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0},intersectsBox:function(t){return t.intersectsPlane(this)},intersectsSphere:function(t){return t.intersectsPlane(this)},coplanarPoint:function(t){return void 0===t&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),t=new Mn),t.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(t,e){var n=e||Ci.getNormalMatrix(t),i=this.coplanarPoint(Pi).applyMatrix4(t),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this},translate:function(t){return this.constant-=t.dot(this.normal),this},equals:function(t){return t.normal.equals(this.normal)&&t.constant===this.constant}});var Ii=new Mn,Di=new Mn,Ni=new Mn,Bi=new Mn,Ui=new Mn,Fi=new Mn,Hi=new Mn,Gi=new Mn,Vi=new Mn,ji=new Mn;function ki(t,e,n){this.a=void 0!==t?t:new Mn,this.b=void 0!==e?e:new Mn,this.c=void 0!==n?n:new Mn}Object.assign(ki,{getNormal:function(t,e,n,i){void 0===i&&(console.warn("THREE.Triangle: .getNormal() target is now required"),i=new Mn),i.subVectors(n,e),Ii.subVectors(t,e),i.cross(Ii);var r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)},getBarycoord:function(t,e,n,i,r){Ii.subVectors(i,e),Di.subVectors(n,e),Ni.subVectors(t,e);var a=Ii.dot(Ii),o=Ii.dot(Di),s=Ii.dot(Ni),l=Di.dot(Di),c=Di.dot(Ni),h=a*l-o*o;if(void 0===r&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),r=new Mn),0===h)return r.set(-2,-1,-1);var u=1/h,q=(l*s-o*c)*u,m=(a*c-o*s)*u;return r.set(1-q-m,m,q)},containsPoint:function(t,e,n,i){return ki.getBarycoord(t,e,n,i,Bi),Bi.x>=0&&Bi.y>=0&&Bi.x+Bi.y<=1},getUV:function(t,e,n,i,r,a,o,s){return this.getBarycoord(t,e,n,i,Bi),s.set(0,0),s.addScaledVector(r,Bi.x),s.addScaledVector(a,Bi.y),s.addScaledVector(o,Bi.z),s},isFrontFacing:function(t,e,n,i){return Ii.subVectors(n,e),Di.subVectors(t,e),Ii.cross(Di).dot(i)<0}}),Object.assign(ki.prototype,{set:function(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this},setFromPointsAndIndices:function(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this},getArea:function(){return Ii.subVectors(this.c,this.b),Di.subVectors(this.a,this.b),.5*Ii.cross(Di).length()},getMidpoint:function(t){return void 0===t&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),t=new Mn),t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(t){return ki.getNormal(this.a,this.b,this.c,t)},getPlane:function(t){return void 0===t&&(console.warn("THREE.Triangle: .getPlane() target is now required"),t=new Oi),t.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(t,e){return ki.getBarycoord(t,this.a,this.b,this.c,e)},getUV:function(t,e,n,i,r){return ki.getUV(t,this.a,this.b,this.c,e,n,i,r)},containsPoint:function(t){return ki.containsPoint(t,this.a,this.b,this.c)},isFrontFacing:function(t){return ki.isFrontFacing(this.a,this.b,this.c,t)},intersectsBox:function(t){return t.intersectsTriangle(this)},closestPointToPoint:function(t,e){void 0===e&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),e=new Mn);var n,i,r=this.a,a=this.b,o=this.c;Ui.subVectors(a,r),Fi.subVectors(o,r),Gi.subVectors(t,r);var s=Ui.dot(Gi),l=Fi.dot(Gi);if(s<=0&&l<=0)return e.copy(r);Vi.subVectors(t,a);var c=Ui.dot(Vi),h=Fi.dot(Vi);if(c>=0&&h<=c)return e.copy(a);var u=s*h-c*l;if(u<=0&&s>=0&&c<=0)return n=s/(s-c),e.copy(r).addScaledVector(Ui,n);ji.subVectors(t,o);var q=Ui.dot(ji),m=Fi.dot(ji);if(m>=0&&q<=m)return e.copy(o);var d=q*l-s*m;if(d<=0&&l>=0&&m<=0)return i=l/(l-m),e.copy(r).addScaledVector(Fi,i);var p=c*m-q*h;if(p<=0&&h-c>=0&&q-m>=0)return Hi.subVectors(o,a),i=(h-c)/(h-c+(q-m)),e.copy(a).addScaledVector(Hi,i);var f=1/(p+d+u);return n=d*f,i=u*f,e.copy(r).addScaledVector(Ui,n).addScaledVector(Fi,i)},equals:function(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}});var Wi={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Xi={h:0,s:0,l:0},Yi={h:0,s:0,l:0};function Zi(t,e,n){return void 0===e&&void 0===n?this.set(t):this.setRGB(t,e,n)}function Ji(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+6*(e-t)*(2/3-n):t}function Qi(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function Ki(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}function $i(t,e,n,i,r,a){this.a=t,this.b=e,this.c=n,this.normal=i&&i.isVector3?i:new Mn,this.vertexNormals=Array.isArray(i)?i:[],this.color=r&&r.isColor?r:new Zi,this.vertexColors=Array.isArray(r)?r:[],this.materialIndex=void 0!==a?a:0}Object.assign(Zi.prototype,{isColor:!0,r:1,g:1,b:1,set:function(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this},setScalar:function(t){return this.r=t,this.g=t,this.b=t,this},setHex:function(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this},setRGB:function(t,e,n){return this.r=t,this.g=e,this.b=n,this},setHSL:function(t,e,n){if(t=gn.euclideanModulo(t,1),e=gn.clamp(e,0,1),n=gn.clamp(n,0,1),0===e)this.r=this.g=this.b=n;else{var i=n<=.5?n*(1+e):n+e-n*e,r=2*n-i;this.r=Ji(r,i,t+1/3),this.g=Ji(r,i,t),this.b=Ji(r,i,t-1/3)}return this},setStyle:function(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}var n;if(n=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(t)){var i,r=n[1],a=n[2];switch(r){case"rgb":case"rgba":if(i=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(i[1],10))/255,this.g=Math.min(255,parseInt(i[2],10))/255,this.b=Math.min(255,parseInt(i[3],10))/255,e(i[5]),this;if(i=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(i[1],10))/100,this.g=Math.min(100,parseInt(i[2],10))/100,this.b=Math.min(100,parseInt(i[3],10))/100,e(i[5]),this;break;case"hsl":case"hsla":if(i=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)){var o=parseFloat(i[1])/360,s=parseInt(i[2],10)/100,l=parseInt(i[3],10)/100;return e(i[5]),this.setHSL(o,s,l)}}}else if(n=/^\#([A-Fa-f0-9]+)$/.exec(t)){var c=n[1],h=c.length;if(3===h)return this.r=parseInt(c.charAt(0)+c.charAt(0),16)/255,this.g=parseInt(c.charAt(1)+c.charAt(1),16)/255,this.b=parseInt(c.charAt(2)+c.charAt(2),16)/255,this;if(6===h)return this.r=parseInt(c.charAt(0)+c.charAt(1),16)/255,this.g=parseInt(c.charAt(2)+c.charAt(3),16)/255,this.b=parseInt(c.charAt(4)+c.charAt(5),16)/255,this}return t&&t.length>0?this.setColorName(t):this},setColorName:function(t){var e=Wi[t];return void 0!==e?this.setHex(e):console.warn("THREE.Color: Unknown color "+t),this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(t){return this.r=t.r,this.g=t.g,this.b=t.b,this},copyGammaToLinear:function(t,e){return void 0===e&&(e=2),this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this},copyLinearToGamma:function(t,e){void 0===e&&(e=2);var n=e>0?1/e:1;return this.r=Math.pow(t.r,n),this.g=Math.pow(t.g,n),this.b=Math.pow(t.b,n),this},convertGammaToLinear:function(t){return this.copyGammaToLinear(this,t),this},convertLinearToGamma:function(t){return this.copyLinearToGamma(this,t),this},copySRGBToLinear:function(t){return this.r=Qi(t.r),this.g=Qi(t.g),this.b=Qi(t.b),this},copyLinearToSRGB:function(t){return this.r=Ki(t.r),this.g=Ki(t.g),this.b=Ki(t.b),this},convertSRGBToLinear:function(){return this.copySRGBToLinear(this),this},convertLinearToSRGB:function(){return this.copyLinearToSRGB(this),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(t){void 0===t&&(console.warn("THREE.Color: .getHSL() target is now required"),t={h:0,s:0,l:0});var e,n,i=this.r,r=this.g,a=this.b,o=Math.max(i,r,a),s=Math.min(i,r,a),l=(s+o)/2;if(s===o)e=0,n=0;else{var c=o-s;switch(n=l<=.5?c/(o+s):c/(2-o-s),o){case i:e=(r-a)/c+(r<a?6:0);break;case r:e=(a-i)/c+2;break;case a:e=(i-r)/c+4}e/=6}return t.h=e,t.s=n,t.l=l,t},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(t,e,n){return this.getHSL(Xi),Xi.h+=t,Xi.s+=e,Xi.l+=n,this.setHSL(Xi.h,Xi.s,Xi.l),this},add:function(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this},addColors:function(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this},addScalar:function(t){return this.r+=t,this.g+=t,this.b+=t,this},sub:function(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this},multiply:function(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this},multiplyScalar:function(t){return this.r*=t,this.g*=t,this.b*=t,this},lerp:function(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this},lerpHSL:function(t,e){this.getHSL(Xi),t.getHSL(Yi);var n=gn.lerp(Xi.h,Yi.h,e),i=gn.lerp(Xi.s,Yi.s,e),r=gn.lerp(Xi.l,Yi.l,e);return this.setHSL(n,i,r),this},equals:function(t){return t.r===this.r&&t.g===this.g&&t.b===this.b},fromArray:function(t,e){return void 0===e&&(e=0),this.r=t[e],this.g=t[e+1],this.b=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t},toJSON:function(){return this.getHex()}}),Zi.NAMES=Wi,Object.assign($i.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.a=t.a,this.b=t.b,this.c=t.c,this.normal.copy(t.normal),this.color.copy(t.color),this.materialIndex=t.materialIndex;for(var e=0,n=t.vertexNormals.length;e<n;e++)this.vertexNormals[e]=t.vertexNormals[e].clone();for(e=0,n=t.vertexColors.length;e<n;e++)this.vertexColors[e]=t.vertexColors[e].clone();return this}});var tr=0;function er(){Object.defineProperty(this,"id",{value:tr++}),this.uuid=gn.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.blending=S,this.side=f,this.flatShading=!1,this.vertexTangents=!1,this.vertexColors=_,this.opacity=1,this.transparent=!1,this.blendSrc=U,this.blendDst=F,this.blendEquation=L,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=Z,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=on,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=ke,this.stencilZFail=ke,this.stencilZPass=ke,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.needsUpdate=!0}function nr(t){er.call(this),this.type="MeshBasicMaterial",this.color=new Zi(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=tt,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.setValues(t)}function ir(t,e,n){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===n,this.usage=sn,this.updateRange={offset:0,count:-1},this.version=0}function rr(t,e,n){ir.call(this,new Int8Array(t),e,n)}function ar(t,e,n){ir.call(this,new Uint8Array(t),e,n)}function or(t,e,n){ir.call(this,new Uint8ClampedArray(t),e,n)}function sr(t,e,n){ir.call(this,new Int16Array(t),e,n)}function lr(t,e,n){ir.call(this,new Uint16Array(t),e,n)}function cr(t,e,n){ir.call(this,new Int32Array(t),e,n)}function hr(t,e,n){ir.call(this,new Uint32Array(t),e,n)}function ur(t,e,n){ir.call(this,new Float32Array(t),e,n)}function qr(t,e,n){ir.call(this,new Float64Array(t),e,n)}function mr(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function dr(t){if(0===t.length)return-1/0;for(var e=t[0],n=1,i=t.length;n<i;++n)t[n]>e&&(e=t[n]);return e}er.prototype=Object.assign(Object.create(fn.prototype),{constructor:er,isMaterial:!0,onBeforeCompile:function(){},setValues:function(t){if(void 0!==t)for(var e in t){var n=t[e];if(void 0!==n)if("shading"!==e){var i=this[e];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]=n:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}else console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=n===g;else console.warn("THREE.Material: '"+e+"' parameter is undefined.")}},toJSON:function(t){var e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});var n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function i(t){var e=[];for(var n in t){var i=t[n];delete i.metadata,e.push(i)}return e}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(n.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,n.reflectivity=this.reflectivity,n.refractionRatio=this.refractionRatio,void 0!==this.combine&&(n.combine=this.combine),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity)),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.size&&(n.size=this.size),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==S&&(n.blending=this.blending),!0===this.flatShading&&(n.flatShading=this.flatShading),this.side!==f&&(n.side=this.side),this.vertexColors!==_&&(n.vertexColors=this.vertexColors),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(n.morphTargets=!0),!0===this.morphNormals&&(n.morphNormals=!0),!0===this.skinning&&(n.skinning=!0),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),e){var r=i(t.textures),a=i(t.images);r.length>0&&(n.textures=r),a.length>0&&(n.images=a)}return n},clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.name=t.name,this.fog=t.fog,this.blending=t.blending,this.side=t.side,this.flatShading=t.flatShading,this.vertexTangents=t.vertexTangents,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;var e=t.clippingPlanes,n=null;if(null!==e){var i=e.length;n=new Array(i);for(var r=0;r!==i;++r)n[r]=e[r].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),nr.prototype=Object.create(er.prototype),nr.prototype.constructor=nr,nr.prototype.isMeshBasicMaterial=!0,nr.prototype.copy=function(t){return er.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this},Object.defineProperty(ir.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(ir.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setUsage:function(t){return this.usage=t,this},copy:function(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this},copyAt:function(t,e,n){t*=this.itemSize,n*=e.itemSize;for(var i=0,r=this.itemSize;i<r;i++)this.array[t+i]=e.array[n+i];return this},copyArray:function(t){return this.array.set(t),this},copyColorsArray:function(t){for(var e=this.array,n=0,i=0,r=t.length;i<r;i++){var a=t[i];void 0===a&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),a=new Zi),e[n++]=a.r,e[n++]=a.g,e[n++]=a.b}return this},copyVector2sArray:function(t){for(var e=this.array,n=0,i=0,r=t.length;i<r;i++){var a=t[i];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),a=new yn),e[n++]=a.x,e[n++]=a.y}return this},copyVector3sArray:function(t){for(var e=this.array,n=0,i=0,r=t.length;i<r;i++){var a=t[i];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),a=new Mn),e[n++]=a.x,e[n++]=a.y,e[n++]=a.z}return this},copyVector4sArray:function(t){for(var e=this.array,n=0,i=0,r=t.length;i<r;i++){var a=t[i];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),a=new Pn),e[n++]=a.x,e[n++]=a.y,e[n++]=a.z,e[n++]=a.w}return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},getX:function(t){return this.array[t*this.itemSize]},setX:function(t,e){return this.array[t*this.itemSize]=e,this},getY:function(t){return this.array[t*this.itemSize+1]},setY:function(t,e){return this.array[t*this.itemSize+1]=e,this},getZ:function(t){return this.array[t*this.itemSize+2]},setZ:function(t,e){return this.array[t*this.itemSize+2]=e,this},getW:function(t){return this.array[t*this.itemSize+3]},setW:function(t,e){return this.array[t*this.itemSize+3]=e,this},setXY:function(t,e,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this},setXYZ:function(t,e,n,i){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this},setXYZW:function(t,e,n,i,r){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=r,this},onUpload:function(t){return this.onUploadCallback=t,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)},toJSON:function(){return{itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized}}}),rr.prototype=Object.create(ir.prototype),rr.prototype.constructor=rr,ar.prototype=Object.create(ir.prototype),ar.prototype.constructor=ar,or.prototype=Object.create(ir.prototype),or.prototype.constructor=or,sr.prototype=Object.create(ir.prototype),sr.prototype.constructor=sr,lr.prototype=Object.create(ir.prototype),lr.prototype.constructor=lr,cr.prototype=Object.create(ir.prototype),cr.prototype.constructor=cr,hr.prototype=Object.create(ir.prototype),hr.prototype.constructor=hr,ur.prototype=Object.create(ir.prototype),ur.prototype.constructor=ur,qr.prototype=Object.create(ir.prototype),qr.prototype.constructor=qr,Object.assign(mr.prototype,{computeGroups:function(t){for(var e,n=[],i=void 0,r=t.faces,a=0;a<r.length;a++){var o=r[a];o.materialIndex!==i&&(i=o.materialIndex,void 0!==e&&(e.count=3*a-e.start,n.push(e)),e={start:3*a,materialIndex:i})}void 0!==e&&(e.count=3*a-e.start,n.push(e)),this.groups=n},fromGeometry:function(t){var e,n=t.faces,i=t.vertices,r=t.faceVertexUvs,a=r[0]&&r[0].length>0,o=r[1]&&r[1].length>0,s=t.morphTargets,l=s.length;if(l>0){e=[];for(var c=0;c<l;c++)e[c]={name:s[c].name,data:[]};this.morphTargets.position=e}var h,u=t.morphNormals,q=u.length;if(q>0){h=[];for(c=0;c<q;c++)h[c]={name:u[c].name,data:[]};this.morphTargets.normal=h}var m=t.skinIndices,d=t.skinWeights,p=m.length===i.length,f=d.length===i.length;i.length>0&&0===n.length&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(c=0;c<n.length;c++){var v=n[c];this.vertices.push(i[v.a],i[v.b],i[v.c]);var x=v.vertexNormals;if(3===x.length)this.normals.push(x[0],x[1],x[2]);else{var g=v.normal;this.normals.push(g,g,g)}var y,_=v.vertexColors;if(3===_.length)this.colors.push(_[0],_[1],_[2]);else{var b=v.color;this.colors.push(b,b,b)}if(!0===a)void 0!==(y=r[0][c])?this.uvs.push(y[0],y[1],y[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",c),this.uvs.push(new yn,new yn,new yn));if(!0===o)void 0!==(y=r[1][c])?this.uvs2.push(y[0],y[1],y[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",c),this.uvs2.push(new yn,new yn,new yn));for(var w=0;w<l;w++){var M=s[w].vertices;e[w].data.push(M[v.a],M[v.b],M[v.c])}for(w=0;w<q;w++){var S=u[w].vertexNormals[c];h[w].data.push(S.a,S.b,S.c)}p&&this.skinIndices.push(m[v.a],m[v.b],m[v.c]),f&&this.skinWeights.push(d[v.a],d[v.b],d[v.c])}return this.computeGroups(t),this.verticesNeedUpdate=t.verticesNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),this}});var pr=1,fr=new Hn,vr=new ai,xr=new Mn,gr=new gi,yr=new gi,_r=new Mn;function br(){Object.defineProperty(this,"id",{value:pr+=2}),this.uuid=gn.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}br.prototype=Object.assign(Object.create(fn.prototype),{constructor:br,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(t){Array.isArray(t)?this.index=new(dr(t)>65535?hr:lr)(t,1):this.index=t},getAttribute:function(t){return this.attributes[t]},setAttribute:function(t,e){return this.attributes[t]=e,this},deleteAttribute:function(t){return delete this.attributes[t],this},addGroup:function(t,e,n){this.groups.push({start:t,count:e,materialIndex:void 0!==n?n:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(t,e){this.drawRange.start=t,this.drawRange.count=e},applyMatrix:function(t){var e=this.attributes.position;void 0!==e&&(t.applyToBufferAttribute(e),e.needsUpdate=!0);var n=this.attributes.normal;void 0!==n&&((new En).getNormalMatrix(t).applyToBufferAttribute(n),n.needsUpdate=!0);var i=this.attributes.tangent;void 0!==i&&((new En).getNormalMatrix(t).applyToBufferAttribute(i),i.needsUpdate=!0);return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(t){return fr.makeRotationX(t),this.applyMatrix(fr),this},rotateY:function(t){return fr.makeRotationY(t),this.applyMatrix(fr),this},rotateZ:function(t){return fr.makeRotationZ(t),this.applyMatrix(fr),this},translate:function(t,e,n){return fr.makeTranslation(t,e,n),this.applyMatrix(fr),this},scale:function(t,e,n){return fr.makeScale(t,e,n),this.applyMatrix(fr),this},lookAt:function(t){return vr.lookAt(t),vr.updateMatrix(),this.applyMatrix(vr.matrix),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(xr).negate(),this.translate(xr.x,xr.y,xr.z),this},setFromObject:function(t){var e=t.geometry;if(t.isPoints||t.isLine){var n=new ur(3*e.vertices.length,3),i=new ur(3*e.colors.length,3);if(this.setAttribute("position",n.copyVector3sArray(e.vertices)),this.setAttribute("color",i.copyColorsArray(e.colors)),e.lineDistances&&e.lineDistances.length===e.vertices.length){var r=new ur(e.lineDistances.length,1);this.setAttribute("lineDistance",r.copyArray(e.lineDistances))}null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone())}else t.isMesh&&e&&e.isGeometry&&this.fromGeometry(e);return this},setFromPoints:function(t){for(var e=[],n=0,i=t.length;n<i;n++){var r=t[n];e.push(r.x,r.y,r.z||0)}return this.setAttribute("position",new ur(e,3)),this},updateFromObject:function(t){var e,n=t.geometry;if(t.isMesh){var i=n.__directGeometry;if(!0===n.elementsNeedUpdate&&(i=void 0,n.elementsNeedUpdate=!1),void 0===i)return this.fromGeometry(n);i.verticesNeedUpdate=n.verticesNeedUpdate,i.normalsNeedUpdate=n.normalsNeedUpdate,i.colorsNeedUpdate=n.colorsNeedUpdate,i.uvsNeedUpdate=n.uvsNeedUpdate,i.groupsNeedUpdate=n.groupsNeedUpdate,n.verticesNeedUpdate=!1,n.normalsNeedUpdate=!1,n.colorsNeedUpdate=!1,n.uvsNeedUpdate=!1,n.groupsNeedUpdate=!1,n=i}return!0===n.verticesNeedUpdate&&(void 0!==(e=this.attributes.position)&&(e.copyVector3sArray(n.vertices),e.needsUpdate=!0),n.verticesNeedUpdate=!1),!0===n.normalsNeedUpdate&&(void 0!==(e=this.attributes.normal)&&(e.copyVector3sArray(n.normals),e.needsUpdate=!0),n.normalsNeedUpdate=!1),!0===n.colorsNeedUpdate&&(void 0!==(e=this.attributes.color)&&(e.copyColorsArray(n.colors),e.needsUpdate=!0),n.colorsNeedUpdate=!1),n.uvsNeedUpdate&&(void 0!==(e=this.attributes.uv)&&(e.copyVector2sArray(n.uvs),e.needsUpdate=!0),n.uvsNeedUpdate=!1),n.lineDistancesNeedUpdate&&(void 0!==(e=this.attributes.lineDistance)&&(e.copyArray(n.lineDistances),e.needsUpdate=!0),n.lineDistancesNeedUpdate=!1),n.groupsNeedUpdate&&(n.computeGroups(t.geometry),this.groups=n.groups,n.groupsNeedUpdate=!1),this},fromGeometry:function(t){return t.__directGeometry=(new mr).fromGeometry(t),this.fromDirectGeometry(t.__directGeometry)},fromDirectGeometry:function(t){var e=new Float32Array(3*t.vertices.length);if(this.setAttribute("position",new ir(e,3).copyVector3sArray(t.vertices)),t.normals.length>0){var n=new Float32Array(3*t.normals.length);this.setAttribute("normal",new ir(n,3).copyVector3sArray(t.normals))}if(t.colors.length>0){var i=new Float32Array(3*t.colors.length);this.setAttribute("color",new ir(i,3).copyColorsArray(t.colors))}if(t.uvs.length>0){var r=new Float32Array(2*t.uvs.length);this.setAttribute("uv",new ir(r,2).copyVector2sArray(t.uvs))}if(t.uvs2.length>0){var a=new Float32Array(2*t.uvs2.length);this.setAttribute("uv2",new ir(a,2).copyVector2sArray(t.uvs2))}for(var o in this.groups=t.groups,t.morphTargets){for(var s=[],l=t.morphTargets[o],c=0,h=l.length;c<h;c++){var u=l[c],q=new ur(3*u.data.length,3);q.name=u.name,s.push(q.copyVector3sArray(u.data))}this.morphAttributes[o]=s}if(t.skinIndices.length>0){var m=new ur(4*t.skinIndices.length,4);this.setAttribute("skinIndex",m.copyVector4sArray(t.skinIndices))}if(t.skinWeights.length>0){var d=new ur(4*t.skinWeights.length,4);this.setAttribute("skinWeight",d.copyVector4sArray(t.skinWeights))}return null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new gi);var t=this.attributes.position,e=this.morphAttributes.position;if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(var n=0,i=e.length;n<i;n++){var r=e[n];gr.setFromBufferAttribute(r),this.boundingBox.expandByPoint(gr.min),this.boundingBox.expandByPoint(gr.max)}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new bi);var t=this.attributes.position,e=this.morphAttributes.position;if(t){var n=this.boundingSphere.center;if(gr.setFromBufferAttribute(t),e)for(var i=0,r=e.length;i<r;i++){var a=e[i];yr.setFromBufferAttribute(a),gr.expandByPoint(yr.min),gr.expandByPoint(yr.max)}gr.getCenter(n);var o=0;for(i=0,r=t.count;i<r;i++)_r.fromBufferAttribute(t,i),o=Math.max(o,n.distanceToSquared(_r));if(e)for(i=0,r=e.length;i<r;i++)for(var s=0,l=(a=e[i]).count;s<l;s++)_r.fromBufferAttribute(a,s),o=Math.max(o,n.distanceToSquared(_r));this.boundingSphere.radius=Math.sqrt(o),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}},computeFaceNormals:function(){},computeVertexNormals:function(){var t=this.index,e=this.attributes;if(e.position){var n=e.position.array;if(void 0===e.normal)this.setAttribute("normal",new ir(new Float32Array(n.length),3));else for(var i=e.normal.array,r=0,a=i.length;r<a;r++)i[r]=0;var o,s,l,c=e.normal.array,h=new Mn,u=new Mn,q=new Mn,m=new Mn,d=new Mn;if(t){var p=t.array;for(r=0,a=t.count;r<a;r+=3)o=3*p[r+0],s=3*p[r+1],l=3*p[r+2],h.fromArray(n,o),u.fromArray(n,s),q.fromArray(n,l),m.subVectors(q,u),d.subVectors(h,u),m.cross(d),c[o]+=m.x,c[o+1]+=m.y,c[o+2]+=m.z,c[s]+=m.x,c[s+1]+=m.y,c[s+2]+=m.z,c[l]+=m.x,c[l+1]+=m.y,c[l+2]+=m.z}else for(r=0,a=n.length;r<a;r+=9)h.fromArray(n,r),u.fromArray(n,r+3),q.fromArray(n,r+6),m.subVectors(q,u),d.subVectors(h,u),m.cross(d),c[r]=m.x,c[r+1]=m.y,c[r+2]=m.z,c[r+3]=m.x,c[r+4]=m.y,c[r+5]=m.z,c[r+6]=m.x,c[r+7]=m.y,c[r+8]=m.z;this.normalizeNormals(),e.normal.needsUpdate=!0}},merge:function(t,e){if(t&&t.isBufferGeometry){void 0===e&&(e=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var n=this.attributes;for(var i in n)if(void 0!==t.attributes[i])for(var r=n[i].array,a=t.attributes[i],o=a.array,s=a.itemSize*e,l=Math.min(o.length,r.length-s),c=0,h=s;c<l;c++,h++)r[h]=o[c];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t)},normalizeNormals:function(){for(var t=this.attributes.normal,e=0,n=t.count;e<n;e++)_r.x=t.getX(e),_r.y=t.getY(e),_r.z=t.getZ(e),_r.normalize(),t.setXYZ(e,_r.x,_r.y,_r.z)},toNonIndexed:function(){function t(t,e){for(var n=t.array,i=t.itemSize,r=new n.constructor(e.length*i),a=0,o=0,s=0,l=e.length;s<l;s++){a=e[s]*i;for(var c=0;c<i;c++)r[o++]=n[a++]}return new ir(r,i)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var e=new br,n=this.index.array,i=this.attributes;for(var r in i){var a=t(i[r],n);e.setAttribute(r,a)}var o=this.morphAttributes;for(r in o){for(var s=[],l=o[r],c=0,h=l.length;c<h;c++){a=t(l[c],n);s.push(a)}e.morphAttributes[r]=s}for(var u=this.groups,q=(c=0,u.length);c<q;c++){var m=u[c];e.addGroup(m.start,m.count,m.materialIndex)}return e},toJSON:function(){var t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){var e=this.parameters;for(var n in e)void 0!==e[n]&&(t[n]=e[n]);return t}t.data={attributes:{}};var i=this.index;null!==i&&(t.data.index={type:i.array.constructor.name,array:Array.prototype.slice.call(i.array)});var r=this.attributes;for(var n in r){var a=(q=r[n]).toJSON();""!==q.name&&(a.name=q.name),t.data.attributes[n]=a}var o={},s=!1;for(var n in this.morphAttributes){for(var l=this.morphAttributes[n],c=[],h=0,u=l.length;h<u;h++){var q;a=(q=l[h]).toJSON();""!==q.name&&(a.name=q.name),c.push(a)}c.length>0&&(o[n]=c,s=!0)}s&&(t.data.morphAttributes=o);var m=this.groups;m.length>0&&(t.data.groups=JSON.parse(JSON.stringify(m)));var d=this.boundingSphere;return null!==d&&(t.data.boundingSphere={center:d.center.toArray(),radius:d.radius}),t},clone:function(){return(new br).copy(this)},copy:function(t){var e,n,i;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;var r=t.index;null!==r&&this.setIndex(r.clone());var a=t.attributes;for(e in a){var o=a[e];this.setAttribute(e,o.clone())}var s=t.morphAttributes;for(e in s){var l=[],c=s[e];for(n=0,i=c.length;n<i;n++)l.push(c[n].clone());this.morphAttributes[e]=l}var h=t.groups;for(n=0,i=h.length;n<i;n++){var u=h[n];this.addGroup(u.start,u.count,u.materialIndex)}var q=t.boundingBox;null!==q&&(this.boundingBox=q.clone());var m=t.boundingSphere;return null!==m&&(this.boundingSphere=m.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});var wr=new Hn,Mr=new Li,Sr=new bi,Tr=new Mn,Er=new Mn,Ar=new Mn,zr=new Mn,Lr=new Mn,Pr=new Mn,Rr=new Mn,Cr=new Mn,Or=new Mn,Ir=new yn,Dr=new yn,Nr=new yn,Br=new Mn,Ur=new Mn;function Fr(t,e){ai.call(this),this.type="Mesh",this.geometry=void 0!==t?t:new br,this.material=void 0!==e?e:new nr({color:16777215*Math.random()}),this.drawMode=ze,this.updateMorphTargets()}function Hr(t,e,n,i,r,a,o,s){if(null===(e.side===v?i.intersectTriangle(o,a,r,!0,s):i.intersectTriangle(r,a,o,e.side!==x,s)))return null;Ur.copy(s),Ur.applyMatrix4(t.matrixWorld);var l=n.ray.origin.distanceTo(Ur);return l<n.near||l>n.far?null:{distance:l,point:Ur.clone(),object:t}}function Gr(t,e,n,i,r,a,o,s,l,c,h){Tr.fromBufferAttribute(r,l),Er.fromBufferAttribute(r,c),Ar.fromBufferAttribute(r,h);var u=t.morphTargetInfluences;if(e.morphTargets&&a&&u){Rr.set(0,0,0),Cr.set(0,0,0),Or.set(0,0,0);for(var q=0,m=a.length;q<m;q++){var d=u[q],p=a[q];0!==d&&(zr.fromBufferAttribute(p,l),Lr.fromBufferAttribute(p,c),Pr.fromBufferAttribute(p,h),Rr.addScaledVector(zr.sub(Tr),d),Cr.addScaledVector(Lr.sub(Er),d),Or.addScaledVector(Pr.sub(Ar),d))}Tr.add(Rr),Er.add(Cr),Ar.add(Or)}var f=Hr(t,e,n,i,Tr,Er,Ar,Br);if(f){o&&(Ir.fromBufferAttribute(o,l),Dr.fromBufferAttribute(o,c),Nr.fromBufferAttribute(o,h),f.uv=ki.getUV(Br,Tr,Er,Ar,Ir,Dr,Nr,new yn)),s&&(Ir.fromBufferAttribute(s,l),Dr.fromBufferAttribute(s,c),Nr.fromBufferAttribute(s,h),f.uv2=ki.getUV(Br,Tr,Er,Ar,Ir,Dr,Nr,new yn));var v=new $i(l,c,h);ki.getNormal(Tr,Er,Ar,v.normal),f.face=v}return f}Fr.prototype=Object.assign(Object.create(ai.prototype),{constructor:Fr,isMesh:!0,setDrawMode:function(t){this.drawMode=t},copy:function(t){return ai.prototype.copy.call(this,t),this.drawMode=t.drawMode,void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this},updateMorphTargets:function(){var t,e,n,i=this.geometry;if(i.isBufferGeometry){var r=i.morphAttributes,a=Object.keys(r);if(a.length>0){var o=r[a[0]];if(void 0!==o)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},t=0,e=o.length;t<e;t++)n=o[t].name||String(t),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=t}}else{var s=i.morphTargets;void 0!==s&&s.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}},raycast:function(t,e){var n,i=this.geometry,r=this.material,a=this.matrixWorld;if(void 0!==r&&(null===i.boundingSphere&&i.computeBoundingSphere(),Sr.copy(i.boundingSphere),Sr.applyMatrix4(a),!1!==t.ray.intersectsSphere(Sr)&&(wr.getInverse(a),Mr.copy(t.ray).applyMatrix4(wr),null===i.boundingBox||!1!==Mr.intersectsBox(i.boundingBox))))if(this.drawMode===ze){if(i.isBufferGeometry){var o,s,l,c,h,u,q,m,d,p=i.index,f=i.attributes.position,v=i.morphAttributes.position,x=i.attributes.uv,g=i.attributes.uv2,y=i.groups,_=i.drawRange;if(null!==p)if(Array.isArray(r))for(c=0,u=y.length;c<u;c++)for(d=r[(m=y[c]).materialIndex],h=Math.max(m.start,_.start),q=Math.min(m.start+m.count,_.start+_.count);h<q;h+=3)o=p.getX(h),s=p.getX(h+1),l=p.getX(h+2),(n=Gr(this,d,t,Mr,f,v,x,g,o,s,l))&&(n.faceIndex=Math.floor(h/3),n.face.materialIndex=m.materialIndex,e.push(n));else for(c=Math.max(0,_.start),u=Math.min(p.count,_.start+_.count);c<u;c+=3)o=p.getX(c),s=p.getX(c+1),l=p.getX(c+2),(n=Gr(this,r,t,Mr,f,v,x,g,o,s,l))&&(n.faceIndex=Math.floor(c/3),e.push(n));else if(void 0!==f)if(Array.isArray(r))for(c=0,u=y.length;c<u;c++)for(d=r[(m=y[c]).materialIndex],h=Math.max(m.start,_.start),q=Math.min(m.start+m.count,_.start+_.count);h<q;h+=3)(n=Gr(this,d,t,Mr,f,v,x,g,o=h,s=h+1,l=h+2))&&(n.faceIndex=Math.floor(h/3),n.face.materialIndex=m.materialIndex,e.push(n));else for(c=Math.max(0,_.start),u=Math.min(f.count,_.start+_.count);c<u;c+=3)(n=Gr(this,r,t,Mr,f,v,x,g,o=c,s=c+1,l=c+2))&&(n.faceIndex=Math.floor(c/3),e.push(n))}else if(i.isGeometry){var b,w,M,S,T=Array.isArray(r),E=i.vertices,A=i.faces,z=i.faceVertexUvs[0];z.length>0&&(S=z);for(var L=0,P=A.length;L<P;L++){var R=A[L],C=T?r[R.materialIndex]:r;if(void 0!==C&&(b=E[R.a],w=E[R.b],M=E[R.c],n=Hr(this,C,t,Mr,b,w,M,Br))){if(S&&S[L]){var O=S[L];Ir.copy(O[0]),Dr.copy(O[1]),Nr.copy(O[2]),n.uv=ki.getUV(Br,b,w,M,Ir,Dr,Nr,new yn)}n.face=R,n.faceIndex=L,e.push(n)}}}}else console.warn("THREE.Mesh: TriangleStripDrawMode and TriangleFanDrawMode are not supported by .raycast().")},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var Vr=0,jr=new Hn,kr=new ai,Wr=new Mn;function Xr(){Object.defineProperty(this,"id",{value:Vr+=2}),this.uuid=gn.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}Xr.prototype=Object.assign(Object.create(fn.prototype),{constructor:Xr,isGeometry:!0,applyMatrix:function(t){for(var e=(new En).getNormalMatrix(t),n=0,i=this.vertices.length;n<i;n++){this.vertices[n].applyMatrix4(t)}for(n=0,i=this.faces.length;n<i;n++){var r=this.faces[n];r.normal.applyMatrix3(e).normalize();for(var a=0,o=r.vertexNormals.length;a<o;a++)r.vertexNormals[a].applyMatrix3(e).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(t){return jr.makeRotationX(t),this.applyMatrix(jr),this},rotateY:function(t){return jr.makeRotationY(t),this.applyMatrix(jr),this},rotateZ:function(t){return jr.makeRotationZ(t),this.applyMatrix(jr),this},translate:function(t,e,n){return jr.makeTranslation(t,e,n),this.applyMatrix(jr),this},scale:function(t,e,n){return jr.makeScale(t,e,n),this.applyMatrix(jr),this},lookAt:function(t){return kr.lookAt(t),kr.updateMatrix(),this.applyMatrix(kr.matrix),this},fromBufferGeometry:function(t){var e=this,n=null!==t.index?t.index.array:void 0,i=t.attributes;if(void 0===i.position)return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."),this;var r=i.position.array,a=void 0!==i.normal?i.normal.array:void 0,o=void 0!==i.color?i.color.array:void 0,s=void 0!==i.uv?i.uv.array:void 0,l=void 0!==i.uv2?i.uv2.array:void 0;void 0!==l&&(this.faceVertexUvs[1]=[]);for(var c=0;c<r.length;c+=3)e.vertices.push((new Mn).fromArray(r,c)),void 0!==o&&e.colors.push((new Zi).fromArray(o,c));function h(t,n,i,r){var c=void 0===o?[]:[e.colors[t].clone(),e.colors[n].clone(),e.colors[i].clone()],h=new $i(t,n,i,void 0===a?[]:[(new Mn).fromArray(a,3*t),(new Mn).fromArray(a,3*n),(new Mn).fromArray(a,3*i)],c,r);e.faces.push(h),void 0!==s&&e.faceVertexUvs[0].push([(new yn).fromArray(s,2*t),(new yn).fromArray(s,2*n),(new yn).fromArray(s,2*i)]),void 0!==l&&e.faceVertexUvs[1].push([(new yn).fromArray(l,2*t),(new yn).fromArray(l,2*n),(new yn).fromArray(l,2*i)])}var u=t.groups;if(u.length>0)for(c=0;c<u.length;c++)for(var q=u[c],m=q.start,d=m,p=m+q.count;d<p;d+=3)void 0!==n?h(n[d],n[d+1],n[d+2],q.materialIndex):h(d,d+1,d+2,q.materialIndex);else if(void 0!==n)for(c=0;c<n.length;c+=3)h(n[c],n[c+1],n[c+2]);else for(c=0;c<r.length/3;c+=3)h(c,c+1,c+2);return this.computeFaceNormals(),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(Wr).negate(),this.translate(Wr.x,Wr.y,Wr.z),this},normalize:function(){this.computeBoundingSphere();var t=this.boundingSphere.center,e=this.boundingSphere.radius,n=0===e?1:1/e,i=new Hn;return i.set(n,0,0,-n*t.x,0,n,0,-n*t.y,0,0,n,-n*t.z,0,0,0,1),this.applyMatrix(i),this},computeFaceNormals:function(){for(var t=new Mn,e=new Mn,n=0,i=this.faces.length;n<i;n++){var r=this.faces[n],a=this.vertices[r.a],o=this.vertices[r.b],s=this.vertices[r.c];t.subVectors(s,o),e.subVectors(a,o),t.cross(e),t.normalize(),r.normal.copy(t)}},computeVertexNormals:function(t){var e,n,i,r,a,o;for(void 0===t&&(t=!0),o=new Array(this.vertices.length),e=0,n=this.vertices.length;e<n;e++)o[e]=new Mn;if(t){var s,l,c,h=new Mn,u=new Mn;for(i=0,r=this.faces.length;i<r;i++)a=this.faces[i],s=this.vertices[a.a],l=this.vertices[a.b],c=this.vertices[a.c],h.subVectors(c,l),u.subVectors(s,l),h.cross(u),o[a.a].add(h),o[a.b].add(h),o[a.c].add(h)}else for(this.computeFaceNormals(),i=0,r=this.faces.length;i<r;i++)o[(a=this.faces[i]).a].add(a.normal),o[a.b].add(a.normal),o[a.c].add(a.normal);for(e=0,n=this.vertices.length;e<n;e++)o[e].normalize();for(i=0,r=this.faces.length;i<r;i++){var q=(a=this.faces[i]).vertexNormals;3===q.length?(q[0].copy(o[a.a]),q[1].copy(o[a.b]),q[2].copy(o[a.c])):(q[0]=o[a.a].clone(),q[1]=o[a.b].clone(),q[2]=o[a.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var t,e,n;for(this.computeFaceNormals(),t=0,e=this.faces.length;t<e;t++){var i=(n=this.faces[t]).vertexNormals;3===i.length?(i[0].copy(n.normal),i[1].copy(n.normal),i[2].copy(n.normal)):(i[0]=n.normal.clone(),i[1]=n.normal.clone(),i[2]=n.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var t,e,n,i,r;for(n=0,i=this.faces.length;n<i;n++)for((r=this.faces[n]).__originalFaceNormal?r.__originalFaceNormal.copy(r.normal):r.__originalFaceNormal=r.normal.clone(),r.__originalVertexNormals||(r.__originalVertexNormals=[]),t=0,e=r.vertexNormals.length;t<e;t++)r.__originalVertexNormals[t]?r.__originalVertexNormals[t].copy(r.vertexNormals[t]):r.__originalVertexNormals[t]=r.vertexNormals[t].clone();var a=new Xr;for(a.faces=this.faces,t=0,e=this.morphTargets.length;t<e;t++){if(!this.morphNormals[t]){this.morphNormals[t]={},this.morphNormals[t].faceNormals=[],this.morphNormals[t].vertexNormals=[];var o=this.morphNormals[t].faceNormals,s=this.morphNormals[t].vertexNormals;for(n=0,i=this.faces.length;n<i;n++)l=new Mn,c={a:new Mn,b:new Mn,c:new Mn},o.push(l),s.push(c)}var l,c,h=this.morphNormals[t];for(a.vertices=this.morphTargets[t].vertices,a.computeFaceNormals(),a.computeVertexNormals(),n=0,i=this.faces.length;n<i;n++)r=this.faces[n],l=h.faceNormals[n],c=h.vertexNormals[n],l.copy(r.normal),c.a.copy(r.vertexNormals[0]),c.b.copy(r.vertexNormals[1]),c.c.copy(r.vertexNormals[2])}for(n=0,i=this.faces.length;n<i;n++)(r=this.faces[n]).normal=r.__originalFaceNormal,r.vertexNormals=r.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new gi),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new bi),this.boundingSphere.setFromPoints(this.vertices)},merge:function(t,e,n){if(t&&t.isGeometry){var i,r=this.vertices.length,a=this.vertices,o=t.vertices,s=this.faces,l=t.faces,c=this.colors,h=t.colors;void 0===n&&(n=0),void 0!==e&&(i=(new En).getNormalMatrix(e));for(var u=0,q=o.length;u<q;u++){var m=o[u].clone();void 0!==e&&m.applyMatrix4(e),a.push(m)}for(u=0,q=h.length;u<q;u++)c.push(h[u].clone());for(u=0,q=l.length;u<q;u++){var d,p,f,v=l[u],x=v.vertexNormals,g=v.vertexColors;(d=new $i(v.a+r,v.b+r,v.c+r)).normal.copy(v.normal),void 0!==i&&d.normal.applyMatrix3(i).normalize();for(var y=0,_=x.length;y<_;y++)p=x[y].clone(),void 0!==i&&p.applyMatrix3(i).normalize(),d.vertexNormals.push(p);d.color.copy(v.color);for(y=0,_=g.length;y<_;y++)f=g[y],d.vertexColors.push(f.clone());d.materialIndex=v.materialIndex+n,s.push(d)}for(u=0,q=t.faceVertexUvs.length;u<q;u++){var b=t.faceVertexUvs[u];void 0===this.faceVertexUvs[u]&&(this.faceVertexUvs[u]=[]);for(y=0,_=b.length;y<_;y++){for(var w=b[y],M=[],S=0,T=w.length;S<T;S++)M.push(w[S].clone());this.faceVertexUvs[u].push(M)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",t)},mergeMesh:function(t){t&&t.isMesh?(t.matrixAutoUpdate&&t.updateMatrix(),this.merge(t.geometry,t.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",t)},mergeVertices:function(){var t,e,n,i,r,a,o,s,l={},c=[],h=[],u=Math.pow(10,4);for(n=0,i=this.vertices.length;n<i;n++)t=this.vertices[n],void 0===l[e=Math.round(t.x*u)+"_"+Math.round(t.y*u)+"_"+Math.round(t.z*u)]?(l[e]=n,c.push(this.vertices[n]),h[n]=c.length-1):h[n]=h[l[e]];var q=[];for(n=0,i=this.faces.length;n<i;n++){(r=this.faces[n]).a=h[r.a],r.b=h[r.b],r.c=h[r.c],a=[r.a,r.b,r.c];for(var m=0;m<3;m++)if(a[m]===a[(m+1)%3]){q.push(n);break}}for(n=q.length-1;n>=0;n--){var d=q[n];for(this.faces.splice(d,1),o=0,s=this.faceVertexUvs.length;o<s;o++)this.faceVertexUvs[o].splice(d,1)}var p=this.vertices.length-c.length;return this.vertices=c,p},setFromPoints:function(t){this.vertices=[];for(var e=0,n=t.length;e<n;e++){var i=t[e];this.vertices.push(new Mn(i.x,i.y,i.z||0))}return this},sortFacesByMaterialIndex:function(){for(var t=this.faces,e=t.length,n=0;n<e;n++)t[n]._id=n;t.sort((function(t,e){return t.materialIndex-e.materialIndex}));var i,r,a=this.faceVertexUvs[0],o=this.faceVertexUvs[1];a&&a.length===e&&(i=[]),o&&o.length===e&&(r=[]);for(n=0;n<e;n++){var s=t[n]._id;i&&i.push(a[s]),r&&r.push(o[s])}i&&(this.faceVertexUvs[0]=i),r&&(this.faceVertexUvs[1]=r)},toJSON:function(){var t={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),void 0!==this.parameters){var e=this.parameters;for(var n in e)void 0!==e[n]&&(t[n]=e[n]);return t}for(var i=[],r=0;r<this.vertices.length;r++){var a=this.vertices[r];i.push(a.x,a.y,a.z)}var o=[],s=[],l={},c=[],h={},u=[],q={};for(r=0;r<this.faces.length;r++){var m=this.faces[r],d=void 0!==this.faceVertexUvs[0][r],p=m.normal.length()>0,f=m.vertexNormals.length>0,v=1!==m.color.r||1!==m.color.g||1!==m.color.b,x=m.vertexColors.length>0,g=0;if(g=w(g,0,0),g=w(g,1,!0),g=w(g,2,!1),g=w(g,3,d),g=w(g,4,p),g=w(g,5,f),g=w(g,6,v),g=w(g,7,x),o.push(g),o.push(m.a,m.b,m.c),o.push(m.materialIndex),d){var y=this.faceVertexUvs[0][r];o.push(T(y[0]),T(y[1]),T(y[2]))}if(p&&o.push(M(m.normal)),f){var _=m.vertexNormals;o.push(M(_[0]),M(_[1]),M(_[2]))}if(v&&o.push(S(m.color)),x){var b=m.vertexColors;o.push(S(b[0]),S(b[1]),S(b[2]))}}function w(t,e,n){return n?t|1<<e:t&~(1<<e)}function M(t){var e=t.x.toString()+t.y.toString()+t.z.toString();return void 0!==l[e]?l[e]:(l[e]=s.length/3,s.push(t.x,t.y,t.z),l[e])}function S(t){var e=t.r.toString()+t.g.toString()+t.b.toString();return void 0!==h[e]?h[e]:(h[e]=c.length,c.push(t.getHex()),h[e])}function T(t){var e=t.x.toString()+t.y.toString();return void 0!==q[e]?q[e]:(q[e]=u.length/2,u.push(t.x,t.y),q[e])}return t.data={},t.data.vertices=i,t.data.normals=s,c.length>0&&(t.data.colors=c),u.length>0&&(t.data.uvs=[u]),t.data.faces=o,t},clone:function(){return(new Xr).copy(this)},copy:function(t){var e,n,i,r,a,o;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;var s=t.vertices;for(e=0,n=s.length;e<n;e++)this.vertices.push(s[e].clone());var l=t.colors;for(e=0,n=l.length;e<n;e++)this.colors.push(l[e].clone());var c=t.faces;for(e=0,n=c.length;e<n;e++)this.faces.push(c[e].clone());for(e=0,n=t.faceVertexUvs.length;e<n;e++){var h=t.faceVertexUvs[e];for(void 0===this.faceVertexUvs[e]&&(this.faceVertexUvs[e]=[]),i=0,r=h.length;i<r;i++){var u=h[i],q=[];for(a=0,o=u.length;a<o;a++){var m=u[a];q.push(m.clone())}this.faceVertexUvs[e].push(q)}}var d=t.morphTargets;for(e=0,n=d.length;e<n;e++){var p={};if(p.name=d[e].name,void 0!==d[e].vertices)for(p.vertices=[],i=0,r=d[e].vertices.length;i<r;i++)p.vertices.push(d[e].vertices[i].clone());if(void 0!==d[e].normals)for(p.normals=[],i=0,r=d[e].normals.length;i<r;i++)p.normals.push(d[e].normals[i].clone());this.morphTargets.push(p)}var f=t.morphNormals;for(e=0,n=f.length;e<n;e++){var v={};if(void 0!==f[e].vertexNormals)for(v.vertexNormals=[],i=0,r=f[e].vertexNormals.length;i<r;i++){var x=f[e].vertexNormals[i],g={};g.a=x.a.clone(),g.b=x.b.clone(),g.c=x.c.clone(),v.vertexNormals.push(g)}if(void 0!==f[e].faceNormals)for(v.faceNormals=[],i=0,r=f[e].faceNormals.length;i<r;i++)v.faceNormals.push(f[e].faceNormals[i].clone());this.morphNormals.push(v)}var y=t.skinWeights;for(e=0,n=y.length;e<n;e++)this.skinWeights.push(y[e].clone());var _=t.skinIndices;for(e=0,n=_.length;e<n;e++)this.skinIndices.push(_[e].clone());var b=t.lineDistances;for(e=0,n=b.length;e<n;e++)this.lineDistances.push(b[e]);var w=t.boundingBox;null!==w&&(this.boundingBox=w.clone());var M=t.boundingSphere;return null!==M&&(this.boundingSphere=M.clone()),this.elementsNeedUpdate=t.elementsNeedUpdate,this.verticesNeedUpdate=t.verticesNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.lineDistancesNeedUpdate=t.lineDistancesNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});class Yr extends Xr{constructor(t,e,n,i,r,a){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:r,depthSegments:a},this.fromBufferGeometry(new Zr(t,e,n,i,r,a)),this.mergeVertices()}}class Zr extends br{constructor(t,e,n,i,r,a){super(),this.type="BoxBufferGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:r,depthSegments:a};var o=this;t=t||1,e=e||1,n=n||1,i=Math.floor(i)||1,r=Math.floor(r)||1,a=Math.floor(a)||1;var s=[],l=[],c=[],h=[],u=0,q=0;function m(t,e,n,i,r,a,m,d,p,f,v){var x,g,y=a/p,_=m/f,b=a/2,w=m/2,M=d/2,S=p+1,T=f+1,E=0,A=0,z=new Mn;for(g=0;g<T;g++){var L=g*_-w;for(x=0;x<S;x++){var P=x*y-b;z[t]=P*i,z[e]=L*r,z[n]=M,l.push(z.x,z.y,z.z),z[t]=0,z[e]=0,z[n]=d>0?1:-1,c.push(z.x,z.y,z.z),h.push(x/p),h.push(1-g/f),E+=1}}for(g=0;g<f;g++)for(x=0;x<p;x++){var R=u+x+S*g,C=u+x+S*(g+1),O=u+(x+1)+S*(g+1),I=u+(x+1)+S*g;s.push(R,C,I),s.push(C,O,I),A+=6}o.addGroup(q,A,v),q+=A,u+=E}m("z","y","x",-1,-1,n,e,t,a,r,0),m("z","y","x",1,-1,n,e,-t,a,r,1),m("x","z","y",1,1,t,n,e,i,a,2),m("x","z","y",1,-1,t,n,-e,i,a,3),m("x","y","z",1,-1,t,e,n,i,r,4),m("x","y","z",-1,-1,t,e,-n,i,r,5),this.setIndex(s),this.setAttribute("position",new ur(l,3)),this.setAttribute("normal",new ur(c,3)),this.setAttribute("uv",new ur(h,2))}}function Jr(t){var e={};for(var n in t)for(var i in e[n]={},t[n]){var r=t[n][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture)?e[n][i]=r.clone():Array.isArray(r)?e[n][i]=r.slice():e[n][i]=r}return e}function Qr(t){for(var e={},n=0;n<t.length;n++){var i=Jr(t[n]);for(var r in i)e[r]=i[r]}return e}var Kr={clone:Jr,merge:Qr},$r="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",ta="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";function ea(t){er.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader=$r,this.fragmentShader=ta,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,void 0!==t&&(void 0!==t.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}function na(){ai.call(this),this.type="Camera",this.matrixWorldInverse=new Hn,this.projectionMatrix=new Hn,this.projectionMatrixInverse=new Hn}function ia(t,e,n,i){na.call(this),this.type="PerspectiveCamera",this.fov=void 0!==t?t:50,this.zoom=1,this.near=void 0!==n?n:.1,this.far=void 0!==i?i:2e3,this.focus=10,this.aspect=void 0!==e?e:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}ea.prototype=Object.create(er.prototype),ea.prototype.constructor=ea,ea.prototype.isShaderMaterial=!0,ea.prototype.copy=function(t){return er.prototype.copy.call(this,t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=Jr(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.extensions=t.extensions,this},ea.prototype.toJSON=function(t){var e=er.prototype.toJSON.call(this,t);for(var n in e.uniforms={},this.uniforms){var i=this.uniforms[n].value;i&&i.isTexture?e.uniforms[n]={type:"t",value:i.toJSON(t).uuid}:i&&i.isColor?e.uniforms[n]={type:"c",value:i.getHex()}:i&&i.isVector2?e.uniforms[n]={type:"v2",value:i.toArray()}:i&&i.isVector3?e.uniforms[n]={type:"v3",value:i.toArray()}:i&&i.isVector4?e.uniforms[n]={type:"v4",value:i.toArray()}:i&&i.isMatrix3?e.uniforms[n]={type:"m3",value:i.toArray()}:i&&i.isMatrix4?e.uniforms[n]={type:"m4",value:i.toArray()}:e.uniforms[n]={value:i}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;var r={};for(var a in this.extensions)!0===this.extensions[a]&&(r[a]=!0);return Object.keys(r).length>0&&(e.extensions=r),e},na.prototype=Object.assign(Object.create(ai.prototype),{constructor:na,isCamera:!0,copy:function(t,e){return ai.prototype.copy.call(this,t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this},getWorldDirection:function(t){void 0===t&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),t=new Mn),this.updateMatrixWorld(!0);var e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()},updateMatrixWorld:function(t){ai.prototype.updateMatrixWorld.call(this,t),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),ia.prototype=Object.assign(Object.create(na.prototype),{constructor:ia,isPerspectiveCamera:!0,copy:function(t,e){return na.prototype.copy.call(this,t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this},setFocalLength:function(t){var e=.5*this.getFilmHeight()/t;this.fov=2*gn.RAD2DEG*Math.atan(e),this.updateProjectionMatrix()},getFocalLength:function(){var t=Math.tan(.5*gn.DEG2RAD*this.fov);return.5*this.getFilmHeight()/t},getEffectiveFOV:function(){return 2*gn.RAD2DEG*Math.atan(Math.tan(.5*gn.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(t,e,n,i,r,a){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=this.near,e=t*Math.tan(.5*gn.DEG2RAD*this.fov)/this.zoom,n=2*e,i=this.aspect*n,r=-.5*i,a=this.view;if(null!==this.view&&this.view.enabled){var o=a.fullWidth,s=a.fullHeight;r+=a.offsetX*i/o,e-=a.offsetY*n/s,i*=a.width/o,n*=a.height/s}var l=this.filmOffset;0!==l&&(r+=t*l/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,e,e-n,t,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(t){var e=ai.prototype.toJSON.call(this,t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}});var ra=90,aa=1;function oa(t,e,n,i){ai.call(this),this.type="CubeCamera";var r=new ia(ra,aa,t,e);r.up.set(0,-1,0),r.lookAt(new Mn(1,0,0)),this.add(r);var a=new ia(ra,aa,t,e);a.up.set(0,-1,0),a.lookAt(new Mn(-1,0,0)),this.add(a);var o=new ia(ra,aa,t,e);o.up.set(0,0,1),o.lookAt(new Mn(0,1,0)),this.add(o);var s=new ia(ra,aa,t,e);s.up.set(0,0,-1),s.lookAt(new Mn(0,-1,0)),this.add(s);var l=new ia(ra,aa,t,e);l.up.set(0,-1,0),l.lookAt(new Mn(0,0,1)),this.add(l);var c=new ia(ra,aa,t,e);c.up.set(0,-1,0),c.lookAt(new Mn(0,0,-1)),this.add(c),i=i||{format:Vt,magFilter:St,minFilter:St},this.renderTarget=new sa(n,n,i),this.renderTarget.texture.name="CubeCamera",this.update=function(t,e){null===this.parent&&this.updateMatrixWorld();var n=t.getRenderTarget(),i=this.renderTarget,h=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,t.setRenderTarget(i,0),t.render(e,r),t.setRenderTarget(i,1),t.render(e,a),t.setRenderTarget(i,2),t.render(e,o),t.setRenderTarget(i,3),t.render(e,s),t.setRenderTarget(i,4),t.render(e,l),i.texture.generateMipmaps=h,t.setRenderTarget(i,5),t.render(e,c),t.setRenderTarget(n)},this.clear=function(t,e,n,i){for(var r=t.getRenderTarget(),a=this.renderTarget,o=0;o<6;o++)t.setRenderTarget(a,o),t.clear(e,n,i);t.setRenderTarget(r)}}function sa(t,e,n){Rn.call(this,t,e,n)}function la(t,e,n,i,r,a,o,s,l,c,h,u){Ln.call(this,null,a,o,s,l,c,i,r,h,u),this.image={data:t||null,width:e||1,height:n||1},this.magFilter=void 0!==l?l:yt,this.minFilter=void 0!==c?c:yt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}oa.prototype=Object.create(ai.prototype),oa.prototype.constructor=oa,sa.prototype=Object.create(Rn.prototype),sa.prototype.constructor=sa,sa.prototype.isWebGLRenderTargetCube=!0,sa.prototype.fromEquirectangularTexture=function(t,e){this.texture.type=e.type,this.texture.format=e.format,this.texture.encoding=e.encoding;var n=new oi,i={uniforms:{tEquirect:{value:null}},vertexShader:["varying vec3 vWorldDirection;","vec3 transformDirection( in vec3 dir, in mat4 matrix ) {","\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );","}","void main() {","\tvWorldDirection = transformDirection( position, modelMatrix );","\t#include <begin_vertex>","\t#include <project_vertex>","}"].join("\n"),fragmentShader:["uniform sampler2D tEquirect;","varying vec3 vWorldDirection;","#define RECIPROCAL_PI 0.31830988618","#define RECIPROCAL_PI2 0.15915494","void main() {","\tvec3 direction = normalize( vWorldDirection );","\tvec2 sampleUV;","\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;","\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;","\tgl_FragColor = texture2D( tEquirect, sampleUV );","}"].join("\n")},r=new ea({type:"CubemapFromEquirect",uniforms:Jr(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,side:v,blending:M});r.uniforms.tEquirect.value=e;var a=new Fr(new Zr(5,5,5),r);n.add(a);var o=new oa(1,10,1);return o.renderTarget=this,o.renderTarget.texture.name="CubeCameraTexture",o.update(t,n),a.geometry.dispose(),a.material.dispose(),this},la.prototype=Object.create(Ln.prototype),la.prototype.constructor=la,la.prototype.isDataTexture=!0;var ca=new bi,ha=new Mn;function ua(t,e,n,i,r,a){this.planes=[void 0!==t?t:new Oi,void 0!==e?e:new Oi,void 0!==n?n:new Oi,void 0!==i?i:new Oi,void 0!==r?r:new Oi,void 0!==a?a:new Oi]}Object.assign(ua.prototype,{set:function(t,e,n,i,r,a){var o=this.planes;return o[0].copy(t),o[1].copy(e),o[2].copy(n),o[3].copy(i),o[4].copy(r),o[5].copy(a),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){for(var e=this.planes,n=0;n<6;n++)e[n].copy(t.planes[n]);return this},setFromMatrix:function(t){var e=this.planes,n=t.elements,i=n[0],r=n[1],a=n[2],o=n[3],s=n[4],l=n[5],c=n[6],h=n[7],u=n[8],q=n[9],m=n[10],d=n[11],p=n[12],f=n[13],v=n[14],x=n[15];return e[0].setComponents(o-i,h-s,d-u,x-p).normalize(),e[1].setComponents(o+i,h+s,d+u,x+p).normalize(),e[2].setComponents(o+r,h+l,d+q,x+f).normalize(),e[3].setComponents(o-r,h-l,d-q,x-f).normalize(),e[4].setComponents(o-a,h-c,d-m,x-v).normalize(),e[5].setComponents(o+a,h+c,d+m,x+v).normalize(),this},intersectsObject:function(t){var e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),ca.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(ca)},intersectsSprite:function(t){return ca.center.set(0,0,0),ca.radius=.7071067811865476,ca.applyMatrix4(t.matrixWorld),this.intersectsSphere(ca)},intersectsSphere:function(t){for(var e=this.planes,n=t.center,i=-t.radius,r=0;r<6;r++){if(e[r].distanceToPoint(n)<i)return!1}return!0},intersectsBox:function(t){for(var e=this.planes,n=0;n<6;n++){var i=e[n];if(ha.x=i.normal.x>0?t.max.x:t.min.x,ha.y=i.normal.y>0?t.max.y:t.min.y,ha.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(ha)<0)return!1}return!0},containsPoint:function(t){for(var e=this.planes,n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}});var qa={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif",color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\t\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t}  else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) { \n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = saturate( clearcoat );\tmaterial.clearcoatRoughness = clamp( clearcoatRoughness, 0.04, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\t#ifdef USE_TANGENT\n\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, normalScale, normalMap );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec2 normalScale, in sampler2D normalMap ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy *= normalScale;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tbool frontFacing = dot( cross( S, T ), N ) > 0.0;\n\t\t\tmapN.xy *= ( float( frontFacing ) * 2.0 - 1.0 );\n\t\t#else\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 vTBN = mat3( tangent, bitangent, clearcoatNormal );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = clearcoatNormalScale * mapN.xy;\n\t\tclearcoatNormal = normalize( vTBN * mapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatNormalScale, clearcoatNormalMap );\n\t#endif\n#endif",clearcoat_normalmap_pars_fragment:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 encodeHalfRGBA ( vec2 v ) {\n\tvec4 encoded = vec4( 0.0 );\n\tconst vec2 offset = vec2( 1.0 / 255.0, 0.0 );\n\tencoded.xy = vec2( v.x, fract( v.x * 255.0 ) );\n\tencoded.xy = encoded.xy - ( encoded.yy * offset );\n\tencoded.zw = vec2( v.y, fract( v.y * 255.0 ) );\n\tencoded.zw = encoded.zw - ( encoded.ww * offset );\n\treturn encoded;\n}\nvec2 decodeHalfRGBA( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn decodeHalfRGBA( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = ( floor( uv * size - 0.5 ) + 0.5 ) * texelSize;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"},ma={common:{diffuse:{value:new Zi(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new En},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new yn(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Zi(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new Zi(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new En}},sprite:{diffuse:{value:new Zi(15658734)},opacity:{value:1},center:{value:new yn(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new En}}},da={basic:{uniforms:Qr([ma.common,ma.specularmap,ma.envmap,ma.aomap,ma.lightmap,ma.fog]),vertexShader:qa.meshbasic_vert,fragmentShader:qa.meshbasic_frag},lambert:{uniforms:Qr([ma.common,ma.specularmap,ma.envmap,ma.aomap,ma.lightmap,ma.emissivemap,ma.fog,ma.lights,{emissive:{value:new Zi(0)}}]),vertexShader:qa.meshlambert_vert,fragmentShader:qa.meshlambert_frag},phong:{uniforms:Qr([ma.common,ma.specularmap,ma.envmap,ma.aomap,ma.lightmap,ma.emissivemap,ma.bumpmap,ma.normalmap,ma.displacementmap,ma.gradientmap,ma.fog,ma.lights,{emissive:{value:new Zi(0)},specular:{value:new Zi(1118481)},shininess:{value:30}}]),vertexShader:qa.meshphong_vert,fragmentShader:qa.meshphong_frag},standard:{uniforms:Qr([ma.common,ma.envmap,ma.aomap,ma.lightmap,ma.emissivemap,ma.bumpmap,ma.normalmap,ma.displacementmap,ma.roughnessmap,ma.metalnessmap,ma.fog,ma.lights,{emissive:{value:new Zi(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:qa.meshphysical_vert,fragmentShader:qa.meshphysical_frag},matcap:{uniforms:Qr([ma.common,ma.bumpmap,ma.normalmap,ma.displacementmap,ma.fog,{matcap:{value:null}}]),vertexShader:qa.meshmatcap_vert,fragmentShader:qa.meshmatcap_frag},points:{uniforms:Qr([ma.points,ma.fog]),vertexShader:qa.points_vert,fragmentShader:qa.points_frag},dashed:{uniforms:Qr([ma.common,ma.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:qa.linedashed_vert,fragmentShader:qa.linedashed_frag},depth:{uniforms:Qr([ma.common,ma.displacementmap]),vertexShader:qa.depth_vert,fragmentShader:qa.depth_frag},normal:{uniforms:Qr([ma.common,ma.bumpmap,ma.normalmap,ma.displacementmap,{opacity:{value:1}}]),vertexShader:qa.normal_vert,fragmentShader:qa.normal_frag},sprite:{uniforms:Qr([ma.sprite,ma.fog]),vertexShader:qa.sprite_vert,fragmentShader:qa.sprite_frag},background:{uniforms:{uvTransform:{value:new En},t2D:{value:null}},vertexShader:qa.background_vert,fragmentShader:qa.background_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:qa.cube_vert,fragmentShader:qa.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:qa.equirect_vert,fragmentShader:qa.equirect_frag},distanceRGBA:{uniforms:Qr([ma.common,ma.displacementmap,{referencePosition:{value:new Mn},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:qa.distanceRGBA_vert,fragmentShader:qa.distanceRGBA_frag},shadow:{uniforms:Qr([ma.lights,ma.fog,{color:{value:new Zi(0)},opacity:{value:1}}]),vertexShader:qa.shadow_vert,fragmentShader:qa.shadow_frag}};function pa(){var t=null,e=!1,n=null;function i(r,a){!1!==e&&(n(r,a),t.requestAnimationFrame(i))}return{start:function(){!0!==e&&null!==n&&(t.requestAnimationFrame(i),e=!0)},stop:function(){e=!1},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function fa(t){var e=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),e.get(t)},remove:function(n){n.isInterleavedBufferAttribute&&(n=n.data);var i=e.get(n);i&&(t.deleteBuffer(i.buffer),e.delete(n))},update:function(n,i){n.isInterleavedBufferAttribute&&(n=n.data);var r=e.get(n);void 0===r?e.set(n,function(e,n){var i=e.array,r=e.usage,a=t.createBuffer();t.bindBuffer(n,a),t.bufferData(n,i,r),e.onUploadCallback();var o=5126;return i instanceof Float32Array?o=5126:i instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):i instanceof Uint16Array?o=5123:i instanceof Int16Array?o=5122:i instanceof Uint32Array?o=5125:i instanceof Int32Array?o=5124:i instanceof Int8Array?o=5120:i instanceof Uint8Array&&(o=5121),{buffer:a,type:o,bytesPerElement:i.BYTES_PER_ELEMENT,version:e.version}}(n,i)):r.version<n.version&&(!function(e,n,i){var r=n.array,a=n.updateRange;t.bindBuffer(i,e),-1===a.count?t.bufferSubData(i,0,r):(t.bufferSubData(i,a.offset*r.BYTES_PER_ELEMENT,r.subarray(a.offset,a.offset+a.count)),a.count=-1)}(r.buffer,n,i),r.version=n.version)}}}function va(t,e,n,i){Xr.call(this),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i},this.fromBufferGeometry(new xa(t,e,n,i)),this.mergeVertices()}function xa(t,e,n,i){br.call(this),this.type="PlaneBufferGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};var r,a,o=(t=t||1)/2,s=(e=e||1)/2,l=Math.floor(n)||1,c=Math.floor(i)||1,h=l+1,u=c+1,q=t/l,m=e/c,d=[],p=[],f=[],v=[];for(a=0;a<u;a++){var x=a*m-s;for(r=0;r<h;r++){var g=r*q-o;p.push(g,-x,0),f.push(0,0,1),v.push(r/l),v.push(1-a/c)}}for(a=0;a<c;a++)for(r=0;r<l;r++){var y=r+h*a,_=r+h*(a+1),b=r+1+h*(a+1),w=r+1+h*a;d.push(y,_,w),d.push(_,b,w)}this.setIndex(d),this.setAttribute("position",new ur(p,3)),this.setAttribute("normal",new ur(f,3)),this.setAttribute("uv",new ur(v,2))}function ga(t,e,n,i){var r,a,o=new Zi(0),s=0,l=null,c=0;function h(t,n){e.buffers.color.setClear(t.r,t.g,t.b,n,i)}return{getClearColor:function(){return o},setClearColor:function(t,e){o.set(t),h(o,s=void 0!==e?e:1)},getClearAlpha:function(){return s},setClearAlpha:function(t){h(o,s=t)},render:function(e,i,u,q){var m=i.background,d=t.vr,p=d.getSession&&d.getSession();if(p&&"additive"===p.environmentBlendMode&&(m=null),null===m?(h(o,s),l=null,c=0):m&&m.isColor&&(h(m,1),q=!0,l=null,c=0),(t.autoClear||q)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),m&&(m.isCubeTexture||m.isWebGLRenderTargetCube)){void 0===a&&((a=new Fr(new Zr(1,1,1),new ea({type:"BackgroundCubeMaterial",uniforms:Jr(da.cube.uniforms),vertexShader:da.cube.vertexShader,fragmentShader:da.cube.fragmentShader,side:v,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),a.geometry.deleteAttribute("uv"),a.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(a.material,"map",{get:function(){return this.uniforms.tCube.value}}),n.update(a));var x=m.isWebGLRenderTargetCube?m.texture:m;a.material.uniforms.tCube.value=x,a.material.uniforms.tFlip.value=m.isWebGLRenderTargetCube?1:-1,l===m&&c===x.version||(a.material.needsUpdate=!0,l=m,c=x.version),e.unshift(a,a.geometry,a.material,0,0,null)}else m&&m.isTexture&&(void 0===r&&((r=new Fr(new xa(2,2),new ea({type:"BackgroundMaterial",uniforms:Jr(da.background.uniforms),vertexShader:da.background.vertexShader,fragmentShader:da.background.fragmentShader,side:f,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),Object.defineProperty(r.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(r)),r.material.uniforms.t2D.value=m,!0===m.matrixAutoUpdate&&m.updateMatrix(),r.material.uniforms.uvTransform.value.copy(m.matrix),l===m&&c===m.version||(r.material.needsUpdate=!0,l=m,c=m.version),e.unshift(r,r.geometry,r.material,0,0,null))}}}function ya(t,e,n,i){var r,a=i.isWebGL2;this.setMode=function(t){r=t},this.render=function(e,i){t.drawArrays(r,e,i),n.update(i,r)},this.renderInstances=function(i,o,s,l){if(0!==l){var c,h;if(a)c=t,h="drawArraysInstanced";else if(h="drawArraysInstancedANGLE",null===(c=e.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");c[h](r,o,s,l),n.update(s,r,l)}}}function _a(t,e,n){var i;function r(e){if("highp"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}var a="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&t instanceof WebGL2ComputeRenderingContext,o=void 0!==n.precision?n.precision:"highp",s=r(o);s!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",s,"instead."),o=s);var l=!0===n.logarithmicDepthBuffer,c=t.getParameter(34930),h=t.getParameter(35660),u=t.getParameter(3379),q=t.getParameter(34076),m=t.getParameter(34921),d=t.getParameter(36347),p=t.getParameter(36348),f=t.getParameter(36349),v=h>0,x=a||!!e.get("OES_texture_float");return{isWebGL2:a,getMaxAnisotropy:function(){if(void 0!==i)return i;var n=e.get("EXT_texture_filter_anisotropic");return i=null!==n?t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:r,precision:o,logarithmicDepthBuffer:l,maxTextures:c,maxVertexTextures:h,maxTextureSize:u,maxCubemapSize:q,maxAttributes:m,maxVertexUniforms:d,maxVaryings:p,maxFragmentUniforms:f,vertexTextures:v,floatFragmentTextures:x,floatVertexTextures:v&&x,maxSamples:a?t.getParameter(36183):0}}function ba(){var t=this,e=null,n=0,i=!1,r=!1,a=new Oi,o=new En,s={value:null,needsUpdate:!1};function l(){s.value!==e&&(s.value=e,s.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0}function c(e,n,i,r){var l=null!==e?e.length:0,c=null;if(0!==l){if(c=s.value,!0!==r||null===c){var h=i+4*l,u=n.matrixWorldInverse;o.getNormalMatrix(u),(null===c||c.length<h)&&(c=new Float32Array(h));for(var q=0,m=i;q!==l;++q,m+=4)a.copy(e[q]).applyMatrix4(u,o),a.normal.toArray(c,m),c[m+3]=a.constant}s.value=c,s.needsUpdate=!0}return t.numPlanes=l,c}this.uniform=s,this.numPlanes=0,this.numIntersection=0,this.init=function(t,r,a){var o=0!==t.length||r||0!==n||i;return i=r,e=c(t,a,0),n=t.length,o},this.beginShadows=function(){r=!0,c(null)},this.endShadows=function(){r=!1,l()},this.setState=function(t,a,o,h,u,q){if(!i||null===t||0===t.length||r&&!o)r?c(null):l();else{var m=r?0:n,d=4*m,p=u.clippingState||null;s.value=p,p=c(t,h,d,q);for(var f=0;f!==d;++f)p[f]=e[f];u.clippingState=p,this.numIntersection=a?this.numPlanes:0,this.numPlanes+=m}}}function wa(t){var e={};return{get:function(n){if(void 0!==e[n])return e[n];var i;switch(n){case"WEBGL_depth_texture":i=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=t.getExtension(n)}return null===i&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),e[n]=i,i}}}function Ma(t,e,n){var i=new WeakMap,r=new WeakMap;function a(t){var o=t.target,s=i.get(o);for(var l in null!==s.index&&e.remove(s.index),s.attributes)e.remove(s.attributes[l]);o.removeEventListener("dispose",a),i.delete(o);var c=r.get(s);c&&(e.remove(c),r.delete(s)),n.memory.geometries--}function o(t){var n=[],i=t.index,a=t.attributes.position,o=0;if(null!==i){var s=i.array;o=i.version;for(var l=0,c=s.length;l<c;l+=3){var h=s[l+0],u=s[l+1],q=s[l+2];n.push(h,u,u,q,q,h)}}else{s=a.array;o=a.version;for(l=0,c=s.length/3-1;l<c;l+=3){h=l+0,u=l+1,q=l+2;n.push(h,u,u,q,q,h)}}var m=new(dr(n)>65535?hr:lr)(n,1);m.version=o,e.update(m,34963);var d=r.get(t);d&&e.remove(d),r.set(t,m)}return{get:function(t,e){var r=i.get(e);return r||(e.addEventListener("dispose",a),e.isBufferGeometry?r=e:e.isGeometry&&(void 0===e._bufferGeometry&&(e._bufferGeometry=(new br).setFromObject(t)),r=e._bufferGeometry),i.set(e,r),n.memory.geometries++,r)},update:function(t){var n=t.index,i=t.attributes;for(var r in null!==n&&e.update(n,34963),i)e.update(i[r],34962);var a=t.morphAttributes;for(var r in a)for(var o=a[r],s=0,l=o.length;s<l;s++)e.update(o[s],34962)},getWireframeAttribute:function(t){var e=r.get(t);if(e){var n=t.index;null!==n&&e.version<n.version&&o(t)}else o(t);return r.get(t)}}}function Sa(t,e,n,i){var r,a,o,s=i.isWebGL2;this.setMode=function(t){r=t},this.setIndex=function(t){a=t.type,o=t.bytesPerElement},this.render=function(e,i){t.drawElements(r,i,a,e*o),n.update(i,r)},this.renderInstances=function(i,l,c,h){if(0!==h){var u,q;if(s)u=t,q="drawElementsInstanced";else if(q="drawElementsInstancedANGLE",null===(u=e.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");u[q](r,c,a,l*o,h),n.update(c,r,h)}}}function Ta(t){var e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(t,n,i){switch(i=i||1,e.calls++,n){case 4:e.triangles+=i*(t/3);break;case 5:case 6:e.triangles+=i*(t-2);break;case 1:e.lines+=i*(t/2);break;case 3:e.lines+=i*(t-1);break;case 2:e.lines+=i*t;break;case 0:e.points+=i*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",n)}}}}function Ea(t,e){return Math.abs(e[1])-Math.abs(t[1])}function Aa(t){var e={},n=new Float32Array(8);return{update:function(i,r,a,o){var s=i.morphTargetInfluences,l=s.length,c=e[r.id];if(void 0===c){c=[];for(var h=0;h<l;h++)c[h]=[h,0];e[r.id]=c}var u=a.morphTargets&&r.morphAttributes.position,q=a.morphNormals&&r.morphAttributes.normal;for(h=0;h<l;h++){0!==(m=c[h])[1]&&(u&&r.deleteAttribute("morphTarget"+h),q&&r.deleteAttribute("morphNormal"+h))}for(h=0;h<l;h++){(m=c[h])[0]=h,m[1]=s[h]}for(c.sort(Ea),h=0;h<8;h++){var m;if(m=c[h]){var d=m[0],p=m[1];if(p){u&&r.setAttribute("morphTarget"+h,u[d]),q&&r.setAttribute("morphNormal"+h,q[d]),n[h]=p;continue}}n[h]=0}o.getUniforms().setValue(t,"morphTargetInfluences",n)}}}function za(t,e,n,i){var r={};return{update:function(t){var a=i.render.frame,o=t.geometry,s=e.get(t,o);return r[s.id]!==a&&(o.isGeometry&&s.updateFromObject(t),e.update(s),r[s.id]=a),t.isInstancedMesh&&n.update(t.instanceMatrix,34962),s},dispose:function(){r={}}}}function La(t,e,n,i,r,a,o,s,l,c){t=void 0!==t?t:[],e=void 0!==e?e:ht,o=void 0!==o?o:Vt,Ln.call(this,t,e,n,i,r,a,o,s,l,c),this.flipY=!1}function Pa(t,e,n,i){Ln.call(this,null),this.image={data:t||null,width:e||1,height:n||1,depth:i||1},this.magFilter=yt,this.minFilter=yt,this.wrapR=xt,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}function Ra(t,e,n,i){Ln.call(this,null),this.image={data:t||null,width:e||1,height:n||1,depth:i||1},this.magFilter=yt,this.minFilter=yt,this.wrapR=xt,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}da.physical={uniforms:Qr([da.standard.uniforms,{transparency:{value:0},clearcoat:{value:0},clearcoatRoughness:{value:0},sheen:{value:new Zi(0)},clearcoatNormalScale:{value:new yn(1,1)},clearcoatNormalMap:{value:null}}]),vertexShader:qa.meshphysical_vert,fragmentShader:qa.meshphysical_frag},va.prototype=Object.create(Xr.prototype),va.prototype.constructor=va,xa.prototype=Object.create(br.prototype),xa.prototype.constructor=xa,La.prototype=Object.create(Ln.prototype),La.prototype.constructor=La,La.prototype.isCubeTexture=!0,Object.defineProperty(La.prototype,"images",{get:function(){return this.image},set:function(t){this.image=t}}),Pa.prototype=Object.create(Ln.prototype),Pa.prototype.constructor=Pa,Pa.prototype.isDataTexture2DArray=!0,Ra.prototype=Object.create(Ln.prototype),Ra.prototype.constructor=Ra,Ra.prototype.isDataTexture3D=!0;var Ca=new Ln,Oa=new Pa,Ia=new Ra,Da=new La,Na=[],Ba=[],Ua=new Float32Array(16),Fa=new Float32Array(9),Ha=new Float32Array(4);function Ga(t,e,n){var i=t[0];if(i<=0||i>0)return t;var r=e*n,a=Na[r];if(void 0===a&&(a=new Float32Array(r),Na[r]=a),0!==e){i.toArray(a,0);for(var o=1,s=0;o!==e;++o)s+=n,t[o].toArray(a,s)}return a}function Va(t,e){if(t.length!==e.length)return!1;for(var n=0,i=t.length;n<i;n++)if(t[n]!==e[n])return!1;return!0}function ja(t,e){for(var n=0,i=e.length;n<i;n++)t[n]=e[n]}function ka(t,e){var n=Ba[e];void 0===n&&(n=new Int32Array(e),Ba[e]=n);for(var i=0;i!==e;++i)n[i]=t.allocateTextureUnit();return n}function Wa(t,e){var n=this.cache;n[0]!==e&&(t.uniform1f(this.addr,e),n[0]=e)}function Xa(t,e){var n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(Va(n,e))return;t.uniform2fv(this.addr,e),ja(n,e)}}function Ya(t,e){var n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(void 0!==e.r)n[0]===e.r&&n[1]===e.g&&n[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(Va(n,e))return;t.uniform3fv(this.addr,e),ja(n,e)}}function Za(t,e){var n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(Va(n,e))return;t.uniform4fv(this.addr,e),ja(n,e)}}function Ja(t,e){var n=this.cache,i=e.elements;if(void 0===i){if(Va(n,e))return;t.uniformMatrix2fv(this.addr,!1,e),ja(n,e)}else{if(Va(n,i))return;Ha.set(i),t.uniformMatrix2fv(this.addr,!1,Ha),ja(n,i)}}function Qa(t,e){var n=this.cache,i=e.elements;if(void 0===i){if(Va(n,e))return;t.uniformMatrix3fv(this.addr,!1,e),ja(n,e)}else{if(Va(n,i))return;Fa.set(i),t.uniformMatrix3fv(this.addr,!1,Fa),ja(n,i)}}function Ka(t,e){var n=this.cache,i=e.elements;if(void 0===i){if(Va(n,e))return;t.uniformMatrix4fv(this.addr,!1,e),ja(n,e)}else{if(Va(n,i))return;Ua.set(i),t.uniformMatrix4fv(this.addr,!1,Ua),ja(n,i)}}function $a(t,e,n){var i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.safeSetTexture2D(e||Ca,r)}function to(t,e,n){var i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture2DArray(e||Oa,r)}function eo(t,e,n){var i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture3D(e||Ia,r)}function no(t,e,n){var i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.safeSetTextureCube(e||Da,r)}function io(t,e){var n=this.cache;n[0]!==e&&(t.uniform1i(this.addr,e),n[0]=e)}function ro(t,e){var n=this.cache;Va(n,e)||(t.uniform2iv(this.addr,e),ja(n,e))}function ao(t,e){var n=this.cache;Va(n,e)||(t.uniform3iv(this.addr,e),ja(n,e))}function oo(t,e){var n=this.cache;Va(n,e)||(t.uniform4iv(this.addr,e),ja(n,e))}function so(t,e){t.uniform1fv(this.addr,e)}function lo(t,e){t.uniform1iv(this.addr,e)}function co(t,e){t.uniform2iv(this.addr,e)}function ho(t,e){t.uniform3iv(this.addr,e)}function uo(t,e){t.uniform4iv(this.addr,e)}function qo(t,e){var n=Ga(e,this.size,2);t.uniform2fv(this.addr,n)}function mo(t,e){var n=Ga(e,this.size,3);t.uniform3fv(this.addr,n)}function po(t,e){var n=Ga(e,this.size,4);t.uniform4fv(this.addr,n)}function fo(t,e){var n=Ga(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,n)}function vo(t,e){var n=Ga(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,n)}function xo(t,e){var n=Ga(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,n)}function go(t,e,n){var i=e.length,r=ka(n,i);t.uniform1iv(this.addr,r);for(var a=0;a!==i;++a)n.safeSetTexture2D(e[a]||Ca,r[a])}function yo(t,e,n){var i=e.length,r=ka(n,i);t.uniform1iv(this.addr,r);for(var a=0;a!==i;++a)n.safeSetTextureCube(e[a]||Da,r[a])}function _o(t,e,n){this.id=t,this.addr=n,this.cache=[],this.setValue=function(t){switch(t){case 5126:return Wa;case 35664:return Xa;case 35665:return Ya;case 35666:return Za;case 35674:return Ja;case 35675:return Qa;case 35676:return Ka;case 35678:case 36198:return $a;case 35679:return eo;case 35680:return no;case 36289:return to;case 5124:case 35670:return io;case 35667:case 35671:return ro;case 35668:case 35672:return ao;case 35669:case 35673:return oo}}(e.type)}function bo(t,e,n){this.id=t,this.addr=n,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return so;case 35664:return qo;case 35665:return mo;case 35666:return po;case 35674:return fo;case 35675:return vo;case 35676:return xo;case 35678:return go;case 35680:return yo;case 5124:case 35670:return lo;case 35667:case 35671:return co;case 35668:case 35672:return ho;case 35669:case 35673:return uo}}(e.type)}function wo(t){this.id=t,this.seq=[],this.map={}}bo.prototype.updateCache=function(t){var e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),ja(e,t)},wo.prototype.setValue=function(t,e,n){for(var i=this.seq,r=0,a=i.length;r!==a;++r){var o=i[r];o.setValue(t,e[o.id],n)}};var Mo=/([\w\d_]+)(\])?(\[|\.)?/g;function So(t,e){t.seq.push(e),t.map[e.id]=e}function To(t,e,n){var i=t.name,r=i.length;for(Mo.lastIndex=0;;){var a=Mo.exec(i),o=Mo.lastIndex,s=a[1],l="]"===a[2],c=a[3];if(l&&(s|=0),void 0===c||"["===c&&o+2===r){So(n,void 0===c?new _o(s,t,e):new bo(s,t,e));break}var h=n.map[s];void 0===h&&So(n,h=new wo(s)),n=h}}function Eo(t,e){this.seq=[],this.map={};for(var n=t.getProgramParameter(e,35718),i=0;i<n;++i){var r=t.getActiveUniform(e,i);To(r,t.getUniformLocation(e,r.name),this)}}function Ao(t,e,n){var i=t.createShader(e);return t.shaderSource(i,n),t.compileShader(i),i}Eo.prototype.setValue=function(t,e,n,i){var r=this.map[e];void 0!==r&&r.setValue(t,n,i)},Eo.prototype.setOptional=function(t,e,n){var i=e[n];void 0!==i&&this.setValue(t,n,i)},Eo.upload=function(t,e,n,i){for(var r=0,a=e.length;r!==a;++r){var o=e[r],s=n[o.id];!1!==s.needsUpdate&&o.setValue(t,s.value,i)}},Eo.seqWithValue=function(t,e){for(var n=[],i=0,r=t.length;i!==r;++i){var a=t[i];a.id in e&&n.push(a)}return n};var zo=0;function Lo(t){switch(t){case Re:return["Linear","( value )"];case Ce:return["sRGB","( value )"];case Ie:return["RGBE","( value )"];case Ne:return["RGBM","( value, 7.0 )"];case Be:return["RGBM","( value, 16.0 )"];case Ue:return["RGBD","( value, 256.0 )"];case Oe:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case De:return["LogLuv","( value )"];default:throw new Error("unsupported encoding: "+t)}}function Po(t,e,n){var i=t.getShaderParameter(e,35713),r=t.getShaderInfoLog(e).trim();return i&&""===r?"":"THREE.WebGLShader: gl.getShaderInfoLog() "+n+"\n"+r+function(t){for(var e=t.split("\n"),n=0;n<e.length;n++)e[n]=n+1+": "+e[n];return e.join("\n")}(t.getShaderSource(e))}function Ro(t,e){var n=Lo(e);return"vec4 "+t+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function Co(t,e){var n;switch(e){case rt:n="Linear";break;case at:n="Reinhard";break;case ot:n="Uncharted2";break;case st:n="OptimizedCineon";break;case lt:n="ACESFilmic";break;default:throw new Error("unsupported toneMapping: "+e)}return"vec3 "+t+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function Oo(t){return""!==t}function Io(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Do(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}var No=/^[ \t]*#include +<([\w\d./]+)>/gm;function Bo(t){return t.replace(No,Uo)}function Uo(t,e){var n=qa[e];if(void 0===n)throw new Error("Can not resolve #include <"+e+">");return Bo(n)}var Fo=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;function Ho(t){return t.replace(Fo,Go)}function Go(t,e,n,i){for(var r="",a=parseInt(e);a<parseInt(n);a++)r+=i.replace(/\[ i \]/g,"[ "+a+" ]").replace(/UNROLLED_LOOP_INDEX/g,a);return r}function Vo(t){var e="precision "+t.precision+" float;\nprecision "+t.precision+" int;";return"highp"===t.precision?e+="\n#define HIGH_PRECISION":"mediump"===t.precision?e+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(e+="\n#define LOW_PRECISION"),e}function jo(t,e,n,i,r,a){var o,s,l,c,h,u=t.getContext(),q=i.defines,f=r.vertexShader,v=r.fragmentShader,x=function(t){var e="SHADOWMAP_TYPE_BASIC";return t.shadowMapType===m?e="SHADOWMAP_TYPE_PCF":t.shadowMapType===d?e="SHADOWMAP_TYPE_PCF_SOFT":t.shadowMapType===p&&(e="SHADOWMAP_TYPE_VSM"),e}(a),g=function(t){var e="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case ht:case ut:e="ENVMAP_TYPE_CUBE";break;case pt:case ft:e="ENVMAP_TYPE_CUBE_UV";break;case qt:case mt:e="ENVMAP_TYPE_EQUIREC";break;case dt:e="ENVMAP_TYPE_SPHERE"}return e}(a),y=function(t){var e="ENVMAP_MODE_REFLECTION";if(t.envMap)switch(t.envMapMode){case ut:case mt:e="ENVMAP_MODE_REFRACTION"}return e}(a),_=function(t){var e="ENVMAP_BLENDING_MULTIPLY";if(t.envMap)switch(t.combine){case tt:e="ENVMAP_BLENDING_MULTIPLY";break;case et:e="ENVMAP_BLENDING_MIX";break;case nt:e="ENVMAP_BLENDING_ADD"}return e}(a),b=t.gammaFactor>0?t.gammaFactor:1,w=a.isWebGL2?"":function(t,e,n){return[(t=t||{}).derivatives||e.envMapCubeUV||e.bumpMap||e.tangentSpaceNormalMap||e.clearcoatNormalMap||e.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(t.fragDepth||e.logarithmicDepthBuffer)&&n.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",t.drawBuffers&&n.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(t.shaderTextureLOD||e.envMap)&&n.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Oo).join("\n")}(i.extensions,a,e),M=function(t){var e=[];for(var n in t){var i=t[n];!1!==i&&e.push("#define "+n+" "+i)}return e.join("\n")}(q),S=u.createProgram(),T=a.numMultiviewViews;if(i.isRawShaderMaterial?((o=[M].filter(Oo).join("\n")).length>0&&(o+="\n"),(s=[w,M].filter(Oo).join("\n")).length>0&&(s+="\n")):(o=[Vo(a),"#define SHADER_NAME "+r.name,M,a.instancing?"#define USE_INSTANCING":"",a.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+b,"#define MAX_BONES "+a.maxBones,a.useFog&&a.fog?"#define USE_FOG":"",a.useFog&&a.fogExp2?"#define FOG_EXP2":"",a.map?"#define USE_MAP":"",a.envMap?"#define USE_ENVMAP":"",a.envMap?"#define "+y:"",a.lightMap?"#define USE_LIGHTMAP":"",a.aoMap?"#define USE_AOMAP":"",a.emissiveMap?"#define USE_EMISSIVEMAP":"",a.bumpMap?"#define USE_BUMPMAP":"",a.normalMap?"#define USE_NORMALMAP":"",a.normalMap&&a.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",a.normalMap&&a.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",a.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",a.displacementMap&&a.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",a.specularMap?"#define USE_SPECULARMAP":"",a.roughnessMap?"#define USE_ROUGHNESSMAP":"",a.metalnessMap?"#define USE_METALNESSMAP":"",a.alphaMap?"#define USE_ALPHAMAP":"",a.vertexTangents?"#define USE_TANGENT":"",a.vertexColors?"#define USE_COLOR":"",a.vertexUvs?"#define USE_UV":"",a.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",a.flatShading?"#define FLAT_SHADED":"",a.skinning?"#define USE_SKINNING":"",a.useVertexTexture?"#define BONE_TEXTURE":"",a.morphTargets?"#define USE_MORPHTARGETS":"",a.morphNormals&&!1===a.flatShading?"#define USE_MORPHNORMALS":"",a.doubleSided?"#define DOUBLE_SIDED":"",a.flipSided?"#define FLIP_SIDED":"",a.shadowMapEnabled?"#define USE_SHADOWMAP":"",a.shadowMapEnabled?"#define "+x:"",a.sizeAttenuation?"#define USE_SIZEATTENUATION":"",a.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",a.logarithmicDepthBuffer&&(a.isWebGL2||e.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING"," attribute mat4 instanceMatrix;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Oo).join("\n"),s=[w,Vo(a),"#define SHADER_NAME "+r.name,M,a.alphaTest?"#define ALPHATEST "+a.alphaTest+(a.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+b,a.useFog&&a.fog?"#define USE_FOG":"",a.useFog&&a.fogExp2?"#define FOG_EXP2":"",a.map?"#define USE_MAP":"",a.matcap?"#define USE_MATCAP":"",a.envMap?"#define USE_ENVMAP":"",a.envMap?"#define "+g:"",a.envMap?"#define "+y:"",a.envMap?"#define "+_:"",a.lightMap?"#define USE_LIGHTMAP":"",a.aoMap?"#define USE_AOMAP":"",a.emissiveMap?"#define USE_EMISSIVEMAP":"",a.bumpMap?"#define USE_BUMPMAP":"",a.normalMap?"#define USE_NORMALMAP":"",a.normalMap&&a.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",a.normalMap&&a.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",a.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",a.specularMap?"#define USE_SPECULARMAP":"",a.roughnessMap?"#define USE_ROUGHNESSMAP":"",a.metalnessMap?"#define USE_METALNESSMAP":"",a.alphaMap?"#define USE_ALPHAMAP":"",a.sheen?"#define USE_SHEEN":"",a.vertexTangents?"#define USE_TANGENT":"",a.vertexColors?"#define USE_COLOR":"",a.vertexUvs?"#define USE_UV":"",a.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",a.gradientMap?"#define USE_GRADIENTMAP":"",a.flatShading?"#define FLAT_SHADED":"",a.doubleSided?"#define DOUBLE_SIDED":"",a.flipSided?"#define FLIP_SIDED":"",a.shadowMapEnabled?"#define USE_SHADOWMAP":"",a.shadowMapEnabled?"#define "+x:"",a.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",a.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",a.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",a.logarithmicDepthBuffer&&(a.isWebGL2||e.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"",(i.extensions&&i.extensions.shaderTextureLOD||a.envMap)&&(a.isWebGL2||e.get("EXT_shader_texture_lod"))?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",a.toneMapping!==it?"#define TONE_MAPPING":"",a.toneMapping!==it?qa.tonemapping_pars_fragment:"",a.toneMapping!==it?Co("toneMapping",a.toneMapping):"",a.dithering?"#define DITHERING":"",a.outputEncoding||a.mapEncoding||a.matcapEncoding||a.envMapEncoding||a.emissiveMapEncoding?qa.encodings_pars_fragment:"",a.mapEncoding?Ro("mapTexelToLinear",a.mapEncoding):"",a.matcapEncoding?Ro("matcapTexelToLinear",a.matcapEncoding):"",a.envMapEncoding?Ro("envMapTexelToLinear",a.envMapEncoding):"",a.emissiveMapEncoding?Ro("emissiveMapTexelToLinear",a.emissiveMapEncoding):"",a.outputEncoding?(l="linearToOutputTexel",c=a.outputEncoding,h=Lo(c),"vec4 "+l+"( vec4 value ) { return LinearTo"+h[0]+h[1]+"; }"):"",a.depthPacking?"#define DEPTH_PACKING "+i.depthPacking:"","\n"].filter(Oo).join("\n")),f=Do(f=Io(f=Bo(f),a),a),v=Do(v=Io(v=Bo(v),a),a),f=Ho(f),v=Ho(v),a.isWebGL2&&!i.isRawShaderMaterial){var E=!1,A=/^\s*#version\s+300\s+es\s*\n/;i.isShaderMaterial&&null!==f.match(A)&&null!==v.match(A)&&(E=!0,f=f.replace(A,""),v=v.replace(A,"")),o=["#version 300 es\n","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+o,s=["#version 300 es\n","#define varying in",E?"":"out highp vec4 pc_fragColor;",E?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+s,T>0&&(o=(o=o.replace("#version 300 es\n",["#version 300 es\n","#extension GL_OVR_multiview2 : require","layout(num_views = "+T+") in;","#define VIEW_ID gl_ViewID_OVR"].join("\n"))).replace(["uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;"].join("\n"),["uniform mat4 modelViewMatrices["+T+"];","uniform mat4 projectionMatrices["+T+"];","uniform mat4 viewMatrices["+T+"];","uniform mat3 normalMatrices["+T+"];","#define modelViewMatrix modelViewMatrices[VIEW_ID]","#define projectionMatrix projectionMatrices[VIEW_ID]","#define viewMatrix viewMatrices[VIEW_ID]","#define normalMatrix normalMatrices[VIEW_ID]"].join("\n")),s=(s=s.replace("#version 300 es\n",["#version 300 es\n","#extension GL_OVR_multiview2 : require","#define VIEW_ID gl_ViewID_OVR"].join("\n"))).replace("uniform mat4 viewMatrix;",["uniform mat4 viewMatrices["+T+"];","#define viewMatrix viewMatrices[VIEW_ID]"].join("\n")))}var z,L,P=s+v,R=Ao(u,35633,o+f),C=Ao(u,35632,P);if(u.attachShader(S,R),u.attachShader(S,C),void 0!==i.index0AttributeName?u.bindAttribLocation(S,0,i.index0AttributeName):!0===a.morphTargets&&u.bindAttribLocation(S,0,"position"),u.linkProgram(S),t.debug.checkShaderErrors){var O=u.getProgramInfoLog(S).trim(),I=u.getShaderInfoLog(R).trim(),D=u.getShaderInfoLog(C).trim(),N=!0,B=!0;if(!1===u.getProgramParameter(S,35714)){N=!1;var U=Po(u,R,"vertex"),F=Po(u,C,"fragment");console.error("THREE.WebGLProgram: shader error: ",u.getError(),"35715",u.getProgramParameter(S,35715),"gl.getProgramInfoLog",O,U,F)}else""!==O?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",O):""!==I&&""!==D||(B=!1);B&&(this.diagnostics={runnable:N,material:i,programLog:O,vertexShader:{log:I,prefix:o},fragmentShader:{log:D,prefix:s}})}return u.deleteShader(R),u.deleteShader(C),this.getUniforms=function(){return void 0===z&&(z=new Eo(u,S)),z},this.getAttributes=function(){return void 0===L&&(L=function(t,e){for(var n={},i=t.getProgramParameter(e,35721),r=0;r<i;r++){var a=t.getActiveAttrib(e,r).name;n[a]=t.getAttribLocation(e,a)}return n}(u,S)),L},this.destroy=function(){u.deleteProgram(S),this.program=void 0},this.name=r.name,this.id=zo++,this.cacheKey=n,this.usedTimes=1,this.program=S,this.vertexShader=R,this.fragmentShader=C,this.numMultiviewViews=T,this}function ko(t,e,n){var i=[],r=n.isWebGL2,a=n.logarithmicDepthBuffer,o=n.floatVertexTextures,s=n.precision,l=n.maxVertexUniforms,c=n.vertexTextures,h={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},u=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","numMultiviewViews","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen"];function q(t,e){var n;return t?t.isTexture?n=t.encoding:t.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),n=t.texture.encoding):n=Re,n===Re&&e&&(n=Oe),n}this.getParameters=function(e,i,u,m,d,p,f){var g=h[e.type],y=f.isSkinnedMesh?function(t){var e=t.skeleton.bones;if(o)return 1024;var n=l,i=Math.floor((n-20)/4),r=Math.min(i,e.length);return r<e.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+e.length+" bones. This GPU supports "+r+"."),0):r}(f):0;null!==e.precision&&(s=n.getMaxPrecision(e.precision))!==e.precision&&console.warn("THREE.WebGLProgram.getParameters:",e.precision,"not supported, using",s,"instead.");var _=t.getRenderTarget(),b=_&&_.isWebGLMultiviewRenderTarget?_.numViews:0;return{isWebGL2:r,shaderID:g,precision:s,instancing:!0===f.isInstancedMesh,supportsVertexTextures:c,numMultiviewViews:b,outputEncoding:q(_?_.texture:null,t.gammaOutput),map:!!e.map,mapEncoding:q(e.map,t.gammaInput),matcap:!!e.matcap,matcapEncoding:q(e.matcap,t.gammaInput),envMap:!!e.envMap,envMapMode:e.envMap&&e.envMap.mapping,envMapEncoding:q(e.envMap,t.gammaInput),envMapCubeUV:!!e.envMap&&(e.envMap.mapping===pt||e.envMap.mapping===ft),lightMap:!!e.lightMap,aoMap:!!e.aoMap,emissiveMap:!!e.emissiveMap,emissiveMapEncoding:q(e.emissiveMap,t.gammaInput),bumpMap:!!e.bumpMap,normalMap:!!e.normalMap,objectSpaceNormalMap:e.normalMapType===Ve,tangentSpaceNormalMap:e.normalMapType===Ge,clearcoatNormalMap:!!e.clearcoatNormalMap,displacementMap:!!e.displacementMap,roughnessMap:!!e.roughnessMap,metalnessMap:!!e.metalnessMap,specularMap:!!e.specularMap,alphaMap:!!e.alphaMap,gradientMap:!!e.gradientMap,sheen:!!e.sheen,combine:e.combine,vertexTangents:e.normalMap&&e.vertexTangents,vertexColors:e.vertexColors,vertexUvs:!!(e.map||e.bumpMap||e.normalMap||e.specularMap||e.alphaMap||e.emissiveMap||e.roughnessMap||e.metalnessMap||e.clearcoatNormalMap||e.displacementMap),uvsVertexOnly:!(e.map||e.bumpMap||e.normalMap||e.specularMap||e.alphaMap||e.emissiveMap||e.roughnessMap||e.metalnessMap||e.clearcoatNormalMap||!e.displacementMap),fog:!!m,useFog:e.fog,fogExp2:m&&m.isFogExp2,flatShading:e.flatShading,sizeAttenuation:e.sizeAttenuation,logarithmicDepthBuffer:a,skinning:e.skinning&&y>0,maxBones:y,useVertexTexture:o,morphTargets:e.morphTargets,morphNormals:e.morphNormals,maxMorphTargets:t.maxMorphTargets,maxMorphNormals:t.maxMorphNormals,numDirLights:i.directional.length,numPointLights:i.point.length,numSpotLights:i.spot.length,numRectAreaLights:i.rectArea.length,numHemiLights:i.hemi.length,numDirLightShadows:i.directionalShadowMap.length,numPointLightShadows:i.pointShadowMap.length,numSpotLightShadows:i.spotShadowMap.length,numClippingPlanes:d,numClipIntersection:p,dithering:e.dithering,shadowMapEnabled:t.shadowMap.enabled&&u.length>0,shadowMapType:t.shadowMap.type,toneMapping:e.toneMapped?t.toneMapping:it,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:e.premultipliedAlpha,alphaTest:e.alphaTest,doubleSided:e.side===x,flipSided:e.side===v,depthPacking:void 0!==e.depthPacking&&e.depthPacking}},this.getProgramCacheKey=function(e,n){var i=[];if(n.shaderID?i.push(n.shaderID):(i.push(e.fragmentShader),i.push(e.vertexShader)),void 0!==e.defines)for(var r in e.defines)i.push(r),i.push(e.defines[r]);for(var a=0;a<u.length;a++)i.push(n[u[a]]);return i.push(e.onBeforeCompile.toString()),i.push(t.gammaOutput),i.push(t.gammaFactor),i.join()},this.acquireProgram=function(n,r,a,o){for(var s,l=0,c=i.length;l<c;l++){var h=i[l];if(h.cacheKey===o){++(s=h).usedTimes;break}}return void 0===s&&(s=new jo(t,e,o,n,r,a),i.push(s)),s},this.releaseProgram=function(t){if(0==--t.usedTimes){var e=i.indexOf(t);i[e]=i[i.length-1],i.pop(),t.destroy()}},this.programs=i}function Wo(){var t=new WeakMap;return{get:function(e){var n=t.get(e);return void 0===n&&(n={},t.set(e,n)),n},remove:function(e){t.delete(e)},update:function(e,n,i){t.get(e)[n]=i},dispose:function(){t=new WeakMap}}}function Xo(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program!==e.program?t.program.id-e.program.id:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function Yo(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function Zo(){var t=[],e=0,n=[],i=[],r={id:-1};function a(n,i,a,o,s,l){var c=t[e];return void 0===c?(c={id:n.id,object:n,geometry:i,material:a,program:a.program||r,groupOrder:o,renderOrder:n.renderOrder,z:s,group:l},t[e]=c):(c.id=n.id,c.object=n,c.geometry=i,c.material=a,c.program=a.program||r,c.groupOrder=o,c.renderOrder=n.renderOrder,c.z=s,c.group=l),e++,c}return{opaque:n,transparent:i,init:function(){e=0,n.length=0,i.length=0},push:function(t,e,r,o,s,l){var c=a(t,e,r,o,s,l);(!0===r.transparent?i:n).push(c)},unshift:function(t,e,r,o,s,l){var c=a(t,e,r,o,s,l);(!0===r.transparent?i:n).unshift(c)},sort:function(){n.length>1&&n.sort(Xo),i.length>1&&i.sort(Yo)}}}function Jo(){var t=new WeakMap;function e(n){var i=n.target;i.removeEventListener("dispose",e),t.delete(i)}return{get:function(n,i){var r,a=t.get(n);return void 0===a?(r=new Zo,t.set(n,new WeakMap),t.get(n).set(i,r),n.addEventListener("dispose",e)):void 0===(r=a.get(i))&&(r=new Zo,a.set(i,r)),r},dispose:function(){t=new WeakMap}}}function Qo(){var t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];var n;switch(e.type){case"DirectionalLight":n={direction:new Mn,color:new Zi,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new yn};break;case"SpotLight":n={position:new Mn,direction:new Mn,color:new Zi,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new yn};break;case"PointLight":n={position:new Mn,color:new Zi,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new yn,shadowCameraNear:1,shadowCameraFar:1e3};break;case"HemisphereLight":n={direction:new Mn,skyColor:new Zi,groundColor:new Zi};break;case"RectAreaLight":n={color:new Zi,position:new Mn,halfWidth:new Mn,halfHeight:new Mn}}return t[e.id]=n,n}}}var Ko=0;function $o(t,e){return(e.castShadow?1:0)-(t.castShadow?1:0)}function ts(){for(var t=new Qo,e={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},n=0;n<9;n++)e.probe.push(new Mn);var i=new Mn,r=new Hn,a=new Hn;return{setup:function(n,o,s){for(var l=0,c=0,h=0,u=0;u<9;u++)e.probe[u].set(0,0,0);var q=0,m=0,d=0,p=0,f=0,v=0,x=0,g=0,y=s.matrixWorldInverse;n.sort($o),u=0;for(var _=n.length;u<_;u++){var b=n[u],w=b.color,M=b.intensity,S=b.distance,T=b.shadow&&b.shadow.map?b.shadow.map.texture:null;if(b.isAmbientLight)l+=w.r*M,c+=w.g*M,h+=w.b*M;else if(b.isLightProbe)for(var E=0;E<9;E++)e.probe[E].addScaledVector(b.sh.coefficients[E],M);else if(b.isDirectionalLight){if((z=t.get(b)).color.copy(b.color).multiplyScalar(b.intensity),z.direction.setFromMatrixPosition(b.matrixWorld),i.setFromMatrixPosition(b.target.matrixWorld),z.direction.sub(i),z.direction.transformDirection(y),z.shadow=b.castShadow,b.castShadow){var A=b.shadow;z.shadowBias=A.bias,z.shadowRadius=A.radius,z.shadowMapSize=A.mapSize,e.directionalShadowMap[q]=T,e.directionalShadowMatrix[q]=b.shadow.matrix,v++}e.directional[q]=z,q++}else if(b.isSpotLight){if((z=t.get(b)).position.setFromMatrixPosition(b.matrixWorld),z.position.applyMatrix4(y),z.color.copy(w).multiplyScalar(M),z.distance=S,z.direction.setFromMatrixPosition(b.matrixWorld),i.setFromMatrixPosition(b.target.matrixWorld),z.direction.sub(i),z.direction.transformDirection(y),z.coneCos=Math.cos(b.angle),z.penumbraCos=Math.cos(b.angle*(1-b.penumbra)),z.decay=b.decay,z.shadow=b.castShadow,b.castShadow){A=b.shadow;z.shadowBias=A.bias,z.shadowRadius=A.radius,z.shadowMapSize=A.mapSize,e.spotShadowMap[d]=T,e.spotShadowMatrix[d]=b.shadow.matrix,g++}e.spot[d]=z,d++}else if(b.isRectAreaLight){(z=t.get(b)).color.copy(w).multiplyScalar(M),z.position.setFromMatrixPosition(b.matrixWorld),z.position.applyMatrix4(y),a.identity(),r.copy(b.matrixWorld),r.premultiply(y),a.extractRotation(r),z.halfWidth.set(.5*b.width,0,0),z.halfHeight.set(0,.5*b.height,0),z.halfWidth.applyMatrix4(a),z.halfHeight.applyMatrix4(a),e.rectArea[p]=z,p++}else if(b.isPointLight){if((z=t.get(b)).position.setFromMatrixPosition(b.matrixWorld),z.position.applyMatrix4(y),z.color.copy(b.color).multiplyScalar(b.intensity),z.distance=b.distance,z.decay=b.decay,z.shadow=b.castShadow,b.castShadow){A=b.shadow;z.shadowBias=A.bias,z.shadowRadius=A.radius,z.shadowMapSize=A.mapSize,z.shadowCameraNear=A.camera.near,z.shadowCameraFar=A.camera.far,e.pointShadowMap[m]=T,e.pointShadowMatrix[m]=b.shadow.matrix,x++}e.point[m]=z,m++}else if(b.isHemisphereLight){var z;(z=t.get(b)).direction.setFromMatrixPosition(b.matrixWorld),z.direction.transformDirection(y),z.direction.normalize(),z.skyColor.copy(b.color).multiplyScalar(M),z.groundColor.copy(b.groundColor).multiplyScalar(M),e.hemi[f]=z,f++}}e.ambient[0]=l,e.ambient[1]=c,e.ambient[2]=h;var L=e.hash;L.directionalLength===q&&L.pointLength===m&&L.spotLength===d&&L.rectAreaLength===p&&L.hemiLength===f&&L.numDirectionalShadows===v&&L.numPointShadows===x&&L.numSpotShadows===g||(e.directional.length=q,e.spot.length=d,e.rectArea.length=p,e.point.length=m,e.hemi.length=f,e.directionalShadowMap.length=v,e.pointShadowMap.length=x,e.spotShadowMap.length=g,e.directionalShadowMatrix.length=v,e.pointShadowMatrix.length=x,e.spotShadowMatrix.length=g,L.directionalLength=q,L.pointLength=m,L.spotLength=d,L.rectAreaLength=p,L.hemiLength=f,L.numDirectionalShadows=v,L.numPointShadows=x,L.numSpotShadows=g,e.version=Ko++)},state:e}}function es(){var t=new ts,e=[],n=[];return{init:function(){e.length=0,n.length=0},state:{lightsArray:e,shadowsArray:n,lights:t},setupLights:function(i){t.setup(e,n,i)},pushLight:function(t){e.push(t)},pushShadow:function(t){n.push(t)}}}function ns(){var t=new WeakMap;function e(n){var i=n.target;i.removeEventListener("dispose",e),t.delete(i)}return{get:function(n,i){var r;return!1===t.has(n)?(r=new es,t.set(n,new WeakMap),t.get(n).set(i,r),n.addEventListener("dispose",e)):!1===t.get(n).has(i)?(r=new es,t.get(n).set(i,r)):r=t.get(n).get(i),r},dispose:function(){t=new WeakMap}}}function is(t){er.call(this),this.type="MeshDepthMaterial",this.depthPacking=Fe,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(t)}function rs(t){er.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new Mn,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(t)}is.prototype=Object.create(er.prototype),is.prototype.constructor=is,is.prototype.isMeshDepthMaterial=!0,is.prototype.copy=function(t){return er.prototype.copy.call(this,t),this.depthPacking=t.depthPacking,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this},rs.prototype=Object.create(er.prototype),rs.prototype.constructor=rs,rs.prototype.isMeshDistanceMaterial=!0,rs.prototype.copy=function(t){return er.prototype.copy.call(this,t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this};var as="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n  \n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = decodeHalfRGBA ( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = pow( squared_mean - mean * mean, 0.5 );\n  gl_FragColor = encodeHalfRGBA( vec2( mean, std_dev ) );\n}",os="void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";function ss(t,e,n){var i=new ua,r=new yn,a=new yn,o=new Pn,s=[],l=[],c={},h={0:v,1:f,2:x},u=new ea({defines:{SAMPLE_RATE:.25,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new yn},radius:{value:4}},vertexShader:os,fragmentShader:as}),q=u.clone();q.defines.HORIZONAL_PASS=1;var d=new br;d.setAttribute("position",new ir(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));var g=new Fr(d,u),y=this;function _(n,i){var r=e.update(g);u.uniforms.shadow_pass.value=n.map.texture,u.uniforms.resolution.value=n.mapSize,u.uniforms.radius.value=n.radius,t.setRenderTarget(n.mapPass),t.clear(),t.renderBufferDirect(i,null,r,u,g,null),q.uniforms.shadow_pass.value=n.mapPass.texture,q.uniforms.resolution.value=n.mapSize,q.uniforms.radius.value=n.radius,t.setRenderTarget(n.map),t.clear(),t.renderBufferDirect(i,null,r,q,g,null)}function b(t,e,n){var i=t<<0|e<<1|n<<2,r=s[i];return void 0===r&&(r=new is({depthPacking:He,morphTargets:t,skinning:e}),s[i]=r),r}function w(t,e,n){var i=t<<0|e<<1|n<<2,r=l[i];return void 0===r&&(r=new rs({morphTargets:t,skinning:e}),l[i]=r),r}function S(e,n,i,r,a,o){var s=e.geometry,l=null,u=b,q=e.customDepthMaterial;if(!0===i.isPointLight&&(u=w,q=e.customDistanceMaterial),void 0===q){var m=!1;!0===n.morphTargets&&(!0===s.isBufferGeometry?m=s.morphAttributes&&s.morphAttributes.position&&s.morphAttributes.position.length>0:!0===s.isGeometry&&(m=s.morphTargets&&s.morphTargets.length>0));var d=!1;!0===e.isSkinnedMesh&&(!0===n.skinning?d=!0:console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",e)),l=u(m,d,!0===e.isInstancedMesh)}else l=q;if(t.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length){var f=l.uuid,v=n.uuid,x=c[f];void 0===x&&(x={},c[f]=x);var g=x[v];void 0===g&&(g=l.clone(),x[v]=g),l=g}return l.visible=n.visible,l.wireframe=n.wireframe,l.side=o===p?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:h[n.side],l.clipShadows=n.clipShadows,l.clippingPlanes=n.clippingPlanes,l.clipIntersection=n.clipIntersection,l.wireframeLinewidth=n.wireframeLinewidth,l.linewidth=n.linewidth,!0===i.isPointLight&&!0===l.isMeshDistanceMaterial&&(l.referencePosition.setFromMatrixPosition(i.matrixWorld),l.nearDistance=r,l.farDistance=a),l}function T(n,r,a,o,s){if(!1!==n.visible){if(n.layers.test(r.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&s===p)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,n.matrixWorld);var l=e.update(n),c=n.material;if(Array.isArray(c))for(var h=l.groups,u=0,q=h.length;u<q;u++){var m=h[u],d=c[m.materialIndex];if(d&&d.visible){var f=S(n,d,o,a.near,a.far,s);t.renderBufferDirect(a,null,l,f,n,m)}}else if(c.visible){f=S(n,c,o,a.near,a.far,s);t.renderBufferDirect(a,null,l,f,n,null)}}for(var v=n.children,x=0,g=v.length;x<g;x++)T(v[x],r,a,o,s)}}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=m,this.render=function(e,s,l){if(!1!==y.enabled&&(!1!==y.autoUpdate||!1!==y.needsUpdate)&&0!==e.length){var c=t.getRenderTarget(),h=t.getActiveCubeFace(),u=t.getActiveMipmapLevel(),q=t.state;q.setBlending(M),q.buffers.color.setClear(1,1,1,1),q.buffers.depth.setTest(!0),q.setScissorTest(!1);for(var m=0,d=e.length;m<d;m++){var f=e[m],v=f.shadow;if(void 0!==v){r.copy(v.mapSize);var x=v.getFrameExtents();if(r.multiply(x),a.copy(v.mapSize),(r.x>n||r.y>n)&&(console.warn("THREE.WebGLShadowMap:",f,"has shadow exceeding max texture size, reducing"),r.x>n&&(a.x=Math.floor(n/x.x),r.x=a.x*x.x,v.mapSize.x=a.x),r.y>n&&(a.y=Math.floor(n/x.y),r.y=a.y*x.y,v.mapSize.y=a.y)),null===v.map&&!v.isPointLightShadow&&this.type===p){var g={minFilter:St,magFilter:St,format:jt};v.map=new Rn(r.x,r.y,g),v.map.texture.name=f.name+".shadowMap",v.mapPass=new Rn(r.x,r.y,g),v.camera.updateProjectionMatrix()}if(null===v.map){g={minFilter:yt,magFilter:yt,format:jt};v.map=new Rn(r.x,r.y,g),v.map.texture.name=f.name+".shadowMap",v.camera.updateProjectionMatrix()}t.setRenderTarget(v.map),t.clear();for(var b=v.getViewportCount(),w=0;w<b;w++){var S=v.getViewport(w);o.set(a.x*S.x,a.y*S.y,a.x*S.z,a.y*S.w),q.viewport(o),v.updateMatrices(f,w),i=v.getFrustum(),T(s,l,v.camera,f,this.type)}v.isPointLightShadow||this.type!==p||_(v,l)}else console.warn("THREE.WebGLShadowMap:",f,"has no shadow.")}y.needsUpdate=!1,t.setRenderTarget(c,h,u)}}}function ls(t,e,n){var i=n.isWebGL2;var r=new function(){var e=!1,n=new Pn,i=null,r=new Pn(0,0,0,0);return{setMask:function(n){i===n||e||(t.colorMask(n,n,n,n),i=n)},setLocked:function(t){e=t},setClear:function(e,i,a,o,s){!0===s&&(e*=o,i*=o,a*=o),n.set(e,i,a,o),!1===r.equals(n)&&(t.clearColor(e,i,a,o),r.copy(n))},reset:function(){e=!1,i=null,r.set(-1,0,0,0)}}},a=new function(){var e=!1,n=null,i=null,r=null;return{setTest:function(t){t?gt(2929):yt(2929)},setMask:function(i){n===i||e||(t.depthMask(i),n=i)},setFunc:function(e){if(i!==e){if(e)switch(e){case W:t.depthFunc(512);break;case X:t.depthFunc(519);break;case Y:t.depthFunc(513);break;case Z:t.depthFunc(515);break;case J:t.depthFunc(514);break;case Q:t.depthFunc(518);break;case K:t.depthFunc(516);break;case $:t.depthFunc(517);break;default:t.depthFunc(515)}else t.depthFunc(515);i=e}},setLocked:function(t){e=t},setClear:function(e){r!==e&&(t.clearDepth(e),r=e)},reset:function(){e=!1,n=null,i=null,r=null}}},c=new function(){var e=!1,n=null,i=null,r=null,a=null,o=null,s=null,l=null,c=null;return{setTest:function(t){e||(t?gt(2960):yt(2960))},setMask:function(i){n===i||e||(t.stencilMask(i),n=i)},setFunc:function(e,n,o){i===e&&r===n&&a===o||(t.stencilFunc(e,n,o),i=e,r=n,a=o)},setOp:function(e,n,i){o===e&&s===n&&l===i||(t.stencilOp(e,n,i),o=e,s=n,l=i)},setLocked:function(t){e=t},setClear:function(e){c!==e&&(t.clearStencil(e),c=e)},reset:function(){e=!1,n=null,i=null,r=null,a=null,o=null,s=null,l=null,c=null}}},h=t.getParameter(34921),u=new Uint8Array(h),q=new Uint8Array(h),m=new Uint8Array(h),d={},p=null,f=null,g=null,y=null,_=null,b=null,w=null,tt=null,et=null,nt=!1,it=null,rt=null,at=null,ot=null,st=null,lt=t.getParameter(35661),ct=!1,ht=0,ut=t.getParameter(7938);-1!==ut.indexOf("WebGL")?(ht=parseFloat(/^WebGL\ ([0-9])/.exec(ut)[1]),ct=ht>=1):-1!==ut.indexOf("OpenGL ES")&&(ht=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(ut)[1]),ct=ht>=2);var qt=null,mt={},dt=new Pn,pt=new Pn;function ft(e,n,i){var r=new Uint8Array(4),a=t.createTexture();t.bindTexture(e,a),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(var o=0;o<i;o++)t.texImage2D(n+o,0,6408,1,1,0,6408,5121,r);return a}var vt={};function xt(n,r){(u[n]=1,0===q[n]&&(t.enableVertexAttribArray(n),q[n]=1),m[n]!==r)&&((i?t:e.get("ANGLE_instanced_arrays"))[i?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,r),m[n]=r)}function gt(e){!0!==d[e]&&(t.enable(e),d[e]=!0)}function yt(e){!1!==d[e]&&(t.disable(e),d[e]=!1)}vt[3553]=ft(3553,3553,1),vt[34067]=ft(34067,34069,6),r.setClear(0,0,0,1),a.setClear(1),c.setClear(0),gt(2929),a.setFunc(Z),St(!1),Tt(s),gt(2884),Mt(M);var _t={[L]:32774,[P]:32778,[R]:32779};if(i)_t[C]=32775,_t[O]=32776;else{var bt=e.get("EXT_blend_minmax");null!==bt&&(_t[C]=bt.MIN_EXT,_t[O]=bt.MIN_EXT)}var wt={[I]:0,[D]:1,[N]:768,[U]:770,[k]:776,[V]:774,[H]:772,[B]:769,[F]:771,[j]:775,[G]:773};function Mt(e,n,i,r,a,o,s,l){if(e!==M){if(f||(gt(3042),f=!0),e===z)a=a||n,o=o||i,s=s||r,n===y&&a===w||(t.blendEquationSeparate(_t[n],_t[a]),y=n,w=a),i===_&&r===b&&o===tt&&s===et||(t.blendFuncSeparate(wt[i],wt[r],wt[o],wt[s]),_=i,b=r,tt=o,et=s),g=e,nt=null;else if(e!==g||l!==nt){if(y===L&&w===L||(t.blendEquation(32774),y=L,w=L),l)switch(e){case S:t.blendFuncSeparate(1,771,1,771);break;case T:t.blendFunc(1,1);break;case E:t.blendFuncSeparate(0,0,769,771);break;case A:t.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case S:t.blendFuncSeparate(770,771,1,771);break;case T:t.blendFunc(770,1);break;case E:t.blendFunc(0,769);break;case A:t.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}_=null,b=null,tt=null,et=null,g=e,nt=l}}else f&&(yt(3042),f=!1)}function St(e){it!==e&&(e?t.frontFace(2304):t.frontFace(2305),it=e)}function Tt(e){e!==o?(gt(2884),e!==rt&&(e===s?t.cullFace(1029):e===l?t.cullFace(1028):t.cullFace(1032))):yt(2884),rt=e}function Et(e,n,i){e?(gt(32823),ot===n&&st===i||(t.polygonOffset(n,i),ot=n,st=i)):yt(32823)}function At(e){void 0===e&&(e=33984+lt-1),qt!==e&&(t.activeTexture(e),qt=e)}return{buffers:{color:r,depth:a,stencil:c},initAttributes:function(){for(var t=0,e=u.length;t<e;t++)u[t]=0},enableAttribute:function(t){xt(t,0)},enableAttributeAndDivisor:xt,disableUnusedAttributes:function(){for(var e=0,n=q.length;e!==n;++e)q[e]!==u[e]&&(t.disableVertexAttribArray(e),q[e]=0)},enable:gt,disable:yt,useProgram:function(e){return p!==e&&(t.useProgram(e),p=e,!0)},setBlending:Mt,setMaterial:function(t,e){t.side===x?yt(2884):gt(2884);var n=t.side===v;e&&(n=!n),St(n),t.blending===S&&!1===t.transparent?Mt(M):Mt(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),a.setFunc(t.depthFunc),a.setTest(t.depthTest),a.setMask(t.depthWrite),r.setMask(t.colorWrite);var i=t.stencilWrite;c.setTest(i),i&&(c.setMask(t.stencilWriteMask),c.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),c.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),Et(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits)},setFlipSided:St,setCullFace:Tt,setLineWidth:function(e){e!==at&&(ct&&t.lineWidth(e),at=e)},setPolygonOffset:Et,setScissorTest:function(t){t?gt(3089):yt(3089)},activeTexture:At,bindTexture:function(e,n){null===qt&&At();var i=mt[qt];void 0===i&&(i={type:void 0,texture:void 0},mt[qt]=i),i.type===e&&i.texture===n||(t.bindTexture(e,n||vt[e]),i.type=e,i.texture=n)},unbindTexture:function(){var e=mt[qt];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===dt.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),dt.copy(e))},viewport:function(e){!1===pt.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),pt.copy(e))},reset:function(){for(var e=0;e<q.length;e++)1===q[e]&&(t.disableVertexAttribArray(e),q[e]=0);d={},qt=null,mt={},p=null,g=null,it=null,rt=null,r.reset(),a.reset(),c.reset()}}}function cs(t,e,n,i,r,a,o){var s,l=r.isWebGL2,c=r.maxTextures,h=r.maxCubemapSize,u=r.maxTextureSize,q=r.maxSamples,m=new WeakMap,d="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d");function p(t,e){return d?new OffscreenCanvas(t,e):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function f(t,e,n,i){var r=1;if((t.width>i||t.height>i)&&(r=i/Math.max(t.width,t.height)),r<1||!0===e){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){var a=e?gn.floorPowerOfTwo:Math.floor,o=a(r*t.width),l=a(r*t.height);void 0===s&&(s=p(o,l));var c=n?p(o,l):s;return c.width=o,c.height=l,c.getContext("2d").drawImage(t,0,0,o,l),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+t.width+"x"+t.height+") to ("+o+"x"+l+")."),c}return"data"in t&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+t.width+"x"+t.height+")."),t}return t}function v(t){return gn.isPowerOfTwo(t.width)&&gn.isPowerOfTwo(t.height)}function x(t,e){return t.generateMipmaps&&e&&t.minFilter!==yt&&t.minFilter!==St}function g(e,n,r,a){t.generateMipmap(e),i.get(n).__maxMipLevel=Math.log(Math.max(r,a))*Math.LOG2E}function y(t,n){if(!1===l)return t;var i=t;return 6403===t&&(5126===n&&(i=33326),5131===n&&(i=33325),5121===n&&(i=33321)),6407===t&&(5126===n&&(i=34837),5131===n&&(i=34843),5121===n&&(i=32849)),6408===t&&(5126===n&&(i=34836),5131===n&&(i=34842),5121===n&&(i=32856)),33325===i||33326===i||34842===i||34836===i?e.get("EXT_color_buffer_float"):34843!==i&&34837!==i||console.warn("THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead."),i}function _(t){return t===yt||t===_t||t===wt?9728:9729}function b(e){var n=e.target;n.removeEventListener("dispose",b),function(e){var n=i.get(e);if(void 0===n.__webglInit)return;t.deleteTexture(n.__webglTexture),i.remove(e)}(n),n.isVideoTexture&&m.delete(n),o.memory.textures--}function w(e){var n=e.target;n.removeEventListener("dispose",w),function(e){var n=i.get(e),r=i.get(e.texture);if(!e)return;void 0!==r.__webglTexture&&t.deleteTexture(r.__webglTexture);e.depthTexture&&e.depthTexture.dispose();if(e.isWebGLRenderTargetCube)for(var a=0;a<6;a++)t.deleteFramebuffer(n.__webglFramebuffer[a]),n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer[a]);else t.deleteFramebuffer(n.__webglFramebuffer),n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer);if(e.isWebGLMultiviewRenderTarget){t.deleteTexture(n.__webglColorTexture),t.deleteTexture(n.__webglDepthStencilTexture),o.memory.textures-=2;a=0;for(var s=n.__webglViewFramebuffers.length;a<s;a++)t.deleteFramebuffer(n.__webglViewFramebuffers[a])}i.remove(e.texture),i.remove(e)}(n),o.memory.textures--}var M=0;function S(t,e){var r=i.get(t);if(t.isVideoTexture&&function(t){var e=o.render.frame;m.get(t)!==e&&(m.set(t,e),t.update())}(t),t.version>0&&r.__version!==t.version){var a=t.image;if(void 0===a)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==a.complete)return void R(r,t,e);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.activeTexture(33984+e),n.bindTexture(3553,r.__webglTexture)}function T(e,r){if(6===e.image.length){var o=i.get(e);if(e.version>0&&o.__version!==e.version){P(o,e),n.activeTexture(33984+r),n.bindTexture(34067,o.__webglTexture),t.pixelStorei(37440,e.flipY);for(var s=e&&e.isCompressedTexture,c=e.image[0]&&e.image[0].isDataTexture,u=[],q=0;q<6;q++)u[q]=s||c?c?e.image[q].image:e.image[q]:f(e.image[q],!1,!0,h);var m,d=u[0],p=v(d)||l,_=a.convert(e.format),b=a.convert(e.type),w=y(_,b);if(L(34067,e,p),s){for(q=0;q<6;q++){m=u[q].mipmaps;for(var M=0;M<m.length;M++){var S=m[M];e.format!==jt&&e.format!==Vt?null!==_?n.compressedTexImage2D(34069+q,M,w,S.width,S.height,0,S.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):n.texImage2D(34069+q,M,w,S.width,S.height,0,_,b,S.data)}}o.__maxMipLevel=m.length-1}else{m=e.mipmaps;for(q=0;q<6;q++)if(c){n.texImage2D(34069+q,0,w,u[q].width,u[q].height,0,_,b,u[q].data);for(M=0;M<m.length;M++){var T=(S=m[M]).image[q].image;n.texImage2D(34069+q,M+1,w,T.width,T.height,0,_,b,T.data)}}else{n.texImage2D(34069+q,0,w,_,b,u[q]);for(M=0;M<m.length;M++){S=m[M];n.texImage2D(34069+q,M+1,w,_,b,S.image[q])}}o.__maxMipLevel=m.length}x(e,p)&&g(34067,e,d.width,d.height),o.__version=e.version,e.onUpdate&&e.onUpdate(e)}else n.activeTexture(33984+r),n.bindTexture(34067,o.__webglTexture)}}function E(t,e){n.activeTexture(33984+e),n.bindTexture(34067,i.get(t).__webglTexture)}var A={[vt]:10497,[xt]:33071,[gt]:33648},z={[yt]:9728,[_t]:9984,[wt]:9986,[St]:9729,[Tt]:9985,[At]:9987};function L(n,a,o){o?(t.texParameteri(n,10242,A[a.wrapS]),t.texParameteri(n,10243,A[a.wrapT]),32879!==n&&35866!==n||t.texParameteri(n,32882,A[a.wrapR]),t.texParameteri(n,10240,z[a.magFilter]),t.texParameteri(n,10241,z[a.minFilter])):(t.texParameteri(n,10242,33071),t.texParameteri(n,10243,33071),32879!==n&&35866!==n||t.texParameteri(n,32882,33071),a.wrapS===xt&&a.wrapT===xt||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(n,10240,_(a.magFilter)),t.texParameteri(n,10241,_(a.minFilter)),a.minFilter!==yt&&a.minFilter!==St&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));var s=e.get("EXT_texture_filter_anisotropic");if(s){if(a.type===Dt&&null===e.get("OES_texture_float_linear"))return;if(a.type===Nt&&null===(l||e.get("OES_texture_half_float_linear")))return;(a.anisotropy>1||i.get(a).__currentAnisotropy)&&(t.texParameterf(n,s.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,r.getMaxAnisotropy())),i.get(a).__currentAnisotropy=a.anisotropy)}}function P(e,n){void 0===e.__webglInit&&(e.__webglInit=!0,n.addEventListener("dispose",b),e.__webglTexture=t.createTexture(),o.memory.textures++)}function R(e,i,r){var o=3553;i.isDataTexture2DArray&&(o=35866),i.isDataTexture3D&&(o=32879),P(e,i),n.activeTexture(33984+r),n.bindTexture(o,e.__webglTexture),t.pixelStorei(37440,i.flipY),t.pixelStorei(37441,i.premultiplyAlpha),t.pixelStorei(3317,i.unpackAlignment);var s=function(t){return!l&&(t.wrapS!==xt||t.wrapT!==xt||t.minFilter!==yt&&t.minFilter!==St)}(i)&&!1===v(i.image),c=f(i.image,s,!1,u),h=v(c)||l,q=a.convert(i.format),m=a.convert(i.type),d=y(q,m);L(o,i,h);var p,_=i.mipmaps;if(i.isDepthTexture){if(d=6402,i.type===Dt){if(!1===l)throw new Error("Float Depth Texture only supported in WebGL2.0");d=36012}else l&&(d=33189);i.format===Yt&&6402===d&&i.type!==Ct&&i.type!==It&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),i.type=Ct,m=a.convert(i.type)),i.format===Zt&&(d=34041,i.type!==Ht&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),i.type=Ht,m=a.convert(i.type))),n.texImage2D(3553,0,d,c.width,c.height,0,q,m,null)}else if(i.isDataTexture)if(_.length>0&&h){for(var b=0,w=_.length;b<w;b++)p=_[b],n.texImage2D(3553,b,d,p.width,p.height,0,q,m,p.data);i.generateMipmaps=!1,e.__maxMipLevel=_.length-1}else n.texImage2D(3553,0,d,c.width,c.height,0,q,m,c.data),e.__maxMipLevel=0;else if(i.isCompressedTexture){for(b=0,w=_.length;b<w;b++)p=_[b],i.format!==jt&&i.format!==Vt?null!==q?n.compressedTexImage2D(3553,b,d,p.width,p.height,0,p.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texImage2D(3553,b,d,p.width,p.height,0,q,m,p.data);e.__maxMipLevel=_.length-1}else if(i.isDataTexture2DArray)n.texImage3D(35866,0,d,c.width,c.height,c.depth,0,q,m,c.data),e.__maxMipLevel=0;else if(i.isDataTexture3D)n.texImage3D(32879,0,d,c.width,c.height,c.depth,0,q,m,c.data),e.__maxMipLevel=0;else if(_.length>0&&h){for(b=0,w=_.length;b<w;b++)p=_[b],n.texImage2D(3553,b,d,q,m,p);i.generateMipmaps=!1,e.__maxMipLevel=_.length-1}else n.texImage2D(3553,0,d,q,m,c),e.__maxMipLevel=0;x(i,h)&&g(3553,i,c.width,c.height),e.__version=i.version,i.onUpdate&&i.onUpdate(i)}function C(e,r,o,s){var l=a.convert(r.texture.format),c=a.convert(r.texture.type),h=y(l,c);n.texImage2D(s,0,h,r.width,r.height,0,l,c,null),t.bindFramebuffer(36160,e),t.framebufferTexture2D(36160,o,s,i.get(r.texture).__webglTexture,0),t.bindFramebuffer(36160,null)}function O(e,n,i){if(t.bindRenderbuffer(36161,e),n.depthBuffer&&!n.stencilBuffer){if(i){var r=D(n);t.renderbufferStorageMultisample(36161,r,33189,n.width,n.height)}else t.renderbufferStorage(36161,33189,n.width,n.height);t.framebufferRenderbuffer(36160,36096,36161,e)}else if(n.depthBuffer&&n.stencilBuffer){if(i){r=D(n);t.renderbufferStorageMultisample(36161,r,35056,n.width,n.height)}else t.renderbufferStorage(36161,34041,n.width,n.height);t.framebufferRenderbuffer(36160,33306,36161,e)}else{var o=y(a.convert(n.texture.format),a.convert(n.texture.type));if(i){r=D(n);t.renderbufferStorageMultisample(36161,r,o,n.width,n.height)}else t.renderbufferStorage(36161,o,n.width,n.height)}t.bindRenderbuffer(36161,null)}function I(e){var n=i.get(e),r=!0===e.isWebGLRenderTargetCube;if(e.depthTexture){if(r)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,n){if(n&&n.isWebGLRenderTargetCube)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(36160,e),!n.depthTexture||!n.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");i.get(n.depthTexture).__webglTexture&&n.depthTexture.image.width===n.width&&n.depthTexture.image.height===n.height||(n.depthTexture.image.width=n.width,n.depthTexture.image.height=n.height,n.depthTexture.needsUpdate=!0),S(n.depthTexture,0);var r=i.get(n.depthTexture).__webglTexture;if(n.depthTexture.format===Yt)t.framebufferTexture2D(36160,36096,3553,r,0);else{if(n.depthTexture.format!==Zt)throw new Error("Unknown depthTexture format");t.framebufferTexture2D(36160,33306,3553,r,0)}}(n.__webglFramebuffer,e)}else if(r){n.__webglDepthbuffer=[];for(var a=0;a<6;a++)t.bindFramebuffer(36160,n.__webglFramebuffer[a]),n.__webglDepthbuffer[a]=t.createRenderbuffer(),O(n.__webglDepthbuffer[a],e)}else t.bindFramebuffer(36160,n.__webglFramebuffer),n.__webglDepthbuffer=t.createRenderbuffer(),O(n.__webglDepthbuffer,e);t.bindFramebuffer(36160,null)}function D(t){return l&&t.isWebGLMultisampleRenderTarget?Math.min(q,t.samples):0}var N=!1,B=!1;this.allocateTextureUnit=function(){var t=M;return t>=c&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+c),M+=1,t},this.resetTextureUnits=function(){M=0},this.setTexture2D=S,this.setTexture2DArray=function(t,e){var r=i.get(t);t.version>0&&r.__version!==t.version?R(r,t,e):(n.activeTexture(33984+e),n.bindTexture(35866,r.__webglTexture))},this.setTexture3D=function(t,e){var r=i.get(t);t.version>0&&r.__version!==t.version?R(r,t,e):(n.activeTexture(33984+e),n.bindTexture(32879,r.__webglTexture))},this.setTextureCube=T,this.setTextureCubeDynamic=E,this.setupRenderTarget=function(r){var s=i.get(r),c=i.get(r.texture);r.addEventListener("dispose",w),c.__webglTexture=t.createTexture(),o.memory.textures++;var h=!0===r.isWebGLRenderTargetCube,u=!0===r.isWebGLMultisampleRenderTarget,q=!0===r.isWebGLMultiviewRenderTarget,m=v(r)||l;if(h){s.__webglFramebuffer=[];for(var d=0;d<6;d++)s.__webglFramebuffer[d]=t.createFramebuffer()}else if(s.__webglFramebuffer=t.createFramebuffer(),u)if(l){s.__webglMultisampledFramebuffer=t.createFramebuffer(),s.__webglColorRenderbuffer=t.createRenderbuffer(),t.bindRenderbuffer(36161,s.__webglColorRenderbuffer);var p=y(a.convert(r.texture.format),a.convert(r.texture.type)),f=D(r);t.renderbufferStorageMultisample(36161,f,p,r.width,r.height),t.bindFramebuffer(36160,s.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064,36161,s.__webglColorRenderbuffer),t.bindRenderbuffer(36161,null),r.depthBuffer&&(s.__webglDepthRenderbuffer=t.createRenderbuffer(),O(s.__webglDepthRenderbuffer,r,!0)),t.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");else if(q){var _=r.width,b=r.height,M=r.numViews;t.bindFramebuffer(36160,s.__webglFramebuffer);var S=e.get("OVR_multiview2");o.memory.textures+=2;var T=t.createTexture();t.bindTexture(35866,T),t.texParameteri(35866,10240,9728),t.texParameteri(35866,10241,9728),t.texImage3D(35866,0,32856,_,b,M,0,6408,5121,null),S.framebufferTextureMultiviewOVR(36160,36064,T,0,0,M);var E=t.createTexture();t.bindTexture(35866,E),t.texParameteri(35866,10240,9728),t.texParameteri(35866,10241,9728),t.texImage3D(35866,0,35056,_,b,M,0,34041,34042,null),S.framebufferTextureMultiviewOVR(36160,33306,E,0,0,M);var A=new Array(M);for(d=0;d<M;++d)A[d]=t.createFramebuffer(),t.bindFramebuffer(36160,A[d]),t.framebufferTextureLayer(36160,36064,T,0,d);s.__webglColorTexture=T,s.__webglDepthStencilTexture=E,s.__webglViewFramebuffers=A,t.bindFramebuffer(36160,null),t.bindTexture(35866,null)}if(h){n.bindTexture(34067,c.__webglTexture),L(34067,r.texture,m);for(d=0;d<6;d++)C(s.__webglFramebuffer[d],r,36064,34069+d);x(r.texture,m)&&g(34067,r.texture,r.width,r.height),n.bindTexture(34067,null)}else q||(n.bindTexture(3553,c.__webglTexture),L(3553,r.texture,m),C(s.__webglFramebuffer,r,36064,3553),x(r.texture,m)&&g(3553,r.texture,r.width,r.height),n.bindTexture(3553,null));r.depthBuffer&&I(r)},this.updateRenderTargetMipmap=function(t){var e=t.texture;if(x(e,v(t)||l)){var r=t.isWebGLRenderTargetCube?34067:3553,a=i.get(e).__webglTexture;n.bindTexture(r,a),g(r,e,t.width,t.height),n.bindTexture(r,null)}},this.updateMultisampleRenderTarget=function(e){if(e.isWebGLMultisampleRenderTarget)if(l){var n=i.get(e);t.bindFramebuffer(36008,n.__webglMultisampledFramebuffer),t.bindFramebuffer(36009,n.__webglFramebuffer);var r=e.width,a=e.height,o=16384;e.depthBuffer&&(o|=256),e.stencilBuffer&&(o|=1024),t.blitFramebuffer(0,0,r,a,0,0,r,a,o,9728)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(t,e){t&&t.isWebGLRenderTarget&&(!1===N&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),N=!0),t=t.texture),S(t,e)},this.safeSetTextureCube=function(t,e){t&&t.isWebGLRenderTargetCube&&(!1===B&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),B=!0),t=t.texture),t&&t.isCubeTexture||Array.isArray(t.image)&&6===t.image.length?T(t,e):E(t,e)}}function hs(t,e,n){var i=n.isWebGL2;return{convert:function(t){var n;if(t===Lt)return 5121;if(t===Bt)return 32819;if(t===Ut)return 32820;if(t===Ft)return 33635;if(t===Pt)return 5120;if(t===Rt)return 5122;if(t===Ct)return 5123;if(t===Ot)return 5124;if(t===It)return 5125;if(t===Dt)return 5126;if(t===Nt)return i?5131:null!==(n=e.get("OES_texture_half_float"))?n.HALF_FLOAT_OES:null;if(t===Gt)return 6406;if(t===Vt)return 6407;if(t===jt)return 6408;if(t===kt)return 6409;if(t===Wt)return 6410;if(t===Yt)return 6402;if(t===Zt)return 34041;if(t===Jt)return 6403;if(t===Qt||t===Kt||t===$t||t===te){if(null===(n=e.get("WEBGL_compressed_texture_s3tc")))return null;if(t===Qt)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===Kt)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===$t)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===te)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(t===ee||t===ne||t===ie||t===re){if(null===(n=e.get("WEBGL_compressed_texture_pvrtc")))return null;if(t===ee)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===ne)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===ie)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===re)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}return t===ae?null!==(n=e.get("WEBGL_compressed_texture_etc1"))?n.COMPRESSED_RGB_ETC1_WEBGL:null:t===oe||t===se||t===le||t===ce||t===he||t===ue||t===qe||t===me||t===de||t===pe||t===fe||t===ve||t===xe||t===ge?null!==(n=e.get("WEBGL_compressed_texture_astc"))?t:null:t===Ht?i?34042:null!==(n=e.get("WEBGL_depth_texture"))?n.UNSIGNED_INT_24_8_WEBGL:null:void 0}}}function us(t,e,n,i){Rn.call(this,t,e,i),this.depthBuffer=!1,this.stencilBuffer=!1,this.numViews=n}function qs(t,e){var n,i,r,a,o,s,l,c=2,h=t.extensions,u=t.properties,q=0;function m(t){return t.isArrayCamera?t.cameras:(o[0]=t,o)}this.isAvailable=function(){if(void 0===l){var t=h.get("OVR_multiview2");if(l=null!==t&&!1===e.getContextAttributes().antialias){q=e.getParameter(t.MAX_VIEWS_OVR),n=new us(0,0,c),s=new yn,a=[],r=[],o=[];for(var i=0;i<q;i++)a[i]=new Hn,r[i]=new En}}return l},this.attachCamera=function(e){!1!==function(t){if(void 0===t.isArrayCamera)return!0;var e=t.cameras;if(e.length>q)return!1;for(var n=1,i=e.length;n<i;n++)if(e[0].viewport.z!==e[n].viewport.z||e[0].viewport.w!==e[n].viewport.w)return!1;return!0}(e)&&(i=t.getRenderTarget(),function(e){if(i?s.set(i.width,i.height):t.getDrawingBufferSize(s),e.isArrayCamera){var r=e.cameras[0].viewport;n.setSize(r.z,r.w),n.setNumViews(e.cameras.length)}else n.setSize(s.x,s.y),n.setNumViews(c)}(e),t.setRenderTarget(n))},this.detachCamera=function(r){n===t.getRenderTarget()&&(t.setRenderTarget(i),function(t){var i=n,r=i.numViews,a=u.get(i).__webglViewFramebuffers,o=i.width,l=i.height;if(t.isArrayCamera)for(var c=0;c<r;c++){var h=t.cameras[c].viewport,q=h.x,m=h.y,d=q+h.z,p=m+h.w;e.bindFramebuffer(36008,a[c]),e.blitFramebuffer(0,0,o,l,q,m,d,p,16384,9728)}else e.bindFramebuffer(36008,a[0]),e.blitFramebuffer(0,0,o,l,0,0,s.x,s.y,16384,9728)}(r))},this.updateCameraProjectionMatricesUniform=function(t,n){for(var i=m(t),r=0;r<i.length;r++)a[r].copy(i[r].projectionMatrix);n.setValue(e,"projectionMatrices",a)},this.updateCameraViewMatricesUniform=function(t,n){for(var i=m(t),r=0;r<i.length;r++)a[r].copy(i[r].matrixWorldInverse);n.setValue(e,"viewMatrices",a)},this.updateObjectMatricesUniforms=function(t,n,i){for(var o=m(n),s=0;s<o.length;s++)a[s].multiplyMatrices(o[s].matrixWorldInverse,t.matrixWorld),r[s].getNormalMatrix(a[s]);i.setValue(e,"modelViewMatrices",a),i.setValue(e,"normalMatrices",r)}}function ms(){ai.call(this),this.type="Group"}function ds(t){ia.call(this),this.cameras=t||[]}us.prototype=Object.assign(Object.create(Rn.prototype),{constructor:us,isWebGLMultiviewRenderTarget:!0,copy:function(t){return Rn.prototype.copy.call(this,t),this.numViews=t.numViews,this},setNumViews:function(t){return this.numViews!==t&&(this.numViews=t,this.dispose()),this}}),ms.prototype=Object.assign(Object.create(ai.prototype),{constructor:ms,isGroup:!0}),ds.prototype=Object.assign(Object.create(ia.prototype),{constructor:ds,isArrayCamera:!0});var ps,fs=new Mn,vs=new Mn;function xs(t,e,n){fs.setFromMatrixPosition(e.matrixWorld),vs.setFromMatrixPosition(n.matrixWorld);var i=fs.distanceTo(vs),r=e.projectionMatrix.elements,a=n.projectionMatrix.elements,o=r[14]/(r[10]-1),s=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],h=(r[8]-1)/r[0],u=(a[8]+1)/a[0],q=o*h,m=o*u,d=i/(-h+u),p=d*-h;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(p),t.translateZ(d),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.getInverse(t.matrixWorld);var f=o+d,v=s+d,x=q-p,g=m+(i-p),y=l*s/v*f,_=c*s/v*f;t.projectionMatrix.makePerspective(x,g,y,_,f,v)}function gs(t){var e,n,i=this,r=null,a=null,o=null,s=[],l=new Hn,c=new Hn,h=1,u="local-floor";"undefined"!=typeof window&&"VRFrameData"in window&&(a=new window.VRFrameData,window.addEventListener("vrdisplaypresentchange",_,!1));var q=new Hn,m=new _n,d=new Mn,p=new ia;p.viewport=new Pn,p.layers.enable(1);var f=new ia;f.viewport=new Pn,f.layers.enable(2);var v=new ds([p,f]);function x(){return null!==r&&!0===r.isPresenting}v.layers.enable(1),v.layers.enable(2);var g,y=new yn;function _(){if(x()){var a=r.getEyeParameters("left");e=2*a.renderWidth*h,n=a.renderHeight*h,g=t.getPixelRatio(),t.getSize(y),t.setDrawingBufferSize(e,n,1),p.viewport.set(0,0,e/2,n),f.viewport.set(e/2,0,e/2,n),S.start(),i.dispatchEvent({type:"sessionstart"})}else i.enabled&&t.setDrawingBufferSize(y.width,y.height,g),S.stop(),i.dispatchEvent({type:"sessionend"})}var b=[];function w(t){for(var e=navigator.getGamepads&&navigator.getGamepads(),n=0,i=e.length;n<i;n++){var r=e[n];if(r&&("Daydream Controller"===r.id||"Gear VR Controller"===r.id||"Oculus Go Controller"===r.id||"OpenVR Gamepad"===r.id||r.id.startsWith("Oculus Touch")||r.id.startsWith("HTC Vive Focus")||r.id.startsWith("Spatial Controller"))){var a=r.hand;if(0===t&&(""===a||"right"===a))return r;if(1===t&&"left"===a)return r}}}function M(t,i){null!==i&&4===i.length&&t.set(i[0]*e,i[1]*n,i[2]*e,i[3]*n)}this.enabled=!1,this.getController=function(t){var e=s[t];return void 0===e&&((e=new ms).matrixAutoUpdate=!1,e.visible=!1,s[t]=e),e},this.getDevice=function(){return r},this.setDevice=function(t){void 0!==t&&(r=t),S.setContext(t)},this.setFramebufferScaleFactor=function(t){h=t},this.setReferenceSpaceType=function(t){u=t},this.setPoseTarget=function(t){void 0!==t&&(o=t)},this.getCamera=function(t){var e="local-floor"===u?1.6:0;if(!1===x())return t.position.set(0,e,0),t.rotation.set(0,0,0),t;if(r.depthNear=t.near,r.depthFar=t.far,r.getFrameData(a),"local-floor"===u){var n=r.stageParameters;n?l.fromArray(n.sittingToStandingTransform):l.makeTranslation(0,e,0)}var i=a.pose,h=null!==o?o:t;h.matrix.copy(l),h.matrix.decompose(h.position,h.quaternion,h.scale),null!==i.orientation&&(m.fromArray(i.orientation),h.quaternion.multiply(m)),null!==i.position&&(m.setFromRotationMatrix(l),d.fromArray(i.position),d.applyQuaternion(m),h.position.add(d)),h.updateMatrixWorld(),p.near=t.near,f.near=t.near,p.far=t.far,f.far=t.far,p.matrixWorldInverse.fromArray(a.leftViewMatrix),f.matrixWorldInverse.fromArray(a.rightViewMatrix),c.getInverse(l),"local-floor"===u&&(p.matrixWorldInverse.multiply(c),f.matrixWorldInverse.multiply(c));var g=h.parent;null!==g&&(q.getInverse(g.matrixWorld),p.matrixWorldInverse.multiply(q),f.matrixWorldInverse.multiply(q)),p.matrixWorld.getInverse(p.matrixWorldInverse),f.matrixWorld.getInverse(f.matrixWorldInverse),p.projectionMatrix.fromArray(a.leftProjectionMatrix),f.projectionMatrix.fromArray(a.rightProjectionMatrix),xs(v,p,f);var y=r.getLayers();if(y.length){var _=y[0];M(p.viewport,_.leftBounds),M(f.viewport,_.rightBounds)}return function(){for(var t=0;t<s.length;t++){var e=s[t],n=w(t);if(void 0!==n&&void 0!==n.pose){if(null===n.pose)return;var i=n.pose;!1===i.hasPosition&&e.position.set(.2,-.6,-.05),null!==i.position&&e.position.fromArray(i.position),null!==i.orientation&&e.quaternion.fromArray(i.orientation),e.matrix.compose(e.position,e.quaternion,e.scale),e.matrix.premultiply(l),e.matrix.decompose(e.position,e.quaternion,e.scale),e.matrixWorldNeedsUpdate=!0,e.visible=!0;var r="Daydream Controller"===n.id?0:1;void 0===b[t]&&(b[t]=!1),b[t]!==n.buttons[r].pressed&&(b[t]=n.buttons[r].pressed,!0===b[t]?e.dispatchEvent({type:"selectstart"}):(e.dispatchEvent({type:"selectend"}),e.dispatchEvent({type:"select"})))}else e.visible=!1}}(),v},this.getStandingMatrix=function(){return l},this.isPresenting=x;var S=new pa;this.setAnimationLoop=function(t){S.setAnimationLoop(t),x()&&S.start()},this.submitFrame=function(){x()&&r.submitFrame()},this.dispose=function(){"undefined"!=typeof window&&window.removeEventListener("vrdisplaypresentchange",_)},this.setFrameOfReferenceType=function(){console.warn("THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.")}}function ys(t,e){var n=this,i=null,r=null,a="local-floor",o=null,s=[],l=[];function c(){return null!==i&&null!==r}var h=new ia;h.layers.enable(1),h.viewport=new Pn;var u=new ia;u.layers.enable(2),u.viewport=new Pn;var q=new ds([h,u]);function m(t){for(var e=0;e<s.length;e++)l[e]===t.inputSource&&s[e].dispatchEvent({type:t.type})}function d(){t.setFramebuffer(null),t.setRenderTarget(t.getRenderTarget()),y.stop(),n.dispatchEvent({type:"sessionend"})}function p(t){r=t,y.setContext(i),y.start(),n.dispatchEvent({type:"sessionstart"})}function f(){for(var t=0;t<s.length;t++)l[t]=v(t)}function v(t){for(var e=i.inputSources,n=0;n<e.length;n++){var r=e[n],a=r.handedness;if(0===t&&("none"===a||"right"===a))return r;if(1===t&&"left"===a)return r}}function x(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.getInverse(t.matrixWorld)}q.layers.enable(1),q.layers.enable(2),this.enabled=!1,this.getController=function(t){var e=s[t];return void 0===e&&((e=new ms).matrixAutoUpdate=!1,e.visible=!1,s[t]=e),e},this.setFramebufferScaleFactor=function(){},this.setReferenceSpaceType=function(t){a=t},this.getSession=function(){return i},this.setSession=function(t){null!==(i=t)&&(i.addEventListener("select",m),i.addEventListener("selectstart",m),i.addEventListener("selectend",m),i.addEventListener("end",d),i.updateRenderState({baseLayer:new XRWebGLLayer(i,e)}),i.requestReferenceSpace(a).then(p),i.addEventListener("inputsourceschange",f),f())},this.getCamera=function(t){if(c()){var e=t.parent,n=q.cameras;x(q,e);for(var i=0;i<n.length;i++)x(n[i],e);t.matrixWorld.copy(q.matrixWorld);for(var r=t.children,a=(i=0,r.length);i<a;i++)r[i].updateMatrixWorld(!0);return xs(q,h,u),q}return t},this.isPresenting=c;var g=null;var y=new pa;y.setAnimationLoop((function(e,n){if(null!==(o=n.getViewerPose(r))){var a=o.views,c=i.renderState.baseLayer;t.setFramebuffer(c.framebuffer);for(var h=0;h<a.length;h++){var u=a[h],m=c.getViewport(u),d=u.transform.inverse.matrix,p=q.cameras[h];p.matrix.fromArray(d).getInverse(p.matrix),p.projectionMatrix.fromArray(u.projectionMatrix),p.viewport.set(m.x,m.y,m.width,m.height),0===h&&q.matrix.copy(p.matrix)}}for(h=0;h<s.length;h++){var f=s[h],v=l[h];if(v){var x=n.getPose(v.targetRaySpace,r);if(null!==x){f.matrix.fromArray(x.transform.matrix),f.matrix.decompose(f.position,f.rotation,f.scale),f.visible=!0;continue}}f.visible=!1}g&&g(e)})),this.setAnimationLoop=function(t){g=t},this.dispose=function(){},this.getStandingMatrix=function(){return console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed."),new Hn},this.getDevice=function(){console.warn("THREE.WebXRManager: getDevice() has been deprecated.")},this.setDevice=function(){console.warn("THREE.WebXRManager: setDevice() has been deprecated.")},this.setFrameOfReferenceType=function(){console.warn("THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.")},this.submitFrame=function(){}}function _s(t){var e=void 0!==(t=t||{}).canvas?t.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),n=void 0!==t.context?t.context:null,i=void 0!==t.alpha&&t.alpha,r=void 0===t.depth||t.depth,a=void 0===t.stencil||t.stencil,o=void 0!==t.antialias&&t.antialias,s=void 0===t.premultipliedAlpha||t.premultipliedAlpha,l=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,c=void 0!==t.powerPreference?t.powerPreference:"default",h=void 0!==t.failIfMajorPerformanceCaveat&&t.failIfMajorPerformanceCaveat,u=null,q=null;this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=rt,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var m,d,p,f,x,g,y,_,b,w,M,S,T,E,A,z,L,P,R=this,C=!1,O=null,I=0,D=0,N=null,B=null,U=-1,F={geometry:null,program:null,wireframe:!1},H=null,G=null,V=new Pn,j=new Pn,k=null,W=e.width,X=e.height,Y=1,Z=new Pn(0,0,W,X),J=new Pn(0,0,W,X),Q=!1,K=new ua,$=new ba,tt=!1,et=!1,nt=new Hn,it=new Mn;function at(){return null===N?Y:1}try{var ot={alpha:i,depth:r,stencil:a,antialias:o,premultipliedAlpha:s,preserveDrawingBuffer:l,powerPreference:c,failIfMajorPerformanceCaveat:h,xrCompatible:!0};if(e.addEventListener("webglcontextlost",ut,!1),e.addEventListener("webglcontextrestored",qt,!1),null===(m=n||e.getContext("webgl",ot)||e.getContext("experimental-webgl",ot)))throw null!==e.getContext("webgl")?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.");void 0===m.getShaderPrecisionFormat&&(m.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function st(){d=new wa(m),!1===(p=new _a(m,d,t)).isWebGL2&&(d.get("WEBGL_depth_texture"),d.get("OES_texture_float"),d.get("OES_texture_half_float"),d.get("OES_texture_half_float_linear"),d.get("OES_standard_derivatives"),d.get("OES_element_index_uint"),d.get("ANGLE_instanced_arrays")),d.get("OES_texture_float_linear"),P=new hs(m,d,p),(f=new ls(m,d,p)).scissor(j.copy(J).multiplyScalar(Y).floor()),f.viewport(V.copy(Z).multiplyScalar(Y).floor()),x=new Ta(m),g=new Wo,y=new cs(m,d,f,g,p,P,x),_=new fa(m),b=new Ma(m,_,x),w=new za(m,b,_,x),A=new Aa(m),M=new ko(R,d,p),S=new Jo,T=new ns,E=new ga(R,f,w,s),z=new ya(m,d,x,p),L=new Sa(m,d,x,p),x.programs=M.programs,R.capabilities=p,R.extensions=d,R.properties=g,R.renderLists=S,R.state=f,R.info=x}st();var lt="undefined"!=typeof navigator&&"xr"in navigator&&"isSessionSupported"in navigator.xr?new ys(R,m):new gs(R);this.vr=lt;var ct=new qs(R,m),ht=new ss(R,w,p.maxTextureSize);function ut(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),C=!0}function qt(){console.log("THREE.WebGLRenderer: Context Restored."),C=!1,st()}function mt(t){var e=t.target;e.removeEventListener("dispose",mt),function(t){dt(t),g.remove(t)}(e)}function dt(t){var e=g.get(t).program;t.program=void 0,void 0!==e&&M.releaseProgram(e)}this.shadowMap=ht,this.getContext=function(){return m},this.getContextAttributes=function(){return m.getContextAttributes()},this.forceContextLoss=function(){var t=d.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){var t=d.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return Y},this.setPixelRatio=function(t){void 0!==t&&(Y=t,this.setSize(W,X,!1))},this.getSize=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),t=new yn),t.set(W,X)},this.setSize=function(t,n,i){lt.isPresenting()?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(W=t,X=n,e.width=Math.floor(t*Y),e.height=Math.floor(n*Y),!1!==i&&(e.style.width=t+"px",e.style.height=n+"px"),this.setViewport(0,0,t,n))},this.getDrawingBufferSize=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),t=new yn),t.set(W*Y,X*Y).floor()},this.setDrawingBufferSize=function(t,n,i){W=t,X=n,Y=i,e.width=Math.floor(t*i),e.height=Math.floor(n*i),this.setViewport(0,0,t,n)},this.getCurrentViewport=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),t=new Pn),t.copy(V)},this.getViewport=function(t){return t.copy(Z)},this.setViewport=function(t,e,n,i){t.isVector4?Z.set(t.x,t.y,t.z,t.w):Z.set(t,e,n,i),f.viewport(V.copy(Z).multiplyScalar(Y).floor())},this.getScissor=function(t){return t.copy(J)},this.setScissor=function(t,e,n,i){t.isVector4?J.set(t.x,t.y,t.z,t.w):J.set(t,e,n,i),f.scissor(j.copy(J).multiplyScalar(Y).floor())},this.getScissorTest=function(){return Q},this.setScissorTest=function(t){f.setScissorTest(Q=t)},this.getClearColor=function(){return E.getClearColor()},this.setClearColor=function(){E.setClearColor.apply(E,arguments)},this.getClearAlpha=function(){return E.getClearAlpha()},this.setClearAlpha=function(){E.setClearAlpha.apply(E,arguments)},this.clear=function(t,e,n){var i=0;(void 0===t||t)&&(i|=16384),(void 0===e||e)&&(i|=256),(void 0===n||n)&&(i|=1024),m.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",ut,!1),e.removeEventListener("webglcontextrestored",qt,!1),S.dispose(),T.dispose(),g.dispose(),w.dispose(),lt.dispose(),ft.stop()},this.renderBufferImmediate=function(t,e){f.initAttributes();var n=g.get(t);t.hasPositions&&!n.position&&(n.position=m.createBuffer()),t.hasNormals&&!n.normal&&(n.normal=m.createBuffer()),t.hasUvs&&!n.uv&&(n.uv=m.createBuffer()),t.hasColors&&!n.color&&(n.color=m.createBuffer());var i=e.getAttributes();t.hasPositions&&(m.bindBuffer(34962,n.position),m.bufferData(34962,t.positionArray,35048),f.enableAttribute(i.position),m.vertexAttribPointer(i.position,3,5126,!1,0,0)),t.hasNormals&&(m.bindBuffer(34962,n.normal),m.bufferData(34962,t.normalArray,35048),f.enableAttribute(i.normal),m.vertexAttribPointer(i.normal,3,5126,!1,0,0)),t.hasUvs&&(m.bindBuffer(34962,n.uv),m.bufferData(34962,t.uvArray,35048),f.enableAttribute(i.uv),m.vertexAttribPointer(i.uv,2,5126,!1,0,0)),t.hasColors&&(m.bindBuffer(34962,n.color),m.bufferData(34962,t.colorArray,35048),f.enableAttribute(i.color),m.vertexAttribPointer(i.color,3,5126,!1,0,0)),f.disableUnusedAttributes(),m.drawArrays(4,0,t.count),t.count=0},this.renderBufferDirect=function(t,e,n,i,r,a){var o=r.isMesh&&r.matrixWorld.determinant()<0;f.setMaterial(i,o);var s=_t(t,e,i,r),l=!1;F.geometry===n.id&&F.program===s.id&&F.wireframe===(!0===i.wireframe)||(F.geometry=n.id,F.program=s.id,F.wireframe=!0===i.wireframe,l=!0),r.morphTargetInfluences&&(A.update(r,n,i,s),l=!0);var c,h=n.index,u=n.attributes.position,q=1;!0===i.wireframe&&(h=b.getWireframeAttribute(n),q=2);var v=z;null!==h&&(c=_.get(h),(v=L).setIndex(c)),l&&(!function(t,e,n,i){if(!1===p.isWebGL2&&(t.isInstancedMesh||e.isInstancedBufferGeometry)&&null===d.get("ANGLE_instanced_arrays"))return;f.initAttributes();var r=e.attributes,a=i.getAttributes(),o=n.defaultAttributeValues;for(var s in a){var l=a[s];if(l>=0){var c=r[s];if(void 0!==c){var h=c.normalized,u=c.itemSize;if(void 0===(w=_.get(c)))continue;var q=w.buffer,v=w.type,x=w.bytesPerElement;if(c.isInterleavedBufferAttribute){var g=c.data,y=g.stride,b=c.offset;g&&g.isInstancedInterleavedBuffer?(f.enableAttributeAndDivisor(l,g.meshPerAttribute),void 0===e.maxInstancedCount&&(e.maxInstancedCount=g.meshPerAttribute*g.count)):f.enableAttribute(l),m.bindBuffer(34962,q),m.vertexAttribPointer(l,u,v,h,y*x,b*x)}else c.isInstancedBufferAttribute?(f.enableAttributeAndDivisor(l,c.meshPerAttribute),void 0===e.maxInstancedCount&&(e.maxInstancedCount=c.meshPerAttribute*c.count)):f.enableAttribute(l),m.bindBuffer(34962,q),m.vertexAttribPointer(l,u,v,h,0,0)}else if("instanceMatrix"===s){var w;if(void 0===(w=_.get(t.instanceMatrix)))continue;q=w.buffer,v=w.type;f.enableAttributeAndDivisor(l+0,1),f.enableAttributeAndDivisor(l+1,1),f.enableAttributeAndDivisor(l+2,1),f.enableAttributeAndDivisor(l+3,1),m.bindBuffer(34962,q),m.vertexAttribPointer(l+0,4,v,!1,64,0),m.vertexAttribPointer(l+1,4,v,!1,64,16),m.vertexAttribPointer(l+2,4,v,!1,64,32),m.vertexAttribPointer(l+3,4,v,!1,64,48)}else if(void 0!==o){var M=o[s];if(void 0!==M)switch(M.length){case 2:m.vertexAttrib2fv(l,M);break;case 3:m.vertexAttrib3fv(l,M);break;case 4:m.vertexAttrib4fv(l,M);break;default:m.vertexAttrib1fv(l,M)}}}}f.disableUnusedAttributes()}(r,n,i,s),null!==h&&m.bindBuffer(34963,c.buffer));var x=1/0;null!==h?x=h.count:void 0!==u&&(x=u.count);var g=n.drawRange.start*q,y=n.drawRange.count*q,w=null!==a?a.start*q:0,M=null!==a?a.count*q:1/0,S=Math.max(g,w),T=Math.min(x,g+y,w+M)-1,E=Math.max(0,T-S+1);if(0!==E){if(r.isMesh)if(!0===i.wireframe)f.setLineWidth(i.wireframeLinewidth*at()),v.setMode(1);else switch(r.drawMode){case ze:v.setMode(4);break;case Le:v.setMode(5);break;case Pe:v.setMode(6)}else if(r.isLine){var P=i.linewidth;void 0===P&&(P=1),f.setLineWidth(P*at()),r.isLineSegments?v.setMode(1):r.isLineLoop?v.setMode(2):v.setMode(3)}else r.isPoints?v.setMode(0):r.isSprite&&v.setMode(4);r.isInstancedMesh?v.renderInstances(n,S,E,r.count):n.isInstancedBufferGeometry?v.renderInstances(n,S,E,n.maxInstancedCount):v.render(S,E)}},this.compile=function(t,e){(q=T.get(t,e)).init(),t.traverse((function(t){t.isLight&&(q.pushLight(t),t.castShadow&&q.pushShadow(t))})),q.setupLights(e),t.traverse((function(e){if(e.material)if(Array.isArray(e.material))for(var n=0;n<e.material.length;n++)yt(e.material[n],t.fog,e);else yt(e.material,t.fog,e)}))};var pt=null;var ft=new pa;function vt(t,e,n,i){if(!1!==t.visible){if(t.layers.test(e.layers))if(t.isGroup)n=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)q.pushLight(t),t.castShadow&&q.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||K.intersectsSprite(t)){i&&it.setFromMatrixPosition(t.matrixWorld).applyMatrix4(nt);var r=w.update(t);(a=t.material).visible&&u.push(t,r,a,n,it.z,null)}}else if(t.isImmediateRenderObject)i&&it.setFromMatrixPosition(t.matrixWorld).applyMatrix4(nt),u.push(t,null,t.material,n,it.z,null);else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.frame!==x.render.frame&&(t.skeleton.update(),t.skeleton.frame=x.render.frame),!t.frustumCulled||K.intersectsObject(t))){i&&it.setFromMatrixPosition(t.matrixWorld).applyMatrix4(nt);r=w.update(t);var a=t.material;if(Array.isArray(a))for(var o=r.groups,s=0,l=o.length;s<l;s++){var c=o[s],h=a[c.materialIndex];h&&h.visible&&u.push(t,r,h,n,it.z,c)}else a.visible&&u.push(t,r,a,n,it.z,null)}var m=t.children;for(s=0,l=m.length;s<l;s++)vt(m[s],e,n,i)}}function xt(t,e,n,i){for(var r=0,a=t.length;r<a;r++){var o=t[r],s=o.object,l=o.geometry,c=void 0===i?o.material:i,h=o.group;if(n.isArrayCamera)if(G=n,lt.enabled&&ct.isAvailable())gt(s,e,n,l,c,h);else for(var u=n.cameras,m=0,d=u.length;m<d;m++){var p=u[m];s.layers.test(p.layers)&&(f.viewport(V.copy(p.viewport)),q.setupLights(p),gt(s,e,p,l,c,h))}else G=null,gt(s,e,n,l,c,h)}}function gt(t,e,n,i,r,a){if(t.onBeforeRender(R,e,n,i,r,a),q=T.get(e,G||n),t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),t.isImmediateRenderObject){f.setMaterial(r);var o=_t(n,e.fog,r,t);F.geometry=null,F.program=null,F.wireframe=!1,function(t,e){t.render((function(t){R.renderBufferImmediate(t,e)}))}(t,o)}else R.renderBufferDirect(n,e.fog,i,r,t,a);t.onAfterRender(R,e,n,i,r,a),q=T.get(e,G||n)}function yt(t,e,n){var i=g.get(t),r=q.state.lights,a=q.state.shadowsArray,o=r.state.version,s=M.getParameters(t,r.state,a,e,$.numPlanes,$.numIntersection,n),l=M.getProgramCacheKey(t,s),c=i.program,h=!0;if(void 0===c)t.addEventListener("dispose",mt);else if(c.cacheKey!==l)dt(t);else if(i.lightsStateVersion!==o)i.lightsStateVersion=o,h=!1;else{if(void 0!==s.shaderID)return;h=!1}if(h){if(s.shaderID){var u=da[s.shaderID];i.shader={name:t.type,uniforms:Jr(u.uniforms),vertexShader:u.vertexShader,fragmentShader:u.fragmentShader}}else i.shader={name:t.type,uniforms:t.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader};t.onBeforeCompile(i.shader,R),l=M.getProgramCacheKey(t,s),c=M.acquireProgram(t,i.shader,s,l),i.program=c,t.program=c}var m=c.getAttributes();if(t.morphTargets){t.numSupportedMorphTargets=0;for(var d=0;d<R.maxMorphTargets;d++)m["morphTarget"+d]>=0&&t.numSupportedMorphTargets++}if(t.morphNormals){t.numSupportedMorphNormals=0;for(d=0;d<R.maxMorphNormals;d++)m["morphNormal"+d]>=0&&t.numSupportedMorphNormals++}var p=i.shader.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(i.numClippingPlanes=$.numPlanes,i.numIntersection=$.numIntersection,p.clippingPlanes=$.uniform),i.fog=e,i.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),i.lightsStateVersion=o,i.needsLights&&(p.ambientLightColor.value=r.state.ambient,p.lightProbe.value=r.state.probe,p.directionalLights.value=r.state.directional,p.spotLights.value=r.state.spot,p.rectAreaLights.value=r.state.rectArea,p.pointLights.value=r.state.point,p.hemisphereLights.value=r.state.hemi,p.directionalShadowMap.value=r.state.directionalShadowMap,p.directionalShadowMatrix.value=r.state.directionalShadowMatrix,p.spotShadowMap.value=r.state.spotShadowMap,p.spotShadowMatrix.value=r.state.spotShadowMatrix,p.pointShadowMap.value=r.state.pointShadowMap,p.pointShadowMatrix.value=r.state.pointShadowMatrix);var f=i.program.getUniforms(),v=Eo.seqWithValue(f.seq,p);i.uniformsList=v}function _t(t,e,n,i){y.resetTextureUnits();var r=g.get(n),a=q.state.lights;if(tt&&(et||t!==H)){var o=t===H&&n.id===U;$.setState(n.clippingPlanes,n.clipIntersection,n.clipShadows,t,r,o)}!1===n.needsUpdate&&(void 0===r.program?n.needsUpdate=!0:n.fog&&r.fog!==e?n.needsUpdate=!0:r.needsLights&&r.lightsStateVersion!==a.state.version?n.needsUpdate=!0:void 0===r.numClippingPlanes||r.numClippingPlanes===$.numPlanes&&r.numIntersection===$.numIntersection||(n.needsUpdate=!0)),n.needsUpdate&&(yt(n,e,i),n.needsUpdate=!1);var s,l,c=!1,h=!1,u=!1,d=r.program,x=d.getUniforms(),_=r.shader.uniforms;if(f.useProgram(d.program)&&(c=!0,h=!0,u=!0),n.id!==U&&(U=n.id,h=!0),c||H!==t){if(d.numMultiviewViews>0?ct.updateCameraProjectionMatricesUniform(t,x):x.setValue(m,"projectionMatrix",t.projectionMatrix),p.logarithmicDepthBuffer&&x.setValue(m,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),H!==t&&(H=t,h=!0,u=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshStandardMaterial||n.envMap){var b=x.map.cameraPosition;void 0!==b&&b.setValue(m,it.setFromMatrixPosition(t.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial)&&x.setValue(m,"isOrthographic",!0===t.isOrthographicCamera),(n.isMeshPhongMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.skinning)&&(d.numMultiviewViews>0?ct.updateCameraViewMatricesUniform(t,x):x.setValue(m,"viewMatrix",t.matrixWorldInverse))}if(n.skinning){x.setOptional(m,i,"bindMatrix"),x.setOptional(m,i,"bindMatrixInverse");var w=i.skeleton;if(w){var M=w.bones;if(p.floatVertexTextures){if(void 0===w.boneTexture){var S=Math.sqrt(4*M.length);S=gn.ceilPowerOfTwo(S),S=Math.max(S,4);var T=new Float32Array(S*S*4);T.set(w.boneMatrices);var E=new la(T,S,S,jt,Dt);w.boneMatrices=T,w.boneTexture=E,w.boneTextureSize=S}x.setValue(m,"boneTexture",w.boneTexture,y),x.setValue(m,"boneTextureSize",w.boneTextureSize)}else x.setOptional(m,w,"boneMatrices")}}return(h||r.receiveShadow!==i.receiveShadow)&&(r.receiveShadow=i.receiveShadow,x.setValue(m,"receiveShadow",i.receiveShadow)),h&&(x.setValue(m,"toneMappingExposure",R.toneMappingExposure),x.setValue(m,"toneMappingWhitePoint",R.toneMappingWhitePoint),r.needsLights&&(l=u,(s=_).ambientLightColor.needsUpdate=l,s.lightProbe.needsUpdate=l,s.directionalLights.needsUpdate=l,s.pointLights.needsUpdate=l,s.spotLights.needsUpdate=l,s.rectAreaLights.needsUpdate=l,s.hemisphereLights.needsUpdate=l),e&&n.fog&&function(t,e){t.fogColor.value.copy(e.color),e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)}(_,e),n.isMeshBasicMaterial?bt(_,n):n.isMeshLambertMaterial?(bt(_,n),function(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)}(_,n)):n.isMeshPhongMaterial?(bt(_,n),n.isMeshToonMaterial?function(t,e){wt(t,e),e.gradientMap&&(t.gradientMap.value=e.gradientMap)}(_,n):wt(_,n)):n.isMeshStandardMaterial?(bt(_,n),n.isMeshPhysicalMaterial?function(t,e){Mt(t,e),t.reflectivity.value=e.reflectivity,t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.sheen&&t.sheen.value.copy(e.sheen);e.clearcoatNormalMap&&(t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),t.clearcoatNormalMap.value=e.clearcoatNormalMap,e.side===v&&t.clearcoatNormalScale.value.negate());t.transparency.value=e.transparency}(_,n):Mt(_,n)):n.isMeshMatcapMaterial?(bt(_,n),function(t,e){e.matcap&&(t.matcap.value=e.matcap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===v&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===v&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(_,n)):n.isMeshDepthMaterial?(bt(_,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(_,n)):n.isMeshDistanceMaterial?(bt(_,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias);t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(_,n)):n.isMeshNormalMaterial?(bt(_,n),function(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===v&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===v&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(_,n)):n.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity}(_,n),n.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(_,n)):n.isPointsMaterial?function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*Y,t.scale.value=.5*X,e.map&&(t.map.value=e.map);e.alphaMap&&(t.alphaMap.value=e.alphaMap);var n;e.map?n=e.map:e.alphaMap&&(n=e.alphaMap);void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix))}(_,n):n.isSpriteMaterial?function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map);e.alphaMap&&(t.alphaMap.value=e.alphaMap);var n;e.map?n=e.map:e.alphaMap&&(n=e.alphaMap);void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix))}(_,n):n.isShadowMaterial&&(_.color.value.copy(n.color),_.opacity.value=n.opacity),void 0!==_.ltc_1&&(_.ltc_1.value=ma.LTC_1),void 0!==_.ltc_2&&(_.ltc_2.value=ma.LTC_2),Eo.upload(m,r.uniformsList,_,y),n.isShaderMaterial&&(n.uniformsNeedUpdate=!1)),n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(Eo.upload(m,r.uniformsList,_,y),n.uniformsNeedUpdate=!1),n.isSpriteMaterial&&x.setValue(m,"center",i.center),d.numMultiviewViews>0?ct.updateObjectMatricesUniforms(i,t,x):(x.setValue(m,"modelViewMatrix",i.modelViewMatrix),x.setValue(m,"normalMatrix",i.normalMatrix)),x.setValue(m,"modelMatrix",i.matrixWorld),d}function bt(t,e){var n;t.opacity.value=e.opacity,e.color&&t.diffuse.value.copy(e.color),e.emissive&&t.emissive.value.copy(e.emissive).multiplyScalar(e.emissiveIntensity),e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.specularMap&&(t.specularMap.value=e.specularMap),e.envMap&&(t.envMap.value=e.envMap,t.flipEnvMap.value=e.envMap.isCubeTexture?-1:1,t.reflectivity.value=e.reflectivity,t.refractionRatio.value=e.refractionRatio,t.maxMipLevel.value=g.get(e.envMap).__maxMipLevel),e.lightMap&&(t.lightMap.value=e.lightMap,t.lightMapIntensity.value=e.lightMapIntensity),e.aoMap&&(t.aoMap.value=e.aoMap,t.aoMapIntensity.value=e.aoMapIntensity),e.map?n=e.map:e.specularMap?n=e.specularMap:e.displacementMap?n=e.displacementMap:e.normalMap?n=e.normalMap:e.bumpMap?n=e.bumpMap:e.roughnessMap?n=e.roughnessMap:e.metalnessMap?n=e.metalnessMap:e.alphaMap?n=e.alphaMap:e.emissiveMap&&(n=e.emissiveMap),void 0!==n&&(n.isWebGLRenderTarget&&(n=n.texture),!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix))}function wt(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===v&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===v&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}function Mt(t,e){t.roughness.value=e.roughness,t.metalness.value=e.metalness,e.roughnessMap&&(t.roughnessMap.value=e.roughnessMap),e.metalnessMap&&(t.metalnessMap.value=e.metalnessMap),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===v&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===v&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias),e.envMap&&(t.envMapIntensity.value=e.envMapIntensity)}ft.setAnimationLoop((function(t){lt.isPresenting()||pt&&pt(t)})),"undefined"!=typeof window&&ft.setContext(window),this.setAnimationLoop=function(t){pt=t,lt.setAnimationLoop(t),ft.start()},this.render=function(t,e){var n,i;if(void 0!==arguments[2]&&(console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."),n=arguments[2]),void 0!==arguments[3]&&(console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."),i=arguments[3]),e&&e.isCamera){if(!C){F.geometry=null,F.program=null,F.wireframe=!1,U=-1,H=null,!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),lt.enabled&&(e=lt.getCamera(e)),(q=T.get(t,e)).init(),t.onBeforeRender(R,t,e,n||N),nt.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),K.setFromMatrix(nt),et=this.localClippingEnabled,tt=$.init(this.clippingPlanes,et,e),(u=S.get(t,e)).init(),vt(t,e,0,R.sortObjects),!0===R.sortObjects&&u.sort(),tt&&$.beginShadows();var r=q.state.shadowsArray;ht.render(r,t,e),q.setupLights(e),tt&&$.endShadows(),this.info.autoReset&&this.info.reset(),void 0!==n&&this.setRenderTarget(n),lt.enabled&&ct.isAvailable()&&ct.attachCamera(e),E.render(u,t,e,i);var a=u.opaque,o=u.transparent;if(t.overrideMaterial){var s=t.overrideMaterial;a.length&&xt(a,t,e,s),o.length&&xt(o,t,e,s)}else a.length&&xt(a,t,e),o.length&&xt(o,t,e);t.onAfterRender(R,t,e),null!==N&&(y.updateRenderTargetMipmap(N),y.updateMultisampleRenderTarget(N)),f.buffers.depth.setTest(!0),f.buffers.depth.setMask(!0),f.buffers.color.setMask(!0),f.setPolygonOffset(!1),lt.enabled&&(ct.isAvailable()&&ct.detachCamera(e),lt.submitFrame()),u=null,q=null}}else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")},this.setFramebuffer=function(t){O!==t&&null===N&&m.bindFramebuffer(36160,t),O=t},this.getActiveCubeFace=function(){return I},this.getActiveMipmapLevel=function(){return D},this.getRenderTarget=function(){return N},this.setRenderTarget=function(t,e,n){N=t,I=e,D=n,t&&void 0===g.get(t).__webglFramebuffer&&y.setupRenderTarget(t);var i=O,r=!1;if(t){var a=g.get(t).__webglFramebuffer;t.isWebGLRenderTargetCube?(i=a[e||0],r=!0):i=t.isWebGLMultisampleRenderTarget?g.get(t).__webglMultisampledFramebuffer:a,V.copy(t.viewport),j.copy(t.scissor),k=t.scissorTest}else V.copy(Z).multiplyScalar(Y).floor(),j.copy(J).multiplyScalar(Y).floor(),k=Q;if(B!==i&&(m.bindFramebuffer(36160,i),B=i),f.viewport(V),f.scissor(j),f.setScissorTest(k),r){var o=g.get(t.texture);m.framebufferTexture2D(36160,36064,34069+(e||0),o.__webglTexture,n||0)}},this.readRenderTargetPixels=function(t,e,n,i,r,a,o){if(t&&t.isWebGLRenderTarget){var s=g.get(t).__webglFramebuffer;if(t.isWebGLRenderTargetCube&&void 0!==o&&(s=s[o]),s){var l=!1;s!==B&&(m.bindFramebuffer(36160,s),l=!0);try{var c=t.texture,h=c.format,u=c.type;if(h!==jt&&P.convert(h)!==m.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(u===Lt||P.convert(u)===m.getParameter(35738)||u===Dt&&(p.isWebGL2||d.get("OES_texture_float")||d.get("WEBGL_color_buffer_float"))||u===Nt&&(p.isWebGL2?d.get("EXT_color_buffer_float"):d.get("EXT_color_buffer_half_float"))))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===m.checkFramebufferStatus(36160)?e>=0&&e<=t.width-i&&n>=0&&n<=t.height-r&&m.readPixels(e,n,i,r,P.convert(h),P.convert(u),a):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{l&&m.bindFramebuffer(36160,B)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")},this.copyFramebufferToTexture=function(t,e,n){void 0===n&&(n=0);var i=Math.pow(2,-n),r=Math.floor(e.image.width*i),a=Math.floor(e.image.height*i),o=P.convert(e.format);y.setTexture2D(e,0),m.copyTexImage2D(3553,n,o,t.x,t.y,r,a,0),f.unbindTexture()},this.copyTextureToTexture=function(t,e,n,i){var r=e.image.width,a=e.image.height,o=P.convert(n.format),s=P.convert(n.type);y.setTexture2D(n,0),e.isDataTexture?m.texSubImage2D(3553,i||0,t.x,t.y,r,a,o,s,e.image.data):m.texSubImage2D(3553,i||0,t.x,t.y,o,s,e.image),f.unbindTexture()},this.initTexture=function(t){y.setTexture2D(t,0),f.unbindTexture()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}function bs(t,e){this.name="",this.color=new Zi(t),this.density=void 0!==e?e:25e-5}function ws(t,e,n){this.name="",this.color=new Zi(t),this.near=void 0!==e?e:1,this.far=void 0!==n?n:1e3}function Ms(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=sn,this.updateRange={offset:0,count:-1},this.version=0}function Ss(t,e,n,i){this.data=t,this.itemSize=e,this.offset=n,this.normalized=!0===i}function Ts(t){er.call(this),this.type="SpriteMaterial",this.color=new Zi(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(t)}Object.assign(gs.prototype,fn.prototype),Object.assign(ys.prototype,fn.prototype),Object.assign(bs.prototype,{isFogExp2:!0,clone:function(){return new bs(this.color,this.density)},toJSON:function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}),Object.assign(ws.prototype,{isFog:!0,clone:function(){return new ws(this.color,this.near,this.far)},toJSON:function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}),Object.defineProperty(Ms.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(Ms.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setUsage:function(t){return this.usage=t,this},copy:function(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this},copyAt:function(t,e,n){t*=this.stride,n*=e.stride;for(var i=0,r=this.stride;i<r;i++)this.array[t+i]=e.array[n+i];return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(t){return this.onUploadCallback=t,this}}),Object.defineProperties(Ss.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(Ss.prototype,{isInterleavedBufferAttribute:!0,setX:function(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this},setY:function(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this},setZ:function(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this},setW:function(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this},getX:function(t){return this.data.array[t*this.data.stride+this.offset]},getY:function(t){return this.data.array[t*this.data.stride+this.offset+1]},getZ:function(t){return this.data.array[t*this.data.stride+this.offset+2]},getW:function(t){return this.data.array[t*this.data.stride+this.offset+3]},setXY:function(t,e,n){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this},setXYZ:function(t,e,n,i){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this},setXYZW:function(t,e,n,i,r){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this.data.array[t+3]=r,this}}),Ts.prototype=Object.create(er.prototype),Ts.prototype.constructor=Ts,Ts.prototype.isSpriteMaterial=!0,Ts.prototype.copy=function(t){return er.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this};var Es=new Mn,As=new Mn,zs=new Mn,Ls=new yn,Ps=new yn,Rs=new Hn,Cs=new Mn,Os=new Mn,Is=new Mn,Ds=new yn,Ns=new yn,Bs=new yn;function Us(t){if(ai.call(this),this.type="Sprite",void 0===ps){ps=new br;var e=new Ms(new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),5);ps.setIndex([0,1,2,0,2,3]),ps.setAttribute("position",new Ss(e,3,0,!1)),ps.setAttribute("uv",new Ss(e,2,3,!1))}this.geometry=ps,this.material=void 0!==t?t:new Ts,this.center=new yn(.5,.5)}function Fs(t,e,n,i,r,a){Ls.subVectors(t,n).addScalar(.5).multiply(i),void 0!==r?(Ps.x=a*Ls.x-r*Ls.y,Ps.y=r*Ls.x+a*Ls.y):Ps.copy(Ls),t.copy(e),t.x+=Ps.x,t.y+=Ps.y,t.applyMatrix4(Rs)}Us.prototype=Object.assign(Object.create(ai.prototype),{constructor:Us,isSprite:!0,raycast:function(t,e){null===t.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),As.setFromMatrixScale(this.matrixWorld),Rs.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),zs.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&As.multiplyScalar(-zs.z);var n,i,r=this.material.rotation;0!==r&&(i=Math.cos(r),n=Math.sin(r));var a=this.center;Fs(Cs.set(-.5,-.5,0),zs,a,As,n,i),Fs(Os.set(.5,-.5,0),zs,a,As,n,i),Fs(Is.set(.5,.5,0),zs,a,As,n,i),Ds.set(0,0),Ns.set(1,0),Bs.set(1,1);var o=t.ray.intersectTriangle(Cs,Os,Is,!1,Es);if(null!==o||(Fs(Os.set(-.5,.5,0),zs,a,As,n,i),Ns.set(0,1),null!==(o=t.ray.intersectTriangle(Cs,Is,Os,!1,Es)))){var s=t.ray.origin.distanceTo(Es);s<t.near||s>t.far||e.push({distance:s,point:Es.clone(),uv:ki.getUV(Es,Cs,Os,Is,Ds,Ns,Bs,new yn),face:null,object:this})}},clone:function(){return new this.constructor(this.material).copy(this)},copy:function(t){return ai.prototype.copy.call(this,t),void 0!==t.center&&this.center.copy(t.center),this}});var Hs=new Mn,Gs=new Mn;function Vs(){ai.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}}),this.autoUpdate=!0}function js(t,e){t&&t.isGeometry&&console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."),Fr.call(this,t,e),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Hn,this.bindMatrixInverse=new Hn}Vs.prototype=Object.assign(Object.create(ai.prototype),{constructor:Vs,isLOD:!0,copy:function(t){ai.prototype.copy.call(this,t,!1);for(var e=t.levels,n=0,i=e.length;n<i;n++){var r=e[n];this.addLevel(r.object.clone(),r.distance)}return this},addLevel:function(t,e){void 0===e&&(e=0),e=Math.abs(e);for(var n=this.levels,i=0;i<n.length&&!(e<n[i].distance);i++);return n.splice(i,0,{distance:e,object:t}),this.add(t),this},getObjectForDistance:function(t){for(var e=this.levels,n=1,i=e.length;n<i&&!(t<e[n].distance);n++);return e[n-1].object},raycast:function(t,e){Hs.setFromMatrixPosition(this.matrixWorld);var n=t.ray.origin.distanceTo(Hs);this.getObjectForDistance(n).raycast(t,e)},update:function(t){var e=this.levels;if(e.length>1){Hs.setFromMatrixPosition(t.matrixWorld),Gs.setFromMatrixPosition(this.matrixWorld);var n=Hs.distanceTo(Gs);e[0].object.visible=!0;for(var i=1,r=e.length;i<r&&n>=e[i].distance;i++)e[i-1].object.visible=!1,e[i].object.visible=!0;for(;i<r;i++)e[i].object.visible=!1}},toJSON:function(t){var e=ai.prototype.toJSON.call(this,t);e.object.levels=[];for(var n=this.levels,i=0,r=n.length;i<r;i++){var a=n[i];e.object.levels.push({object:a.object.uuid,distance:a.distance})}return e}}),js.prototype=Object.assign(Object.create(Fr.prototype),{constructor:js,isSkinnedMesh:!0,bind:function(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.getInverse(e)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){for(var t=new Pn,e=this.geometry.attributes.skinWeight,n=0,i=e.count;n<i;n++){t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.w=e.getW(n);var r=1/t.manhattanLength();r!==1/0?t.multiplyScalar(r):t.set(1,0,0,0),e.setXYZW(n,t.x,t.y,t.z,t.w)}},updateMatrixWorld:function(t){Fr.prototype.updateMatrixWorld.call(this,t),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var ks=new Hn,Ws=new Hn;function Xs(t,e){if(t=t||[],this.bones=t.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),this.frame=-1,void 0===e)this.calculateInverses();else if(this.bones.length===e.length)this.boneInverses=e.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(var n=0,i=this.bones.length;n<i;n++)this.boneInverses.push(new Hn)}}function Ys(){ai.call(this),this.type="Bone"}function Zs(t,e,n){Fr.call(this,t,e),this.instanceMatrix=new ir(new Float32Array(16*n),16),this.count=n}function Js(t){er.call(this),this.type="LineBasicMaterial",this.color=new Zi(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(t)}Object.assign(Xs.prototype,{calculateInverses:function(){this.boneInverses=[];for(var t=0,e=this.bones.length;t<e;t++){var n=new Hn;this.bones[t]&&n.getInverse(this.bones[t].matrixWorld),this.boneInverses.push(n)}},pose:function(){var t,e,n;for(e=0,n=this.bones.length;e<n;e++)(t=this.bones[e])&&t.matrixWorld.getInverse(this.boneInverses[e]);for(e=0,n=this.bones.length;e<n;e++)(t=this.bones[e])&&(t.parent&&t.parent.isBone?(t.matrix.getInverse(t.parent.matrixWorld),t.matrix.multiply(t.matrixWorld)):t.matrix.copy(t.matrixWorld),t.matrix.decompose(t.position,t.quaternion,t.scale))},update:function(){for(var t=this.bones,e=this.boneInverses,n=this.boneMatrices,i=this.boneTexture,r=0,a=t.length;r<a;r++){var o=t[r]?t[r].matrixWorld:Ws;ks.multiplyMatrices(o,e[r]),ks.toArray(n,16*r)}void 0!==i&&(i.needsUpdate=!0)},clone:function(){return new Xs(this.bones,this.boneInverses)},getBoneByName:function(t){for(var e=0,n=this.bones.length;e<n;e++){var i=this.bones[e];if(i.name===t)return i}}}),Ys.prototype=Object.assign(Object.create(ai.prototype),{constructor:Ys,isBone:!0}),Zs.prototype=Object.assign(Object.create(Fr.prototype),{constructor:Zs,isInstancedMesh:!0,raycast:function(){},setMatrixAt:function(t,e){e.toArray(this.instanceMatrix.array,16*t)},updateMorphTargets:function(){}}),Js.prototype=Object.create(er.prototype),Js.prototype.constructor=Js,Js.prototype.isLineBasicMaterial=!0,Js.prototype.copy=function(t){return er.prototype.copy.call(this,t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this};var Qs=new Mn,Ks=new Mn,$s=new Hn,tl=new Li,el=new bi;function nl(t,e,n){1===n&&console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."),ai.call(this),this.type="Line",this.geometry=void 0!==t?t:new br,this.material=void 0!==e?e:new Js({color:16777215*Math.random()})}nl.prototype=Object.assign(Object.create(ai.prototype),{constructor:nl,isLine:!0,computeLineDistances:function(){var t=this.geometry;if(t.isBufferGeometry)if(null===t.index){for(var e=t.attributes.position,n=[0],i=1,r=e.count;i<r;i++)Qs.fromBufferAttribute(e,i-1),Ks.fromBufferAttribute(e,i),n[i]=n[i-1],n[i]+=Qs.distanceTo(Ks);t.setAttribute("lineDistance",new ur(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(t.isGeometry){var a=t.vertices;(n=t.lineDistances)[0]=0;for(i=1,r=a.length;i<r;i++)n[i]=n[i-1],n[i]+=a[i-1].distanceTo(a[i])}return this},raycast:function(t,e){var n=t.linePrecision,i=this.geometry,r=this.matrixWorld;if(null===i.boundingSphere&&i.computeBoundingSphere(),el.copy(i.boundingSphere),el.applyMatrix4(r),el.radius+=n,!1!==t.ray.intersectsSphere(el)){$s.getInverse(r),tl.copy(t.ray).applyMatrix4($s);var a=n/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,s=new Mn,l=new Mn,c=new Mn,h=new Mn,u=this&&this.isLineSegments?2:1;if(i.isBufferGeometry){var q=i.index,m=i.attributes.position.array;if(null!==q)for(var d=q.array,p=0,f=d.length-1;p<f;p+=u){var v=d[p],x=d[p+1];if(s.fromArray(m,3*v),l.fromArray(m,3*x),!(tl.distanceSqToSegment(s,l,h,c)>o))h.applyMatrix4(this.matrixWorld),(_=t.ray.origin.distanceTo(h))<t.near||_>t.far||e.push({distance:_,point:c.clone().applyMatrix4(this.matrixWorld),index:p,face:null,faceIndex:null,object:this})}else for(p=0,f=m.length/3-1;p<f;p+=u){if(s.fromArray(m,3*p),l.fromArray(m,3*p+3),!(tl.distanceSqToSegment(s,l,h,c)>o))h.applyMatrix4(this.matrixWorld),(_=t.ray.origin.distanceTo(h))<t.near||_>t.far||e.push({distance:_,point:c.clone().applyMatrix4(this.matrixWorld),index:p,face:null,faceIndex:null,object:this})}}else if(i.isGeometry){var g=i.vertices,y=g.length;for(p=0;p<y-1;p+=u){var _;if(!(tl.distanceSqToSegment(g[p],g[p+1],h,c)>o))h.applyMatrix4(this.matrixWorld),(_=t.ray.origin.distanceTo(h))<t.near||_>t.far||e.push({distance:_,point:c.clone().applyMatrix4(this.matrixWorld),index:p,face:null,faceIndex:null,object:this})}}}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var il=new Mn,rl=new Mn;function al(t,e){nl.call(this,t,e),this.type="LineSegments"}function ol(t,e){nl.call(this,t,e),this.type="LineLoop"}function sl(t){er.call(this),this.type="PointsMaterial",this.color=new Zi(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.setValues(t)}al.prototype=Object.assign(Object.create(nl.prototype),{constructor:al,isLineSegments:!0,computeLineDistances:function(){var t=this.geometry;if(t.isBufferGeometry)if(null===t.index){for(var e=t.attributes.position,n=[],i=0,r=e.count;i<r;i+=2)il.fromBufferAttribute(e,i),rl.fromBufferAttribute(e,i+1),n[i]=0===i?0:n[i-1],n[i+1]=n[i]+il.distanceTo(rl);t.setAttribute("lineDistance",new ur(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(t.isGeometry){var a=t.vertices;for(n=t.lineDistances,i=0,r=a.length;i<r;i+=2)il.copy(a[i]),rl.copy(a[i+1]),n[i]=0===i?0:n[i-1],n[i+1]=n[i]+il.distanceTo(rl)}return this}}),ol.prototype=Object.assign(Object.create(nl.prototype),{constructor:ol,isLineLoop:!0}),sl.prototype=Object.create(er.prototype),sl.prototype.constructor=sl,sl.prototype.isPointsMaterial=!0,sl.prototype.copy=function(t){return er.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.morphTargets=t.morphTargets,this};var ll=new Hn,cl=new Li,hl=new bi,ul=new Mn;function ql(t,e){ai.call(this),this.type="Points",this.geometry=void 0!==t?t:new br,this.material=void 0!==e?e:new sl({color:16777215*Math.random()}),this.updateMorphTargets()}function ml(t,e,n,i,r,a,o){var s=cl.distanceSqToPoint(t);if(s<n){var l=new Mn;cl.closestPointToPoint(t,l),l.applyMatrix4(i);var c=r.ray.origin.distanceTo(l);if(c<r.near||c>r.far)return;a.push({distance:c,distanceToRay:Math.sqrt(s),point:l,index:e,face:null,object:o})}}function dl(t,e,n,i,r,a,o,s,l){Ln.call(this,t,e,n,i,r,a,o,s,l),this.format=void 0!==o?o:Vt,this.minFilter=void 0!==a?a:St,this.magFilter=void 0!==r?r:St,this.generateMipmaps=!1}function pl(t,e,n,i,r,a,o,s,l,c,h,u){Ln.call(this,null,a,o,s,l,c,i,r,h,u),this.image={width:e,height:n},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}function fl(t,e,n,i,r,a,o,s,l){Ln.call(this,t,e,n,i,r,a,o,s,l),this.needsUpdate=!0}function vl(t,e,n,i,r,a,o,s,l,c){if((c=void 0!==c?c:Yt)!==Yt&&c!==Zt)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&c===Yt&&(n=Ct),void 0===n&&c===Zt&&(n=Ht),Ln.call(this,null,i,r,a,o,s,c,n,l),this.image={width:t,height:e},this.magFilter=void 0!==o?o:yt,this.minFilter=void 0!==s?s:yt,this.flipY=!1,this.generateMipmaps=!1}function xl(t){br.call(this),this.type="WireframeGeometry";var e,n,i,r,a,o,s,l,c,h,u=[],q=[0,0],m={},d=["a","b","c"];if(t&&t.isGeometry){var p=t.faces;for(e=0,i=p.length;e<i;e++){var f=p[e];for(n=0;n<3;n++)s=f[d[n]],l=f[d[(n+1)%3]],q[0]=Math.min(s,l),q[1]=Math.max(s,l),void 0===m[c=q[0]+","+q[1]]&&(m[c]={index1:q[0],index2:q[1]})}for(c in m)o=m[c],h=t.vertices[o.index1],u.push(h.x,h.y,h.z),h=t.vertices[o.index2],u.push(h.x,h.y,h.z)}else if(t&&t.isBufferGeometry){var v,x,g,y,_,b,w;if(h=new Mn,null!==t.index){for(v=t.attributes.position,x=t.index,0===(g=t.groups).length&&(g=[{start:0,count:x.count,materialIndex:0}]),r=0,a=g.length;r<a;++r)for(e=_=(y=g[r]).start,i=_+y.count;e<i;e+=3)for(n=0;n<3;n++)s=x.getX(e+n),l=x.getX(e+(n+1)%3),q[0]=Math.min(s,l),q[1]=Math.max(s,l),void 0===m[c=q[0]+","+q[1]]&&(m[c]={index1:q[0],index2:q[1]});for(c in m)o=m[c],h.fromBufferAttribute(v,o.index1),u.push(h.x,h.y,h.z),h.fromBufferAttribute(v,o.index2),u.push(h.x,h.y,h.z)}else for(e=0,i=(v=t.attributes.position).count/3;e<i;e++)for(n=0;n<3;n++)b=3*e+n,h.fromBufferAttribute(v,b),u.push(h.x,h.y,h.z),w=3*e+(n+1)%3,h.fromBufferAttribute(v,w),u.push(h.x,h.y,h.z)}this.setAttribute("position",new ur(u,3))}function gl(t,e,n){Xr.call(this),this.type="ParametricGeometry",this.parameters={func:t,slices:e,stacks:n},this.fromBufferGeometry(new yl(t,e,n)),this.mergeVertices()}function yl(t,e,n){br.call(this),this.type="ParametricBufferGeometry",this.parameters={func:t,slices:e,stacks:n};var i,r,a=[],o=[],s=[],l=[],c=new Mn,h=new Mn,u=new Mn,q=new Mn,m=new Mn;t.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");var d=e+1;for(i=0;i<=n;i++){var p=i/n;for(r=0;r<=e;r++){var f=r/e;t(f,p,h),o.push(h.x,h.y,h.z),f-1e-5>=0?(t(f-1e-5,p,u),q.subVectors(h,u)):(t(f+1e-5,p,u),q.subVectors(u,h)),p-1e-5>=0?(t(f,p-1e-5,u),m.subVectors(h,u)):(t(f,p+1e-5,u),m.subVectors(u,h)),c.crossVectors(q,m).normalize(),s.push(c.x,c.y,c.z),l.push(f,p)}}for(i=0;i<n;i++)for(r=0;r<e;r++){var v=i*d+r,x=i*d+r+1,g=(i+1)*d+r+1,y=(i+1)*d+r;a.push(v,x,y),a.push(x,g,y)}this.setIndex(a),this.setAttribute("position",new ur(o,3)),this.setAttribute("normal",new ur(s,3)),this.setAttribute("uv",new ur(l,2))}function _l(t,e,n,i){Xr.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:n,detail:i},this.fromBufferGeometry(new bl(t,e,n,i)),this.mergeVertices()}function bl(t,e,n,i){br.call(this),this.type="PolyhedronBufferGeometry",this.parameters={vertices:t,indices:e,radius:n,detail:i},n=n||1;var r=[],a=[];function o(t,e,n,i){var r,a,o=Math.pow(2,i),l=[];for(r=0;r<=o;r++){l[r]=[];var c=t.clone().lerp(n,r/o),h=e.clone().lerp(n,r/o),u=o-r;for(a=0;a<=u;a++)l[r][a]=0===a&&r===o?c:c.clone().lerp(h,a/u)}for(r=0;r<o;r++)for(a=0;a<2*(o-r)-1;a++){var q=Math.floor(a/2);a%2==0?(s(l[r][q+1]),s(l[r+1][q]),s(l[r][q])):(s(l[r][q+1]),s(l[r+1][q+1]),s(l[r+1][q]))}}function s(t){r.push(t.x,t.y,t.z)}function l(e,n){var i=3*e;n.x=t[i+0],n.y=t[i+1],n.z=t[i+2]}function c(t,e,n,i){i<0&&1===t.x&&(a[e]=t.x-1),0===n.x&&0===n.z&&(a[e]=i/2/Math.PI+.5)}function h(t){return Math.atan2(t.z,-t.x)}!function(t){for(var n=new Mn,i=new Mn,r=new Mn,a=0;a<e.length;a+=3)l(e[a+0],n),l(e[a+1],i),l(e[a+2],r),o(n,i,r,t)}(i=i||0),function(t){for(var e=new Mn,n=0;n<r.length;n+=3)e.x=r[n+0],e.y=r[n+1],e.z=r[n+2],e.normalize().multiplyScalar(t),r[n+0]=e.x,r[n+1]=e.y,r[n+2]=e.z}(n),function(){for(var t=new Mn,e=0;e<r.length;e+=3){t.x=r[e+0],t.y=r[e+1],t.z=r[e+2];var n=h(t)/2/Math.PI+.5,i=(o=t,Math.atan2(-o.y,Math.sqrt(o.x*o.x+o.z*o.z))/Math.PI+.5);a.push(n,1-i)}var o;(function(){for(var t=new Mn,e=new Mn,n=new Mn,i=new Mn,o=new yn,s=new yn,l=new yn,u=0,q=0;u<r.length;u+=9,q+=6){t.set(r[u+0],r[u+1],r[u+2]),e.set(r[u+3],r[u+4],r[u+5]),n.set(r[u+6],r[u+7],r[u+8]),o.set(a[q+0],a[q+1]),s.set(a[q+2],a[q+3]),l.set(a[q+4],a[q+5]),i.copy(t).add(e).add(n).divideScalar(3);var m=h(i);c(o,q+0,t,m),c(s,q+2,e,m),c(l,q+4,n,m)}})(),function(){for(var t=0;t<a.length;t+=6){var e=a[t+0],n=a[t+2],i=a[t+4],r=Math.max(e,n,i),o=Math.min(e,n,i);r>.9&&o<.1&&(e<.2&&(a[t+0]+=1),n<.2&&(a[t+2]+=1),i<.2&&(a[t+4]+=1))}}()}(),this.setAttribute("position",new ur(r,3)),this.setAttribute("normal",new ur(r.slice(),3)),this.setAttribute("uv",new ur(a,2)),0===i?this.computeVertexNormals():this.normalizeNormals()}function wl(t,e){Xr.call(this),this.type="TetrahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Ml(t,e)),this.mergeVertices()}function Ml(t,e){bl.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type="TetrahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Sl(t,e){Xr.call(this),this.type="OctahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Tl(t,e)),this.mergeVertices()}function Tl(t,e){bl.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type="OctahedronBufferGeometry",this.parameters={radius:t,detail:e}}function El(t,e){Xr.call(this),this.type="IcosahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Al(t,e)),this.mergeVertices()}function Al(t,e){var n=(1+Math.sqrt(5))/2,i=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1];bl.call(this,i,[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type="IcosahedronBufferGeometry",this.parameters={radius:t,detail:e}}function zl(t,e){Xr.call(this),this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Ll(t,e)),this.mergeVertices()}function Ll(t,e){var n=(1+Math.sqrt(5))/2,i=1/n,r=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-i,-n,0,-i,n,0,i,-n,0,i,n,-i,-n,0,-i,n,0,i,-n,0,i,n,0,-n,0,-i,n,0,-i,-n,0,i,n,0,i];bl.call(this,r,[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type="DodecahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Pl(t,e,n,i,r,a){Xr.call(this),this.type="TubeGeometry",this.parameters={path:t,tubularSegments:e,radius:n,radialSegments:i,closed:r},void 0!==a&&console.warn("THREE.TubeGeometry: taper has been removed.");var o=new Rl(t,e,n,i,r);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals,this.fromBufferGeometry(o),this.mergeVertices()}function Rl(t,e,n,i,r){br.call(this),this.type="TubeBufferGeometry",this.parameters={path:t,tubularSegments:e,radius:n,radialSegments:i,closed:r},e=e||64,n=n||1,i=i||8,r=r||!1;var a=t.computeFrenetFrames(e,r);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals;var o,s,l=new Mn,c=new Mn,h=new yn,u=new Mn,q=[],m=[],d=[],p=[];function f(r){u=t.getPointAt(r/e,u);var o=a.normals[r],h=a.binormals[r];for(s=0;s<=i;s++){var d=s/i*Math.PI*2,p=Math.sin(d),f=-Math.cos(d);c.x=f*o.x+p*h.x,c.y=f*o.y+p*h.y,c.z=f*o.z+p*h.z,c.normalize(),m.push(c.x,c.y,c.z),l.x=u.x+n*c.x,l.y=u.y+n*c.y,l.z=u.z+n*c.z,q.push(l.x,l.y,l.z)}}!function(){for(o=0;o<e;o++)f(o);f(!1===r?e:0),function(){for(o=0;o<=e;o++)for(s=0;s<=i;s++)h.x=o/e,h.y=s/i,d.push(h.x,h.y)}(),function(){for(s=1;s<=e;s++)for(o=1;o<=i;o++){var t=(i+1)*(s-1)+(o-1),n=(i+1)*s+(o-1),r=(i+1)*s+o,a=(i+1)*(s-1)+o;p.push(t,n,a),p.push(n,r,a)}}()}(),this.setIndex(p),this.setAttribute("position",new ur(q,3)),this.setAttribute("normal",new ur(m,3)),this.setAttribute("uv",new ur(d,2))}function Cl(t,e,n,i,r,a,o){Xr.call(this),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:i,p:r,q:a},void 0!==o&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new Ol(t,e,n,i,r,a)),this.mergeVertices()}function Ol(t,e,n,i,r,a){br.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:i,p:r,q:a},t=t||1,e=e||.4,n=Math.floor(n)||64,i=Math.floor(i)||8,r=r||2,a=a||3;var o,s,l=[],c=[],h=[],u=[],q=new Mn,m=new Mn,d=new Mn,p=new Mn,f=new Mn,v=new Mn,x=new Mn;for(o=0;o<=n;++o){var g=o/n*r*Math.PI*2;for(E(g,r,a,t,d),E(g+.01,r,a,t,p),v.subVectors(p,d),x.addVectors(p,d),f.crossVectors(v,x),x.crossVectors(f,v),f.normalize(),x.normalize(),s=0;s<=i;++s){var y=s/i*Math.PI*2,_=-e*Math.cos(y),b=e*Math.sin(y);q.x=d.x+(_*x.x+b*f.x),q.y=d.y+(_*x.y+b*f.y),q.z=d.z+(_*x.z+b*f.z),c.push(q.x,q.y,q.z),m.subVectors(q,d).normalize(),h.push(m.x,m.y,m.z),u.push(o/n),u.push(s/i)}}for(s=1;s<=n;s++)for(o=1;o<=i;o++){var w=(i+1)*(s-1)+(o-1),M=(i+1)*s+(o-1),S=(i+1)*s+o,T=(i+1)*(s-1)+o;l.push(w,M,T),l.push(M,S,T)}function E(t,e,n,i,r){var a=Math.cos(t),o=Math.sin(t),s=n/e*t,l=Math.cos(s);r.x=i*(2+l)*.5*a,r.y=i*(2+l)*o*.5,r.z=i*Math.sin(s)*.5}this.setIndex(l),this.setAttribute("position",new ur(c,3)),this.setAttribute("normal",new ur(h,3)),this.setAttribute("uv",new ur(u,2))}function Il(t,e,n,i,r){Xr.call(this),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:i,arc:r},this.fromBufferGeometry(new Dl(t,e,n,i,r)),this.mergeVertices()}function Dl(t,e,n,i,r){br.call(this),this.type="TorusBufferGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:i,arc:r},t=t||1,e=e||.4,n=Math.floor(n)||8,i=Math.floor(i)||6,r=r||2*Math.PI;var a,o,s=[],l=[],c=[],h=[],u=new Mn,q=new Mn,m=new Mn;for(a=0;a<=n;a++)for(o=0;o<=i;o++){var d=o/i*r,p=a/n*Math.PI*2;q.x=(t+e*Math.cos(p))*Math.cos(d),q.y=(t+e*Math.cos(p))*Math.sin(d),q.z=e*Math.sin(p),l.push(q.x,q.y,q.z),u.x=t*Math.cos(d),u.y=t*Math.sin(d),m.subVectors(q,u).normalize(),c.push(m.x,m.y,m.z),h.push(o/i),h.push(a/n)}for(a=1;a<=n;a++)for(o=1;o<=i;o++){var f=(i+1)*a+o-1,v=(i+1)*(a-1)+o-1,x=(i+1)*(a-1)+o,g=(i+1)*a+o;s.push(f,v,g),s.push(v,x,g)}this.setIndex(s),this.setAttribute("position",new ur(l,3)),this.setAttribute("normal",new ur(c,3)),this.setAttribute("uv",new ur(h,2))}ql.prototype=Object.assign(Object.create(ai.prototype),{constructor:ql,isPoints:!0,raycast:function(t,e){var n=this.geometry,i=this.matrixWorld,r=t.params.Points.threshold;if(null===n.boundingSphere&&n.computeBoundingSphere(),hl.copy(n.boundingSphere),hl.applyMatrix4(i),hl.radius+=r,!1!==t.ray.intersectsSphere(hl)){ll.getInverse(i),cl.copy(t.ray).applyMatrix4(ll);var a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a;if(n.isBufferGeometry){var s=n.index,l=n.attributes.position.array;if(null!==s)for(var c=s.array,h=0,u=c.length;h<u;h++){var q=c[h];ul.fromArray(l,3*q),ml(ul,q,o,i,t,e,this)}else{h=0;for(var m=l.length/3;h<m;h++)ul.fromArray(l,3*h),ml(ul,h,o,i,t,e,this)}}else{var d=n.vertices;for(h=0,m=d.length;h<m;h++)ml(d[h],h,o,i,t,e,this)}}},updateMorphTargets:function(){var t,e,n,i=this.geometry;if(i.isBufferGeometry){var r=i.morphAttributes,a=Object.keys(r);if(a.length>0){var o=r[a[0]];if(void 0!==o)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},t=0,e=o.length;t<e;t++)n=o[t].name||String(t),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=t}}else{var s=i.morphTargets;void 0!==s&&s.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),dl.prototype=Object.assign(Object.create(Ln.prototype),{constructor:dl,isVideoTexture:!0,update:function(){var t=this.image;t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}),pl.prototype=Object.create(Ln.prototype),pl.prototype.constructor=pl,pl.prototype.isCompressedTexture=!0,fl.prototype=Object.create(Ln.prototype),fl.prototype.constructor=fl,fl.prototype.isCanvasTexture=!0,vl.prototype=Object.create(Ln.prototype),vl.prototype.constructor=vl,vl.prototype.isDepthTexture=!0,xl.prototype=Object.create(br.prototype),xl.prototype.constructor=xl,gl.prototype=Object.create(Xr.prototype),gl.prototype.constructor=gl,yl.prototype=Object.create(br.prototype),yl.prototype.constructor=yl,_l.prototype=Object.create(Xr.prototype),_l.prototype.constructor=_l,bl.prototype=Object.create(br.prototype),bl.prototype.constructor=bl,wl.prototype=Object.create(Xr.prototype),wl.prototype.constructor=wl,Ml.prototype=Object.create(bl.prototype),Ml.prototype.constructor=Ml,Sl.prototype=Object.create(Xr.prototype),Sl.prototype.constructor=Sl,Tl.prototype=Object.create(bl.prototype),Tl.prototype.constructor=Tl,El.prototype=Object.create(Xr.prototype),El.prototype.constructor=El,Al.prototype=Object.create(bl.prototype),Al.prototype.constructor=Al,zl.prototype=Object.create(Xr.prototype),zl.prototype.constructor=zl,Ll.prototype=Object.create(bl.prototype),Ll.prototype.constructor=Ll,Pl.prototype=Object.create(Xr.prototype),Pl.prototype.constructor=Pl,Rl.prototype=Object.create(br.prototype),Rl.prototype.constructor=Rl,Rl.prototype.toJSON=function(){var t=br.prototype.toJSON.call(this);return t.path=this.parameters.path.toJSON(),t},Cl.prototype=Object.create(Xr.prototype),Cl.prototype.constructor=Cl,Ol.prototype=Object.create(br.prototype),Ol.prototype.constructor=Ol,Il.prototype=Object.create(Xr.prototype),Il.prototype.constructor=Il,Dl.prototype=Object.create(br.prototype),Dl.prototype.constructor=Dl;var Nl=function(t,e,n){n=n||2;var i,r,a,o,s,l,c,h=e&&e.length,u=h?e[0]*n:t.length,q=Bl(t,0,u,n,!0),m=[];if(!q||q.next===q.prev)return m;if(h&&(q=function(t,e,n,i){var r,a,o,s,l,c=[];for(r=0,a=e.length;r<a;r++)o=e[r]*i,s=r<a-1?e[r+1]*i:t.length,(l=Bl(t,o,s,i,!1))===l.next&&(l.steiner=!0),c.push(Yl(l));for(c.sort(kl),r=0;r<c.length;r++)Wl(c[r],n),n=Ul(n,n.next);return n}(t,e,q,n)),t.length>80*n){i=a=t[0],r=o=t[1];for(var d=n;d<u;d+=n)(s=t[d])<i&&(i=s),(l=t[d+1])<r&&(r=l),s>a&&(a=s),l>o&&(o=l);c=0!==(c=Math.max(a-i,o-r))?1/c:0}return Fl(q,m,n,i,r,c),m};function Bl(t,e,n,i,r){var a,o;if(r===function(t,e,n,i){for(var r=0,a=e,o=n-i;a<n;a+=i)r+=(t[o]-t[a])*(t[a+1]+t[o+1]),o=a;return r}(t,e,n,i)>0)for(a=e;a<n;a+=i)o=nc(a,t[a],t[a+1],o);else for(a=n-i;a>=e;a-=i)o=nc(a,t[a],t[a+1],o);return o&&Kl(o,o.next)&&(ic(o),o=o.next),o}function Ul(t,e){if(!t)return t;e||(e=t);var n,i=t;do{if(n=!1,i.steiner||!Kl(i,i.next)&&0!==Ql(i.prev,i,i.next))i=i.next;else{if(ic(i),(i=e=i.prev)===i.next)break;n=!0}}while(n||i!==e);return e}function Fl(t,e,n,i,r,a,o){if(t){!o&&a&&function(t,e,n,i){var r=t;do{null===r.z&&(r.z=Xl(r.x,r.y,e,n,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){var e,n,i,r,a,o,s,l,c=1;do{for(n=t,t=null,a=null,o=0;n;){for(o++,i=n,s=0,e=0;e<c&&(s++,i=i.nextZ);e++);for(l=c;s>0||l>0&&i;)0!==s&&(0===l||!i||n.z<=i.z)?(r=n,n=n.nextZ,s--):(r=i,i=i.nextZ,l--),a?a.nextZ=r:t=r,r.prevZ=a,a=r;n=i}a.nextZ=null,c*=2}while(o>1)}(r)}(t,i,r,a);for(var s,l,c=t;t.prev!==t.next;)if(s=t.prev,l=t.next,a?Gl(t,i,r,a):Hl(t))e.push(s.i/n),e.push(t.i/n),e.push(l.i/n),ic(t),t=l.next,c=l.next;else if((t=l)===c){o?1===o?Fl(t=Vl(t,e,n),e,n,i,r,a,2):2===o&&jl(t,e,n,i,r,a):Fl(Ul(t),e,n,i,r,a,1);break}}}function Hl(t){var e=t.prev,n=t,i=t.next;if(Ql(e,n,i)>=0)return!1;for(var r=t.next.next;r!==t.prev;){if(Zl(e.x,e.y,n.x,n.y,i.x,i.y,r.x,r.y)&&Ql(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function Gl(t,e,n,i){var r=t.prev,a=t,o=t.next;if(Ql(r,a,o)>=0)return!1;for(var s=r.x<a.x?r.x<o.x?r.x:o.x:a.x<o.x?a.x:o.x,l=r.y<a.y?r.y<o.y?r.y:o.y:a.y<o.y?a.y:o.y,c=r.x>a.x?r.x>o.x?r.x:o.x:a.x>o.x?a.x:o.x,h=r.y>a.y?r.y>o.y?r.y:o.y:a.y>o.y?a.y:o.y,u=Xl(s,l,e,n,i),q=Xl(c,h,e,n,i),m=t.prevZ,d=t.nextZ;m&&m.z>=u&&d&&d.z<=q;){if(m!==t.prev&&m!==t.next&&Zl(r.x,r.y,a.x,a.y,o.x,o.y,m.x,m.y)&&Ql(m.prev,m,m.next)>=0)return!1;if(m=m.prevZ,d!==t.prev&&d!==t.next&&Zl(r.x,r.y,a.x,a.y,o.x,o.y,d.x,d.y)&&Ql(d.prev,d,d.next)>=0)return!1;d=d.nextZ}for(;m&&m.z>=u;){if(m!==t.prev&&m!==t.next&&Zl(r.x,r.y,a.x,a.y,o.x,o.y,m.x,m.y)&&Ql(m.prev,m,m.next)>=0)return!1;m=m.prevZ}for(;d&&d.z<=q;){if(d!==t.prev&&d!==t.next&&Zl(r.x,r.y,a.x,a.y,o.x,o.y,d.x,d.y)&&Ql(d.prev,d,d.next)>=0)return!1;d=d.nextZ}return!0}function Vl(t,e,n){var i=t;do{var r=i.prev,a=i.next.next;!Kl(r,a)&&$l(r,i,i.next,a)&&tc(r,a)&&tc(a,r)&&(e.push(r.i/n),e.push(i.i/n),e.push(a.i/n),ic(i),ic(i.next),i=t=a),i=i.next}while(i!==t);return i}function jl(t,e,n,i,r,a){var o=t;do{for(var s=o.next.next;s!==o.prev;){if(o.i!==s.i&&Jl(o,s)){var l=ec(o,s);return o=Ul(o,o.next),l=Ul(l,l.next),Fl(o,e,n,i,r,a),void Fl(l,e,n,i,r,a)}s=s.next}o=o.next}while(o!==t)}function kl(t,e){return t.x-e.x}function Wl(t,e){if(e=function(t,e){var n,i=e,r=t.x,a=t.y,o=-1/0;do{if(a<=i.y&&a>=i.next.y&&i.next.y!==i.y){var s=i.x+(a-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(s<=r&&s>o){if(o=s,s===r){if(a===i.y)return i;if(a===i.next.y)return i.next}n=i.x<i.next.x?i:i.next}}i=i.next}while(i!==e);if(!n)return null;if(r===o)return n.prev;var l,c=n,h=n.x,u=n.y,q=1/0;i=n.next;for(;i!==c;)r>=i.x&&i.x>=h&&r!==i.x&&Zl(a<u?r:o,a,h,u,a<u?o:r,a,i.x,i.y)&&((l=Math.abs(a-i.y)/(r-i.x))<q||l===q&&i.x>n.x)&&tc(i,t)&&(n=i,q=l),i=i.next;return n}(t,e)){var n=ec(e,t);Ul(n,n.next)}}function Xl(t,e,n,i,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*r)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-i)*r)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function Yl(t){var e=t,n=t;do{(e.x<n.x||e.x===n.x&&e.y<n.y)&&(n=e),e=e.next}while(e!==t);return n}function Zl(t,e,n,i,r,a,o,s){return(r-o)*(e-s)-(t-o)*(a-s)>=0&&(t-o)*(i-s)-(n-o)*(e-s)>=0&&(n-o)*(a-s)-(r-o)*(i-s)>=0}function Jl(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){var n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&$l(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1}(t,e)&&tc(t,e)&&tc(e,t)&&function(t,e){var n=t,i=!1,r=(t.x+e.x)/2,a=(t.y+e.y)/2;do{n.y>a!=n.next.y>a&&n.next.y!==n.y&&r<(n.next.x-n.x)*(a-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==t);return i}(t,e)}function Ql(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function Kl(t,e){return t.x===e.x&&t.y===e.y}function $l(t,e,n,i){return!!(Kl(t,n)&&Kl(e,i)||Kl(t,i)&&Kl(n,e))||Ql(t,e,n)>0!=Ql(t,e,i)>0&&Ql(n,i,t)>0!=Ql(n,i,e)>0}function tc(t,e){return Ql(t.prev,t,t.next)<0?Ql(t,e,t.next)>=0&&Ql(t,t.prev,e)>=0:Ql(t,e,t.prev)<0||Ql(t,t.next,e)<0}function ec(t,e){var n=new rc(t.i,t.x,t.y),i=new rc(e.i,e.x,e.y),r=t.next,a=e.prev;return t.next=e,e.prev=t,n.next=r,r.prev=n,i.next=n,n.prev=i,a.next=i,i.prev=a,i}function nc(t,e,n,i){var r=new rc(t,e,n);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function ic(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function rc(t,e,n){this.i=t,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}var ac={area:function(t){for(var e=t.length,n=0,i=e-1,r=0;r<e;i=r++)n+=t[i].x*t[r].y-t[r].x*t[i].y;return.5*n},isClockWise:function(t){return ac.area(t)<0},triangulateShape:function(t,e){var n=[],i=[],r=[];oc(t),sc(n,t);var a=t.length;e.forEach(oc);for(var o=0;o<e.length;o++)i.push(a),a+=e[o].length,sc(n,e[o]);var s=Nl(n,i);for(o=0;o<s.length;o+=3)r.push(s.slice(o,o+3));return r}};function oc(t){var e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function sc(t,e){for(var n=0;n<e.length;n++)t.push(e[n].x),t.push(e[n].y)}function lc(t,e){Xr.call(this),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},this.fromBufferGeometry(new cc(t,e)),this.mergeVertices()}function cc(t,e){br.call(this),this.type="ExtrudeBufferGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];for(var n=this,i=[],r=[],a=0,o=t.length;a<o;a++){s(t[a])}function s(t){var a=[],o=void 0!==e.curveSegments?e.curveSegments:12,s=void 0!==e.steps?e.steps:1,l=void 0!==e.depth?e.depth:100,c=void 0===e.bevelEnabled||e.bevelEnabled,h=void 0!==e.bevelThickness?e.bevelThickness:6,u=void 0!==e.bevelSize?e.bevelSize:h-2,q=void 0!==e.bevelOffset?e.bevelOffset:0,m=void 0!==e.bevelSegments?e.bevelSegments:3,d=e.extrudePath,p=void 0!==e.UVGenerator?e.UVGenerator:hc;void 0!==e.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),l=e.amount);var f,v,x,g,y,_,b,w,M=!1;d&&(f=d.getSpacedPoints(s),M=!0,c=!1,v=d.computeFrenetFrames(s,!1),x=new Mn,g=new Mn,y=new Mn),c||(m=0,h=0,u=0,q=0);var S=t.extractPoints(o),T=S.shape,E=S.holes;if(!ac.isClockWise(T))for(T=T.reverse(),b=0,w=E.length;b<w;b++)_=E[b],ac.isClockWise(_)&&(E[b]=_.reverse());var A=ac.triangulateShape(T,E),z=T;for(b=0,w=E.length;b<w;b++)_=E[b],T=T.concat(_);function L(t,e,n){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().multiplyScalar(n).add(t)}var P,R,C,O,I,D,N=T.length,B=A.length;function U(t,e,n){var i,r,a,o=t.x-e.x,s=t.y-e.y,l=n.x-t.x,c=n.y-t.y,h=o*o+s*s,u=o*c-s*l;if(Math.abs(u)>Number.EPSILON){var q=Math.sqrt(h),m=Math.sqrt(l*l+c*c),d=e.x-s/q,p=e.y+o/q,f=((n.x-c/m-d)*c-(n.y+l/m-p)*l)/(o*c-s*l),v=(i=d+o*f-t.x)*i+(r=p+s*f-t.y)*r;if(v<=2)return new yn(i,r);a=Math.sqrt(v/2)}else{var x=!1;o>Number.EPSILON?l>Number.EPSILON&&(x=!0):o<-Number.EPSILON?l<-Number.EPSILON&&(x=!0):Math.sign(s)===Math.sign(c)&&(x=!0),x?(i=-s,r=o,a=Math.sqrt(h)):(i=o,r=s,a=Math.sqrt(h/2))}return new yn(i/a,r/a)}for(var F=[],H=0,G=z.length,V=G-1,j=H+1;H<G;H++,V++,j++)V===G&&(V=0),j===G&&(j=0),F[H]=U(z[H],z[V],z[j]);var k,W,X=[],Y=F.concat();for(b=0,w=E.length;b<w;b++){for(_=E[b],k=[],H=0,V=(G=_.length)-1,j=H+1;H<G;H++,V++,j++)V===G&&(V=0),j===G&&(j=0),k[H]=U(_[H],_[V],_[j]);X.push(k),Y=Y.concat(k)}for(P=0;P<m;P++){for(C=P/m,O=h*Math.cos(C*Math.PI/2),R=u*Math.sin(C*Math.PI/2)+q,H=0,G=z.length;H<G;H++)J((I=L(z[H],F[H],R)).x,I.y,-O);for(b=0,w=E.length;b<w;b++)for(_=E[b],k=X[b],H=0,G=_.length;H<G;H++)J((I=L(_[H],k[H],R)).x,I.y,-O)}for(R=u+q,H=0;H<N;H++)I=c?L(T[H],Y[H],R):T[H],M?(g.copy(v.normals[0]).multiplyScalar(I.x),x.copy(v.binormals[0]).multiplyScalar(I.y),y.copy(f[0]).add(g).add(x),J(y.x,y.y,y.z)):J(I.x,I.y,0);for(W=1;W<=s;W++)for(H=0;H<N;H++)I=c?L(T[H],Y[H],R):T[H],M?(g.copy(v.normals[W]).multiplyScalar(I.x),x.copy(v.binormals[W]).multiplyScalar(I.y),y.copy(f[W]).add(g).add(x),J(y.x,y.y,y.z)):J(I.x,I.y,l/s*W);for(P=m-1;P>=0;P--){for(C=P/m,O=h*Math.cos(C*Math.PI/2),R=u*Math.sin(C*Math.PI/2)+q,H=0,G=z.length;H<G;H++)J((I=L(z[H],F[H],R)).x,I.y,l+O);for(b=0,w=E.length;b<w;b++)for(_=E[b],k=X[b],H=0,G=_.length;H<G;H++)I=L(_[H],k[H],R),M?J(I.x,I.y+f[s-1].y,f[s-1].x+O):J(I.x,I.y,l+O)}function Z(t,e){var n,i;for(H=t.length;--H>=0;){n=H,(i=H-1)<0&&(i=t.length-1);var r=0,a=s+2*m;for(r=0;r<a;r++){var o=N*r,l=N*(r+1);K(e+n+o,e+i+o,e+i+l,e+n+l)}}}function J(t,e,n){a.push(t),a.push(e),a.push(n)}function Q(t,e,r){$(t),$(e),$(r);var a=i.length/3,o=p.generateTopUV(n,i,a-3,a-2,a-1);tt(o[0]),tt(o[1]),tt(o[2])}function K(t,e,r,a){$(t),$(e),$(a),$(e),$(r),$(a);var o=i.length/3,s=p.generateSideWallUV(n,i,o-6,o-3,o-2,o-1);tt(s[0]),tt(s[1]),tt(s[3]),tt(s[1]),tt(s[2]),tt(s[3])}function $(t){i.push(a[3*t+0]),i.push(a[3*t+1]),i.push(a[3*t+2])}function tt(t){r.push(t.x),r.push(t.y)}!function(){var t=i.length/3;if(c){var e=0,r=N*e;for(H=0;H<B;H++)Q((D=A[H])[2]+r,D[1]+r,D[0]+r);for(r=N*(e=s+2*m),H=0;H<B;H++)Q((D=A[H])[0]+r,D[1]+r,D[2]+r)}else{for(H=0;H<B;H++)Q((D=A[H])[2],D[1],D[0]);for(H=0;H<B;H++)Q((D=A[H])[0]+N*s,D[1]+N*s,D[2]+N*s)}n.addGroup(t,i.length/3-t,0)}(),function(){var t=i.length/3,e=0;for(Z(z,e),e+=z.length,b=0,w=E.length;b<w;b++)Z(_=E[b],e),e+=_.length;n.addGroup(t,i.length/3-t,1)}()}this.setAttribute("position",new ur(i,3)),this.setAttribute("uv",new ur(r,2)),this.computeVertexNormals()}lc.prototype=Object.create(Xr.prototype),lc.prototype.constructor=lc,lc.prototype.toJSON=function(){var t=Xr.prototype.toJSON.call(this);return uc(this.parameters.shapes,this.parameters.options,t)},cc.prototype=Object.create(br.prototype),cc.prototype.constructor=cc,cc.prototype.toJSON=function(){var t=br.prototype.toJSON.call(this);return uc(this.parameters.shapes,this.parameters.options,t)};var hc={generateTopUV:function(t,e,n,i,r){var a=e[3*n],o=e[3*n+1],s=e[3*i],l=e[3*i+1],c=e[3*r],h=e[3*r+1];return[new yn(a,o),new yn(s,l),new yn(c,h)]},generateSideWallUV:function(t,e,n,i,r,a){var o=e[3*n],s=e[3*n+1],l=e[3*n+2],c=e[3*i],h=e[3*i+1],u=e[3*i+2],q=e[3*r],m=e[3*r+1],d=e[3*r+2],p=e[3*a],f=e[3*a+1],v=e[3*a+2];return Math.abs(s-h)<.01?[new yn(o,1-l),new yn(c,1-u),new yn(q,1-d),new yn(p,1-v)]:[new yn(s,1-l),new yn(h,1-u),new yn(m,1-d),new yn(f,1-v)]}};function uc(t,e,n){if(n.shapes=[],Array.isArray(t))for(var i=0,r=t.length;i<r;i++){var a=t[i];n.shapes.push(a.uuid)}else n.shapes.push(t.uuid);return void 0!==e.extrudePath&&(n.options.extrudePath=e.extrudePath.toJSON()),n}function qc(t,e){Xr.call(this),this.type="TextGeometry",this.parameters={text:t,parameters:e},this.fromBufferGeometry(new mc(t,e)),this.mergeVertices()}function mc(t,e){var n=(e=e||{}).font;if(!n||!n.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new Xr;var i=n.generateShapes(t,e.size);e.depth=void 0!==e.height?e.height:50,void 0===e.bevelThickness&&(e.bevelThickness=10),void 0===e.bevelSize&&(e.bevelSize=8),void 0===e.bevelEnabled&&(e.bevelEnabled=!1),cc.call(this,i,e),this.type="TextBufferGeometry"}function dc(t,e,n,i,r,a,o){Xr.call(this),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:r,thetaStart:a,thetaLength:o},this.fromBufferGeometry(new pc(t,e,n,i,r,a,o)),this.mergeVertices()}function pc(t,e,n,i,r,a,o){br.call(this),this.type="SphereBufferGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:r,thetaStart:a,thetaLength:o},t=t||1,e=Math.max(3,Math.floor(e)||8),n=Math.max(2,Math.floor(n)||6),i=void 0!==i?i:0,r=void 0!==r?r:2*Math.PI,a=void 0!==a?a:0,o=void 0!==o?o:Math.PI;var s,l,c=Math.min(a+o,Math.PI),h=0,u=[],q=new Mn,m=new Mn,d=[],p=[],f=[],v=[];for(l=0;l<=n;l++){var x=[],g=l/n,y=0;for(0==l&&0==a?y=.5/e:l==n&&c==Math.PI&&(y=-.5/e),s=0;s<=e;s++){var _=s/e;q.x=-t*Math.cos(i+_*r)*Math.sin(a+g*o),q.y=t*Math.cos(a+g*o),q.z=t*Math.sin(i+_*r)*Math.sin(a+g*o),p.push(q.x,q.y,q.z),m.copy(q).normalize(),f.push(m.x,m.y,m.z),v.push(_+y,1-g),x.push(h++)}u.push(x)}for(l=0;l<n;l++)for(s=0;s<e;s++){var b=u[l][s+1],w=u[l][s],M=u[l+1][s],S=u[l+1][s+1];(0!==l||a>0)&&d.push(b,w,S),(l!==n-1||c<Math.PI)&&d.push(w,M,S)}this.setIndex(d),this.setAttribute("position",new ur(p,3)),this.setAttribute("normal",new ur(f,3)),this.setAttribute("uv",new ur(v,2))}function fc(t,e,n,i,r,a){Xr.call(this),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:i,thetaStart:r,thetaLength:a},this.fromBufferGeometry(new vc(t,e,n,i,r,a)),this.mergeVertices()}function vc(t,e,n,i,r,a){br.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:i,thetaStart:r,thetaLength:a},t=t||.5,e=e||1,r=void 0!==r?r:0,a=void 0!==a?a:2*Math.PI,n=void 0!==n?Math.max(3,n):8;var o,s,l,c=[],h=[],u=[],q=[],m=t,d=(e-t)/(i=void 0!==i?Math.max(1,i):1),p=new Mn,f=new yn;for(s=0;s<=i;s++){for(l=0;l<=n;l++)o=r+l/n*a,p.x=m*Math.cos(o),p.y=m*Math.sin(o),h.push(p.x,p.y,p.z),u.push(0,0,1),f.x=(p.x/e+1)/2,f.y=(p.y/e+1)/2,q.push(f.x,f.y);m+=d}for(s=0;s<i;s++){var v=s*(n+1);for(l=0;l<n;l++){var x=o=l+v,g=o+n+1,y=o+n+2,_=o+1;c.push(x,g,_),c.push(g,y,_)}}this.setIndex(c),this.setAttribute("position",new ur(h,3)),this.setAttribute("normal",new ur(u,3)),this.setAttribute("uv",new ur(q,2))}function xc(t,e,n,i){Xr.call(this),this.type="LatheGeometry",this.parameters={points:t,segments:e,phiStart:n,phiLength:i},this.fromBufferGeometry(new gc(t,e,n,i)),this.mergeVertices()}function gc(t,e,n,i){br.call(this),this.type="LatheBufferGeometry",this.parameters={points:t,segments:e,phiStart:n,phiLength:i},e=Math.floor(e)||12,n=n||0,i=i||2*Math.PI,i=gn.clamp(i,0,2*Math.PI);var r,a,o,s=[],l=[],c=[],h=1/e,u=new Mn,q=new yn;for(a=0;a<=e;a++){var m=n+a*h*i,d=Math.sin(m),p=Math.cos(m);for(o=0;o<=t.length-1;o++)u.x=t[o].x*d,u.y=t[o].y,u.z=t[o].x*p,l.push(u.x,u.y,u.z),q.x=a/e,q.y=o/(t.length-1),c.push(q.x,q.y)}for(a=0;a<e;a++)for(o=0;o<t.length-1;o++){var f=r=o+a*t.length,v=r+t.length,x=r+t.length+1,g=r+1;s.push(f,v,g),s.push(v,x,g)}if(this.setIndex(s),this.setAttribute("position",new ur(l,3)),this.setAttribute("uv",new ur(c,2)),this.computeVertexNormals(),i===2*Math.PI){var y=this.attributes.normal.array,_=new Mn,b=new Mn,w=new Mn;for(r=e*t.length*3,a=0,o=0;a<t.length;a++,o+=3)_.x=y[o+0],_.y=y[o+1],_.z=y[o+2],b.x=y[r+o+0],b.y=y[r+o+1],b.z=y[r+o+2],w.addVectors(_,b).normalize(),y[o+0]=y[r+o+0]=w.x,y[o+1]=y[r+o+1]=w.y,y[o+2]=y[r+o+2]=w.z}}function yc(t,e){Xr.call(this),this.type="ShapeGeometry","object"==typeof e&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),e=e.curveSegments),this.parameters={shapes:t,curveSegments:e},this.fromBufferGeometry(new _c(t,e)),this.mergeVertices()}function _c(t,e){br.call(this),this.type="ShapeBufferGeometry",this.parameters={shapes:t,curveSegments:e},e=e||12;var n=[],i=[],r=[],a=[],o=0,s=0;if(!1===Array.isArray(t))c(t);else for(var l=0;l<t.length;l++)c(t[l]),this.addGroup(o,s,l),o+=s,s=0;function c(t){var o,l,c,h=i.length/3,u=t.extractPoints(e),q=u.shape,m=u.holes;for(!1===ac.isClockWise(q)&&(q=q.reverse()),o=0,l=m.length;o<l;o++)c=m[o],!0===ac.isClockWise(c)&&(m[o]=c.reverse());var d=ac.triangulateShape(q,m);for(o=0,l=m.length;o<l;o++)c=m[o],q=q.concat(c);for(o=0,l=q.length;o<l;o++){var p=q[o];i.push(p.x,p.y,0),r.push(0,0,1),a.push(p.x,p.y)}for(o=0,l=d.length;o<l;o++){var f=d[o],v=f[0]+h,x=f[1]+h,g=f[2]+h;n.push(v,x,g),s+=3}}this.setIndex(n),this.setAttribute("position",new ur(i,3)),this.setAttribute("normal",new ur(r,3)),this.setAttribute("uv",new ur(a,2))}function bc(t,e){if(e.shapes=[],Array.isArray(t))for(var n=0,i=t.length;n<i;n++){var r=t[n];e.shapes.push(r.uuid)}else e.shapes.push(t.uuid);return e}function wc(t,e){br.call(this),this.type="EdgesGeometry",this.parameters={thresholdAngle:e},e=void 0!==e?e:1;var n,i,r,a,o=[],s=Math.cos(gn.DEG2RAD*e),l=[0,0],c={},h=["a","b","c"];t.isBufferGeometry?(a=new Xr).fromBufferGeometry(t):a=t.clone(),a.mergeVertices(),a.computeFaceNormals();for(var u=a.vertices,q=a.faces,m=0,d=q.length;m<d;m++)for(var p=q[m],f=0;f<3;f++)n=p[h[f]],i=p[h[(f+1)%3]],l[0]=Math.min(n,i),l[1]=Math.max(n,i),void 0===c[r=l[0]+","+l[1]]?c[r]={index1:l[0],index2:l[1],face1:m,face2:void 0}:c[r].face2=m;for(r in c){var v=c[r];if(void 0===v.face2||q[v.face1].normal.dot(q[v.face2].normal)<=s){var x=u[v.index1];o.push(x.x,x.y,x.z),x=u[v.index2],o.push(x.x,x.y,x.z)}}this.setAttribute("position",new ur(o,3))}function Mc(t,e,n,i,r,a,o,s){Xr.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:i,heightSegments:r,openEnded:a,thetaStart:o,thetaLength:s},this.fromBufferGeometry(new Sc(t,e,n,i,r,a,o,s)),this.mergeVertices()}function Sc(t,e,n,i,r,a,o,s){br.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:i,heightSegments:r,openEnded:a,thetaStart:o,thetaLength:s};var l=this;t=void 0!==t?t:1,e=void 0!==e?e:1,n=n||1,i=Math.floor(i)||8,r=Math.floor(r)||1,a=void 0!==a&&a,o=void 0!==o?o:0,s=void 0!==s?s:2*Math.PI;var c=[],h=[],u=[],q=[],m=0,d=[],p=n/2,f=0;function v(n){var r,a,d,v=new yn,x=new Mn,g=0,y=!0===n?t:e,_=!0===n?1:-1;for(a=m,r=1;r<=i;r++)h.push(0,p*_,0),u.push(0,_,0),q.push(.5,.5),m++;for(d=m,r=0;r<=i;r++){var b=r/i*s+o,w=Math.cos(b),M=Math.sin(b);x.x=y*M,x.y=p*_,x.z=y*w,h.push(x.x,x.y,x.z),u.push(0,_,0),v.x=.5*w+.5,v.y=.5*M*_+.5,q.push(v.x,v.y),m++}for(r=0;r<i;r++){var S=a+r,T=d+r;!0===n?c.push(T,T+1,S):c.push(T+1,T,S),g+=3}l.addGroup(f,g,!0===n?1:2),f+=g}!function(){var a,v,x=new Mn,g=new Mn,y=0,_=(e-t)/n;for(v=0;v<=r;v++){var b=[],w=v/r,M=w*(e-t)+t;for(a=0;a<=i;a++){var S=a/i,T=S*s+o,E=Math.sin(T),A=Math.cos(T);g.x=M*E,g.y=-w*n+p,g.z=M*A,h.push(g.x,g.y,g.z),x.set(E,_,A).normalize(),u.push(x.x,x.y,x.z),q.push(S,1-w),b.push(m++)}d.push(b)}for(a=0;a<i;a++)for(v=0;v<r;v++){var z=d[v][a],L=d[v+1][a],P=d[v+1][a+1],R=d[v][a+1];c.push(z,L,R),c.push(L,P,R),y+=6}l.addGroup(f,y,0),f+=y}(),!1===a&&(t>0&&v(!0),e>0&&v(!1)),this.setIndex(c),this.setAttribute("position",new ur(h,3)),this.setAttribute("normal",new ur(u,3)),this.setAttribute("uv",new ur(q,2))}function Tc(t,e,n,i,r,a,o){Mc.call(this,0,t,e,n,i,r,a,o),this.type="ConeGeometry",this.parameters={radius:t,height:e,radialSegments:n,heightSegments:i,openEnded:r,thetaStart:a,thetaLength:o}}function Ec(t,e,n,i,r,a,o){Sc.call(this,0,t,e,n,i,r,a,o),this.type="ConeBufferGeometry",this.parameters={radius:t,height:e,radialSegments:n,heightSegments:i,openEnded:r,thetaStart:a,thetaLength:o}}function Ac(t,e,n,i){Xr.call(this),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:i},this.fromBufferGeometry(new zc(t,e,n,i)),this.mergeVertices()}function zc(t,e,n,i){br.call(this),this.type="CircleBufferGeometry",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:i},t=t||1,e=void 0!==e?Math.max(3,e):8,n=void 0!==n?n:0,i=void 0!==i?i:2*Math.PI;var r,a,o=[],s=[],l=[],c=[],h=new Mn,u=new yn;for(s.push(0,0,0),l.push(0,0,1),c.push(.5,.5),a=0,r=3;a<=e;a++,r+=3){var q=n+a/e*i;h.x=t*Math.cos(q),h.y=t*Math.sin(q),s.push(h.x,h.y,h.z),l.push(0,0,1),u.x=(s[r]/t+1)/2,u.y=(s[r+1]/t+1)/2,c.push(u.x,u.y)}for(r=1;r<=e;r++)o.push(r,r+1,0);this.setIndex(o),this.setAttribute("position",new ur(s,3)),this.setAttribute("normal",new ur(l,3)),this.setAttribute("uv",new ur(c,2))}qc.prototype=Object.create(Xr.prototype),qc.prototype.constructor=qc,mc.prototype=Object.create(cc.prototype),mc.prototype.constructor=mc,dc.prototype=Object.create(Xr.prototype),dc.prototype.constructor=dc,pc.prototype=Object.create(br.prototype),pc.prototype.constructor=pc,fc.prototype=Object.create(Xr.prototype),fc.prototype.constructor=fc,vc.prototype=Object.create(br.prototype),vc.prototype.constructor=vc,xc.prototype=Object.create(Xr.prototype),xc.prototype.constructor=xc,gc.prototype=Object.create(br.prototype),gc.prototype.constructor=gc,yc.prototype=Object.create(Xr.prototype),yc.prototype.constructor=yc,yc.prototype.toJSON=function(){var t=Xr.prototype.toJSON.call(this);return bc(this.parameters.shapes,t)},_c.prototype=Object.create(br.prototype),_c.prototype.constructor=_c,_c.prototype.toJSON=function(){var t=br.prototype.toJSON.call(this);return bc(this.parameters.shapes,t)},wc.prototype=Object.create(br.prototype),wc.prototype.constructor=wc,Mc.prototype=Object.create(Xr.prototype),Mc.prototype.constructor=Mc,Sc.prototype=Object.create(br.prototype),Sc.prototype.constructor=Sc,Tc.prototype=Object.create(Mc.prototype),Tc.prototype.constructor=Tc,Ec.prototype=Object.create(Sc.prototype),Ec.prototype.constructor=Ec,Ac.prototype=Object.create(Xr.prototype),Ac.prototype.constructor=Ac,zc.prototype=Object.create(br.prototype),zc.prototype.constructor=zc;var Lc=Object.freeze({__proto__:null,WireframeGeometry:xl,ParametricGeometry:gl,ParametricBufferGeometry:yl,TetrahedronGeometry:wl,TetrahedronBufferGeometry:Ml,OctahedronGeometry:Sl,OctahedronBufferGeometry:Tl,IcosahedronGeometry:El,IcosahedronBufferGeometry:Al,DodecahedronGeometry:zl,DodecahedronBufferGeometry:Ll,PolyhedronGeometry:_l,PolyhedronBufferGeometry:bl,TubeGeometry:Pl,TubeBufferGeometry:Rl,TorusKnotGeometry:Cl,TorusKnotBufferGeometry:Ol,TorusGeometry:Il,TorusBufferGeometry:Dl,TextGeometry:qc,TextBufferGeometry:mc,SphereGeometry:dc,SphereBufferGeometry:pc,RingGeometry:fc,RingBufferGeometry:vc,PlaneGeometry:va,PlaneBufferGeometry:xa,LatheGeometry:xc,LatheBufferGeometry:gc,ShapeGeometry:yc,ShapeBufferGeometry:_c,ExtrudeGeometry:lc,ExtrudeBufferGeometry:cc,EdgesGeometry:wc,ConeGeometry:Tc,ConeBufferGeometry:Ec,CylinderGeometry:Mc,CylinderBufferGeometry:Sc,CircleGeometry:Ac,CircleBufferGeometry:zc,BoxGeometry:Yr,BoxBufferGeometry:Zr});function Pc(t){er.call(this),this.type="ShadowMaterial",this.color=new Zi(0),this.transparent=!0,this.setValues(t)}function Rc(t){ea.call(this,t),this.type="RawShaderMaterial"}function Cc(t){er.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Zi(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Zi(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ge,this.normalScale=new yn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function Oc(t){Cc.call(this),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.reflectivity=.5,this.clearcoat=0,this.clearcoatRoughness=0,this.sheen=null,this.clearcoatNormalScale=new yn(1,1),this.clearcoatNormalMap=null,this.transparency=0,this.setValues(t)}function Ic(t){er.call(this),this.type="MeshPhongMaterial",this.color=new Zi(16777215),this.specular=new Zi(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Zi(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ge,this.normalScale=new yn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=tt,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function Dc(t){Ic.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.gradientMap=null,this.setValues(t)}function Nc(t){er.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ge,this.normalScale=new yn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function Bc(t){er.call(this),this.type="MeshLambertMaterial",this.color=new Zi(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Zi(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=tt,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function Uc(t){er.call(this),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Zi(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ge,this.normalScale=new yn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function Fc(t){Js.call(this),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}Pc.prototype=Object.create(er.prototype),Pc.prototype.constructor=Pc,Pc.prototype.isShadowMaterial=!0,Pc.prototype.copy=function(t){return er.prototype.copy.call(this,t),this.color.copy(t.color),this},Rc.prototype=Object.create(ea.prototype),Rc.prototype.constructor=Rc,Rc.prototype.isRawShaderMaterial=!0,Cc.prototype=Object.create(er.prototype),Cc.prototype.constructor=Cc,Cc.prototype.isMeshStandardMaterial=!0,Cc.prototype.copy=function(t){return er.prototype.copy.call(this,t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},Oc.prototype=Object.create(Cc.prototype),Oc.prototype.constructor=Oc,Oc.prototype.isMeshPhysicalMaterial=!0,Oc.prototype.copy=function(t){return Cc.prototype.copy.call(this,t),this.defines={STANDARD:"",PHYSICAL:""},this.reflectivity=t.reflectivity,this.clearcoat=t.clearcoat,this.clearcoatRoughness=t.clearcoatRoughness,t.sheen?this.sheen=(this.sheen||new Zi).copy(t.sheen):this.sheen=null,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.transparency=t.transparency,this},Ic.prototype=Object.create(er.prototype),Ic.prototype.constructor=Ic,Ic.prototype.isMeshPhongMaterial=!0,Ic.prototype.copy=function(t){return er.prototype.copy.call(this,t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},Dc.prototype=Object.create(Ic.prototype),Dc.prototype.constructor=Dc,Dc.prototype.isMeshToonMaterial=!0,Dc.prototype.copy=function(t){return Ic.prototype.copy.call(this,t),this.gradientMap=t.gradientMap,this},Nc.prototype=Object.create(er.prototype),Nc.prototype.constructor=Nc,Nc.prototype.isMeshNormalMaterial=!0,Nc.prototype.copy=function(t){return er.prototype.copy.call(this,t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},Bc.prototype=Object.create(er.prototype),Bc.prototype.constructor=Bc,Bc.prototype.isMeshLambertMaterial=!0,Bc.prototype.copy=function(t){return er.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},Uc.prototype=Object.create(er.prototype),Uc.prototype.constructor=Uc,Uc.prototype.isMeshMatcapMaterial=!0,Uc.prototype.copy=function(t){return er.prototype.copy.call(this,t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},Fc.prototype=Object.create(Js.prototype),Fc.prototype.constructor=Fc,Fc.prototype.isLineDashedMaterial=!0,Fc.prototype.copy=function(t){return Js.prototype.copy.call(this,t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this};var Hc=Object.freeze({__proto__:null,ShadowMaterial:Pc,SpriteMaterial:Ts,RawShaderMaterial:Rc,ShaderMaterial:ea,PointsMaterial:sl,MeshPhysicalMaterial:Oc,MeshStandardMaterial:Cc,MeshPhongMaterial:Ic,MeshToonMaterial:Dc,MeshNormalMaterial:Nc,MeshLambertMaterial:Bc,MeshDepthMaterial:is,MeshDistanceMaterial:rs,MeshBasicMaterial:nr,MeshMatcapMaterial:Uc,LineDashedMaterial:Fc,LineBasicMaterial:Js,Material:er}),Gc={arraySlice:function(t,e,n){return Gc.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==n?n:t.length)):t.slice(e,n)},convertArray:function(t,e,n){return!t||!n&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){for(var e=t.length,n=new Array(e),i=0;i!==e;++i)n[i]=i;return n.sort((function(e,n){return t[e]-t[n]})),n},sortedArray:function(t,e,n){for(var i=t.length,r=new t.constructor(i),a=0,o=0;o!==i;++a)for(var s=n[a]*e,l=0;l!==e;++l)r[o++]=t[s+l];return r},flattenJSON:function(t,e,n,i){for(var r=1,a=t[0];void 0!==a&&void 0===a[i];)a=t[r++];if(void 0!==a){var o=a[i];if(void 0!==o)if(Array.isArray(o))do{void 0!==(o=a[i])&&(e.push(a.time),n.push.apply(n,o)),a=t[r++]}while(void 0!==a);else if(void 0!==o.toArray)do{void 0!==(o=a[i])&&(e.push(a.time),o.toArray(n,n.length)),a=t[r++]}while(void 0!==a);else do{void 0!==(o=a[i])&&(e.push(a.time),n.push(o)),a=t[r++]}while(void 0!==a)}},subclip:function(t,e,n,i,r){r=r||30;var a=t.clone();a.name=e;for(var o=[],s=0;s<a.tracks.length;++s){for(var l=a.tracks[s],c=l.getValueSize(),h=[],u=[],q=0;q<l.times.length;++q){var m=l.times[q]*r;if(!(m<n||m>=i)){h.push(l.times[q]);for(var d=0;d<c;++d)u.push(l.values[q*c+d])}}0!==h.length&&(l.times=Gc.convertArray(h,l.times.constructor),l.values=Gc.convertArray(u,l.values.constructor),o.push(l))}a.tracks=o;var p=1/0;for(s=0;s<a.tracks.length;++s)p>a.tracks[s].times[0]&&(p=a.tracks[s].times[0]);for(s=0;s<a.tracks.length;++s)a.tracks[s].shift(-1*p);return a.resetDuration(),a}};function Vc(t,e,n,i){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==i?i:new e.constructor(n),this.sampleValues=e,this.valueSize=n}function jc(t,e,n,i){Vc.call(this,t,e,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function kc(t,e,n,i){Vc.call(this,t,e,n,i)}function Wc(t,e,n,i){Vc.call(this,t,e,n,i)}function Xc(t,e,n,i){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=Gc.convertArray(e,this.TimeBufferType),this.values=Gc.convertArray(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}function Yc(t,e,n){Xc.call(this,t,e,n)}function Zc(t,e,n,i){Xc.call(this,t,e,n,i)}function Jc(t,e,n,i){Xc.call(this,t,e,n,i)}function Qc(t,e,n,i){Vc.call(this,t,e,n,i)}function Kc(t,e,n,i){Xc.call(this,t,e,n,i)}function $c(t,e,n,i){Xc.call(this,t,e,n,i)}function th(t,e,n,i){Xc.call(this,t,e,n,i)}function eh(t,e,n){this.name=t,this.tracks=n,this.duration=void 0!==e?e:-1,this.uuid=gn.generateUUID(),this.duration<0&&this.resetDuration()}function nh(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");var e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Jc;case"vector":case"vector2":case"vector3":case"vector4":return th;case"color":return Zc;case"quaternion":return Kc;case"bool":case"boolean":return Yc;case"string":return $c}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){var n=[],i=[];Gc.flattenJSON(t.keys,n,i,"value"),t.times=n,t.values=i}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}Object.assign(Vc.prototype,{evaluate:function(t){var e=this.parameterPositions,n=this._cachedIndex,i=e[n],r=e[n-1];t:{e:{var a;n:{i:if(!(t<i)){for(var o=n+2;;){if(void 0===i){if(t<r)break i;return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,t,r)}if(n===o)break;if(r=i,t<(i=e[++n]))break e}a=e.length;break n}if(t>=r)break t;var s=e[1];t<s&&(n=2,r=s);for(o=n-2;;){if(void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,i);if(n===o)break;if(i=r,t>=(r=e[--n-1]))break e}a=n,n=0}for(;n<a;){var l=n+a>>>1;t<e[l]?a=l:n=l+1}if(i=e[n],void 0===(r=e[n-1]))return this._cachedIndex=0,this.beforeStart_(0,t,i);if(void 0===i)return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,r,t)}this._cachedIndex=n,this.intervalChanged_(n,r,i)}return this.interpolate_(n,r,t,i)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(t){for(var e=this.resultBuffer,n=this.sampleValues,i=this.valueSize,r=t*i,a=0;a!==i;++a)e[a]=n[r+a];return e},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}}),
//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(Vc.prototype,{beforeStart_:Vc.prototype.copySampleValue_,afterEnd_:Vc.prototype.copySampleValue_}),jc.prototype=Object.assign(Object.create(Vc.prototype),{constructor:jc,DefaultSettings_:{endingStart:Te,endingEnd:Te},intervalChanged_:function(t,e,n){var i=this.parameterPositions,r=t-2,a=t+1,o=i[r],s=i[a];if(void 0===o)switch(this.getSettings_().endingStart){case Ee:r=t,o=2*e-n;break;case Ae:o=e+i[r=i.length-2]-i[r+1];break;default:r=t,o=n}if(void 0===s)switch(this.getSettings_().endingEnd){case Ee:a=t,s=2*n-e;break;case Ae:a=1,s=n+i[1]-i[0];break;default:a=t-1,s=e}var l=.5*(n-e),c=this.valueSize;this._weightPrev=l/(e-o),this._weightNext=l/(s-n),this._offsetPrev=r*c,this._offsetNext=a*c},interpolate_:function(t,e,n,i){for(var r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=t*o,l=s-o,c=this._offsetPrev,h=this._offsetNext,u=this._weightPrev,q=this._weightNext,m=(n-e)/(i-e),d=m*m,p=d*m,f=-u*p+2*u*d-u*m,v=(1+u)*p+(-1.5-2*u)*d+(-.5+u)*m+1,x=(-1-q)*p+(1.5+q)*d+.5*m,g=q*p-q*d,y=0;y!==o;++y)r[y]=f*a[c+y]+v*a[l+y]+x*a[s+y]+g*a[h+y];return r}}),kc.prototype=Object.assign(Object.create(Vc.prototype),{constructor:kc,interpolate_:function(t,e,n,i){for(var r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=t*o,l=s-o,c=(n-e)/(i-e),h=1-c,u=0;u!==o;++u)r[u]=a[l+u]*h+a[s+u]*c;return r}}),Wc.prototype=Object.assign(Object.create(Vc.prototype),{constructor:Wc,interpolate_:function(t){return this.copySampleValue_(t-1)}}),Object.assign(Xc,{toJSON:function(t){var e,n=t.constructor;if(void 0!==n.toJSON)e=n.toJSON(t);else{e={name:t.name,times:Gc.convertArray(t.times,Array),values:Gc.convertArray(t.values,Array)};var i=t.getInterpolation();i!==t.DefaultInterpolation&&(e.interpolation=i)}return e.type=t.ValueTypeName,e}}),Object.assign(Xc.prototype,{constructor:Xc,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:Me,InterpolantFactoryMethodDiscrete:function(t){return new Wc(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodLinear:function(t){return new kc(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodSmooth:function(t){return new jc(this.times,this.values,this.getValueSize(),t)},setInterpolation:function(t){var e;switch(t){case we:e=this.InterpolantFactoryMethodDiscrete;break;case Me:e=this.InterpolantFactoryMethodLinear;break;case Se:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){var n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(n);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=e,this},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return we;case this.InterpolantFactoryMethodLinear:return Me;case this.InterpolantFactoryMethodSmooth:return Se}},getValueSize:function(){return this.values.length/this.times.length},shift:function(t){if(0!==t)for(var e=this.times,n=0,i=e.length;n!==i;++n)e[n]+=t;return this},scale:function(t){if(1!==t)for(var e=this.times,n=0,i=e.length;n!==i;++n)e[n]*=t;return this},trim:function(t,e){for(var n=this.times,i=n.length,r=0,a=i-1;r!==i&&n[r]<t;)++r;for(;-1!==a&&n[a]>e;)--a;if(++a,0!==r||a!==i){r>=a&&(r=(a=Math.max(a,1))-1);var o=this.getValueSize();this.times=Gc.arraySlice(n,r,a),this.values=Gc.arraySlice(this.values,r*o,a*o)}return this},validate:function(){var t=!0,e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);var n=this.times,i=this.values,r=n.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);for(var a=null,o=0;o!==r;o++){var s=n[o];if("number"==typeof s&&isNaN(s)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,o,s),t=!1;break}if(null!==a&&a>s){console.error("THREE.KeyframeTrack: Out of order keys.",this,o,s,a),t=!1;break}a=s}if(void 0!==i&&Gc.isTypedArray(i)){o=0;for(var l=i.length;o!==l;++o){var c=i[o];if(isNaN(c)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,o,c),t=!1;break}}}return t},optimize:function(){for(var t=this.times,e=this.values,n=this.getValueSize(),i=this.getInterpolation()===Se,r=1,a=t.length-1,o=1;o<a;++o){var s=!1,l=t[o];if(l!==t[o+1]&&(1!==o||l!==l[0]))if(i)s=!0;else for(var c=o*n,h=c-n,u=c+n,q=0;q!==n;++q){var m=e[c+q];if(m!==e[h+q]||m!==e[u+q]){s=!0;break}}if(s){if(o!==r){t[r]=t[o];var d=o*n,p=r*n;for(q=0;q!==n;++q)e[p+q]=e[d+q]}++r}}if(a>0){t[r]=t[a];for(d=a*n,p=r*n,q=0;q!==n;++q)e[p+q]=e[d+q];++r}return r!==t.length&&(this.times=Gc.arraySlice(t,0,r),this.values=Gc.arraySlice(e,0,r*n)),this},clone:function(){var t=Gc.arraySlice(this.times,0),e=Gc.arraySlice(this.values,0),n=new(0,this.constructor)(this.name,t,e);return n.createInterpolant=this.createInterpolant,n}}),Yc.prototype=Object.assign(Object.create(Xc.prototype),{constructor:Yc,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:we,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),Zc.prototype=Object.assign(Object.create(Xc.prototype),{constructor:Zc,ValueTypeName:"color"}),Jc.prototype=Object.assign(Object.create(Xc.prototype),{constructor:Jc,ValueTypeName:"number"}),Qc.prototype=Object.assign(Object.create(Vc.prototype),{constructor:Qc,interpolate_:function(t,e,n,i){for(var r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=t*o,l=(n-e)/(i-e),c=s+o;s!==c;s+=4)_n.slerpFlat(r,0,a,s-o,a,s,l);return r}}),Kc.prototype=Object.assign(Object.create(Xc.prototype),{constructor:Kc,ValueTypeName:"quaternion",DefaultInterpolation:Me,InterpolantFactoryMethodLinear:function(t){return new Qc(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodSmooth:void 0}),$c.prototype=Object.assign(Object.create(Xc.prototype),{constructor:$c,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:we,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),th.prototype=Object.assign(Object.create(Xc.prototype),{constructor:th,ValueTypeName:"vector"}),Object.assign(eh,{parse:function(t){for(var e=[],n=t.tracks,i=1/(t.fps||1),r=0,a=n.length;r!==a;++r)e.push(nh(n[r]).scale(i));return new eh(t.name,t.duration,e)},toJSON:function(t){for(var e=[],n=t.tracks,i={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid},r=0,a=n.length;r!==a;++r)e.push(Xc.toJSON(n[r]));return i},CreateFromMorphTargetSequence:function(t,e,n,i){for(var r=e.length,a=[],o=0;o<r;o++){var s=[],l=[];s.push((o+r-1)%r,o,(o+1)%r),l.push(0,1,0);var c=Gc.getKeyframeOrder(s);s=Gc.sortedArray(s,1,c),l=Gc.sortedArray(l,1,c),i||0!==s[0]||(s.push(r),l.push(l[0])),a.push(new Jc(".morphTargetInfluences["+e[o].name+"]",s,l).scale(1/n))}return new eh(t,-1,a)},findByName:function(t,e){var n=t;if(!Array.isArray(t)){var i=t;n=i.geometry&&i.geometry.animations||i.animations}for(var r=0;r<n.length;r++)if(n[r].name===e)return n[r];return null},CreateClipsFromMorphTargetSequences:function(t,e,n){for(var i={},r=/^([\w-]*?)([\d]+)$/,a=0,o=t.length;a<o;a++){var s=t[a],l=s.name.match(r);if(l&&l.length>1){var c=i[u=l[1]];c||(i[u]=c=[]),c.push(s)}}var h=[];for(var u in i)h.push(eh.CreateFromMorphTargetSequence(u,i[u],e,n));return h},parseAnimation:function(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;for(var n=function(t,e,n,i,r){if(0!==n.length){var a=[],o=[];Gc.flattenJSON(n,a,o,i),0!==a.length&&r.push(new t(e,a,o))}},i=[],r=t.name||"default",a=t.length||-1,o=t.fps||30,s=t.hierarchy||[],l=0;l<s.length;l++){var c=s[l].keys;if(c&&0!==c.length)if(c[0].morphTargets){for(var h={},u=0;u<c.length;u++)if(c[u].morphTargets)for(var q=0;q<c[u].morphTargets.length;q++)h[c[u].morphTargets[q]]=-1;for(var m in h){var d=[],p=[];for(q=0;q!==c[u].morphTargets.length;++q){var f=c[u];d.push(f.time),p.push(f.morphTarget===m?1:0)}i.push(new Jc(".morphTargetInfluence["+m+"]",d,p))}a=h.length*(o||1)}else{var v=".bones["+e[l].name+"]";n(th,v+".position",c,"pos",i),n(Kc,v+".quaternion",c,"rot",i),n(th,v+".scale",c,"scl",i)}}return 0===i.length?null:new eh(r,a,i)}}),Object.assign(eh.prototype,{resetDuration:function(){for(var t=0,e=0,n=this.tracks.length;e!==n;++e){var i=this.tracks[e];t=Math.max(t,i.times[i.times.length-1])}return this.duration=t,this},trim:function(){for(var t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this},validate:function(){for(var t=!0,e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t},optimize:function(){for(var t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this},clone:function(){for(var t=[],e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new eh(this.name,this.duration,t)}});var ih={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};function rh(t,e,n){var i=this,r=!1,a=0,o=0,s=void 0,l=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=n,this.itemStart=function(t){o++,!1===r&&void 0!==i.onStart&&i.onStart(t,a,o),r=!0},this.itemEnd=function(t){a++,void 0!==i.onProgress&&i.onProgress(t,a,o),a===o&&(r=!1,void 0!==i.onLoad&&i.onLoad())},this.itemError=function(t){void 0!==i.onError&&i.onError(t)},this.resolveURL=function(t){return s?s(t):t},this.setURLModifier=function(t){return s=t,this},this.addHandler=function(t,e){return l.push(t,e),this},this.removeHandler=function(t){var e=l.indexOf(t);return-1!==e&&l.splice(e,2),this},this.getHandler=function(t){for(var e=0,n=l.length;e<n;e+=2){var i=l[e],r=l[e+1];if(i.test(t))return r}return null}}var ah=new rh;function oh(t){this.manager=void 0!==t?t:ah,this.crossOrigin="anonymous",this.path="",this.resourcePath=""}Object.assign(oh.prototype,{load:function(){},parse:function(){},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this},setResourcePath:function(t){return this.resourcePath=t,this}});var sh={};function lh(t){oh.call(this,t)}function ch(t){oh.call(this,t)}function hh(t){oh.call(this,t)}function uh(t){oh.call(this,t)}function qh(t){oh.call(this,t)}function mh(t){oh.call(this,t)}function dh(t){oh.call(this,t)}function ph(){this.type="Curve",this.arcLengthDivisions=200}function fh(t,e,n,i,r,a,o,s){ph.call(this),this.type="EllipseCurve",this.aX=t||0,this.aY=e||0,this.xRadius=n||1,this.yRadius=i||1,this.aStartAngle=r||0,this.aEndAngle=a||2*Math.PI,this.aClockwise=o||!1,this.aRotation=s||0}function vh(t,e,n,i,r,a){fh.call(this,t,e,n,n,i,r,a),this.type="ArcCurve"}function xh(){var t=0,e=0,n=0,i=0;function r(r,a,o,s){t=r,e=o,n=-3*r+3*a-2*o-s,i=2*r-2*a+o+s}return{initCatmullRom:function(t,e,n,i,a){r(e,n,a*(n-t),a*(i-e))},initNonuniformCatmullRom:function(t,e,n,i,a,o,s){var l=(e-t)/a-(n-t)/(a+o)+(n-e)/o,c=(n-e)/o-(i-e)/(o+s)+(i-n)/s;r(e,n,l*=o,c*=o)},calc:function(r){var a=r*r;return t+e*r+n*a+i*(a*r)}}}lh.prototype=Object.assign(Object.create(oh.prototype),{constructor:lh,load:function(t,e,n,i){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var r=this,a=ih.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout((function(){e&&e(a),r.manager.itemEnd(t)}),0),a;if(void 0===sh[t]){var o=t.match(/^data:(.*?)(;base64)?,(.*)$/);if(o){var s=o[1],l=!!o[2],c=o[3];c=decodeURIComponent(c),l&&(c=atob(c));try{var h,u=(this.responseType||"").toLowerCase();switch(u){case"arraybuffer":case"blob":for(var q=new Uint8Array(c.length),m=0;m<c.length;m++)q[m]=c.charCodeAt(m);h="blob"===u?new Blob([q.buffer],{type:s}):q.buffer;break;case"document":var d=new DOMParser;h=d.parseFromString(c,s);break;case"json":h=JSON.parse(c);break;default:h=c}setTimeout((function(){e&&e(h),r.manager.itemEnd(t)}),0)}catch(e){setTimeout((function(){i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)}),0)}}else{sh[t]=[],sh[t].push({onLoad:e,onProgress:n,onError:i});var p=new XMLHttpRequest;for(var f in p.open("GET",t,!0),p.addEventListener("load",(function(e){var n=this.response,i=sh[t];if(delete sh[t],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),ih.add(t,n);for(var a=0,o=i.length;a<o;a++){(s=i[a]).onLoad&&s.onLoad(n)}r.manager.itemEnd(t)}else{for(a=0,o=i.length;a<o;a++){var s;(s=i[a]).onError&&s.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}}),!1),p.addEventListener("progress",(function(e){for(var n=sh[t],i=0,r=n.length;i<r;i++){var a=n[i];a.onProgress&&a.onProgress(e)}}),!1),p.addEventListener("error",(function(e){var n=sh[t];delete sh[t];for(var i=0,a=n.length;i<a;i++){var o=n[i];o.onError&&o.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}),!1),p.addEventListener("abort",(function(e){var n=sh[t];delete sh[t];for(var i=0,a=n.length;i<a;i++){var o=n[i];o.onError&&o.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}),!1),void 0!==this.responseType&&(p.responseType=this.responseType),void 0!==this.withCredentials&&(p.withCredentials=this.withCredentials),p.overrideMimeType&&p.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain"),this.requestHeader)p.setRequestHeader(f,this.requestHeader[f]);p.send(null)}return r.manager.itemStart(t),p}sh[t].push({onLoad:e,onProgress:n,onError:i})},setResponseType:function(t){return this.responseType=t,this},setWithCredentials:function(t){return this.withCredentials=t,this},setMimeType:function(t){return this.mimeType=t,this},setRequestHeader:function(t){return this.requestHeader=t,this}}),ch.prototype=Object.assign(Object.create(oh.prototype),{constructor:ch,load:function(t,e,n,i){var r=this,a=new lh(r.manager);a.setPath(r.path),a.load(t,(function(t){e(r.parse(JSON.parse(t)))}),n,i)},parse:function(t){for(var e=[],n=0;n<t.length;n++){var i=eh.parse(t[n]);e.push(i)}return e}}),hh.prototype=Object.assign(Object.create(oh.prototype),{constructor:hh,load:function(t,e,n,i){var r=this,a=[],o=new pl;o.image=a;var s=new lh(this.manager);function l(l){s.load(t[l],(function(t){var n=r.parse(t,!0);a[l]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps},6===(c+=1)&&(1===n.mipmapCount&&(o.minFilter=St),o.format=n.format,o.needsUpdate=!0,e&&e(o))}),n,i)}if(s.setPath(this.path),s.setResponseType("arraybuffer"),Array.isArray(t))for(var c=0,h=0,u=t.length;h<u;++h)l(h);else s.load(t,(function(t){var n=r.parse(t,!0);if(n.isCubemap)for(var i=n.mipmaps.length/n.mipmapCount,s=0;s<i;s++){a[s]={mipmaps:[]};for(var l=0;l<n.mipmapCount;l++)a[s].mipmaps.push(n.mipmaps[s*n.mipmapCount+l]),a[s].format=n.format,a[s].width=n.width,a[s].height=n.height}else o.image.width=n.width,o.image.height=n.height,o.mipmaps=n.mipmaps;1===n.mipmapCount&&(o.minFilter=St),o.format=n.format,o.needsUpdate=!0,e&&e(o)}),n,i);return o}}),uh.prototype=Object.assign(Object.create(oh.prototype),{constructor:uh,load:function(t,e,n,i){var r=this,a=new la,o=new lh(this.manager);return o.setResponseType("arraybuffer"),o.setPath(this.path),o.load(t,(function(t){var n=r.parse(t);n&&(void 0!==n.image?a.image=n.image:void 0!==n.data&&(a.image.width=n.width,a.image.height=n.height,a.image.data=n.data),a.wrapS=void 0!==n.wrapS?n.wrapS:xt,a.wrapT=void 0!==n.wrapT?n.wrapT:xt,a.magFilter=void 0!==n.magFilter?n.magFilter:St,a.minFilter=void 0!==n.minFilter?n.minFilter:St,a.anisotropy=void 0!==n.anisotropy?n.anisotropy:1,void 0!==n.format&&(a.format=n.format),void 0!==n.type&&(a.type=n.type),void 0!==n.mipmaps&&(a.mipmaps=n.mipmaps,a.minFilter=At),1===n.mipmapCount&&(a.minFilter=St),a.needsUpdate=!0,e&&e(a,n))}),n,i),a}}),qh.prototype=Object.assign(Object.create(oh.prototype),{constructor:qh,load:function(t,e,n,i){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var r=this,a=ih.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout((function(){e&&e(a),r.manager.itemEnd(t)}),0),a;var o=document.createElementNS("http://www.w3.org/1999/xhtml","img");function s(){o.removeEventListener("load",s,!1),o.removeEventListener("error",l,!1),ih.add(t,this),e&&e(this),r.manager.itemEnd(t)}function l(e){o.removeEventListener("load",s,!1),o.removeEventListener("error",l,!1),i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)}return o.addEventListener("load",s,!1),o.addEventListener("error",l,!1),"data:"!==t.substr(0,5)&&void 0!==this.crossOrigin&&(o.crossOrigin=this.crossOrigin),r.manager.itemStart(t),o.src=t,o}}),mh.prototype=Object.assign(Object.create(oh.prototype),{constructor:mh,load:function(t,e,n,i){var r=new La,a=new qh(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);var o=0;function s(n){a.load(t[n],(function(t){r.images[n]=t,6===++o&&(r.needsUpdate=!0,e&&e(r))}),void 0,i)}for(var l=0;l<t.length;++l)s(l);return r}}),dh.prototype=Object.assign(Object.create(oh.prototype),{constructor:dh,load:function(t,e,n,i){var r=new Ln,a=new qh(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(t,(function(n){r.image=n;var i=t.search(/\.jpe?g($|\?)/i)>0||0===t.search(/^data\:image\/jpeg/);r.format=i?Vt:jt,r.needsUpdate=!0,void 0!==e&&e(r)}),n,i),r}}),Object.assign(ph.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(t,e){var n=this.getUtoTmapping(t);return this.getPoint(n,e)},getPoints:function(t){void 0===t&&(t=5);for(var e=[],n=0;n<=t;n++)e.push(this.getPoint(n/t));return e},getSpacedPoints:function(t){void 0===t&&(t=5);for(var e=[],n=0;n<=t;n++)e.push(this.getPointAt(n/t));return e},getLength:function(){var t=this.getLengths();return t[t.length-1]},getLengths:function(t){if(void 0===t&&(t=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var e,n,i=[],r=this.getPoint(0),a=0;for(i.push(0),n=1;n<=t;n++)a+=(e=this.getPoint(n/t)).distanceTo(r),i.push(a),r=e;return this.cacheArcLengths=i,i},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(t,e){var n,i=this.getLengths(),r=0,a=i.length;n=e||t*i[a-1];for(var o,s=0,l=a-1;s<=l;)if((o=i[r=Math.floor(s+(l-s)/2)]-n)<0)s=r+1;else{if(!(o>0)){l=r;break}l=r-1}if(i[r=l]===n)return r/(a-1);var c=i[r];return(r+(n-c)/(i[r+1]-c))/(a-1)},getTangent:function(t){var e=t-1e-4,n=t+1e-4;e<0&&(e=0),n>1&&(n=1);var i=this.getPoint(e);return this.getPoint(n).clone().sub(i).normalize()},getTangentAt:function(t){var e=this.getUtoTmapping(t);return this.getTangent(e)},computeFrenetFrames:function(t,e){var n,i,r,a=new Mn,o=[],s=[],l=[],c=new Mn,h=new Hn;for(n=0;n<=t;n++)i=n/t,o[n]=this.getTangentAt(i),o[n].normalize();s[0]=new Mn,l[0]=new Mn;var u=Number.MAX_VALUE,q=Math.abs(o[0].x),m=Math.abs(o[0].y),d=Math.abs(o[0].z);for(q<=u&&(u=q,a.set(1,0,0)),m<=u&&(u=m,a.set(0,1,0)),d<=u&&a.set(0,0,1),c.crossVectors(o[0],a).normalize(),s[0].crossVectors(o[0],c),l[0].crossVectors(o[0],s[0]),n=1;n<=t;n++)s[n]=s[n-1].clone(),l[n]=l[n-1].clone(),c.crossVectors(o[n-1],o[n]),c.length()>Number.EPSILON&&(c.normalize(),r=Math.acos(gn.clamp(o[n-1].dot(o[n]),-1,1)),s[n].applyMatrix4(h.makeRotationAxis(c,r))),l[n].crossVectors(o[n],s[n]);if(!0===e)for(r=Math.acos(gn.clamp(s[0].dot(s[t]),-1,1)),r/=t,o[0].dot(c.crossVectors(s[0],s[t]))>0&&(r=-r),n=1;n<=t;n++)s[n].applyMatrix4(h.makeRotationAxis(o[n],r*n)),l[n].crossVectors(o[n],s[n]);return{tangents:o,normals:s,binormals:l}},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this},toJSON:function(){var t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t},fromJSON:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}),fh.prototype=Object.create(ph.prototype),fh.prototype.constructor=fh,fh.prototype.isEllipseCurve=!0,fh.prototype.getPoint=function(t,e){for(var n=e||new yn,i=2*Math.PI,r=this.aEndAngle-this.aStartAngle,a=Math.abs(r)<Number.EPSILON;r<0;)r+=i;for(;r>i;)r-=i;r<Number.EPSILON&&(r=a?0:i),!0!==this.aClockwise||a||(r===i?r=-i:r-=i);var o=this.aStartAngle+t*r,s=this.aX+this.xRadius*Math.cos(o),l=this.aY+this.yRadius*Math.sin(o);if(0!==this.aRotation){var c=Math.cos(this.aRotation),h=Math.sin(this.aRotation),u=s-this.aX,q=l-this.aY;s=u*c-q*h+this.aX,l=u*h+q*c+this.aY}return n.set(s,l)},fh.prototype.copy=function(t){return ph.prototype.copy.call(this,t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this},fh.prototype.toJSON=function(){var t=ph.prototype.toJSON.call(this);return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t},fh.prototype.fromJSON=function(t){return ph.prototype.fromJSON.call(this,t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this},vh.prototype=Object.create(fh.prototype),vh.prototype.constructor=vh,vh.prototype.isArcCurve=!0;var gh=new Mn,yh=new xh,_h=new xh,bh=new xh;function wh(t,e,n,i){ph.call(this),this.type="CatmullRomCurve3",this.points=t||[],this.closed=e||!1,this.curveType=n||"centripetal",this.tension=i||.5}function Mh(t,e,n,i,r){var a=.5*(i-e),o=.5*(r-n),s=t*t;return(2*n-2*i+a+o)*(t*s)+(-3*n+3*i-2*a-o)*s+a*t+n}function Sh(t,e,n,i){return function(t,e){var n=1-t;return n*n*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,n)+function(t,e){return t*t*e}(t,i)}function Th(t,e,n,i,r){return function(t,e){var n=1-t;return n*n*n*e}(t,e)+function(t,e){var n=1-t;return 3*n*n*t*e}(t,n)+function(t,e){return 3*(1-t)*t*t*e}(t,i)+function(t,e){return t*t*t*e}(t,r)}function Eh(t,e,n,i){ph.call(this),this.type="CubicBezierCurve",this.v0=t||new yn,this.v1=e||new yn,this.v2=n||new yn,this.v3=i||new yn}function Ah(t,e,n,i){ph.call(this),this.type="CubicBezierCurve3",this.v0=t||new Mn,this.v1=e||new Mn,this.v2=n||new Mn,this.v3=i||new Mn}function zh(t,e){ph.call(this),this.type="LineCurve",this.v1=t||new yn,this.v2=e||new yn}function Lh(t,e){ph.call(this),this.type="LineCurve3",this.v1=t||new Mn,this.v2=e||new Mn}function Ph(t,e,n){ph.call(this),this.type="QuadraticBezierCurve",this.v0=t||new yn,this.v1=e||new yn,this.v2=n||new yn}function Rh(t,e,n){ph.call(this),this.type="QuadraticBezierCurve3",this.v0=t||new Mn,this.v1=e||new Mn,this.v2=n||new Mn}function Ch(t){ph.call(this),this.type="SplineCurve",this.points=t||[]}wh.prototype=Object.create(ph.prototype),wh.prototype.constructor=wh,wh.prototype.isCatmullRomCurve3=!0,wh.prototype.getPoint=function(t,e){var n,i,r,a,o=e||new Mn,s=this.points,l=s.length,c=(l-(this.closed?0:1))*t,h=Math.floor(c),u=c-h;if(this.closed?h+=h>0?0:(Math.floor(Math.abs(h)/l)+1)*l:0===u&&h===l-1&&(h=l-2,u=1),this.closed||h>0?n=s[(h-1)%l]:(gh.subVectors(s[0],s[1]).add(s[0]),n=gh),i=s[h%l],r=s[(h+1)%l],this.closed||h+2<l?a=s[(h+2)%l]:(gh.subVectors(s[l-1],s[l-2]).add(s[l-1]),a=gh),"centripetal"===this.curveType||"chordal"===this.curveType){var q="chordal"===this.curveType?.5:.25,m=Math.pow(n.distanceToSquared(i),q),d=Math.pow(i.distanceToSquared(r),q),p=Math.pow(r.distanceToSquared(a),q);d<1e-4&&(d=1),m<1e-4&&(m=d),p<1e-4&&(p=d),yh.initNonuniformCatmullRom(n.x,i.x,r.x,a.x,m,d,p),_h.initNonuniformCatmullRom(n.y,i.y,r.y,a.y,m,d,p),bh.initNonuniformCatmullRom(n.z,i.z,r.z,a.z,m,d,p)}else"catmullrom"===this.curveType&&(yh.initCatmullRom(n.x,i.x,r.x,a.x,this.tension),_h.initCatmullRom(n.y,i.y,r.y,a.y,this.tension),bh.initCatmullRom(n.z,i.z,r.z,a.z,this.tension));return o.set(yh.calc(u),_h.calc(u),bh.calc(u)),o},wh.prototype.copy=function(t){ph.prototype.copy.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var i=t.points[e];this.points.push(i.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this},wh.prototype.toJSON=function(){var t=ph.prototype.toJSON.call(this);t.points=[];for(var e=0,n=this.points.length;e<n;e++){var i=this.points[e];t.points.push(i.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t},wh.prototype.fromJSON=function(t){ph.prototype.fromJSON.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var i=t.points[e];this.points.push((new Mn).fromArray(i))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this},Eh.prototype=Object.create(ph.prototype),Eh.prototype.constructor=Eh,Eh.prototype.isCubicBezierCurve=!0,Eh.prototype.getPoint=function(t,e){var n=e||new yn,i=this.v0,r=this.v1,a=this.v2,o=this.v3;return n.set(Th(t,i.x,r.x,a.x,o.x),Th(t,i.y,r.y,a.y,o.y)),n},Eh.prototype.copy=function(t){return ph.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this},Eh.prototype.toJSON=function(){var t=ph.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t},Eh.prototype.fromJSON=function(t){return ph.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this},Ah.prototype=Object.create(ph.prototype),Ah.prototype.constructor=Ah,Ah.prototype.isCubicBezierCurve3=!0,Ah.prototype.getPoint=function(t,e){var n=e||new Mn,i=this.v0,r=this.v1,a=this.v2,o=this.v3;return n.set(Th(t,i.x,r.x,a.x,o.x),Th(t,i.y,r.y,a.y,o.y),Th(t,i.z,r.z,a.z,o.z)),n},Ah.prototype.copy=function(t){return ph.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this},Ah.prototype.toJSON=function(){var t=ph.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t},Ah.prototype.fromJSON=function(t){return ph.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this},zh.prototype=Object.create(ph.prototype),zh.prototype.constructor=zh,zh.prototype.isLineCurve=!0,zh.prototype.getPoint=function(t,e){var n=e||new yn;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n},zh.prototype.getPointAt=function(t,e){return this.getPoint(t,e)},zh.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()},zh.prototype.copy=function(t){return ph.prototype.copy.call(this,t),this.v1.copy(t.v1),this.v2.copy(t.v2),this},zh.prototype.toJSON=function(){var t=ph.prototype.toJSON.call(this);return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},zh.prototype.fromJSON=function(t){return ph.prototype.fromJSON.call(this,t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},Lh.prototype=Object.create(ph.prototype),Lh.prototype.constructor=Lh,Lh.prototype.isLineCurve3=!0,Lh.prototype.getPoint=function(t,e){var n=e||new Mn;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n},Lh.prototype.getPointAt=function(t,e){return this.getPoint(t,e)},Lh.prototype.copy=function(t){return ph.prototype.copy.call(this,t),this.v1.copy(t.v1),this.v2.copy(t.v2),this},Lh.prototype.toJSON=function(){var t=ph.prototype.toJSON.call(this);return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},Lh.prototype.fromJSON=function(t){return ph.prototype.fromJSON.call(this,t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},Ph.prototype=Object.create(ph.prototype),Ph.prototype.constructor=Ph,Ph.prototype.isQuadraticBezierCurve=!0,Ph.prototype.getPoint=function(t,e){var n=e||new yn,i=this.v0,r=this.v1,a=this.v2;return n.set(Sh(t,i.x,r.x,a.x),Sh(t,i.y,r.y,a.y)),n},Ph.prototype.copy=function(t){return ph.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this},Ph.prototype.toJSON=function(){var t=ph.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},Ph.prototype.fromJSON=function(t){return ph.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},Rh.prototype=Object.create(ph.prototype),Rh.prototype.constructor=Rh,Rh.prototype.isQuadraticBezierCurve3=!0,Rh.prototype.getPoint=function(t,e){var n=e||new Mn,i=this.v0,r=this.v1,a=this.v2;return n.set(Sh(t,i.x,r.x,a.x),Sh(t,i.y,r.y,a.y),Sh(t,i.z,r.z,a.z)),n},Rh.prototype.copy=function(t){return ph.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this},Rh.prototype.toJSON=function(){var t=ph.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},Rh.prototype.fromJSON=function(t){return ph.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},Ch.prototype=Object.create(ph.prototype),Ch.prototype.constructor=Ch,Ch.prototype.isSplineCurve=!0,Ch.prototype.getPoint=function(t,e){var n=e||new yn,i=this.points,r=(i.length-1)*t,a=Math.floor(r),o=r-a,s=i[0===a?a:a-1],l=i[a],c=i[a>i.length-2?i.length-1:a+1],h=i[a>i.length-3?i.length-1:a+2];return n.set(Mh(o,s.x,l.x,c.x,h.x),Mh(o,s.y,l.y,c.y,h.y)),n},Ch.prototype.copy=function(t){ph.prototype.copy.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var i=t.points[e];this.points.push(i.clone())}return this},Ch.prototype.toJSON=function(){var t=ph.prototype.toJSON.call(this);t.points=[];for(var e=0,n=this.points.length;e<n;e++){var i=this.points[e];t.points.push(i.toArray())}return t},Ch.prototype.fromJSON=function(t){ph.prototype.fromJSON.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var i=t.points[e];this.points.push((new yn).fromArray(i))}return this};var Oh=Object.freeze({__proto__:null,ArcCurve:vh,CatmullRomCurve3:wh,CubicBezierCurve:Eh,CubicBezierCurve3:Ah,EllipseCurve:fh,LineCurve:zh,LineCurve3:Lh,QuadraticBezierCurve:Ph,QuadraticBezierCurve3:Rh,SplineCurve:Ch});function Ih(){ph.call(this),this.type="CurvePath",this.curves=[],this.autoClose=!1}function Dh(t){Ih.call(this),this.type="Path",this.currentPoint=new yn,t&&this.setFromPoints(t)}function Nh(t){Dh.call(this,t),this.uuid=gn.generateUUID(),this.type="Shape",this.holes=[]}function Bh(t,e){ai.call(this),this.type="Light",this.color=new Zi(t),this.intensity=void 0!==e?e:1,this.receiveShadow=void 0}function Uh(t,e,n){Bh.call(this,t,n),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy(ai.DefaultUp),this.updateMatrix(),this.groundColor=new Zi(e)}function Fh(t){this.camera=t,this.bias=0,this.radius=1,this.mapSize=new yn(512,512),this.map=null,this.mapPass=null,this.matrix=new Hn,this._frustum=new ua,this._frameExtents=new yn(1,1),this._viewportCount=1,this._viewports=[new Pn(0,0,1,1)]}function Hh(){Fh.call(this,new ia(50,1,.5,500))}function Gh(t,e,n,i,r,a){Bh.call(this,t,e),this.type="SpotLight",this.position.copy(ai.DefaultUp),this.updateMatrix(),this.target=new ai,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(t){this.intensity=t/Math.PI}}),this.distance=void 0!==n?n:0,this.angle=void 0!==i?i:Math.PI/3,this.penumbra=void 0!==r?r:0,this.decay=void 0!==a?a:1,this.shadow=new Hh}function Vh(){Fh.call(this,new ia(90,1,.5,500)),this._frameExtents=new yn(4,2),this._viewportCount=6,this._viewports=[new Pn(2,1,1,1),new Pn(0,1,1,1),new Pn(3,1,1,1),new Pn(1,1,1,1),new Pn(3,0,1,1),new Pn(1,0,1,1)],this._cubeDirections=[new Mn(1,0,0),new Mn(-1,0,0),new Mn(0,0,1),new Mn(0,0,-1),new Mn(0,1,0),new Mn(0,-1,0)],this._cubeUps=[new Mn(0,1,0),new Mn(0,1,0),new Mn(0,1,0),new Mn(0,1,0),new Mn(0,0,1),new Mn(0,0,-1)]}function jh(t,e,n,i){Bh.call(this,t,e),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(t){this.intensity=t/(4*Math.PI)}}),this.distance=void 0!==n?n:0,this.decay=void 0!==i?i:1,this.shadow=new Vh}function kh(t,e,n,i,r,a){na.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=void 0!==t?t:-1,this.right=void 0!==e?e:1,this.top=void 0!==n?n:1,this.bottom=void 0!==i?i:-1,this.near=void 0!==r?r:.1,this.far=void 0!==a?a:2e3,this.updateProjectionMatrix()}function Wh(){Fh.call(this,new kh(-5,5,5,-5,.5,500))}function Xh(t,e){Bh.call(this,t,e),this.type="DirectionalLight",this.position.copy(ai.DefaultUp),this.updateMatrix(),this.target=new ai,this.shadow=new Wh}function Yh(t,e){Bh.call(this,t,e),this.type="AmbientLight",this.castShadow=void 0}function Zh(t,e,n,i){Bh.call(this,t,e),this.type="RectAreaLight",this.width=void 0!==n?n:10,this.height=void 0!==i?i:10}function Jh(t){oh.call(this,t),this.textures={}}Ih.prototype=Object.assign(Object.create(ph.prototype),{constructor:Ih,add:function(t){this.curves.push(t)},closePath:function(){var t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new zh(e,t))},getPoint:function(t){for(var e=t*this.getLength(),n=this.getCurveLengths(),i=0;i<n.length;){if(n[i]>=e){var r=n[i]-e,a=this.curves[i],o=a.getLength(),s=0===o?0:1-r/o;return a.getPointAt(s)}i++}return null},getLength:function(){var t=this.getCurveLengths();return t[t.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var t=[],e=0,n=0,i=this.curves.length;n<i;n++)e+=this.curves[n].getLength(),t.push(e);return this.cacheLengths=t,t},getSpacedPoints:function(t){void 0===t&&(t=40);for(var e=[],n=0;n<=t;n++)e.push(this.getPoint(n/t));return this.autoClose&&e.push(e[0]),e},getPoints:function(t){t=t||12;for(var e,n=[],i=0,r=this.curves;i<r.length;i++)for(var a=r[i],o=a&&a.isEllipseCurve?2*t:a&&(a.isLineCurve||a.isLineCurve3)?1:a&&a.isSplineCurve?t*a.points.length:t,s=a.getPoints(o),l=0;l<s.length;l++){var c=s[l];e&&e.equals(c)||(n.push(c),e=c)}return this.autoClose&&n.length>1&&!n[n.length-1].equals(n[0])&&n.push(n[0]),n},copy:function(t){ph.prototype.copy.call(this,t),this.curves=[];for(var e=0,n=t.curves.length;e<n;e++){var i=t.curves[e];this.curves.push(i.clone())}return this.autoClose=t.autoClose,this},toJSON:function(){var t=ph.prototype.toJSON.call(this);t.autoClose=this.autoClose,t.curves=[];for(var e=0,n=this.curves.length;e<n;e++){var i=this.curves[e];t.curves.push(i.toJSON())}return t},fromJSON:function(t){ph.prototype.fromJSON.call(this,t),this.autoClose=t.autoClose,this.curves=[];for(var e=0,n=t.curves.length;e<n;e++){var i=t.curves[e];this.curves.push((new Oh[i.type]).fromJSON(i))}return this}}),Dh.prototype=Object.assign(Object.create(Ih.prototype),{constructor:Dh,setFromPoints:function(t){this.moveTo(t[0].x,t[0].y);for(var e=1,n=t.length;e<n;e++)this.lineTo(t[e].x,t[e].y);return this},moveTo:function(t,e){return this.currentPoint.set(t,e),this},lineTo:function(t,e){var n=new zh(this.currentPoint.clone(),new yn(t,e));return this.curves.push(n),this.currentPoint.set(t,e),this},quadraticCurveTo:function(t,e,n,i){var r=new Ph(this.currentPoint.clone(),new yn(t,e),new yn(n,i));return this.curves.push(r),this.currentPoint.set(n,i),this},bezierCurveTo:function(t,e,n,i,r,a){var o=new Eh(this.currentPoint.clone(),new yn(t,e),new yn(n,i),new yn(r,a));return this.curves.push(o),this.currentPoint.set(r,a),this},splineThru:function(t){var e=new Ch([this.currentPoint.clone()].concat(t));return this.curves.push(e),this.currentPoint.copy(t[t.length-1]),this},arc:function(t,e,n,i,r,a){var o=this.currentPoint.x,s=this.currentPoint.y;return this.absarc(t+o,e+s,n,i,r,a),this},absarc:function(t,e,n,i,r,a){return this.absellipse(t,e,n,n,i,r,a),this},ellipse:function(t,e,n,i,r,a,o,s){var l=this.currentPoint.x,c=this.currentPoint.y;return this.absellipse(t+l,e+c,n,i,r,a,o,s),this},absellipse:function(t,e,n,i,r,a,o,s){var l=new fh(t,e,n,i,r,a,o,s);if(this.curves.length>0){var c=l.getPoint(0);c.equals(this.currentPoint)||this.lineTo(c.x,c.y)}this.curves.push(l);var h=l.getPoint(1);return this.currentPoint.copy(h),this},copy:function(t){return Ih.prototype.copy.call(this,t),this.currentPoint.copy(t.currentPoint),this},toJSON:function(){var t=Ih.prototype.toJSON.call(this);return t.currentPoint=this.currentPoint.toArray(),t},fromJSON:function(t){return Ih.prototype.fromJSON.call(this,t),this.currentPoint.fromArray(t.currentPoint),this}}),Nh.prototype=Object.assign(Object.create(Dh.prototype),{constructor:Nh,getPointsHoles:function(t){for(var e=[],n=0,i=this.holes.length;n<i;n++)e[n]=this.holes[n].getPoints(t);return e},extractPoints:function(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}},copy:function(t){Dh.prototype.copy.call(this,t),this.holes=[];for(var e=0,n=t.holes.length;e<n;e++){var i=t.holes[e];this.holes.push(i.clone())}return this},toJSON:function(){var t=Dh.prototype.toJSON.call(this);t.uuid=this.uuid,t.holes=[];for(var e=0,n=this.holes.length;e<n;e++){var i=this.holes[e];t.holes.push(i.toJSON())}return t},fromJSON:function(t){Dh.prototype.fromJSON.call(this,t),this.uuid=t.uuid,this.holes=[];for(var e=0,n=t.holes.length;e<n;e++){var i=t.holes[e];this.holes.push((new Dh).fromJSON(i))}return this}}),Bh.prototype=Object.assign(Object.create(ai.prototype),{constructor:Bh,isLight:!0,copy:function(t){return ai.prototype.copy.call(this,t),this.color.copy(t.color),this.intensity=t.intensity,this},toJSON:function(t){var e=ai.prototype.toJSON.call(this,t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}),Uh.prototype=Object.assign(Object.create(Bh.prototype),{constructor:Uh,isHemisphereLight:!0,copy:function(t){return Bh.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}),Object.assign(Fh.prototype,{_projScreenMatrix:new Hn,_lightPositionWorld:new Mn,_lookTarget:new Mn,getViewportCount:function(){return this._viewportCount},getFrustum:function(){return this._frustum},updateMatrices:function(t){var e=this.camera,n=this.matrix,i=this._projScreenMatrix,r=this._lookTarget,a=this._lightPositionWorld;a.setFromMatrixPosition(t.matrixWorld),e.position.copy(a),r.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(r),e.updateMatrixWorld(),i.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromMatrix(i),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(e.projectionMatrix),n.multiply(e.matrixWorldInverse)},getViewport:function(t){return this._viewports[t]},getFrameExtents:function(){return this._frameExtents},copy:function(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var t={};return 0!==this.bias&&(t.bias=this.bias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}),Hh.prototype=Object.assign(Object.create(Fh.prototype),{constructor:Hh,isSpotLightShadow:!0,updateMatrices:function(t){var e=this.camera,n=2*gn.RAD2DEG*t.angle,i=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;n===e.fov&&i===e.aspect&&r===e.far||(e.fov=n,e.aspect=i,e.far=r,e.updateProjectionMatrix()),Fh.prototype.updateMatrices.call(this,t)}}),Gh.prototype=Object.assign(Object.create(Bh.prototype),{constructor:Gh,isSpotLight:!0,copy:function(t){return Bh.prototype.copy.call(this,t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}),Vh.prototype=Object.assign(Object.create(Fh.prototype),{constructor:Vh,isPointLightShadow:!0,updateMatrices:function(t,e){void 0===e&&(e=0);var n=this.camera,i=this.matrix,r=this._lightPositionWorld,a=this._lookTarget,o=this._projScreenMatrix;r.setFromMatrixPosition(t.matrixWorld),n.position.copy(r),a.copy(n.position),a.add(this._cubeDirections[e]),n.up.copy(this._cubeUps[e]),n.lookAt(a),n.updateMatrixWorld(),i.makeTranslation(-r.x,-r.y,-r.z),o.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromMatrix(o)}}),jh.prototype=Object.assign(Object.create(Bh.prototype),{constructor:jh,isPointLight:!0,copy:function(t){return Bh.prototype.copy.call(this,t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}),kh.prototype=Object.assign(Object.create(na.prototype),{constructor:kh,isOrthographicCamera:!0,copy:function(t,e){return na.prototype.copy.call(this,t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this},setViewOffset:function(t,e,n,i,r,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2,r=n-t,a=n+t,o=i+e,s=i-e;if(null!==this.view&&this.view.enabled){var l=this.zoom/(this.view.width/this.view.fullWidth),c=this.zoom/(this.view.height/this.view.fullHeight),h=(this.right-this.left)/this.view.width,u=(this.top-this.bottom)/this.view.height;a=(r+=h*(this.view.offsetX/l))+h*(this.view.width/l),s=(o-=u*(this.view.offsetY/c))-u*(this.view.height/c)}this.projectionMatrix.makeOrthographic(r,a,o,s,this.near,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(t){var e=ai.prototype.toJSON.call(this,t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}),Wh.prototype=Object.assign(Object.create(Fh.prototype),{constructor:Wh,isDirectionalLightShadow:!0,updateMatrices:function(t){Fh.prototype.updateMatrices.call(this,t)}}),Xh.prototype=Object.assign(Object.create(Bh.prototype),{constructor:Xh,isDirectionalLight:!0,copy:function(t){return Bh.prototype.copy.call(this,t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}),Yh.prototype=Object.assign(Object.create(Bh.prototype),{constructor:Yh,isAmbientLight:!0}),Zh.prototype=Object.assign(Object.create(Bh.prototype),{constructor:Zh,isRectAreaLight:!0,copy:function(t){return Bh.prototype.copy.call(this,t),this.width=t.width,this.height=t.height,this},toJSON:function(t){var e=Bh.prototype.toJSON.call(this,t);return e.object.width=this.width,e.object.height=this.height,e}}),Jh.prototype=Object.assign(Object.create(oh.prototype),{constructor:Jh,load:function(t,e,n,i){var r=this,a=new lh(r.manager);a.setPath(r.path),a.load(t,(function(t){e(r.parse(JSON.parse(t)))}),n,i)},parse:function(t){var e=this.textures;function n(t){return void 0===e[t]&&console.warn("THREE.MaterialLoader: Undefined texture",t),e[t]}var i=new Hc[t.type];if(void 0!==t.uuid&&(i.uuid=t.uuid),void 0!==t.name&&(i.name=t.name),void 0!==t.color&&i.color.setHex(t.color),void 0!==t.roughness&&(i.roughness=t.roughness),void 0!==t.metalness&&(i.metalness=t.metalness),void 0!==t.sheen&&(i.sheen=(new Zi).setHex(t.sheen)),void 0!==t.emissive&&i.emissive.setHex(t.emissive),void 0!==t.specular&&i.specular.setHex(t.specular),void 0!==t.shininess&&(i.shininess=t.shininess),void 0!==t.clearcoat&&(i.clearcoat=t.clearcoat),void 0!==t.clearcoatRoughness&&(i.clearcoatRoughness=t.clearcoatRoughness),void 0!==t.vertexColors&&(i.vertexColors=t.vertexColors),void 0!==t.fog&&(i.fog=t.fog),void 0!==t.flatShading&&(i.flatShading=t.flatShading),void 0!==t.blending&&(i.blending=t.blending),void 0!==t.combine&&(i.combine=t.combine),void 0!==t.side&&(i.side=t.side),void 0!==t.opacity&&(i.opacity=t.opacity),void 0!==t.transparent&&(i.transparent=t.transparent),void 0!==t.alphaTest&&(i.alphaTest=t.alphaTest),void 0!==t.depthTest&&(i.depthTest=t.depthTest),void 0!==t.depthWrite&&(i.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(i.colorWrite=t.colorWrite),void 0!==t.stencilWrite&&(i.stencilWrite=t.stencilWrite),void 0!==t.stencilWriteMask&&(i.stencilWriteMask=t.stencilWriteMask),void 0!==t.stencilFunc&&(i.stencilFunc=t.stencilFunc),void 0!==t.stencilRef&&(i.stencilRef=t.stencilRef),void 0!==t.stencilFuncMask&&(i.stencilFuncMask=t.stencilFuncMask),void 0!==t.stencilFail&&(i.stencilFail=t.stencilFail),void 0!==t.stencilZFail&&(i.stencilZFail=t.stencilZFail),void 0!==t.stencilZPass&&(i.stencilZPass=t.stencilZPass),void 0!==t.wireframe&&(i.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(i.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(i.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(i.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(i.rotation=t.rotation),1!==t.linewidth&&(i.linewidth=t.linewidth),void 0!==t.dashSize&&(i.dashSize=t.dashSize),void 0!==t.gapSize&&(i.gapSize=t.gapSize),void 0!==t.scale&&(i.scale=t.scale),void 0!==t.polygonOffset&&(i.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(i.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(i.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.skinning&&(i.skinning=t.skinning),void 0!==t.morphTargets&&(i.morphTargets=t.morphTargets),void 0!==t.morphNormals&&(i.morphNormals=t.morphNormals),void 0!==t.dithering&&(i.dithering=t.dithering),void 0!==t.visible&&(i.visible=t.visible),void 0!==t.toneMapped&&(i.toneMapped=t.toneMapped),void 0!==t.userData&&(i.userData=t.userData),void 0!==t.uniforms)for(var r in t.uniforms){var a=t.uniforms[r];switch(i.uniforms[r]={},a.type){case"t":i.uniforms[r].value=n(a.value);break;case"c":i.uniforms[r].value=(new Zi).setHex(a.value);break;case"v2":i.uniforms[r].value=(new yn).fromArray(a.value);break;case"v3":i.uniforms[r].value=(new Mn).fromArray(a.value);break;case"v4":i.uniforms[r].value=(new Pn).fromArray(a.value);break;case"m3":i.uniforms[r].value=(new En).fromArray(a.value);case"m4":i.uniforms[r].value=(new Hn).fromArray(a.value);break;default:i.uniforms[r].value=a.value}}if(void 0!==t.defines&&(i.defines=t.defines),void 0!==t.vertexShader&&(i.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(i.fragmentShader=t.fragmentShader),void 0!==t.extensions)for(var o in t.extensions)i.extensions[o]=t.extensions[o];if(void 0!==t.shading&&(i.flatShading=1===t.shading),void 0!==t.size&&(i.size=t.size),void 0!==t.sizeAttenuation&&(i.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(i.map=n(t.map)),void 0!==t.matcap&&(i.matcap=n(t.matcap)),void 0!==t.alphaMap&&(i.alphaMap=n(t.alphaMap),i.transparent=!0),void 0!==t.bumpMap&&(i.bumpMap=n(t.bumpMap)),void 0!==t.bumpScale&&(i.bumpScale=t.bumpScale),void 0!==t.normalMap&&(i.normalMap=n(t.normalMap)),void 0!==t.normalMapType&&(i.normalMapType=t.normalMapType),void 0!==t.normalScale){var s=t.normalScale;!1===Array.isArray(s)&&(s=[s,s]),i.normalScale=(new yn).fromArray(s)}return void 0!==t.displacementMap&&(i.displacementMap=n(t.displacementMap)),void 0!==t.displacementScale&&(i.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(i.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(i.roughnessMap=n(t.roughnessMap)),void 0!==t.metalnessMap&&(i.metalnessMap=n(t.metalnessMap)),void 0!==t.emissiveMap&&(i.emissiveMap=n(t.emissiveMap)),void 0!==t.emissiveIntensity&&(i.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(i.specularMap=n(t.specularMap)),void 0!==t.envMap&&(i.envMap=n(t.envMap)),void 0!==t.envMapIntensity&&(i.envMapIntensity=t.envMapIntensity),void 0!==t.reflectivity&&(i.reflectivity=t.reflectivity),void 0!==t.refractionRatio&&(i.refractionRatio=t.refractionRatio),void 0!==t.lightMap&&(i.lightMap=n(t.lightMap)),void 0!==t.lightMapIntensity&&(i.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(i.aoMap=n(t.aoMap)),void 0!==t.aoMapIntensity&&(i.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(i.gradientMap=n(t.gradientMap)),void 0!==t.clearcoatNormalMap&&(i.clearcoatNormalMap=n(t.clearcoatNormalMap)),void 0!==t.clearcoatNormalScale&&(i.clearcoatNormalScale=(new yn).fromArray(t.clearcoatNormalScale)),i},setTextures:function(t){return this.textures=t,this}});var Qh={decodeText:function(t){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);for(var e="",n=0,i=t.length;n<i;n++)e+=String.fromCharCode(t[n]);try{return decodeURIComponent(escape(e))}catch(t){return e}},extractUrlBase:function(t){var e=t.lastIndexOf("/");return-1===e?"./":t.substr(0,e+1)}};function Kh(){br.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0}function $h(t,e,n,i){"number"==typeof n&&(i=n,n=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),ir.call(this,t,e,n),this.meshPerAttribute=i||1}function tu(t){oh.call(this,t)}Kh.prototype=Object.assign(Object.create(br.prototype),{constructor:Kh,isInstancedBufferGeometry:!0,copy:function(t){return br.prototype.copy.call(this,t),this.maxInstancedCount=t.maxInstancedCount,this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var t=br.prototype.toJSON.call(this);return t.maxInstancedCount=this.maxInstancedCount,t.isInstancedBufferGeometry=!0,t}}),$h.prototype=Object.assign(Object.create(ir.prototype),{constructor:$h,isInstancedBufferAttribute:!0,copy:function(t){return ir.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this},toJSON:function(){var t=ir.prototype.toJSON.call(this);return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}),tu.prototype=Object.assign(Object.create(oh.prototype),{constructor:tu,load:function(t,e,n,i){var r=this,a=new lh(r.manager);a.setPath(r.path),a.load(t,(function(t){e(r.parse(JSON.parse(t)))}),n,i)},parse:function(t){var e=t.isInstancedBufferGeometry?new Kh:new br,n=t.data.index;if(void 0!==n){var i=new eu[n.type](n.array);e.setIndex(new ir(i,1))}var r=t.data.attributes;for(var a in r){var o=r[a],s=(i=new eu[o.type](o.array),new(o.isInstancedBufferAttribute?$h:ir)(i,o.itemSize,o.normalized));void 0!==o.name&&(s.name=o.name),e.setAttribute(a,s)}var l=t.data.morphAttributes;if(l)for(var a in l){for(var c=l[a],h=[],u=0,q=c.length;u<q;u++){o=c[u],s=new ir(i=new eu[o.type](o.array),o.itemSize,o.normalized);void 0!==o.name&&(s.name=o.name),h.push(s)}e.morphAttributes[a]=h}var m=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==m){u=0;for(var d=m.length;u!==d;++u){var p=m[u];e.addGroup(p.start,p.count,p.materialIndex)}}var f=t.data.boundingSphere;if(void 0!==f){var v=new Mn;void 0!==f.center&&v.fromArray(f.center),e.boundingSphere=new bi(v,f.radius)}return t.name&&(e.name=t.name),t.userData&&(e.userData=t.userData),e}});var eu={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:"undefined"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function nu(t){oh.call(this,t)}nu.prototype=Object.assign(Object.create(oh.prototype),{constructor:nu,load:function(t,e,n,i){var r=this,a=""===this.path?Qh.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||a;var o=new lh(r.manager);o.setPath(this.path),o.load(t,(function(n){var a=null;try{a=JSON.parse(n)}catch(e){return void 0!==i&&i(e),void console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message)}var o=a.metadata;void 0!==o&&void 0!==o.type&&"geometry"!==o.type.toLowerCase()?r.parse(a,e):console.error("THREE.ObjectLoader: Can't load "+t)}),n,i)},parse:function(t,e){var n=this.parseShape(t.shapes),i=this.parseGeometries(t.geometries,n),r=this.parseImages(t.images,(function(){void 0!==e&&e(s)})),a=this.parseTextures(t.textures,r),o=this.parseMaterials(t.materials,a),s=this.parseObject(t.object,i,o);return t.animations&&(s.animations=this.parseAnimations(t.animations)),void 0!==t.images&&0!==t.images.length||void 0!==e&&e(s),s},parseShape:function(t){var e={};if(void 0!==t)for(var n=0,i=t.length;n<i;n++){var r=(new Nh).fromJSON(t[n]);e[r.uuid]=r}return e},parseGeometries:function(t,e){var n={};if(void 0!==t)for(var i=new tu,r=0,a=t.length;r<a;r++){var o,s=t[r];switch(s.type){case"PlaneGeometry":case"PlaneBufferGeometry":o=new Lc[s.type](s.width,s.height,s.widthSegments,s.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":o=new Lc[s.type](s.width,s.height,s.depth,s.widthSegments,s.heightSegments,s.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":o=new Lc[s.type](s.radius,s.segments,s.thetaStart,s.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":o=new Lc[s.type](s.radiusTop,s.radiusBottom,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":o=new Lc[s.type](s.radius,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":o=new Lc[s.type](s.radius,s.widthSegments,s.heightSegments,s.phiStart,s.phiLength,s.thetaStart,s.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":o=new Lc[s.type](s.radius,s.detail);break;case"RingGeometry":case"RingBufferGeometry":o=new Lc[s.type](s.innerRadius,s.outerRadius,s.thetaSegments,s.phiSegments,s.thetaStart,s.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":o=new Lc[s.type](s.radius,s.tube,s.radialSegments,s.tubularSegments,s.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":o=new Lc[s.type](s.radius,s.tube,s.tubularSegments,s.radialSegments,s.p,s.q);break;case"TubeGeometry":case"TubeBufferGeometry":o=new Lc[s.type]((new Oh[s.path.type]).fromJSON(s.path),s.tubularSegments,s.radius,s.radialSegments,s.closed);break;case"LatheGeometry":case"LatheBufferGeometry":o=new Lc[s.type](s.points,s.segments,s.phiStart,s.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":o=new Lc[s.type](s.vertices,s.indices,s.radius,s.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":for(var l=[],c=0,h=s.shapes.length;c<h;c++){var u=e[s.shapes[c]];l.push(u)}o=new Lc[s.type](l,s.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":for(l=[],c=0,h=s.shapes.length;c<h;c++){u=e[s.shapes[c]];l.push(u)}var q=s.options.extrudePath;void 0!==q&&(s.options.extrudePath=(new Oh[q.type]).fromJSON(q)),o=new Lc[s.type](l,s.options);break;case"BufferGeometry":case"InstancedBufferGeometry":o=i.parse(s);break;case"Geometry":if("THREE"in window&&"LegacyJSONLoader"in THREE)o=(new THREE.LegacyJSONLoader).parse(s,this.resourcePath).geometry;else console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+s.type+'"');continue}o.uuid=s.uuid,void 0!==s.name&&(o.name=s.name),!0===o.isBufferGeometry&&void 0!==s.userData&&(o.userData=s.userData),n[s.uuid]=o}return n},parseMaterials:function(t,e){var n={},i={};if(void 0!==t){var r=new Jh;r.setTextures(e);for(var a=0,o=t.length;a<o;a++){var s=t[a];if("MultiMaterial"===s.type){for(var l=[],c=0;c<s.materials.length;c++){var h=s.materials[c];void 0===n[h.uuid]&&(n[h.uuid]=r.parse(h)),l.push(n[h.uuid])}i[s.uuid]=l}else void 0===n[s.uuid]&&(n[s.uuid]=r.parse(s)),i[s.uuid]=n[s.uuid]}}return i},parseAnimations:function(t){for(var e=[],n=0;n<t.length;n++){var i=t[n],r=eh.parse(i);void 0!==i.uuid&&(r.uuid=i.uuid),e.push(r)}return e},parseImages:function(t,e){var n=this,i={};function r(t){return n.manager.itemStart(t),a.load(t,(function(){n.manager.itemEnd(t)}),void 0,(function(){n.manager.itemError(t),n.manager.itemEnd(t)}))}if(void 0!==t&&t.length>0){var a=new qh(new rh(e));a.setCrossOrigin(this.crossOrigin);for(var o=0,s=t.length;o<s;o++){var l=t[o],c=l.url;if(Array.isArray(c)){i[l.uuid]=[];for(var h=0,u=c.length;h<u;h++){var q=c[h],m=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(q)?q:n.resourcePath+q;i[l.uuid].push(r(m))}}else{m=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(l.url)?l.url:n.resourcePath+l.url;i[l.uuid]=r(m)}}}return i},parseTextures:function(t,e){function n(t,e){return"number"==typeof t?t:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t),e[t])}var i={};if(void 0!==t)for(var r=0,a=t.length;r<a;r++){var o,s=t[r];void 0===s.image&&console.warn('THREE.ObjectLoader: No "image" specified for',s.uuid),void 0===e[s.image]&&console.warn("THREE.ObjectLoader: Undefined image",s.image),(o=Array.isArray(e[s.image])?new La(e[s.image]):new Ln(e[s.image])).needsUpdate=!0,o.uuid=s.uuid,void 0!==s.name&&(o.name=s.name),void 0!==s.mapping&&(o.mapping=n(s.mapping,ru)),void 0!==s.offset&&o.offset.fromArray(s.offset),void 0!==s.repeat&&o.repeat.fromArray(s.repeat),void 0!==s.center&&o.center.fromArray(s.center),void 0!==s.rotation&&(o.rotation=s.rotation),void 0!==s.wrap&&(o.wrapS=n(s.wrap[0],au),o.wrapT=n(s.wrap[1],au)),void 0!==s.format&&(o.format=s.format),void 0!==s.type&&(o.type=s.type),void 0!==s.encoding&&(o.encoding=s.encoding),void 0!==s.minFilter&&(o.minFilter=n(s.minFilter,ou)),void 0!==s.magFilter&&(o.magFilter=n(s.magFilter,ou)),void 0!==s.anisotropy&&(o.anisotropy=s.anisotropy),void 0!==s.flipY&&(o.flipY=s.flipY),void 0!==s.premultiplyAlpha&&(o.premultiplyAlpha=s.premultiplyAlpha),void 0!==s.unpackAlignment&&(o.unpackAlignment=s.unpackAlignment),i[s.uuid]=o}return i},parseObject:function(t,e,n){var i;function r(t){return void 0===e[t]&&console.warn("THREE.ObjectLoader: Undefined geometry",t),e[t]}function a(t){if(void 0!==t){if(Array.isArray(t)){for(var e=[],i=0,r=t.length;i<r;i++){var a=t[i];void 0===n[a]&&console.warn("THREE.ObjectLoader: Undefined material",a),e.push(n[a])}return e}return void 0===n[t]&&console.warn("THREE.ObjectLoader: Undefined material",t),n[t]}}switch(t.type){case"Scene":i=new oi,void 0!==t.background&&Number.isInteger(t.background)&&(i.background=new Zi(t.background)),void 0!==t.fog&&("Fog"===t.fog.type?i.fog=new ws(t.fog.color,t.fog.near,t.fog.far):"FogExp2"===t.fog.type&&(i.fog=new bs(t.fog.color,t.fog.density)));break;case"PerspectiveCamera":i=new ia(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(i.focus=t.focus),void 0!==t.zoom&&(i.zoom=t.zoom),void 0!==t.filmGauge&&(i.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(i.filmOffset=t.filmOffset),void 0!==t.view&&(i.view=Object.assign({},t.view));break;case"OrthographicCamera":i=new kh(t.left,t.right,t.top,t.bottom,t.near,t.far),void 0!==t.zoom&&(i.zoom=t.zoom),void 0!==t.view&&(i.view=Object.assign({},t.view));break;case"AmbientLight":i=new Yh(t.color,t.intensity);break;case"DirectionalLight":i=new Xh(t.color,t.intensity);break;case"PointLight":i=new jh(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":i=new Zh(t.color,t.intensity,t.width,t.height);break;case"SpotLight":i=new Gh(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case"HemisphereLight":i=new Uh(t.color,t.groundColor,t.intensity);break;case"SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":var o=r(t.geometry),s=a(t.material);i=o.bones&&o.bones.length>0?new js(o,s):new Fr(o,s);break;case"InstancedMesh":o=r(t.geometry),s=a(t.material);var l=t.count,c=t.instanceMatrix;(i=new Zs(o,s,l)).instanceMatrix=new ir(new Float32Array(c.array),16);break;case"LOD":i=new Vs;break;case"Line":i=new nl(r(t.geometry),a(t.material),t.mode);break;case"LineLoop":i=new ol(r(t.geometry),a(t.material));break;case"LineSegments":i=new al(r(t.geometry),a(t.material));break;case"PointCloud":case"Points":i=new ql(r(t.geometry),a(t.material));break;case"Sprite":i=new Us(a(t.material));break;case"Group":i=new ms;break;default:i=new ai}if(i.uuid=t.uuid,void 0!==t.name&&(i.name=t.name),void 0!==t.matrix?(i.matrix.fromArray(t.matrix),void 0!==t.matrixAutoUpdate&&(i.matrixAutoUpdate=t.matrixAutoUpdate),i.matrixAutoUpdate&&i.matrix.decompose(i.position,i.quaternion,i.scale)):(void 0!==t.position&&i.position.fromArray(t.position),void 0!==t.rotation&&i.rotation.fromArray(t.rotation),void 0!==t.quaternion&&i.quaternion.fromArray(t.quaternion),void 0!==t.scale&&i.scale.fromArray(t.scale)),void 0!==t.castShadow&&(i.castShadow=t.castShadow),void 0!==t.receiveShadow&&(i.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.bias&&(i.shadow.bias=t.shadow.bias),void 0!==t.shadow.radius&&(i.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&i.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(i.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(i.visible=t.visible),void 0!==t.frustumCulled&&(i.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(i.renderOrder=t.renderOrder),void 0!==t.userData&&(i.userData=t.userData),void 0!==t.layers&&(i.layers.mask=t.layers),void 0!==t.drawMode&&i.setDrawMode(t.drawMode),void 0!==t.children)for(var h=t.children,u=0;u<h.length;u++)i.add(this.parseObject(h[u],e,n));if("LOD"===t.type)for(var q=t.levels,m=0;m<q.length;m++){var d=q[m],p=i.getObjectByProperty("uuid",d.object);void 0!==p&&i.addLevel(p,d.distance)}return i}});var iu,ru={UVMapping:ct,CubeReflectionMapping:ht,CubeRefractionMapping:ut,EquirectangularReflectionMapping:qt,EquirectangularRefractionMapping:mt,SphericalReflectionMapping:dt,CubeUVReflectionMapping:pt,CubeUVRefractionMapping:ft},au={RepeatWrapping:vt,ClampToEdgeWrapping:xt,MirroredRepeatWrapping:gt},ou={NearestFilter:yt,NearestMipmapNearestFilter:_t,NearestMipmapLinearFilter:wt,LinearFilter:St,LinearMipmapNearestFilter:Tt,LinearMipmapLinearFilter:At};function su(t){"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),oh.call(this,t),this.options=void 0}function lu(){this.type="ShapePath",this.color=new Zi,this.subPaths=[],this.currentPath=null}function cu(t){this.type="Font",this.data=t}function hu(t,e,n,i,r){var a=r.glyphs[t]||r.glyphs["?"];if(a){var o,s,l,c,h,u,q,m,d=new lu;if(a.o)for(var p=a._cachedOutline||(a._cachedOutline=a.o.split(" ")),f=0,v=p.length;f<v;){switch(p[f++]){case"m":o=p[f++]*e+n,s=p[f++]*e+i,d.moveTo(o,s);break;case"l":o=p[f++]*e+n,s=p[f++]*e+i,d.lineTo(o,s);break;case"q":l=p[f++]*e+n,c=p[f++]*e+i,h=p[f++]*e+n,u=p[f++]*e+i,d.quadraticCurveTo(h,u,l,c);break;case"b":l=p[f++]*e+n,c=p[f++]*e+i,h=p[f++]*e+n,u=p[f++]*e+i,q=p[f++]*e+n,m=p[f++]*e+i,d.bezierCurveTo(h,u,q,m,l,c)}}return{offsetX:a.ha*e,path:d}}console.error('THREE.Font: character "'+t+'" does not exists in font family '+r.familyName+".")}function uu(t){oh.call(this,t)}su.prototype=Object.assign(Object.create(oh.prototype),{constructor:su,setOptions:function(t){return this.options=t,this},load:function(t,e,n,i){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var r=this,a=ih.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout((function(){e&&e(a),r.manager.itemEnd(t)}),0),a;fetch(t).then((function(t){return t.blob()})).then((function(t){return void 0===r.options?createImageBitmap(t):createImageBitmap(t,r.options)})).then((function(n){ih.add(t,n),e&&e(n),r.manager.itemEnd(t)})).catch((function(e){i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)})),r.manager.itemStart(t)}}),Object.assign(lu.prototype,{moveTo:function(t,e){return this.currentPath=new Dh,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e),this},lineTo:function(t,e){return this.currentPath.lineTo(t,e),this},quadraticCurveTo:function(t,e,n,i){return this.currentPath.quadraticCurveTo(t,e,n,i),this},bezierCurveTo:function(t,e,n,i,r,a){return this.currentPath.bezierCurveTo(t,e,n,i,r,a),this},splineThru:function(t){return this.currentPath.splineThru(t),this},toShapes:function(t,e){function n(t){for(var e=[],n=0,i=t.length;n<i;n++){var r=t[n],a=new Nh;a.curves=r.curves,e.push(a)}return e}function i(t,e){for(var n=e.length,i=!1,r=n-1,a=0;a<n;r=a++){var o=e[r],s=e[a],l=s.x-o.x,c=s.y-o.y;if(Math.abs(c)>Number.EPSILON){if(c<0&&(o=e[a],l=-l,s=e[r],c=-c),t.y<o.y||t.y>s.y)continue;if(t.y===o.y){if(t.x===o.x)return!0}else{var h=c*(t.x-o.x)-l*(t.y-o.y);if(0===h)return!0;if(h<0)continue;i=!i}}else{if(t.y!==o.y)continue;if(s.x<=t.x&&t.x<=o.x||o.x<=t.x&&t.x<=s.x)return!0}}return i}var r=ac.isClockWise,a=this.subPaths;if(0===a.length)return[];if(!0===e)return n(a);var o,s,l,c=[];if(1===a.length)return s=a[0],(l=new Nh).curves=s.curves,c.push(l),c;var h=!r(a[0].getPoints());h=t?!h:h;var u,q,m=[],d=[],p=[],f=0;d[f]=void 0,p[f]=[];for(var v=0,x=a.length;v<x;v++)o=r(u=(s=a[v]).getPoints()),(o=t?!o:o)?(!h&&d[f]&&f++,d[f]={s:new Nh,p:u},d[f].s.curves=s.curves,h&&f++,p[f]=[]):p[f].push({h:s,p:u[0]});if(!d[0])return n(a);if(d.length>1){for(var g=!1,y=[],_=0,b=d.length;_<b;_++)m[_]=[];for(_=0,b=d.length;_<b;_++)for(var w=p[_],M=0;M<w.length;M++){for(var S=w[M],T=!0,E=0;E<d.length;E++)i(S.p,d[E].p)&&(_!==E&&y.push({froms:_,tos:E,hole:M}),T?(T=!1,m[E].push(S)):g=!0);T&&m[_].push(S)}y.length>0&&(g||(p=m))}v=0;for(var A=d.length;v<A;v++){l=d[v].s,c.push(l);for(var z=0,L=(q=p[v]).length;z<L;z++)l.holes.push(q[z].h)}return c}}),Object.assign(cu.prototype,{isFont:!0,generateShapes:function(t,e){void 0===e&&(e=100);for(var n=[],i=function(t,e,n){for(var i=Array.from?Array.from(t):String(t).split(""),r=e/n.resolution,a=(n.boundingBox.yMax-n.boundingBox.yMin+n.underlineThickness)*r,o=[],s=0,l=0,c=0;c<i.length;c++){var h=i[c];if("\n"===h)s=0,l-=a;else{var u=hu(h,r,s,l,n);s+=u.offsetX,o.push(u.path)}}return o}(t,e,this.data),r=0,a=i.length;r<a;r++)Array.prototype.push.apply(n,i[r].toShapes());return n}}),uu.prototype=Object.assign(Object.create(oh.prototype),{constructor:uu,load:function(t,e,n,i){var r=this,a=new lh(this.manager);a.setPath(this.path),a.load(t,(function(t){var n;try{n=JSON.parse(t)}catch(e){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),n=JSON.parse(t.substring(65,t.length-2))}var i=r.parse(n);e&&e(i)}),n,i)},parse:function(t){return new cu(t)}});var qu={getContext:function(){return void 0===iu&&(iu=new(window.AudioContext||window.webkitAudioContext)),iu},setContext:function(t){iu=t}};function mu(t){oh.call(this,t)}function du(){this.coefficients=[];for(var t=0;t<9;t++)this.coefficients.push(new Mn)}function pu(t,e){Bh.call(this,void 0,e),this.sh=void 0!==t?t:new du}function fu(t,e,n){pu.call(this,void 0,n);var i=(new Zi).set(t),r=(new Zi).set(e),a=new Mn(i.r,i.g,i.b),o=new Mn(r.r,r.g,r.b),s=Math.sqrt(Math.PI),l=s*Math.sqrt(.75);this.sh.coefficients[0].copy(a).add(o).multiplyScalar(s),this.sh.coefficients[1].copy(a).sub(o).multiplyScalar(l)}function vu(t,e){pu.call(this,void 0,e);var n=(new Zi).set(t);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}mu.prototype=Object.assign(Object.create(oh.prototype),{constructor:mu,load:function(t,e,n,i){var r=new lh(this.manager);r.setResponseType("arraybuffer"),r.setPath(this.path),r.load(t,(function(t){var n=t.slice(0);qu.getContext().decodeAudioData(n,(function(t){e(t)}))}),n,i)}}),Object.assign(du.prototype,{isSphericalHarmonics3:!0,set:function(t){for(var e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this},zero:function(){for(var t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this},getAt:function(t,e){var n=t.x,i=t.y,r=t.z,a=this.coefficients;return e.copy(a[0]).multiplyScalar(.282095),e.addScale(a[1],.488603*i),e.addScale(a[2],.488603*r),e.addScale(a[3],.488603*n),e.addScale(a[4],n*i*1.092548),e.addScale(a[5],i*r*1.092548),e.addScale(a[6],.315392*(3*r*r-1)),e.addScale(a[7],n*r*1.092548),e.addScale(a[8],.546274*(n*n-i*i)),e},getIrradianceAt:function(t,e){var n=t.x,i=t.y,r=t.z,a=this.coefficients;return e.copy(a[0]).multiplyScalar(.886227),e.addScale(a[1],1.023328*i),e.addScale(a[2],1.023328*r),e.addScale(a[3],1.023328*n),e.addScale(a[4],.858086*n*i),e.addScale(a[5],.858086*i*r),e.addScale(a[6],.743125*r*r-.247708),e.addScale(a[7],.858086*n*r),e.addScale(a[8],.429043*(n*n-i*i)),e},add:function(t){for(var e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this},scale:function(t){for(var e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this},lerp:function(t,e){for(var n=0;n<9;n++)this.coefficients[n].lerp(t.coefficients[n],e);return this},equals:function(t){for(var e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0},copy:function(t){return this.set(t.coefficients)},clone:function(){return(new this.constructor).copy(this)},fromArray:function(t,e){void 0===e&&(e=0);for(var n=this.coefficients,i=0;i<9;i++)n[i].fromArray(t,e+3*i);return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);for(var n=this.coefficients,i=0;i<9;i++)n[i].toArray(t,e+3*i);return t}}),Object.assign(du,{getBasisAt:function(t,e){var n=t.x,i=t.y,r=t.z;e[0]=.282095,e[1]=.488603*i,e[2]=.488603*r,e[3]=.488603*n,e[4]=1.092548*n*i,e[5]=1.092548*i*r,e[6]=.315392*(3*r*r-1),e[7]=1.092548*n*r,e[8]=.546274*(n*n-i*i)}}),pu.prototype=Object.assign(Object.create(Bh.prototype),{constructor:pu,isLightProbe:!0,copy:function(t){return Bh.prototype.copy.call(this,t),this.sh.copy(t.sh),this.intensity=t.intensity,this},toJSON:function(t){return Bh.prototype.toJSON.call(this,t)}}),fu.prototype=Object.assign(Object.create(pu.prototype),{constructor:fu,isHemisphereLightProbe:!0,copy:function(t){return pu.prototype.copy.call(this,t),this},toJSON:function(t){return pu.prototype.toJSON.call(this,t)}}),vu.prototype=Object.assign(Object.create(pu.prototype),{constructor:vu,isAmbientLightProbe:!0,copy:function(t){return pu.prototype.copy.call(this,t),this},toJSON:function(t){return pu.prototype.toJSON.call(this,t)}});var xu=new Hn,gu=new Hn;function yu(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new ia,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new ia,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}function _u(t){this.autoStart=void 0===t||t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}Object.assign(yu.prototype,{update:function(t){var e=this._cache;if(e.focus!==t.focus||e.fov!==t.fov||e.aspect!==t.aspect*this.aspect||e.near!==t.near||e.far!==t.far||e.zoom!==t.zoom||e.eyeSep!==this.eyeSep){e.focus=t.focus,e.fov=t.fov,e.aspect=t.aspect*this.aspect,e.near=t.near,e.far=t.far,e.zoom=t.zoom,e.eyeSep=this.eyeSep;var n,i,r=t.projectionMatrix.clone(),a=e.eyeSep/2,o=a*e.near/e.focus,s=e.near*Math.tan(gn.DEG2RAD*e.fov*.5)/e.zoom;gu.elements[12]=-a,xu.elements[12]=a,n=-s*e.aspect+o,i=s*e.aspect+o,r.elements[0]=2*e.near/(i-n),r.elements[8]=(i+n)/(i-n),this.cameraL.projectionMatrix.copy(r),n=-s*e.aspect-o,i=s*e.aspect-o,r.elements[0]=2*e.near/(i-n),r.elements[8]=(i+n)/(i-n),this.cameraR.projectionMatrix.copy(r)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(gu),this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(xu)}}),Object.assign(_u.prototype,{start:function(){this.startTime=("undefined"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var e=("undefined"==typeof performance?Date:performance).now();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}});var bu=new Mn,wu=new _n,Mu=new Mn,Su=new Mn;function Tu(){ai.call(this),this.type="AudioListener",this.context=qu.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new _u}function Eu(t){ai.call(this),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this._startedAt=0,this._pausedAt=0,this.filters=[]}Tu.prototype=Object.assign(Object.create(ai.prototype),{constructor:Tu,getInput:function(){return this.gain},removeFilter:function(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this},getFilter:function(){return this.filter},setFilter:function(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this},updateMatrixWorld:function(t){ai.prototype.updateMatrixWorld.call(this,t);var e=this.context.listener,n=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(bu,wu,Mu),Su.set(0,0,-1).applyQuaternion(wu),e.positionX){var i=this.context.currentTime+this.timeDelta;e.positionX.linearRampToValueAtTime(bu.x,i),e.positionY.linearRampToValueAtTime(bu.y,i),e.positionZ.linearRampToValueAtTime(bu.z,i),e.forwardX.linearRampToValueAtTime(Su.x,i),e.forwardY.linearRampToValueAtTime(Su.y,i),e.forwardZ.linearRampToValueAtTime(Su.z,i),e.upX.linearRampToValueAtTime(n.x,i),e.upY.linearRampToValueAtTime(n.y,i),e.upZ.linearRampToValueAtTime(n.z,i)}else e.setPosition(bu.x,bu.y,bu.z),e.setOrientation(Su.x,Su.y,Su.z,n.x,n.y,n.z)}}),Eu.prototype=Object.assign(Object.create(ai.prototype),{constructor:Eu,getOutput:function(){return this.gain},setNodeSource:function(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this},setMediaElementSource:function(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this},setMediaStreamSource:function(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this},setBuffer:function(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(t){if(void 0===t&&(t=0),!0!==this.isPlaying){if(!1!==this.hasPlaybackControl){this._startedAt=this.context.currentTime+t;var e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._pausedAt+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}console.warn("THREE.Audio: this Audio has no playback control.")}else console.warn("THREE.Audio: Audio is already playing.")},pause:function(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._pausedAt=(this.context.currentTime-this._startedAt)*this.playbackRate,this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")},stop:function(){if(!1!==this.hasPlaybackControl)return this._pausedAt=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(t){return t||(t=[]),!0===this.isPlaying?(this.disconnect(),this.filters=t,this.connect()):this.filters=t,this},setDetune:function(t){if(this.detune=t,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this},getDetune:function(){return this.detune},getFilter:function(){return this.getFilters()[0]},setFilter:function(t){return this.setFilters(t?[t]:[])},setPlaybackRate:function(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")},setLoopStart:function(t){return this.loopStart=t,this},setLoopEnd:function(t){return this.loopEnd=t,this},getVolume:function(){return this.gain.gain.value},setVolume:function(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}});var Au=new Mn,zu=new _n,Lu=new Mn,Pu=new Mn;function Ru(t){Eu.call(this,t),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}function Cu(t,e){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=void 0!==e?e:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}function Ou(t,e,n){this.binding=t,this.valueSize=n;var i,r=Float64Array;switch(e){case"quaternion":i=this._slerp;break;case"string":case"bool":r=Array,i=this._select;break;default:i=this._lerp}this.buffer=new r(4*n),this._mixBufferRegion=i,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}Ru.prototype=Object.assign(Object.create(Eu.prototype),{constructor:Ru,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(t){return this.panner.refDistance=t,this},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(t){return this.panner.rolloffFactor=t,this},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(t){return this.panner.distanceModel=t,this},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(t){return this.panner.maxDistance=t,this},setDirectionalCone:function(t,e,n){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=e,this.panner.coneOuterGain=n,this},updateMatrixWorld:function(t){if(ai.prototype.updateMatrixWorld.call(this,t),!0!==this.hasPlaybackControl||!1!==this.isPlaying){this.matrixWorld.decompose(Au,zu,Lu),Pu.set(0,0,1).applyQuaternion(zu);var e=this.panner;if(e.positionX){var n=this.context.currentTime+this.listener.timeDelta;e.positionX.linearRampToValueAtTime(Au.x,n),e.positionY.linearRampToValueAtTime(Au.y,n),e.positionZ.linearRampToValueAtTime(Au.z,n),e.orientationX.linearRampToValueAtTime(Pu.x,n),e.orientationY.linearRampToValueAtTime(Pu.y,n),e.orientationZ.linearRampToValueAtTime(Pu.z,n)}else e.setPosition(Au.x,Au.y,Au.z),e.setOrientation(Pu.x,Pu.y,Pu.z)}}}),Object.assign(Cu.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var t=0,e=this.getFrequencyData(),n=0;n<e.length;n++)t+=e[n];return t/e.length}}),Object.assign(Ou.prototype,{accumulate:function(t,e){var n=this.buffer,i=this.valueSize,r=t*i+i,a=this.cumulativeWeight;if(0===a){for(var o=0;o!==i;++o)n[r+o]=n[o];a=e}else{var s=e/(a+=e);this._mixBufferRegion(n,r,0,s,i)}this.cumulativeWeight=a},apply:function(t){var e=this.valueSize,n=this.buffer,i=t*e+e,r=this.cumulativeWeight,a=this.binding;if(this.cumulativeWeight=0,r<1){var o=3*e;this._mixBufferRegion(n,i,o,1-r,e)}for(var s=e,l=e+e;s!==l;++s)if(n[s]!==n[s+e]){a.setValue(n,i);break}},saveOriginalState:function(){var t=this.binding,e=this.buffer,n=this.valueSize,i=3*n;t.getValue(e,i);for(var r=n,a=i;r!==a;++r)e[r]=e[i+r%n];this.cumulativeWeight=0},restoreOriginalState:function(){var t=3*this.valueSize;this.binding.setValue(this.buffer,t)},_select:function(t,e,n,i,r){if(i>=.5)for(var a=0;a!==r;++a)t[e+a]=t[n+a]},_slerp:function(t,e,n,i){_n.slerpFlat(t,e,t,e,t,n,i)},_lerp:function(t,e,n,i,r){for(var a=1-i,o=0;o!==r;++o){var s=e+o;t[s]=t[s]*a+t[n+o]*i}}});var Iu=new RegExp("[\\[\\]\\.:\\/]","g"),Du="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",Nu=/((?:WC+[\/:])*)/.source.replace("WC","[^\\[\\]\\.:\\/]"),Bu=/(WCOD+)?/.source.replace("WCOD",Du),Uu=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC","[^\\[\\]\\.:\\/]"),Fu=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC","[^\\[\\]\\.:\\/]"),Hu=new RegExp("^"+Nu+Bu+Uu+Fu+"$"),Gu=["material","materials","bones"];function Vu(t,e,n){var i=n||ju.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,i)}function ju(t,e,n){this.path=e,this.parsedPath=n||ju.parseTrackName(e),this.node=ju.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t}function ku(){this.uuid=gn.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var t={};this._indicesByUUID=t;for(var e=0,n=arguments.length;e!==n;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var i=this;this.stats={objects:{get total(){return i._objects.length},get inUse(){return this.total-i.nCachedObjects_}},get bindingsPerObject(){return i._bindings.length}}}function Wu(t,e,n){this._mixer=t,this._clip=e,this._localRoot=n||null;for(var i=e.tracks,r=i.length,a=new Array(r),o={endingStart:Te,endingEnd:Te},s=0;s!==r;++s){var l=i[s].createInterpolant(null);a[s]=l,l.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(r),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=_e,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function Xu(t){this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function Yu(t){"string"==typeof t&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),t=arguments[1]),this.value=t}function Zu(t,e,n){Ms.call(this,t,e),this.meshPerAttribute=n||1}function Ju(t,e,n,i){this.ray=new Li(t,e),this.near=n||0,this.far=i||1/0,this.camera=null,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function Qu(t,e){return t.distance-e.distance}function Ku(t,e,n,i){if(!1!==t.visible&&(t.raycast(e,n),!0===i))for(var r=t.children,a=0,o=r.length;a<o;a++)Ku(r[a],e,n,!0)}function $u(t,e,n){return this.radius=void 0!==t?t:1,this.phi=void 0!==e?e:0,this.theta=void 0!==n?n:0,this}function tq(t,e,n){return this.radius=void 0!==t?t:1,this.theta=void 0!==e?e:0,this.y=void 0!==n?n:0,this}Object.assign(Vu.prototype,{getValue:function(t,e){this.bind();var n=this._targetGroup.nCachedObjects_,i=this._bindings[n];void 0!==i&&i.getValue(t,e)},setValue:function(t,e){for(var n=this._bindings,i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i)n[i].setValue(t,e)},bind:function(){for(var t=this._bindings,e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].bind()},unbind:function(){for(var t=this._bindings,e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].unbind()}}),Object.assign(ju,{Composite:Vu,create:function(t,e,n){return t&&t.isAnimationObjectGroup?new ju.Composite(t,e,n):new ju(t,e,n)},sanitizeNodeName:function(t){return t.replace(/\s/g,"_").replace(Iu,"")},parseTrackName:function(t){var e=Hu.exec(t);if(!e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);var n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==i&&-1!==i){var r=n.nodeName.substring(i+1);-1!==Gu.indexOf(r)&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=r)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return n},findNode:function(t,e){if(!e||""===e||"root"===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){var n=t.skeleton.getBoneByName(e);if(void 0!==n)return n}if(t.children){var i=function(t){for(var n=0;n<t.length;n++){var r=t[n];if(r.name===e||r.uuid===e)return r;var a=i(r.children);if(a)return a}return null},r=i(t.children);if(r)return r}return null}}),Object.assign(ju.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(t,e){t[e]=this.node[this.propertyName]},function(t,e){for(var n=this.resolvedProperty,i=0,r=n.length;i!==r;++i)t[e++]=n[i]},function(t,e){t[e]=this.resolvedProperty[this.propertyIndex]},function(t,e){this.resolvedProperty.toArray(t,e)}],SetterByBindingTypeAndVersioning:[[function(t,e){this.targetObject[this.propertyName]=t[e]},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){for(var n=this.resolvedProperty,i=0,r=n.length;i!==r;++i)n[i]=t[e++]},function(t,e){for(var n=this.resolvedProperty,i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.needsUpdate=!0},function(t,e){for(var n=this.resolvedProperty,i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty[this.propertyIndex]=t[e]},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty.fromArray(t,e)},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(t,e){this.bind(),this.getValue(t,e)},setValue:function(t,e){this.bind(),this.setValue(t,e)},bind:function(){var t=this.node,e=this.parsedPath,n=e.objectName,i=e.propertyName,r=e.propertyIndex;if(t||(t=ju.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,t){if(n){var a=e.objectIndex;switch(n){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(var o=0;o<t.length;o++)if(t[o].name===a){a=o;break}break;default:if(void 0===t[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[n]}if(void 0!==a){if(void 0===t[a])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[a]}}var s=t[i];if(void 0!==s){var l=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?l=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(l=this.Versioning.MatrixWorldNeedsUpdate);var c=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===i){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(t.geometry.isBufferGeometry){if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);for(o=0;o<this.node.geometry.morphAttributes.position.length;o++)if(t.geometry.morphAttributes.position[o].name===r){r=o;break}}else{if(!t.geometry.morphTargets)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",this);for(o=0;o<this.node.geometry.morphTargets.length;o++)if(t.geometry.morphTargets[o].name===r){r=o;break}}}c=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=r}else void 0!==s.fromArray&&void 0!==s.toArray?(c=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(c=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=i;this.getValue=this.GetterByBindingType[c],this.setValue=this.SetterByBindingTypeAndVersioning[c][l]}else{var h=e.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+h+"."+i+" but it wasn't found.",t)}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.")},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),
//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(ju.prototype,{_getValue_unbound:ju.prototype.getValue,_setValue_unbound:ju.prototype.setValue}),Object.assign(ku.prototype,{isAnimationObjectGroup:!0,add:function(){for(var t=this._objects,e=t.length,n=this.nCachedObjects_,i=this._indicesByUUID,r=this._paths,a=this._parsedPaths,o=this._bindings,s=o.length,l=void 0,c=0,h=arguments.length;c!==h;++c){var u=arguments[c],q=u.uuid,m=i[q];if(void 0===m){m=e++,i[q]=m,t.push(u);for(var d=0,p=s;d!==p;++d)o[d].push(new ju(u,r[d],a[d]))}else if(m<n){l=t[m];var f=--n,v=t[f];i[v.uuid]=m,t[m]=v,i[q]=f,t[f]=u;for(d=0,p=s;d!==p;++d){var x=o[d],g=x[f],y=x[m];x[m]=g,void 0===y&&(y=new ju(u,r[d],a[d])),x[f]=y}}else t[m]!==l&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=n},remove:function(){for(var t=this._objects,e=this.nCachedObjects_,n=this._indicesByUUID,i=this._bindings,r=i.length,a=0,o=arguments.length;a!==o;++a){var s=arguments[a],l=s.uuid,c=n[l];if(void 0!==c&&c>=e){var h=e++,u=t[h];n[u.uuid]=c,t[c]=u,n[l]=h,t[h]=s;for(var q=0,m=r;q!==m;++q){var d=i[q],p=d[h],f=d[c];d[c]=p,d[h]=f}}}this.nCachedObjects_=e},uncache:function(){for(var t=this._objects,e=t.length,n=this.nCachedObjects_,i=this._indicesByUUID,r=this._bindings,a=r.length,o=0,s=arguments.length;o!==s;++o){var l=arguments[o],c=l.uuid,h=i[c];if(void 0!==h)if(delete i[c],h<n){var u=--n,q=t[u],m=t[x=--e];i[q.uuid]=h,t[h]=q,i[m.uuid]=u,t[u]=m,t.pop();for(var d=0,p=a;d!==p;++d){var f=(g=r[d])[u],v=g[x];g[h]=f,g[u]=v,g.pop()}}else{var x;i[(m=t[x=--e]).uuid]=h,t[h]=m,t.pop();for(d=0,p=a;d!==p;++d){var g;(g=r[d])[h]=g[x],g.pop()}}}this.nCachedObjects_=n},subscribe_:function(t,e){var n=this._bindingsIndicesByPath,i=n[t],r=this._bindings;if(void 0!==i)return r[i];var a=this._paths,o=this._parsedPaths,s=this._objects,l=s.length,c=this.nCachedObjects_,h=new Array(l);i=r.length,n[t]=i,a.push(t),o.push(e),r.push(h);for(var u=c,q=s.length;u!==q;++u){var m=s[u];h[u]=new ju(m,t,e)}return h},unsubscribe_:function(t){var e=this._bindingsIndicesByPath,n=e[t];if(void 0!==n){var i=this._paths,r=this._parsedPaths,a=this._bindings,o=a.length-1,s=a[o];e[t[o]]=n,a[n]=s,a.pop(),r[n]=r[o],r.pop(),i[n]=i[o],i.pop()}}}),Object.assign(Wu.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(t){return this._startTime=t,this},setLoop:function(t,e){return this.loop=t,this.repetitions=e,this},setEffectiveWeight:function(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(t){return this._scheduleFading(t,0,1)},fadeOut:function(t){return this._scheduleFading(t,1,0)},crossFadeFrom:function(t,e,n){if(t.fadeOut(e),this.fadeIn(e),n){var i=this._clip.duration,r=t._clip.duration,a=r/i,o=i/r;t.warp(1,a,e),this.warp(o,1,e)}return this},crossFadeTo:function(t,e,n){return t.crossFadeFrom(this,e,n)},stopFading:function(){var t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this},setEffectiveTimeScale:function(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(t){return this.timeScale=this._clip.duration/t,this.stopWarping()},syncWith:function(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()},halt:function(t){return this.warp(this._effectiveTimeScale,0,t)},warp:function(t,e,n){var i=this._mixer,r=i.time,a=this._timeScaleInterpolant,o=this.timeScale;null===a&&(a=i._lendControlInterpolant(),this._timeScaleInterpolant=a);var s=a.parameterPositions,l=a.sampleValues;return s[0]=r,s[1]=r+n,l[0]=t/o,l[1]=e/o,this},stopWarping:function(){var t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(t,e,n,i){if(this.enabled){var r=this._startTime;if(null!==r){var a=(t-r)*n;if(a<0||0===n)return;this._startTime=null,e=n*a}e*=this._updateTimeScale(t);var o=this._updateTime(e),s=this._updateWeight(t);if(s>0)for(var l=this._interpolants,c=this._propertyBindings,h=0,u=l.length;h!==u;++h)l[h].evaluate(o),c[h].accumulate(i,s)}else this._updateWeight(t)},_updateWeight:function(t){var e=0;if(this.enabled){e=this.weight;var n=this._weightInterpolant;if(null!==n){var i=n.evaluate(t)[0];e*=i,t>n.parameterPositions[1]&&(this.stopFading(),0===i&&(this.enabled=!1))}}return this._effectiveWeight=e,e},_updateTimeScale:function(t){var e=0;if(!this.paused){e=this.timeScale;var n=this._timeScaleInterpolant;if(null!==n)e*=n.evaluate(t)[0],t>n.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e)}return this._effectiveTimeScale=e,e},_updateTime:function(t){var e=this.time+t,n=this._clip.duration,i=this.loop,r=this._loopCount,a=i===be;if(0===t)return-1===r?e:a&&1==(1&r)?n-e:e;if(i===ye){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(e>=n)e=n;else{if(!(e<0)){this.time=e;break t}e=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=e,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),e>=n||e<0){var o=Math.floor(e/n);e-=n*o,r+=Math.abs(o);var s=this.repetitions-r;if(s<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,e=t>0?n:0,this.time=e,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===s){var l=t<0;this._setEndings(l,!l,a)}else this._setEndings(!1,!1,a);this._loopCount=r,this.time=e,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:o})}}else this.time=e;if(a&&1==(1&r))return n-e}return e},_setEndings:function(t,e,n){var i=this._interpolantSettings;n?(i.endingStart=Ee,i.endingEnd=Ee):(i.endingStart=t?this.zeroSlopeAtStart?Ee:Te:Ae,i.endingEnd=e?this.zeroSlopeAtEnd?Ee:Te:Ae)},_scheduleFading:function(t,e,n){var i=this._mixer,r=i.time,a=this._weightInterpolant;null===a&&(a=i._lendControlInterpolant(),this._weightInterpolant=a);var o=a.parameterPositions,s=a.sampleValues;return o[0]=r,s[0]=e,o[1]=r+t,s[1]=n,this}}),Xu.prototype=Object.assign(Object.create(fn.prototype),{constructor:Xu,_bindAction:function(t,e){var n=t._localRoot||this._root,i=t._clip.tracks,r=i.length,a=t._propertyBindings,o=t._interpolants,s=n.uuid,l=this._bindingsByRootAndName,c=l[s];void 0===c&&(c={},l[s]=c);for(var h=0;h!==r;++h){var u=i[h],q=u.name,m=c[q];if(void 0!==m)a[h]=m;else{if(void 0!==(m=a[h])){null===m._cacheIndex&&(++m.referenceCount,this._addInactiveBinding(m,s,q));continue}var d=e&&e._propertyBindings[h].binding.parsedPath;++(m=new Ou(ju.create(n,q,d),u.ValueTypeName,u.getValueSize())).referenceCount,this._addInactiveBinding(m,s,q),a[h]=m}o[h].resultBuffer=m.buffer}},_activateAction:function(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){var e=(t._localRoot||this._root).uuid,n=t._clip.uuid,i=this._actionsByClip[n];this._bindAction(t,i&&i.knownActions[0]),this._addInactiveAction(t,n,e)}for(var r=t._propertyBindings,a=0,o=r.length;a!==o;++a){var s=r[a];0==s.useCount++&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(t)}},_deactivateAction:function(t){if(this._isActiveAction(t)){for(var e=t._propertyBindings,n=0,i=e.length;n!==i;++n){var r=e[n];0==--r.useCount&&(r.restoreOriginalState(),this._takeBackBinding(r))}this._takeBackAction(t)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}},_isActiveAction:function(t){var e=t._cacheIndex;return null!==e&&e<this._nActiveActions},_addInactiveAction:function(t,e,n){var i=this._actions,r=this._actionsByClip,a=r[e];if(void 0===a)a={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,r[e]=a;else{var o=a.knownActions;t._byClipCacheIndex=o.length,o.push(t)}t._cacheIndex=i.length,i.push(t),a.actionByRoot[n]=t},_removeInactiveAction:function(t){var e=this._actions,n=e[e.length-1],i=t._cacheIndex;n._cacheIndex=i,e[i]=n,e.pop(),t._cacheIndex=null;var r=t._clip.uuid,a=this._actionsByClip,o=a[r],s=o.knownActions,l=s[s.length-1],c=t._byClipCacheIndex;l._byClipCacheIndex=c,s[c]=l,s.pop(),t._byClipCacheIndex=null,delete o.actionByRoot[(t._localRoot||this._root).uuid],0===s.length&&delete a[r],this._removeInactiveBindingsForAction(t)},_removeInactiveBindingsForAction:function(t){for(var e=t._propertyBindings,n=0,i=e.length;n!==i;++n){var r=e[n];0==--r.referenceCount&&this._removeInactiveBinding(r)}},_lendAction:function(t){var e=this._actions,n=t._cacheIndex,i=this._nActiveActions++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r},_takeBackAction:function(t){var e=this._actions,n=t._cacheIndex,i=--this._nActiveActions,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r},_addInactiveBinding:function(t,e,n){var i=this._bindingsByRootAndName,r=i[e],a=this._bindings;void 0===r&&(r={},i[e]=r),r[n]=t,t._cacheIndex=a.length,a.push(t)},_removeInactiveBinding:function(t){var e=this._bindings,n=t.binding,i=n.rootNode.uuid,r=n.path,a=this._bindingsByRootAndName,o=a[i],s=e[e.length-1],l=t._cacheIndex;s._cacheIndex=l,e[l]=s,e.pop(),delete o[r],0===Object.keys(o).length&&delete a[i]},_lendBinding:function(t){var e=this._bindings,n=t._cacheIndex,i=this._nActiveBindings++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r},_takeBackBinding:function(t){var e=this._bindings,n=t._cacheIndex,i=--this._nActiveBindings,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r},_lendControlInterpolant:function(){var t=this._controlInterpolants,e=this._nActiveControlInterpolants++,n=t[e];return void 0===n&&((n=new kc(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=e,t[e]=n),n},_takeBackControlInterpolant:function(t){var e=this._controlInterpolants,n=t.__cacheIndex,i=--this._nActiveControlInterpolants,r=e[i];t.__cacheIndex=i,e[i]=t,r.__cacheIndex=n,e[n]=r},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(t,e){var n=e||this._root,i=n.uuid,r="string"==typeof t?eh.findByName(n,t):t,a=null!==r?r.uuid:t,o=this._actionsByClip[a],s=null;if(void 0!==o){var l=o.actionByRoot[i];if(void 0!==l)return l;s=o.knownActions[0],null===r&&(r=s._clip)}if(null===r)return null;var c=new Wu(this,r,e);return this._bindAction(c,s),this._addInactiveAction(c,a,i),c},existingAction:function(t,e){var n=e||this._root,i=n.uuid,r="string"==typeof t?eh.findByName(n,t):t,a=r?r.uuid:t,o=this._actionsByClip[a];return void 0!==o&&o.actionByRoot[i]||null},stopAllAction:function(){var t=this._actions,e=this._nActiveActions,n=this._bindings,i=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var r=0;r!==e;++r)t[r].reset();for(r=0;r!==i;++r)n[r].useCount=0;return this},update:function(t){t*=this.timeScale;for(var e=this._actions,n=this._nActiveActions,i=this.time+=t,r=Math.sign(t),a=this._accuIndex^=1,o=0;o!==n;++o){e[o]._update(i,t,r,a)}var s=this._bindings,l=this._nActiveBindings;for(o=0;o!==l;++o)s[o].apply(a);return this},setTime:function(t){this.time=0;for(var e=0;e<this._actions.length;e++)this._actions[e].time=0;return this.update(t)},getRoot:function(){return this._root},uncacheClip:function(t){var e=this._actions,n=t.uuid,i=this._actionsByClip,r=i[n];if(void 0!==r){for(var a=r.knownActions,o=0,s=a.length;o!==s;++o){var l=a[o];this._deactivateAction(l);var c=l._cacheIndex,h=e[e.length-1];l._cacheIndex=null,l._byClipCacheIndex=null,h._cacheIndex=c,e[c]=h,e.pop(),this._removeInactiveBindingsForAction(l)}delete i[n]}},uncacheRoot:function(t){var e=t.uuid,n=this._actionsByClip;for(var i in n){var r=n[i].actionByRoot[e];void 0!==r&&(this._deactivateAction(r),this._removeInactiveAction(r))}var a=this._bindingsByRootAndName[e];if(void 0!==a)for(var o in a){var s=a[o];s.restoreOriginalState(),this._removeInactiveBinding(s)}},uncacheAction:function(t,e){var n=this.existingAction(t,e);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}),Yu.prototype.clone=function(){return new Yu(void 0===this.value.clone?this.value:this.value.clone())},Zu.prototype=Object.assign(Object.create(Ms.prototype),{constructor:Zu,isInstancedInterleavedBuffer:!0,copy:function(t){return Ms.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this}}),Object.assign(Ju.prototype,{linePrecision:1,set:function(t,e){this.ray.set(t,e)},setFromCamera:function(t,e){e&&e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e&&e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(t,e,n){var i=n||[];return Ku(t,this,i,e),i.sort(Qu),i},intersectObjects:function(t,e,n){var i=n||[];if(!1===Array.isArray(t))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),i;for(var r=0,a=t.length;r<a;r++)Ku(t[r],this,i,e);return i.sort(Qu),i}}),Object.assign($u.prototype,{set:function(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this},makeSafe:function(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this},setFromVector3:function(t){return this.setFromCartesianCoords(t.x,t.y,t.z)},setFromCartesianCoords:function(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(gn.clamp(e/this.radius,-1,1))),this}}),Object.assign(tq.prototype,{set:function(t,e,n){return this.radius=t,this.theta=e,this.y=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this},setFromVector3:function(t){return this.setFromCartesianCoords(t.x,t.y,t.z)},setFromCartesianCoords:function(t,e,n){return this.radius=Math.sqrt(t*t+n*n),this.theta=Math.atan2(t,n),this.y=e,this}});var eq=new yn;function nq(t,e){this.min=void 0!==t?t:new yn(1/0,1/0),this.max=void 0!==e?e:new yn(-1/0,-1/0)}Object.assign(nq.prototype,{set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(t,e){var n=eq.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(t){return void 0===t&&(console.warn("THREE.Box2: .getCenter() target is now required"),t=new yn),this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn("THREE.Box2: .getSize() target is now required"),t=new yn),this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y},getParameter:function(t,e){return void 0===e&&(console.warn("THREE.Box2: .getParameter() target is now required"),e=new yn),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)},clampPoint:function(t,e){return void 0===e&&(console.warn("THREE.Box2: .clampPoint() target is now required"),e=new yn),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(t){return eq.copy(t).clamp(this.min,this.max).sub(t).length()},intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}});var iq=new Mn,rq=new Mn;function aq(t,e){this.start=void 0!==t?t:new Mn,this.end=void 0!==e?e:new Mn}function oq(t){ai.call(this),this.material=t,this.render=function(){}}Object.assign(aq.prototype,{set:function(t,e){return this.start.copy(t),this.end.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.start.copy(t.start),this.end.copy(t.end),this},getCenter:function(t){return void 0===t&&(console.warn("THREE.Line3: .getCenter() target is now required"),t=new Mn),t.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(t){return void 0===t&&(console.warn("THREE.Line3: .delta() target is now required"),t=new Mn),t.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(t,e){return void 0===e&&(console.warn("THREE.Line3: .at() target is now required"),e=new Mn),this.delta(e).multiplyScalar(t).add(this.start)},closestPointToPointParameter:function(t,e){iq.subVectors(t,this.start),rq.subVectors(this.end,this.start);var n=rq.dot(rq),i=rq.dot(iq)/n;return e&&(i=gn.clamp(i,0,1)),i},closestPointToPoint:function(t,e,n){var i=this.closestPointToPointParameter(t,e);return void 0===n&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),n=new Mn),this.delta(n).multiplyScalar(i).add(this.start)},applyMatrix4:function(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this},equals:function(t){return t.start.equals(this.start)&&t.end.equals(this.end)}}),oq.prototype=Object.create(ai.prototype),oq.prototype.constructor=oq,oq.prototype.isImmediateRenderObject=!0;var sq=new Mn,lq=new Mn,cq=new En,hq=["a","b","c"];function uq(t,e,n,i){this.object=t,this.size=void 0!==e?e:1;var r=void 0!==n?n:16711680,a=void 0!==i?i:1,o=0,s=this.object.geometry;s&&s.isGeometry?o=3*s.faces.length:s&&s.isBufferGeometry&&(o=s.attributes.normal.count);var l=new br,c=new ur(2*o*3,3);l.setAttribute("position",c),al.call(this,l,new Js({color:r,linewidth:a})),this.matrixAutoUpdate=!1,this.update()}uq.prototype=Object.create(al.prototype),uq.prototype.constructor=uq,uq.prototype.update=function(){this.object.updateMatrixWorld(!0),cq.getNormalMatrix(this.object.matrixWorld);var t=this.object.matrixWorld,e=this.geometry.attributes.position,n=this.object.geometry;if(n&&n.isGeometry)for(var i=n.vertices,r=n.faces,a=0,o=0,s=r.length;o<s;o++)for(var l=r[o],c=0,h=l.vertexNormals.length;c<h;c++){var u=i[l[hq[c]]],q=l.vertexNormals[c];sq.copy(u).applyMatrix4(t),lq.copy(q).applyMatrix3(cq).normalize().multiplyScalar(this.size).add(sq),e.setXYZ(a,sq.x,sq.y,sq.z),a+=1,e.setXYZ(a,lq.x,lq.y,lq.z),a+=1}else if(n&&n.isBufferGeometry){var m=n.attributes.position,d=n.attributes.normal;for(a=0,c=0,h=m.count;c<h;c++)sq.set(m.getX(c),m.getY(c),m.getZ(c)).applyMatrix4(t),lq.set(d.getX(c),d.getY(c),d.getZ(c)),lq.applyMatrix3(cq).normalize().multiplyScalar(this.size).add(sq),e.setXYZ(a,sq.x,sq.y,sq.z),a+=1,e.setXYZ(a,lq.x,lq.y,lq.z),a+=1}e.needsUpdate=!0};var qq=new Mn;function mq(t,e){ai.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;for(var n=new br,i=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],r=0,a=1;r<32;r++,a++){var o=r/32*Math.PI*2,s=a/32*Math.PI*2;i.push(Math.cos(o),Math.sin(o),1,Math.cos(s),Math.sin(s),1)}n.setAttribute("position",new ur(i,3));var l=new Js({fog:!1});this.cone=new al(n,l),this.add(this.cone),this.update()}mq.prototype=Object.create(ai.prototype),mq.prototype.constructor=mq,mq.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},mq.prototype.update=function(){this.light.updateMatrixWorld();var t=this.light.distance?this.light.distance:1e3,e=t*Math.tan(this.light.angle);this.cone.scale.set(e,e,t),qq.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(qq),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)};var dq=new Mn,pq=new Hn,fq=new Hn;function vq(t){for(var e=function t(e){var n=[];e&&e.isBone&&n.push(e);for(var i=0;i<e.children.length;i++)n.push.apply(n,t(e.children[i]));return n}(t),n=new br,i=[],r=[],a=new Zi(0,0,1),o=new Zi(0,1,0),s=0;s<e.length;s++){var l=e[s];l.parent&&l.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),r.push(a.r,a.g,a.b),r.push(o.r,o.g,o.b))}n.setAttribute("position",new ur(i,3)),n.setAttribute("color",new ur(r,3));var c=new Js({vertexColors:w,depthTest:!1,depthWrite:!1,transparent:!0});al.call(this,n,c),this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}function xq(t,e,n){this.light=t,this.light.updateMatrixWorld(),this.color=n;var i=new pc(e,4,2),r=new nr({wireframe:!0,fog:!1});Fr.call(this,i,r),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}function gq(t,e){this.type="RectAreaLightHelper",this.light=t,this.color=e;var n=new br;n.setAttribute("position",new ur([1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],3)),n.computeBoundingSphere();var i=new Js({fog:!1});nl.call(this,n,i);var r=new br;r.setAttribute("position",new ur([1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],3)),r.computeBoundingSphere(),this.add(new Fr(r,new nr({side:v,fog:!1}))),this.update()}vq.prototype=Object.create(al.prototype),vq.prototype.constructor=vq,vq.prototype.updateMatrixWorld=function(t){var e=this.bones,n=this.geometry,i=n.getAttribute("position");fq.getInverse(this.root.matrixWorld);for(var r=0,a=0;r<e.length;r++){var o=e[r];o.parent&&o.parent.isBone&&(pq.multiplyMatrices(fq,o.matrixWorld),dq.setFromMatrixPosition(pq),i.setXYZ(a,dq.x,dq.y,dq.z),pq.multiplyMatrices(fq,o.parent.matrixWorld),dq.setFromMatrixPosition(pq),i.setXYZ(a+1,dq.x,dq.y,dq.z),a+=2)}n.getAttribute("position").needsUpdate=!0,ai.prototype.updateMatrixWorld.call(this,t)},xq.prototype=Object.create(Fr.prototype),xq.prototype.constructor=xq,xq.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},xq.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)},gq.prototype=Object.create(nl.prototype),gq.prototype.constructor=gq,gq.prototype.update=function(){if(this.scale.set(.5*this.light.width,.5*this.light.height,1),void 0!==this.color)this.material.color.set(this.color),this.children[0].material.color.set(this.color);else{this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);var t=this.material.color,e=Math.max(t.r,t.g,t.b);e>1&&t.multiplyScalar(1/e),this.children[0].material.color.copy(this.material.color)}},gq.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()};var yq=new Mn,_q=new Zi,bq=new Zi;function wq(t,e,n){ai.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n;var i=new Tl(e);i.rotateY(.5*Math.PI),this.material=new nr({wireframe:!0,fog:!1}),void 0===this.color&&(this.material.vertexColors=w);var r=i.getAttribute("position"),a=new Float32Array(3*r.count);i.setAttribute("color",new ir(a,3)),this.add(new Fr(i,this.material)),this.update()}function Mq(t,e){this.lightProbe=t,this.size=e;var n={GAMMA_OUTPUT:""},i=new ea({defines:n,uniforms:{sh:{value:this.lightProbe.sh.coefficients},intensity:{value:this.lightProbe.intensity}},vertexShader:["varying vec3 vNormal;","void main() {","\tvNormal = normalize( normalMatrix * normal );","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["#define RECIPROCAL_PI 0.318309886","vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {","\t// matrix is assumed to be orthogonal","\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );","}","vec3 linearToOutput( in vec3 a ) {","\t#ifdef GAMMA_OUTPUT","\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );","\t#else","\t\treturn a;","\t#endif","}","// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf","vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {","\t// normal is assumed to have unit length","\tfloat x = normal.x, y = normal.y, z = normal.z;","\t// band 0","\tvec3 result = shCoefficients[ 0 ] * 0.886227;","\t// band 1","\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;","\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;","\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;","\t// band 2","\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;","\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;","\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );","\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;","\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );","\treturn result;","}","uniform vec3 sh[ 9 ]; // sh coefficients","uniform float intensity; // light probe intensity","varying vec3 vNormal;","void main() {","\tvec3 normal = normalize( vNormal );","\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );","\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );","\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;","\toutgoingLight = linearToOutput( outgoingLight );","\tgl_FragColor = vec4( outgoingLight, 1.0 );","}"].join("\n")}),r=new pc(1,32,16);Fr.call(this,r,i),this.onBeforeRender()}function Sq(t,e,n,i){t=t||10,e=e||10,n=new Zi(void 0!==n?n:4473924),i=new Zi(void 0!==i?i:8947848);for(var r=e/2,a=t/e,o=t/2,s=[],l=[],c=0,h=0,u=-o;c<=e;c++,u+=a){s.push(-o,0,u,o,0,u),s.push(u,0,-o,u,0,o);var q=c===r?n:i;q.toArray(l,h),h+=3,q.toArray(l,h),h+=3,q.toArray(l,h),h+=3,q.toArray(l,h),h+=3}var m=new br;m.setAttribute("position",new ur(s,3)),m.setAttribute("color",new ur(l,3));var d=new Js({vertexColors:w});al.call(this,m,d)}function Tq(t,e,n,i,r,a){t=t||10,e=e||16,n=n||8,i=i||64,r=new Zi(void 0!==r?r:4473924),a=new Zi(void 0!==a?a:8947848);var o,s,l,c,h,u,q,m=[],d=[];for(c=0;c<=e;c++)l=c/e*(2*Math.PI),o=Math.sin(l)*t,s=Math.cos(l)*t,m.push(0,0,0),m.push(o,0,s),q=1&c?r:a,d.push(q.r,q.g,q.b),d.push(q.r,q.g,q.b);for(c=0;c<=n;c++)for(q=1&c?r:a,u=t-t/n*c,h=0;h<i;h++)l=h/i*(2*Math.PI),o=Math.sin(l)*u,s=Math.cos(l)*u,m.push(o,0,s),d.push(q.r,q.g,q.b),l=(h+1)/i*(2*Math.PI),o=Math.sin(l)*u,s=Math.cos(l)*u,m.push(o,0,s),d.push(q.r,q.g,q.b);var p=new br;p.setAttribute("position",new ur(m,3)),p.setAttribute("color",new ur(d,3));var f=new Js({vertexColors:w});al.call(this,p,f)}function Eq(t,e,n,i){this.audio=t,this.range=e||1,this.divisionsInnerAngle=n||16,this.divisionsOuterAngle=i||2;var r=new br,a=this.divisionsInnerAngle+2*this.divisionsOuterAngle,o=new Float32Array(3*(3*a+3));r.setAttribute("position",new ir(o,3));var s=new Js({color:65280}),l=new Js({color:16776960});nl.call(this,r,[l,s]),this.update()}wq.prototype=Object.create(ai.prototype),wq.prototype.constructor=wq,wq.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},wq.prototype.update=function(){var t=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var e=t.geometry.getAttribute("color");_q.copy(this.light.color),bq.copy(this.light.groundColor);for(var n=0,i=e.count;n<i;n++){var r=n<i/2?_q:bq;e.setXYZ(n,r.r,r.g,r.b)}e.needsUpdate=!0}t.lookAt(yq.setFromMatrixPosition(this.light.matrixWorld).negate())},Mq.prototype=Object.create(Fr.prototype),Mq.prototype.constructor=Mq,Mq.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},Mq.prototype.onBeforeRender=function(){this.position.copy(this.lightProbe.position),this.scale.set(1,1,1).multiplyScalar(this.size),this.material.uniforms.intensity.value=this.lightProbe.intensity},Sq.prototype=Object.assign(Object.create(al.prototype),{constructor:Sq,copy:function(t){return al.prototype.copy.call(this,t),this.geometry.copy(t.geometry),this.material.copy(t.material),this},clone:function(){return(new this.constructor).copy(this)}}),Tq.prototype=Object.create(al.prototype),Tq.prototype.constructor=Tq,Eq.prototype=Object.create(nl.prototype),Eq.prototype.constructor=Eq,Eq.prototype.update=function(){var t,e,n=this.audio,i=this.range,r=this.divisionsInnerAngle,a=this.divisionsOuterAngle,o=gn.degToRad(n.panner.coneInnerAngle),s=gn.degToRad(n.panner.coneOuterAngle),l=o/2,c=s/2,h=0,u=0,q=this.geometry,m=q.attributes.position;function d(n,r,a,o){var s=(r-n)/a;for(m.setXYZ(h,0,0,0),u++,t=n;t<r;t+=s)e=h+u,m.setXYZ(e,Math.sin(t)*i,0,Math.cos(t)*i),m.setXYZ(e+1,Math.sin(Math.min(t+s,r))*i,0,Math.cos(Math.min(t+s,r))*i),m.setXYZ(e+2,0,0,0),u+=3;q.addGroup(h,u,o),h+=u,u=0}q.clearGroups(),d(-c,-l,a,0),d(-l,l,r,1),d(l,c,a,0),m.needsUpdate=!0,o===s&&(this.material[0].visible=!1)},Eq.prototype.dispose=function(){this.geometry.dispose(),this.material[0].dispose(),this.material[1].dispose()};var Aq=new Mn,zq=new Mn,Lq=new En;function Pq(t,e,n,i){this.object=t,this.size=void 0!==e?e:1;var r=void 0!==n?n:16776960,a=void 0!==i?i:1,o=0,s=this.object.geometry;s&&s.isGeometry?o=s.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");var l=new br,c=new ur(2*o*3,3);l.setAttribute("position",c),al.call(this,l,new Js({color:r,linewidth:a})),this.matrixAutoUpdate=!1,this.update()}Pq.prototype=Object.create(al.prototype),Pq.prototype.constructor=Pq,Pq.prototype.update=function(){this.object.updateMatrixWorld(!0),Lq.getNormalMatrix(this.object.matrixWorld);for(var t=this.object.matrixWorld,e=this.geometry.attributes.position,n=this.object.geometry,i=n.vertices,r=n.faces,a=0,o=0,s=r.length;o<s;o++){var l=r[o],c=l.normal;Aq.copy(i[l.a]).add(i[l.b]).add(i[l.c]).divideScalar(3).applyMatrix4(t),zq.copy(c).applyMatrix3(Lq).normalize().multiplyScalar(this.size).add(Aq),e.setXYZ(a,Aq.x,Aq.y,Aq.z),a+=1,e.setXYZ(a,zq.x,zq.y,zq.z),a+=1}e.needsUpdate=!0};var Rq=new Mn,Cq=new Mn,Oq=new Mn;function Iq(t,e,n){ai.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,void 0===e&&(e=1);var i=new br;i.setAttribute("position",new ur([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));var r=new Js({fog:!1});this.lightPlane=new nl(i,r),this.add(this.lightPlane),(i=new br).setAttribute("position",new ur([0,0,0,0,0,1],3)),this.targetLine=new nl(i,r),this.add(this.targetLine),this.update()}Iq.prototype=Object.create(ai.prototype),Iq.prototype.constructor=Iq,Iq.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},Iq.prototype.update=function(){Rq.setFromMatrixPosition(this.light.matrixWorld),Cq.setFromMatrixPosition(this.light.target.matrixWorld),Oq.subVectors(Cq,Rq),this.lightPlane.lookAt(Cq),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(Cq),this.targetLine.scale.z=Oq.length()};var Dq=new Mn,Nq=new na;function Bq(t){var e=new br,n=new Js({color:16777215,vertexColors:b}),i=[],r=[],a={},o=new Zi(16755200),s=new Zi(16711680),l=new Zi(43775),c=new Zi(16777215),h=new Zi(3355443);function u(t,e,n){q(t,n),q(e,n)}function q(t,e){i.push(0,0,0),r.push(e.r,e.g,e.b),void 0===a[t]&&(a[t]=[]),a[t].push(i.length/3-1)}u("n1","n2",o),u("n2","n4",o),u("n4","n3",o),u("n3","n1",o),u("f1","f2",o),u("f2","f4",o),u("f4","f3",o),u("f3","f1",o),u("n1","f1",o),u("n2","f2",o),u("n3","f3",o),u("n4","f4",o),u("p","n1",s),u("p","n2",s),u("p","n3",s),u("p","n4",s),u("u1","u2",l),u("u2","u3",l),u("u3","u1",l),u("c","t",c),u("p","c",h),u("cn1","cn2",h),u("cn3","cn4",h),u("cf1","cf2",h),u("cf3","cf4",h),e.setAttribute("position",new ur(i,3)),e.setAttribute("color",new ur(r,3)),al.call(this,e,n),this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update()}function Uq(t,e,n,i,r,a,o){Dq.set(r,a,o).unproject(i);var s=e[t];if(void 0!==s)for(var l=n.getAttribute("position"),c=0,h=s.length;c<h;c++)l.setXYZ(s[c],Dq.x,Dq.y,Dq.z)}Bq.prototype=Object.create(al.prototype),Bq.prototype.constructor=Bq,Bq.prototype.update=function(){var t=this.geometry,e=this.pointMap;Nq.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),Uq("c",e,t,Nq,0,0,-1),Uq("t",e,t,Nq,0,0,1),Uq("n1",e,t,Nq,-1,-1,-1),Uq("n2",e,t,Nq,1,-1,-1),Uq("n3",e,t,Nq,-1,1,-1),Uq("n4",e,t,Nq,1,1,-1),Uq("f1",e,t,Nq,-1,-1,1),Uq("f2",e,t,Nq,1,-1,1),Uq("f3",e,t,Nq,-1,1,1),Uq("f4",e,t,Nq,1,1,1),Uq("u1",e,t,Nq,.7,1.1,-1),Uq("u2",e,t,Nq,-.7,1.1,-1),Uq("u3",e,t,Nq,0,2,-1),Uq("cf1",e,t,Nq,-1,0,1),Uq("cf2",e,t,Nq,1,0,1),Uq("cf3",e,t,Nq,0,-1,1),Uq("cf4",e,t,Nq,0,1,1),Uq("cn1",e,t,Nq,-1,0,-1),Uq("cn2",e,t,Nq,1,0,-1),Uq("cn3",e,t,Nq,0,-1,-1),Uq("cn4",e,t,Nq,0,1,-1),t.getAttribute("position").needsUpdate=!0};var Fq=new gi;function Hq(t,e){this.object=t,void 0===e&&(e=16776960);var n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Float32Array(24),r=new br;r.setIndex(new ir(n,1)),r.setAttribute("position",new ir(i,3)),al.call(this,r,new Js({color:e})),this.matrixAutoUpdate=!1,this.update()}function Gq(t,e){this.type="Box3Helper",this.box=t,e=e||16776960;var n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new br;i.setIndex(new ir(n,1)),i.setAttribute("position",new ur([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),al.call(this,i,new Js({color:e})),this.geometry.computeBoundingSphere()}function Vq(t,e,n){this.type="PlaneHelper",this.plane=t,this.size=void 0===e?1:e;var i=void 0!==n?n:16776960,r=new br;r.setAttribute("position",new ur([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),r.computeBoundingSphere(),nl.call(this,r,new Js({color:i}));var a=new br;a.setAttribute("position",new ur([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),a.computeBoundingSphere(),this.add(new Fr(a,new nr({color:i,opacity:.2,transparent:!0,depthWrite:!1})))}Hq.prototype=Object.create(al.prototype),Hq.prototype.constructor=Hq,Hq.prototype.update=function(t){if(void 0!==t&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&Fq.setFromObject(this.object),!Fq.isEmpty()){var e=Fq.min,n=Fq.max,i=this.geometry.attributes.position,r=i.array;r[0]=n.x,r[1]=n.y,r[2]=n.z,r[3]=e.x,r[4]=n.y,r[5]=n.z,r[6]=e.x,r[7]=e.y,r[8]=n.z,r[9]=n.x,r[10]=e.y,r[11]=n.z,r[12]=n.x,r[13]=n.y,r[14]=e.z,r[15]=e.x,r[16]=n.y,r[17]=e.z,r[18]=e.x,r[19]=e.y,r[20]=e.z,r[21]=n.x,r[22]=e.y,r[23]=e.z,i.needsUpdate=!0,this.geometry.computeBoundingSphere()}},Hq.prototype.setFromObject=function(t){return this.object=t,this.update(),this},Hq.prototype.copy=function(t){return al.prototype.copy.call(this,t),this.object=t.object,this},Hq.prototype.clone=function(){return(new this.constructor).copy(this)},Gq.prototype=Object.create(al.prototype),Gq.prototype.constructor=Gq,Gq.prototype.updateMatrixWorld=function(t){var e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),ai.prototype.updateMatrixWorld.call(this,t))},Vq.prototype=Object.create(nl.prototype),Vq.prototype.constructor=Vq,Vq.prototype.updateMatrixWorld=function(t){var e=-this.plane.constant;Math.abs(e)<1e-8&&(e=1e-8),this.scale.set(.5*this.size,.5*this.size,e),this.children[0].material.side=e<0?v:f,this.lookAt(this.plane.normal),ai.prototype.updateMatrixWorld.call(this,t)};var jq,kq,Wq=new Mn;function Xq(t,e,n,i,r,a){ai.call(this),void 0===t&&(t=new Mn(0,0,1)),void 0===e&&(e=new Mn(0,0,0)),void 0===n&&(n=1),void 0===i&&(i=16776960),void 0===r&&(r=.2*n),void 0===a&&(a=.2*r),void 0===jq&&((jq=new br).setAttribute("position",new ur([0,0,0,0,1,0],3)),(kq=new Sc(0,.5,1,5,1)).translate(0,-.5,0)),this.position.copy(e),this.line=new nl(jq,new Js({color:i})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Fr(kq,new nr({color:i})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(n,r,a)}function Yq(t){var e=[0,0,0,t=t||1,0,0,0,0,0,0,t,0,0,0,0,0,0,t],n=new br;n.setAttribute("position",new ur(e,3)),n.setAttribute("color",new ur([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));var i=new Js({vertexColors:w});al.call(this,n,i)}function Zq(t,e,n,i,r,a,o){return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),new $i(t,e,n,r,a,o)}Xq.prototype=Object.create(ai.prototype),Xq.prototype.constructor=Xq,Xq.prototype.setDirection=function(t){if(t.y>.99999)this.quaternion.set(0,0,0,1);else if(t.y<-.99999)this.quaternion.set(1,0,0,0);else{Wq.set(t.z,0,-t.x).normalize();var e=Math.acos(t.y);this.quaternion.setFromAxisAngle(Wq,e)}},Xq.prototype.setLength=function(t,e,n){void 0===e&&(e=.2*t),void 0===n&&(n=.2*e),this.line.scale.set(1,Math.max(1e-4,t-e),1),this.line.updateMatrix(),this.cone.scale.set(n,e,n),this.cone.position.y=t,this.cone.updateMatrix()},Xq.prototype.setColor=function(t){this.line.material.color.set(t),this.cone.material.color.set(t)},Xq.prototype.copy=function(t){return ai.prototype.copy.call(this,t,!1),this.line.copy(t.line),this.cone.copy(t.cone),this},Xq.prototype.clone=function(){return(new this.constructor).copy(this)},Yq.prototype=Object.create(al.prototype),Yq.prototype.constructor=Yq;var Jq=0,Qq=1;function Kq(t){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),t}function $q(t){return void 0===t&&(t=[]),console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),t.isMultiMaterial=!0,t.materials=t,t.clone=function(){return t.slice()},t}function tm(t,e){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new ql(t,e)}function em(t){return console.warn("THREE.Particle has been renamed to THREE.Sprite."),new Us(t)}function nm(t,e){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new ql(t,e)}function im(t){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new sl(t)}function rm(t){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new sl(t)}function am(t){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new sl(t)}function om(t,e,n){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new Mn(t,e,n)}function sm(t,e){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."),new ir(t,e).setDynamic(!0)}function lm(t,e){return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),new rr(t,e)}function cm(t,e){return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),new ar(t,e)}function hm(t,e){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),new or(t,e)}function um(t,e){return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),new sr(t,e)}function qm(t,e){return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),new lr(t,e)}function mm(t,e){return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),new cr(t,e)}function dm(t,e){return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),new hr(t,e)}function pm(t,e){return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),new ur(t,e)}function fm(t,e){return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),new qr(t,e)}function vm(t){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),wh.call(this,t),this.type="catmullrom",this.closed=!0}function xm(t){console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),wh.call(this,t),this.type="catmullrom"}function gm(t){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),wh.call(this,t),this.type="catmullrom"}function ym(t){return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),new Yq(t)}function _m(t,e){return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),new Hq(t,e)}function bm(t,e){return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),new al(new wc(t.geometry),new Js({color:void 0!==e?e:16777215}))}function wm(t,e){return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),new al(new xl(t.geometry),new Js({color:void 0!==e?e:16777215}))}function Mm(t){return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),new lh(t)}function Sm(t){return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),new uh(t)}ph.create=function(t,e){return console.log("THREE.Curve.create() has been deprecated"),t.prototype=Object.create(ph.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},Object.assign(Ih.prototype,{createPointsGeometry:function(t){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var e=this.getPoints(t);return this.createGeometry(e)},createSpacedPointsGeometry:function(t){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var e=this.getSpacedPoints(t);return this.createGeometry(e)},createGeometry:function(t){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var e=new Xr,n=0,i=t.length;n<i;n++){var r=t[n];e.vertices.push(new Mn(r.x,r.y,r.z||0))}return e}}),Object.assign(Dh.prototype,{fromPoints:function(t){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(t)}}),vm.prototype=Object.create(wh.prototype),xm.prototype=Object.create(wh.prototype),gm.prototype=Object.create(wh.prototype),Object.assign(gm.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}}),Sq.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},vq.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Object.assign(oh.prototype,{extractUrlBase:function(t){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),Qh.extractUrlBase(t)}}),oh.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},Object.assign(nu.prototype,{setTexturePath:function(t){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(t)}}),Object.assign(nq.prototype,{center:function(t){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(t)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(t){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},size:function(t){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(t)}}),Object.assign(gi.prototype,{center:function(t){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(t)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(t){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},isIntersectionSphere:function(t){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},size:function(t){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(t)}}),aq.prototype.center=function(t){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(t)},Object.assign(gn,{random16:function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},nearestPowerOfTwo:function(t){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),gn.floorPowerOfTwo(t)},nextPowerOfTwo:function(t){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),gn.ceilPowerOfTwo(t)}}),Object.assign(En.prototype,{flattenToArrayOffset:function(t,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},multiplyVector3:function(t){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBuffer:function(t){return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(t)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}}),Object.assign(Hn.prototype,{extractPosition:function(t){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(t)},flattenToArrayOffset:function(t,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},getPosition:function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new Mn).setFromMatrixColumn(this,3)},setRotationFromQuaternion:function(t){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(t)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(t){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},multiplyVector4:function(t){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(t){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),t.transformDirection(this)},crossVector:function(t){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBuffer:function(t){return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(t)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(t,e,n,i,r,a){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(t,e,i,n,r,a)}}),Oi.prototype.isIntersectionLine=function(t){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(t)},_n.prototype.multiplyVector3=function(t){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),t.applyQuaternion(this)},Object.assign(Li.prototype,{isIntersectionBox:function(t){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},isIntersectionPlane:function(t){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(t)},isIntersectionSphere:function(t){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)}}),Object.assign(ki.prototype,{area:function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},barycoordFromPoint:function(t,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(t,e)},midpoint:function(t){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(t)},normal:function(t){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(t)},plane:function(t){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(t)}}),Object.assign(ki,{barycoordFromPoint:function(t,e,n,i,r){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),ki.getBarycoord(t,e,n,i,r)},normal:function(t,e,n,i){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),ki.getNormal(t,e,n,i)}}),Object.assign(Nh.prototype,{extractAllPoints:function(t){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(t)},extrude:function(t){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new lc(this,t)},makeGeometry:function(t){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new yc(this,t)}}),Object.assign(yn.prototype,{fromAttribute:function(t,e,n){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},distanceToManhattan:function(t){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},lengthManhattan:function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Mn.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(t){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(t)},getScaleFromMatrix:function(t){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(t)},getColumnFromMatrix:function(t,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,t)},applyProjection:function(t){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(t)},fromAttribute:function(t,e,n){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},distanceToManhattan:function(t){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},lengthManhattan:function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Pn.prototype,{fromAttribute:function(t,e,n){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},lengthManhattan:function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Xr.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")}}),Object.assign(ai.prototype,{getChildByName:function(t){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(t)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(t,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,t)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")}}),Object.defineProperties(ai.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(t){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=t}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.defineProperties(Vs.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),Object.defineProperty(Xs.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}}),js.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},Object.defineProperty(ph.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(t){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=t}}),ia.prototype.setLens=function(t,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(Bh.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(t){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(t){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(t){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=t}}}),Object.defineProperties(ir.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===ln},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(ln)}}}),Object.assign(ir.prototype,{setDynamic:function(t){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?ln:sn),this},copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},setArray:function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}}),Object.assign(br.prototype,{addIndex:function(t){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(t)},addAttribute:function(t,e){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?"index"===t?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):this.setAttribute(t,e):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(t,new ir(arguments[1],arguments[2])))},addDrawCall:function(t,e,n){void 0!==n&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(t,e)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},removeAttribute:function(t){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(t)}}),Object.defineProperties(br.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.defineProperties(Ms.prototype,{dynamic:{get:function(){return console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."),this.usage===ln},set:function(t){console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."),this.setUsage(t)}}}),Object.assign(Ms.prototype,{setDynamic:function(t){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?ln:sn),this},setArray:function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}}),Object.assign(cc.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}}),Object.defineProperties(Yu.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}}),Object.defineProperties(er.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new Zi}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=t===g}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(t){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=t}}}),Object.defineProperties(Ic.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(ea.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(t){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=t}}}),Object.assign(_s.prototype,{clearTarget:function(t,e,n,i){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(t),this.clear(e,n,i)},animate:function(t){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(t)},getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},resetGLState:function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(t){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(t)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},allocTextureUnit:function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},setTexture:function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},setTexture2D:function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},setTextureCube:function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},getActiveMipMapLevel:function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()}}),Object.defineProperties(_s.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}}}),Object.defineProperties(ss.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(sa.prototype,{activeCubeFace:{set:function(){console.warn("THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().")}},activeMipMapLevel:{set:function(){console.warn("THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().")}}}),Object.defineProperties(Rn.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(t){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=t}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(t){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=t}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(t){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=t}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(t){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=t}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(t){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(t){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=t}}}),Object.defineProperties(gs.prototype,{standing:{set:function(){console.warn("THREE.WebVRManager: .standing has been removed.")}},userHeight:{set:function(){console.warn("THREE.WebVRManager: .userHeight has been removed.")}}}),Object.defineProperties(Eu.prototype,{load:{value:function(t){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var e=this;return(new mu).load(t,(function(t){e.setBuffer(t)})),this}},startTime:{set:function(){console.warn("THREE.Audio: .startTime is now .play( delay ).")}}}),Cu.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},oa.prototype.updateCubeMap=function(t,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(t,e)};var Tm={merge:function(t,e,n){var i;console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead."),e.isMesh&&(e.matrixAutoUpdate&&e.updateMatrix(),i=e.matrix,e=e.geometry),t.merge(e,i,n)},center:function(t){return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),t.center()}};function Em(){console.error("THREE.CanvasRenderer has been removed")}function Am(){console.error("THREE.JSONLoader has been removed.")}An.crossOrigin=void 0,An.loadTexture=function(t,e,n,i){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var r=new dh;r.setCrossOrigin(this.crossOrigin);var a=r.load(t,n,void 0,i);return e&&(a.mapping=e),a},An.loadTextureCube=function(t,e,n,i){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var r=new mh;r.setCrossOrigin(this.crossOrigin);var a=r.load(t,n,void 0,i);return e&&(a.mapping=e),a},An.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},An.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};var zm={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")}};function Lm(){console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js")}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:i}}))},function(t,e,n){"use strict";n.r(e),function(t){var n=function(){this._tweens={},this._tweensAddedDuringUpdate={}};n.prototype={getAll:function(){return Object.keys(this._tweens).map(function(t){return this._tweens[t]}.bind(this))},removeAll:function(){this._tweens={}},add:function(t){this._tweens[t.getId()]=t,this._tweensAddedDuringUpdate[t.getId()]=t},remove:function(t){delete this._tweens[t.getId()],delete this._tweensAddedDuringUpdate[t.getId()]},update:function(t,e){var n=Object.keys(this._tweens);if(0===n.length)return!1;for(t=void 0!==t?t:r.now();n.length>0;){this._tweensAddedDuringUpdate={};for(var i=0;i<n.length;i++){var a=this._tweens[n[i]];a&&!1===a.update(t)&&(a._isPlaying=!1,e||delete this._tweens[n[i]])}n=Object.keys(this._tweensAddedDuringUpdate)}return!0}};var i,r=new n;r.Group=n,r._nextId=0,r.nextId=function(){return r._nextId++},"undefined"==typeof self&&void 0!==t&&t.hrtime?r.now=function(){var e=t.hrtime();return 1e3*e[0]+e[1]/1e6}:"undefined"!=typeof self&&void 0!==self.performance&&void 0!==self.performance.now?r.now=self.performance.now.bind(self.performance):void 0!==Date.now?r.now=Date.now:r.now=function(){return(new Date).getTime()},r.Tween=function(t,e){this._isPaused=!1,this._pauseStart=null,this._object=t,this._valuesStart={},this._valuesEnd={},this._valuesStartRepeat={},this._duration=1e3,this._repeat=0,this._repeatDelayTime=void 0,this._yoyo=!1,this._isPlaying=!1,this._reversed=!1,this._delayTime=0,this._startTime=null,this._easingFunction=r.Easing.Linear.None,this._interpolationFunction=r.Interpolation.Linear,this._chainedTweens=[],this._onStartCallback=null,this._onStartCallbackFired=!1,this._onUpdateCallback=null,this._onRepeatCallback=null,this._onCompleteCallback=null,this._onStopCallback=null,this._group=e||r,this._id=r.nextId()},r.Tween.prototype={getId:function(){return this._id},isPlaying:function(){return this._isPlaying},isPaused:function(){return this._isPaused},to:function(t,e){return this._valuesEnd=Object.create(t),void 0!==e&&(this._duration=e),this},duration:function(t){return this._duration=t,this},start:function(t){for(var e in this._group.add(this),this._isPlaying=!0,this._isPaused=!1,this._onStartCallbackFired=!1,this._startTime=void 0!==t?"string"==typeof t?r.now()+parseFloat(t):t:r.now(),this._startTime+=this._delayTime,this._valuesEnd){if(this._valuesEnd[e]instanceof Array){if(0===this._valuesEnd[e].length)continue;this._valuesEnd[e]=[this._object[e]].concat(this._valuesEnd[e])}void 0!==this._object[e]&&(void 0===this._valuesStart[e]&&(this._valuesStart[e]=this._object[e]),this._valuesStart[e]instanceof Array==!1&&(this._valuesStart[e]*=1),this._valuesStartRepeat[e]=this._valuesStart[e]||0)}return this},stop:function(){return this._isPlaying?(this._group.remove(this),this._isPlaying=!1,this._isPaused=!1,null!==this._onStopCallback&&this._onStopCallback(this._object),this.stopChainedTweens(),this):this},end:function(){return this.update(1/0),this},pause:function(t){return this._isPaused||!this._isPlaying?this:(this._isPaused=!0,this._pauseStart=void 0===t?r.now():t,this._group.remove(this),this)},resume:function(t){return this._isPaused&&this._isPlaying?(this._isPaused=!1,this._startTime+=(void 0===t?r.now():t)-this._pauseStart,this._pauseStart=0,this._group.add(this),this):this},stopChainedTweens:function(){for(var t=0,e=this._chainedTweens.length;t<e;t++)this._chainedTweens[t].stop()},group:function(t){return this._group=t,this},delay:function(t){return this._delayTime=t,this},repeat:function(t){return this._repeat=t,this},repeatDelay:function(t){return this._repeatDelayTime=t,this},yoyo:function(t){return this._yoyo=t,this},easing:function(t){return this._easingFunction=t,this},interpolation:function(t){return this._interpolationFunction=t,this},chain:function(){return this._chainedTweens=arguments,this},onStart:function(t){return this._onStartCallback=t,this},onUpdate:function(t){return this._onUpdateCallback=t,this},onRepeat:function(t){return this._onRepeatCallback=t,this},onComplete:function(t){return this._onCompleteCallback=t,this},onStop:function(t){return this._onStopCallback=t,this},update:function(t){var e,n,i;if(t<this._startTime)return!0;for(e in!1===this._onStartCallbackFired&&(null!==this._onStartCallback&&this._onStartCallback(this._object),this._onStartCallbackFired=!0),n=(t-this._startTime)/this._duration,n=0===this._duration||n>1?1:n,i=this._easingFunction(n),this._valuesEnd)if(void 0!==this._valuesStart[e]){var r=this._valuesStart[e]||0,a=this._valuesEnd[e];a instanceof Array?this._object[e]=this._interpolationFunction(a,i):("string"==typeof a&&(a="+"===a.charAt(0)||"-"===a.charAt(0)?r+parseFloat(a):parseFloat(a)),"number"==typeof a&&(this._object[e]=r+(a-r)*i))}if(null!==this._onUpdateCallback&&this._onUpdateCallback(this._object,n),1===n){if(this._repeat>0){for(e in isFinite(this._repeat)&&this._repeat--,this._valuesStartRepeat){if("string"==typeof this._valuesEnd[e]&&(this._valuesStartRepeat[e]=this._valuesStartRepeat[e]+parseFloat(this._valuesEnd[e])),this._yoyo){var o=this._valuesStartRepeat[e];this._valuesStartRepeat[e]=this._valuesEnd[e],this._valuesEnd[e]=o}this._valuesStart[e]=this._valuesStartRepeat[e]}return this._yoyo&&(this._reversed=!this._reversed),void 0!==this._repeatDelayTime?this._startTime=t+this._repeatDelayTime:this._startTime=t+this._delayTime,null!==this._onRepeatCallback&&this._onRepeatCallback(this._object),!0}null!==this._onCompleteCallback&&this._onCompleteCallback(this._object);for(var s=0,l=this._chainedTweens.length;s<l;s++)this._chainedTweens[s].start(this._startTime+this._duration);return!1}return!0}},r.Easing={Linear:{None:function(t){return t}},Quadratic:{In:function(t){return t*t},Out:function(t){return t*(2-t)},InOut:function(t){return(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)}},Cubic:{In:function(t){return t*t*t},Out:function(t){return--t*t*t+1},InOut:function(t){return(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)}},Quartic:{In:function(t){return t*t*t*t},Out:function(t){return 1- --t*t*t*t},InOut:function(t){return(t*=2)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)}},Quintic:{In:function(t){return t*t*t*t*t},Out:function(t){return--t*t*t*t*t+1},InOut:function(t){return(t*=2)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)}},Sinusoidal:{In:function(t){return 1-Math.cos(t*Math.PI/2)},Out:function(t){return Math.sin(t*Math.PI/2)},InOut:function(t){return.5*(1-Math.cos(Math.PI*t))}},Exponential:{In:function(t){return 0===t?0:Math.pow(1024,t-1)},Out:function(t){return 1===t?1:1-Math.pow(2,-10*t)},InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?.5*Math.pow(1024,t-1):.5*(2-Math.pow(2,-10*(t-1)))}},Circular:{In:function(t){return 1-Math.sqrt(1-t*t)},Out:function(t){return Math.sqrt(1- --t*t)},InOut:function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)}},Elastic:{In:function(t){return 0===t?0:1===t?1:-Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)},Out:function(t){return 0===t?0:1===t?1:Math.pow(2,-10*t)*Math.sin(5*(t-.1)*Math.PI)+1},InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?-.5*Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI):.5*Math.pow(2,-10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)+1}},Back:{In:function(t){var e=1.70158;return t*t*((e+1)*t-e)},Out:function(t){var e=1.70158;return--t*t*((e+1)*t+e)+1},InOut:function(t){var e=2.5949095;return(t*=2)<1?t*t*((e+1)*t-e)*.5:.5*((t-=2)*t*((e+1)*t+e)+2)}},Bounce:{In:function(t){return 1-r.Easing.Bounce.Out(1-t)},Out:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},InOut:function(t){return t<.5?.5*r.Easing.Bounce.In(2*t):.5*r.Easing.Bounce.Out(2*t-1)+.5}}},r.Interpolation={Linear:function(t,e){var n=t.length-1,i=n*e,a=Math.floor(i),o=r.Interpolation.Utils.Linear;return e<0?o(t[0],t[1],i):e>1?o(t[n],t[n-1],n-i):o(t[a],t[a+1>n?n:a+1],i-a)},Bezier:function(t,e){for(var n=0,i=t.length-1,a=Math.pow,o=r.Interpolation.Utils.Bernstein,s=0;s<=i;s++)n+=a(1-e,i-s)*a(e,s)*t[s]*o(i,s);return n},CatmullRom:function(t,e){var n=t.length-1,i=n*e,a=Math.floor(i),o=r.Interpolation.Utils.CatmullRom;return t[0]===t[n]?(e<0&&(a=Math.floor(i=n*(1+e))),o(t[(a-1+n)%n],t[a],t[(a+1)%n],t[(a+2)%n],i-a)):e<0?t[0]-(o(t[0],t[0],t[1],t[1],-i)-t[0]):e>1?t[n]-(o(t[n],t[n],t[n-1],t[n-1],i-n)-t[n]):o(t[a?a-1:0],t[a],t[n<a+1?n:a+1],t[n<a+2?n:a+2],i-a)},Utils:{Linear:function(t,e,n){return(e-t)*n+t},Bernstein:function(t,e){var n=r.Interpolation.Utils.Factorial;return n(t)/n(e)/n(t-e)},Factorial:(i=[1],function(t){var e=1;if(i[t])return i[t];for(var n=t;n>1;n--)e*=n;return i[t]=e,e}),CatmullRom:function(t,e,n,i,r){var a=.5*(n-t),o=.5*(i-e),s=r*r;return(2*e-2*n+a+o)*(r*s)+(-3*e+3*n-2*a-o)*s+a*r+e}}},e.default=r}.call(this,n(8))},function(t){t.exports=JSON.parse('{"glyphs":{"0":{"ha":765,"x_min":45,"x_max":753,"o":"m 753 686 q 638 177 753 368 q 318 -14 524 -14 q 114 69 184 -14 q 45 317 45 152 q 102 681 45 518 q 256 925 159 844 q 482 1007 354 1007 q 753 686 753 1007 m 464 838 q 362 767 410 838 q 283 562 315 696 q 250 313 250 428 q 269 195 250 235 q 335 155 288 155 q 437 227 390 155 q 516 431 484 299 q 547 693 547 564 q 527 803 547 768 q 464 838 506 838 z "},"1":{"ha":765,"x_min":123,"x_max":676,"o":"m 467 0 l 260 0 l 382 562 q 433 757 406 665 q 392 725 427 751 q 214 610 356 699 l 123 755 l 507 991 l 676 991 l 467 0 z "},"2":{"ha":765,"x_min":-33,"x_max":745,"o":"m 619 0 l -33 0 l -4 144 l 319 432 q 488 605 441 540 q 534 726 534 669 q 507 804 534 777 q 432 831 479 831 q 340 808 387 831 q 224 728 293 785 l 125 865 q 296 974 214 941 q 465 1006 377 1006 q 669 939 594 1006 q 745 764 745 873 q 717 627 745 691 q 634 500 689 564 q 453 334 578 436 l 271 183 l 271 176 l 656 176 l 619 0 z "},"3":{"ha":765,"x_min":9,"x_max":749,"o":"m 749 779 q 685 602 749 673 q 507 510 621 530 l 507 507 q 642 435 596 490 q 688 298 688 380 q 637 137 688 208 q 494 26 587 66 q 272 -14 400 -14 q 9 40 110 -14 l 9 221 q 133 170 66 187 q 262 153 199 153 q 427 196 370 153 q 485 315 485 239 q 310 432 485 432 l 216 432 l 248 582 l 297 582 q 475 624 410 582 q 541 741 541 666 q 511 811 541 786 q 429 836 482 836 q 235 768 338 836 l 149 907 q 306 984 233 962 q 473 1006 380 1006 q 675 944 602 1006 q 749 779 749 883 z "},"4":{"ha":765,"x_min":-17,"x_max":749,"o":"m 697 205 l 582 205 l 539 0 l 340 0 l 383 205 l -17 205 l 16 364 l 538 991 l 749 991 l 616 368 l 732 368 l 697 205 m 418 368 l 457 536 q 484 648 465 576 q 513 743 503 720 l 509 743 q 419 621 485 701 l 207 368 l 418 368 z "},"5":{"ha":765,"x_min":18,"x_max":765,"o":"m 422 625 q 618 555 547 625 q 690 361 690 486 q 642 163 690 248 q 500 32 593 78 q 277 -14 408 -14 q 129 2 197 -14 q 18 41 60 18 l 18 224 q 257 157 136 157 q 420 205 361 157 q 479 336 479 253 q 440 432 479 400 q 328 464 401 464 q 183 441 258 464 l 113 494 l 253 991 l 765 991 l 728 814 l 396 814 l 336 615 q 422 625 385 625 z "},"6":{"ha":765,"x_min":60,"x_max":782,"o":"m 60 318 q 101 586 60 455 q 215 813 142 718 q 389 958 287 909 q 631 1007 490 1007 q 782 989 715 1007 l 747 822 q 618 839 690 839 q 405 766 486 839 q 279 532 324 692 l 282 532 q 493 644 360 644 q 657 578 600 644 q 715 393 715 513 q 667 181 715 279 q 538 35 619 83 q 350 -14 457 -14 q 133 73 206 -14 q 60 318 60 159 m 359 154 q 469 218 427 154 q 511 378 511 281 q 489 455 511 426 q 419 484 466 484 q 341 459 378 484 q 282 395 304 435 q 260 286 260 354 q 287 189 260 224 q 359 154 314 154 z "},"7":{"ha":765,"x_min":53,"x_max":825,"o":"m 53 0 l 553 815 l 126 815 l 164 991 l 825 991 l 798 860 l 288 0 l 53 0 z "},"8":{"ha":765,"x_min":37,"x_max":764,"o":"m 489 1007 q 635 979 572 1007 q 731 899 698 950 q 764 781 764 847 q 709 622 764 690 q 553 519 654 555 q 700 272 700 424 q 657 124 700 189 q 534 22 614 58 q 349 -14 454 -14 q 120 54 203 -14 q 37 237 37 122 q 273 526 37 439 q 161 729 161 616 q 201 873 161 810 q 315 972 240 937 q 489 1007 389 1007 m 395 436 q 277 363 316 406 q 239 260 239 321 q 273 173 239 205 q 364 140 307 140 q 464 177 427 140 q 501 271 501 213 q 476 360 501 320 q 395 436 452 399 m 471 854 q 389 823 419 854 q 358 742 358 791 q 441 606 358 652 q 567 755 567 654 q 540 828 567 802 q 471 854 513 854 z "},"9":{"ha":765,"x_min":58,"x_max":741,"o":"m 741 679 q 673 317 741 489 q 494 66 606 146 q 221 -14 382 -14 q 58 8 134 -14 l 58 182 q 212 154 134 154 q 353 187 294 154 q 451 281 412 220 q 518 456 490 342 l 515 456 q 315 349 440 349 q 144 419 205 349 q 83 612 83 489 q 133 820 83 725 q 266 961 182 914 q 460 1007 349 1007 q 669 924 597 1007 q 741 679 741 840 m 437 839 q 359 810 393 839 q 306 733 325 782 q 288 629 288 684 q 313 540 288 570 q 385 510 338 510 q 460 535 425 510 q 516 603 495 559 q 536 710 536 646 q 512 803 536 767 q 437 839 488 839 z "}," ":{"ha":361,"x_min":0,"x_max":0,"o":""},"!":{"ha":397,"x_min":17,"x_max":439,"o":"m 265 329 l 102 329 l 208 991 l 439 991 l 265 329 m 17 78 q 53 176 17 139 q 155 212 90 212 q 229 186 201 212 q 257 114 257 161 q 220 18 257 55 q 122 -18 182 -18 q 45 7 73 -18 q 17 78 17 33 z "},"\\"":{"ha":629,"x_min":136,"x_max":647,"o":"m 372 991 l 269 633 l 136 633 l 184 991 l 372 991 m 647 991 l 545 633 l 410 633 l 460 991 l 647 991 z "},"#":{"ha":897,"x_min":28,"x_max":904,"o":"m 703 574 l 656 416 l 831 416 l 818 277 l 616 277 l 538 0 l 389 0 l 468 277 l 336 277 l 258 0 l 113 0 l 189 277 l 28 277 l 40 416 l 228 416 l 275 574 l 104 574 l 117 715 l 313 715 l 393 991 l 541 991 l 461 715 l 596 715 l 675 991 l 821 991 l 742 715 l 904 715 l 892 574 l 703 574 m 375 416 l 509 416 l 555 574 l 422 574 l 375 416 z "},"$":{"ha":765,"x_min":35,"x_max":760,"o":"m 701 336 q 616 139 701 212 q 367 54 531 66 l 340 -81 l 245 -81 l 275 56 q 35 114 134 64 l 35 294 q 309 215 169 222 l 357 433 q 193 536 246 475 q 140 681 140 597 q 227 870 140 798 q 464 953 313 943 l 488 1055 l 582 1055 l 559 953 q 760 892 672 938 l 688 734 q 524 785 598 779 l 481 582 q 613 514 570 547 q 679 438 656 481 q 701 336 701 394 m 403 218 q 472 249 446 224 q 498 315 498 273 q 482 367 498 347 q 441 396 465 387 l 403 218 m 429 785 q 364 757 387 780 q 340 693 340 734 q 395 618 340 640 l 429 785 z "},"%":{"ha":1189,"x_min":78,"x_max":1139,"o":"m 351 864 q 276 777 309 864 q 244 589 244 690 q 282 524 244 524 q 358 612 326 524 q 390 799 390 701 q 351 864 390 864 m 557 790 q 519 580 557 677 q 416 433 481 482 q 269 383 352 383 q 126 440 175 383 q 78 600 78 496 q 116 811 78 715 q 216 957 153 908 q 363 1006 279 1006 q 506 951 456 1006 q 557 790 557 897 m 1054 991 l 319 0 l 157 0 l 895 991 l 1054 991 m 933 468 q 882 430 907 468 q 842 326 858 392 q 827 193 827 259 q 864 127 827 127 q 916 165 892 127 q 957 270 941 202 q 972 403 972 337 q 933 468 972 468 m 1139 400 q 1102 188 1139 287 q 1002 38 1065 88 q 856 -12 938 -12 q 709 41 758 -12 q 660 192 660 94 q 696 411 660 312 q 796 559 732 509 q 945 610 861 610 q 1088 556 1038 610 q 1139 400 1139 503 z "},"&":{"ha":983,"x_min":46,"x_max":970,"o":"m 899 0 l 661 0 l 612 66 q 339 -14 494 -14 q 122 53 197 -14 q 46 243 46 119 q 99 411 46 341 q 285 547 153 481 q 233 722 233 635 q 313 931 233 854 q 528 1007 393 1007 q 708 951 642 1007 q 774 799 774 895 q 526 510 774 609 l 659 332 q 713 414 688 370 q 766 532 738 458 l 970 532 q 760 195 880 319 l 899 0 m 367 422 q 283 352 307 388 q 260 262 260 315 q 291 189 260 218 q 370 160 321 160 q 519 200 448 160 l 367 422 m 449 624 q 554 699 526 664 q 583 775 583 734 q 563 831 583 814 q 515 848 543 848 q 446 817 471 848 q 421 736 421 785 q 429 673 421 705 q 449 624 437 642 z "},"\'":{"ha":354,"x_min":136,"x_max":372,"o":"m 372 991 l 269 633 l 136 633 l 184 991 l 372 991 z "},"(":{"ha":471,"x_min":50,"x_max":570,"o":"m 50 191 q 133 615 50 420 q 392 991 216 810 l 570 991 q 314 603 397 803 q 231 183 231 402 q 310 -220 231 -26 l 151 -220 q 50 191 50 -39 z "},")":{"ha":471,"x_min":-100,"x_max":419,"o":"m 419 582 q 335 154 419 350 q 78 -220 251 -41 l -100 -220 q 239 589 239 150 q 160 991 239 797 l 318 991 q 419 582 419 812 z "},"*":{"ha":757,"x_min":117,"x_max":786,"o":"m 600 1032 l 524 793 l 786 812 l 774 640 l 545 669 l 653 441 l 486 392 l 425 621 l 292 432 l 151 543 l 338 711 l 117 774 l 175 935 l 404 817 l 427 1067 l 600 1032 z "},"+":{"ha":765,"x_min":74,"x_max":720,"o":"m 322 415 l 74 415 l 74 564 l 322 564 l 322 814 l 471 814 l 471 564 l 720 564 l 720 415 l 471 415 l 471 168 l 322 168 l 322 415 z "},",":{"ha":386,"x_min":-69,"x_max":261,"o":"m 256 161 l 261 146 q 83 -179 181 -27 l -69 -179 q 62 161 -19 -66 l 256 161 z "},"-":{"ha":447,"x_min":28,"x_max":419,"o":"m 28 288 l 64 457 l 419 457 l 383 288 l 28 288 z "},".":{"ha":396,"x_min":17,"x_max":257,"o":"m 17 78 q 53 176 17 139 q 155 212 90 212 q 229 186 201 212 q 257 114 257 161 q 220 18 257 55 q 122 -18 182 -18 q 45 7 73 -18 q 17 78 17 33 z "},"/":{"ha":585,"x_min":-61,"x_max":688,"o":"m 688 991 l 139 0 l -61 0 l 488 991 l 688 991 z "},":":{"ha":396,"x_min":17,"x_max":380,"o":"m 140 637 q 178 736 140 700 q 279 772 216 772 q 353 746 326 772 q 380 673 380 720 q 343 578 380 615 q 245 542 307 542 q 169 567 197 542 q 140 637 140 591 m 17 78 q 53 176 17 139 q 155 212 90 212 q 229 186 201 212 q 257 114 257 161 q 220 18 257 55 q 122 -18 182 -18 q 45 7 73 -18 q 17 78 17 33 z "},";":{"ha":396,"x_min":-69,"x_max":380,"o":"m 261 146 q 83 -179 181 -27 l -69 -179 q 62 161 -19 -66 l 256 161 l 261 146 m 140 637 q 178 736 140 700 q 279 772 216 772 q 353 746 326 772 q 380 673 380 720 q 343 578 380 615 q 245 542 307 542 q 169 567 197 542 q 140 637 140 591 z "},"<":{"ha":765,"x_min":74,"x_max":720,"o":"m 720 138 l 74 435 l 74 532 l 720 868 l 720 705 l 283 490 l 720 300 l 720 138 z "},"=":{"ha":765,"x_min":74,"x_max":720,"o":"m 74 547 l 74 694 l 720 694 l 720 547 l 74 547 m 74 283 l 74 432 l 720 432 l 720 283 l 74 283 z "},">":{"ha":765,"x_min":74,"x_max":720,"o":"m 74 300 l 510 490 l 74 705 l 74 868 l 720 532 l 720 435 l 74 138 l 74 300 z "},"?":{"ha":637,"x_min":113,"x_max":682,"o":"m 176 329 l 186 382 q 236 502 199 452 q 353 607 273 552 q 459 693 437 664 q 482 758 482 722 q 392 839 482 839 q 320 828 358 839 q 183 771 281 817 l 121 921 q 422 1006 277 1006 q 612 946 543 1006 q 682 781 682 887 q 663 679 682 724 q 607 596 644 634 q 478 496 570 557 q 413 446 435 467 q 377 402 391 426 q 351 329 363 379 l 176 329 m 113 78 q 150 176 113 140 q 252 212 187 212 q 325 186 298 212 q 353 114 353 161 q 315 18 353 55 q 218 -18 278 -18 q 140 7 168 -18 q 113 78 113 33 z "},"@":{"ha":1189,"x_min":62,"x_max":1175,"o":"m 1175 570 q 1132 352 1175 452 q 1011 195 1088 252 q 839 139 935 139 q 741 165 779 139 q 692 239 703 191 l 688 239 q 611 163 654 186 q 511 139 568 139 q 377 193 425 139 q 329 349 329 247 q 375 536 329 448 q 502 675 420 624 q 684 726 583 726 q 905 689 809 726 l 833 404 q 821 352 826 374 q 815 309 815 330 q 854 262 815 262 q 939 306 899 262 q 1001 422 978 349 q 1025 567 1025 494 q 941 788 1025 711 q 697 864 857 864 q 449 800 559 864 q 276 620 338 736 q 214 354 214 503 q 304 96 214 189 q 559 3 395 3 q 708 16 639 3 q 859 61 778 30 l 859 -65 q 543 -126 703 -126 q 287 -68 396 -126 q 120 96 178 -10 q 62 339 62 201 q 144 676 62 528 q 377 908 226 824 q 714 991 528 991 q 1053 881 930 991 q 1175 570 1175 770 m 675 603 q 576 568 619 603 q 508 475 533 533 q 484 357 484 417 q 500 288 484 313 q 547 262 517 262 q 692 446 643 262 l 730 596 q 675 603 706 603 z "},"A":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 z "},"B":{"ha":861,"x_min":36,"x_max":848,"o":"m 534 991 q 769 936 690 991 q 848 771 848 881 q 792 603 848 669 q 632 515 736 537 l 632 511 q 740 446 700 494 q 781 323 781 398 q 677 84 781 168 q 390 0 573 0 l 36 0 l 245 991 l 534 991 m 370 599 l 471 599 q 594 632 553 599 q 635 726 635 665 q 519 819 635 819 l 416 819 l 370 599 m 279 174 l 401 174 q 526 213 481 174 q 571 322 571 252 q 447 432 571 432 l 335 432 l 279 174 z "},"C":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 453 777 524 832 q 338 615 381 722 q 294 386 294 509 q 341 218 294 273 q 489 163 387 163 q 718 215 588 163 l 718 39 q 447 -14 583 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 764 992 699 1007 q 905 936 830 977 l 825 766 q 707 819 753 806 q 614 832 660 832 z "},"D":{"ha":940,"x_min":36,"x_max":897,"o":"m 897 616 q 831 287 897 427 q 638 73 764 146 q 342 0 513 0 l 36 0 l 245 991 l 514 991 q 797 895 697 991 q 897 616 897 798 m 351 174 q 526 225 452 174 q 643 377 601 277 q 685 606 685 477 q 636 765 685 710 q 494 819 587 819 l 416 819 l 279 174 l 351 174 z "},"E":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 z "},"F":{"ha":737,"x_min":36,"x_max":798,"o":"m 243 0 l 36 0 l 245 991 l 798 991 l 761 819 l 416 819 l 363 564 l 684 564 l 646 392 l 325 392 l 243 0 z "},"G":{"ha":958,"x_min":83,"x_max":942,"o":"m 511 557 l 893 557 l 783 40 q 615 -2 692 9 q 450 -14 537 -14 q 179 86 275 -14 q 83 372 83 186 q 156 701 83 554 q 360 927 229 848 q 664 1007 492 1007 q 942 940 812 1007 l 864 770 q 764 813 814 797 q 654 829 713 829 q 469 773 551 829 q 341 613 387 717 q 294 389 294 509 q 343 217 294 272 q 494 163 393 163 q 610 179 546 163 l 654 382 l 473 382 l 511 557 z "},"H":{"ha":972,"x_min":36,"x_max":979,"o":"m 770 0 l 562 0 l 653 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 979 991 l 770 0 z "},"J":{"ha":460,"x_min":-218,"x_max":468,"o":"m -92 -292 q -218 -273 -155 -292 l -218 -102 q -107 -115 -159 -115 q 2 -74 -40 -115 q 62 56 43 -33 l 261 991 l 468 991 l 262 26 q 143 -216 227 -140 q -92 -292 60 -292 z "},"K":{"ha":851,"x_min":36,"x_max":979,"o":"m 774 0 l 545 0 l 401 401 l 317 354 l 243 0 l 36 0 l 245 991 l 453 991 l 350 515 l 457 654 l 734 991 l 979 991 l 576 517 l 774 0 z "},"L":{"ha":720,"x_min":36,"x_max":627,"o":"m 36 0 l 245 991 l 453 991 l 279 174 l 627 174 l 590 0 l 36 0 z "},"M":{"ha":1222,"x_min":36,"x_max":1229,"o":"m 568 250 l 942 991 l 1229 991 l 1019 0 l 829 0 l 928 469 q 999 768 964 637 l 996 768 l 610 0 l 419 0 l 378 768 l 375 768 q 349 612 368 709 q 222 0 331 515 l 36 0 l 245 991 l 519 991 l 566 250 l 568 250 z "},"N":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 846 0 l 614 0 l 372 750 l 368 750 l 366 728 q 321 467 344 582 l 222 0 l 36 0 l 245 991 l 488 991 l 718 261 l 721 261 q 747 408 729 313 q 869 991 766 504 l 1055 991 l 846 0 z "},"O":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 z "},"P":{"ha":806,"x_min":36,"x_max":807,"o":"m 354 525 l 392 525 q 544 572 488 525 q 599 697 599 618 q 467 819 599 819 l 416 819 l 354 525 m 807 703 q 692 446 807 539 q 375 353 577 353 l 317 353 l 243 0 l 36 0 l 245 991 l 475 991 q 723 919 639 991 q 807 703 807 847 z "},"Q":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 888 259 971 422 q 661 31 805 97 l 833 -236 l 590 -236 l 469 -14 l 452 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 z "},"R":{"ha":846,"x_min":36,"x_max":811,"o":"m 359 551 l 412 551 q 551 590 501 551 q 600 708 600 629 q 568 791 600 764 q 467 819 536 819 l 416 819 l 359 551 m 323 380 l 243 0 l 36 0 l 245 991 l 489 991 q 730 922 650 991 q 811 720 811 853 q 755 535 811 612 q 593 421 699 458 l 770 0 l 545 0 l 404 380 l 323 380 z "},"S":{"ha":736,"x_min":28,"x_max":753,"o":"m 642 293 q 541 69 642 151 q 269 -14 441 -14 q 28 47 119 -14 l 28 233 q 271 160 159 160 q 389 189 347 160 q 432 268 432 218 q 423 319 432 297 q 397 360 414 341 q 313 429 380 379 q 181 562 219 496 q 143 704 143 628 q 185 860 143 791 q 305 967 227 929 q 484 1006 382 1006 q 753 939 631 1006 l 679 781 q 484 831 573 831 q 391 800 427 831 q 355 720 355 770 q 378 647 355 678 q 478 566 400 616 q 601 446 560 511 q 642 293 642 380 z "},"T":{"ha":737,"x_min":114,"x_max":836,"o":"m 387 0 l 180 0 l 353 817 l 114 817 l 151 991 l 836 991 l 799 817 l 559 817 l 387 0 z "},"U":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 z "},"V":{"ha":819,"x_min":125,"x_max":945,"o":"m 363 203 q 437 395 416 353 l 730 991 l 945 991 l 437 0 l 211 0 l 125 991 l 325 991 l 359 395 q 362 304 362 364 q 358 203 361 235 l 363 203 z "},"W":{"ha":1242,"x_min":125,"x_max":1372,"o":"m 682 690 q 604 488 651 591 l 385 0 l 155 0 l 125 991 l 319 991 l 323 450 q 321 333 323 415 q 314 215 318 251 l 318 215 q 363 337 333 258 q 404 436 394 416 l 654 991 l 838 991 l 852 399 q 846 215 852 300 l 850 215 q 939 452 879 302 l 1162 991 l 1372 991 l 933 0 l 699 0 l 684 489 l 682 583 q 685 690 682 643 l 682 690 z "},"X":{"ha":842,"x_min":-79,"x_max":950,"o":"m 762 0 l 538 0 l 421 368 l 153 0 l -79 0 l 311 518 l 150 991 l 367 991 l 471 640 l 717 991 l 950 991 l 581 500 l 762 0 z "},"Y":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 z "},"Z":{"ha":745,"x_min":-41,"x_max":814,"o":"m 624 0 l -41 0 l -16 136 l 511 818 l 143 818 l 179 991 l 814 991 l 786 854 l 256 174 l 660 174 l 624 0 z "},"[":{"ha":460,"x_min":-25,"x_max":554,"o":"m 296 -220 l -25 -220 l 233 991 l 554 991 l 524 848 l 378 848 l 180 -77 l 326 -77 l 296 -220 z "},"\\\\":{"ha":585,"x_min":150,"x_max":478,"o":"m 326 991 l 478 0 l 297 0 l 150 991 l 326 991 z "},"]":{"ha":460,"x_min":-93,"x_max":485,"o":"m -62 -77 l 82 -77 l 279 848 l 134 848 l 164 991 l 485 991 l 227 -220 l -93 -220 l -62 -77 z "},"^":{"ha":733,"x_min":14,"x_max":721,"o":"m 14 353 l 433 997 l 533 997 l 721 353 l 570 353 l 452 782 l 179 353 l 14 353 z "},"_":{"ha":555,"x_min":-126,"x_max":452,"o":"m 431 -220 l -126 -220 l -106 -125 l 452 -125 l 431 -220 z "},"`":{"ha":770,"x_min":345,"x_max":633,"o":"m 633 842 l 509 842 q 415 946 460 888 q 345 1050 369 1003 l 345 1064 l 555 1064 q 633 859 580 964 l 633 842 z "},"a":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 z "},"b":{"ha":827,"x_min":25,"x_max":765,"o":"m 551 772 q 708 699 650 772 q 765 497 765 626 q 719 248 765 368 q 592 57 673 127 q 414 -14 511 -14 q 227 97 282 -14 l 221 97 l 182 0 l 25 0 l 249 1055 l 453 1055 l 411 860 q 354 657 383 736 l 359 657 q 456 748 412 724 q 551 772 500 772 m 469 607 q 381 563 423 607 q 312 440 339 519 q 285 271 285 362 q 310 184 285 216 q 379 151 335 151 q 466 198 425 151 q 533 327 507 245 q 558 488 558 408 q 469 607 558 607 z "},"c":{"ha":671,"x_min":61,"x_max":685,"o":"m 343 -14 q 134 59 207 -14 q 61 265 61 132 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 299 184 268 217 q 385 151 330 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 z "},"d":{"ha":825,"x_min":61,"x_max":864,"o":"m 275 -14 q 118 59 176 -14 q 61 262 61 132 q 110 516 61 395 q 237 705 158 637 q 412 772 317 772 q 508 747 468 772 q 585 661 549 722 l 590 661 l 591 680 q 608 812 595 755 l 660 1055 l 864 1055 l 640 0 l 485 0 l 494 98 l 492 98 q 391 13 444 39 q 275 -14 338 -14 m 361 151 q 448 198 406 151 q 516 321 490 244 q 542 488 542 399 q 516 574 542 542 q 447 607 491 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 361 151 268 151 z "},"e":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 z "},"f":{"ha":518,"x_min":-149,"x_max":669,"o":"m -31 -334 q -149 -317 -101 -334 l -149 -153 q -71 -167 -107 -167 q 2 -140 -29 -167 q 46 -52 33 -113 l 184 603 l 74 603 l 94 701 l 218 758 l 231 815 q 325 1003 258 944 q 510 1063 391 1063 q 669 1029 599 1063 l 615 878 q 525 899 568 899 q 463 871 486 899 q 431 800 439 844 l 422 758 l 571 758 l 538 603 l 389 603 l 243 -82 q -31 -334 191 -334 z "},"g":{"ha":751,"x_min":-78,"x_max":804,"o":"m 804 757 l 781 644 l 663 616 q 673 536 673 581 q 591 327 673 404 q 368 250 509 250 q 301 257 328 250 q 244 204 244 239 q 264 171 244 181 q 325 155 285 161 l 418 143 q 579 86 528 129 q 629 -39 629 43 q 524 -258 629 -182 q 221 -334 418 -334 q 1 -282 80 -334 q -78 -142 -78 -231 q -32 -23 -78 -73 q 114 60 15 27 q 64 150 64 92 q 94 233 64 198 q 193 300 124 268 q 128 376 149 333 q 107 479 107 418 q 192 693 107 614 q 424 772 277 772 q 536 757 480 772 l 804 757 m 248 -4 q 139 -43 176 -14 q 102 -117 102 -72 q 233 -195 102 -195 q 388 -164 336 -195 q 440 -78 440 -134 q 418 -37 440 -52 q 325 -14 396 -23 l 248 -4 m 416 643 q 332 591 364 643 q 300 461 300 539 q 370 380 300 380 q 452 432 420 380 q 484 564 484 484 q 416 643 484 643 z "},"h":{"ha":839,"x_min":25,"x_max":768,"o":"m 663 0 l 458 0 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 249 1055 l 453 1055 q 412 867 427 932 q 354 657 398 801 l 359 657 q 453 741 401 709 q 572 772 505 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 663 0 z "},"i":{"ha":412,"x_min":25,"x_max":443,"o":"m 218 936 q 251 1025 218 995 q 342 1055 283 1055 q 417 1034 391 1055 q 443 974 443 1013 q 413 886 443 920 q 321 852 383 852 q 218 936 218 852 m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 z "},"j":{"ha":412,"x_min":-179,"x_max":444,"o":"m -61 -334 q -179 -317 -132 -334 l -179 -153 q -102 -167 -138 -167 q 16 -52 -9 -167 l 187 758 l 392 758 l 212 -82 q -61 -334 160 -334 m 220 936 q 252 1025 220 995 q 343 1055 284 1055 q 418 1034 393 1055 q 444 974 444 1013 q 414 886 444 920 q 322 852 385 852 q 220 936 220 852 z "},"k":{"ha":789,"x_min":25,"x_max":857,"o":"m 624 758 l 857 758 l 519 416 l 713 0 l 485 0 l 361 285 l 279 236 l 229 0 l 25 0 l 249 1055 l 453 1055 l 353 585 q 333 505 347 557 l 314 436 l 317 436 l 624 758 z "},"l":{"ha":412,"x_min":25,"x_max":453,"o":"m 229 0 l 25 0 l 249 1055 l 453 1055 l 229 0 z "},"m":{"ha":1257,"x_min":25,"x_max":1186,"o":"m 572 772 q 750 618 721 772 l 754 618 q 863 732 800 692 q 997 772 926 772 q 1138 715 1089 772 q 1186 554 1186 657 q 1171 432 1186 503 l 1080 0 l 876 0 l 970 443 q 981 524 981 489 q 914 607 981 607 q 801 531 852 607 q 721 315 751 455 l 656 0 l 452 0 l 545 443 q 555 524 555 489 q 489 607 555 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 z "},"n":{"ha":839,"x_min":25,"x_max":768,"o":"m 663 0 l 458 0 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 663 0 z "},"o":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 z "},"p":{"ha":827,"x_min":-46,"x_max":765,"o":"m 551 772 q 708 700 650 772 q 765 496 765 627 q 719 247 765 366 q 591 57 672 127 q 414 -14 511 -14 q 317 12 357 -14 q 241 97 276 37 l 236 97 q 207 -103 228 -11 l 158 -334 l -46 -334 l 186 758 l 342 758 l 330 643 l 336 643 q 551 772 430 772 m 469 607 q 380 561 423 607 q 311 439 337 515 q 285 271 285 363 q 310 184 285 216 q 379 151 335 151 q 466 198 425 151 q 533 327 507 245 q 558 488 558 408 q 469 607 558 607 z "},"q":{"ha":825,"x_min":61,"x_max":802,"o":"m 265 -14 q 159 19 205 -14 q 87 113 113 51 q 61 261 61 174 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 516 747 471 772 q 600 661 561 722 l 606 661 l 644 758 l 802 758 l 570 -334 l 366 -334 q 415 -105 397 -186 q 472 102 433 -24 l 467 102 q 370 12 418 38 q 265 -14 321 -14 m 363 151 q 449 199 406 151 q 517 321 492 246 q 542 488 542 397 q 516 574 542 542 q 447 607 491 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 293 181 268 211 q 363 151 317 151 z "},"r":{"ha":585,"x_min":25,"x_max":636,"o":"m 571 772 q 636 765 611 772 l 591 568 q 524 579 561 579 q 386 517 445 579 q 301 339 326 455 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 571 772 431 772 z "},"s":{"ha":657,"x_min":16,"x_max":629,"o":"m 562 250 q 478 55 562 123 q 243 -14 393 -14 q 116 -3 170 -14 q 16 31 62 7 l 16 199 q 232 138 122 138 q 321 160 286 138 q 355 220 355 182 q 330 272 355 249 q 241 330 305 295 q 127 422 159 376 q 94 530 94 468 q 169 709 94 646 q 383 772 244 772 q 629 708 519 772 l 562 562 q 387 619 467 619 q 325 602 349 619 q 301 555 301 585 q 323 509 301 529 q 404 458 345 489 q 525 366 488 416 q 562 250 562 315 z "},"t":{"ha":570,"x_min":64,"x_max":596,"o":"m 349 151 q 458 175 393 151 l 458 22 q 278 -14 383 -14 q 129 29 176 -14 q 81 161 81 72 q 89 237 81 195 l 167 603 l 64 603 l 83 703 l 216 760 l 306 920 l 437 920 l 404 758 l 596 758 l 562 603 l 371 603 l 293 237 q 289 201 289 217 q 349 151 289 151 z "},"u":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 z "},"v":{"ha":711,"x_min":69,"x_max":791,"o":"m 309 204 q 371 355 346 308 l 572 758 l 791 758 l 382 0 l 163 0 l 69 758 l 269 758 l 300 361 q 304 204 304 271 l 309 204 z "},"w":{"ha":1095,"x_min":85,"x_max":1165,"o":"m 581 583 q 497 367 538 463 l 339 0 l 119 0 l 85 758 l 275 758 l 278 422 l 275 309 l 271 193 l 273 193 q 283 221 277 207 q 317 314 288 236 q 349 395 347 392 l 505 758 l 728 758 l 728 395 q 721 193 728 298 l 725 193 l 744 248 q 808 422 793 389 l 957 758 l 1165 758 l 806 0 l 582 0 l 578 353 q 585 583 578 458 l 581 583 z "},"x":{"ha":737,"x_min":-68,"x_max":806,"o":"m 257 389 l 104 758 l 322 758 l 400 532 l 566 758 l 806 758 l 489 378 l 654 0 l 433 0 l 349 232 l 170 0 l -68 0 l 257 389 z "},"y":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 z "},"z":{"ha":632,"x_min":-32,"x_max":656,"o":"m 507 0 l -32 0 l -8 122 l 382 600 l 113 600 l 147 758 l 656 758 l 627 623 l 243 158 l 541 158 l 507 0 z "},"{":{"ha":493,"x_min":-5,"x_max":589,"o":"m 136 216 q -5 311 136 311 l 25 467 q 156 495 108 467 q 218 589 203 523 l 260 782 q 349 944 286 897 q 532 991 412 991 l 589 991 l 555 839 q 467 815 494 838 q 429 743 439 793 l 385 542 q 197 382 354 401 l 197 376 q 283 320 255 359 q 311 229 311 282 q 301 153 311 199 l 277 32 q 272 -3 272 13 q 295 -53 272 -39 q 357 -66 317 -66 l 357 -220 l 321 -220 q 149 -177 208 -220 q 90 -52 90 -134 q 100 33 90 -13 l 126 158 q 136 216 136 205 z "},"|":{"ha":765,"x_min":309,"x_max":457,"o":"m 309 1051 l 457 1051 l 457 -315 l 309 -315 l 309 1051 z "},"}":{"ha":493,"x_min":-68,"x_max":500,"o":"m 174 991 q 404 823 404 991 q 395 739 404 785 l 368 614 q 358 555 358 567 q 500 461 358 461 l 469 306 q 339 277 387 306 q 277 183 291 249 l 235 -9 q 146 -172 210 -125 q -37 -220 83 -220 l -68 -220 l -68 -66 q 25 -42 -5 -64 q 65 29 55 -20 l 110 231 q 174 343 127 306 q 297 390 222 380 l 297 396 q 183 543 183 431 q 193 619 183 572 l 218 741 q 222 775 222 761 q 198 825 222 812 q 123 839 173 839 l 151 991 l 174 991 z "},"~":{"ha":765,"x_min":74,"x_max":720,"o":"m 232 456 q 153 433 195 456 q 74 374 111 411 l 74 530 q 248 604 142 604 q 327 595 291 604 q 421 561 363 585 q 496 533 465 543 q 561 524 528 524 q 637 544 595 524 q 720 606 678 565 l 720 449 q 546 375 650 375 q 472 383 506 375 q 372 418 438 391 q 286 450 312 444 q 232 456 260 456 z "}," ":{"ha":361,"x_min":0,"x_max":0,"o":""},"¡":{"ha":397,"x_min":-50,"x_max":372,"o":"m 123 411 l 288 411 l 180 -252 l -50 -252 l 123 411 m 372 663 q 335 564 372 600 q 233 528 297 528 q 160 553 187 528 q 132 627 132 579 q 169 721 132 684 q 267 758 205 758 q 344 733 316 758 q 372 663 372 708 z "},"¢":{"ha":765,"x_min":111,"x_max":734,"o":"m 390 -14 l 262 -14 l 296 129 q 158 221 205 153 q 111 396 111 289 q 154 637 111 527 q 274 815 196 747 q 456 899 353 883 l 478 1006 l 606 1006 l 582 899 q 734 854 662 889 l 672 699 q 601 726 636 714 q 521 737 566 737 q 374 640 431 737 q 318 412 318 543 q 349 315 318 347 q 435 282 379 282 q 530 298 486 282 q 621 338 574 314 l 621 171 q 418 117 528 123 l 390 -14 z "},"£":{"ha":765,"x_min":-8,"x_max":842,"o":"m 591 1007 q 842 949 724 1007 l 765 791 q 604 838 669 838 q 521 811 553 838 q 475 721 488 784 l 443 566 l 646 566 l 615 416 l 412 416 l 400 359 q 258 176 372 227 l 703 176 l 665 0 l -8 0 l 25 167 q 191 346 158 199 l 205 416 l 75 416 l 106 566 l 236 566 l 269 733 q 379 937 297 867 q 591 1007 461 1007 z "},"¤":{"ha":765,"x_min":78,"x_max":718,"o":"m 129 490 q 165 624 129 559 l 78 710 l 178 810 l 264 724 q 397 760 326 760 q 530 722 469 760 l 616 810 l 718 713 l 631 625 q 667 490 667 565 q 631 355 667 418 l 715 271 l 616 172 l 530 257 q 397 222 466 222 q 262 257 319 222 l 178 174 l 79 272 l 165 357 q 129 490 129 420 m 269 490 q 306 400 269 438 q 397 363 343 363 q 490 400 452 363 q 528 490 528 437 q 489 582 528 545 q 397 619 451 619 q 307 581 345 619 q 269 490 269 543 z "},"¥":{"ha":765,"x_min":60,"x_max":875,"o":"m 412 591 l 664 991 l 875 991 l 532 485 l 669 485 l 643 364 l 472 364 l 453 271 l 624 271 l 599 150 l 428 150 l 396 0 l 199 0 l 231 150 l 60 150 l 85 271 l 256 271 l 275 364 l 104 364 l 131 485 l 264 485 l 134 991 l 335 991 l 412 591 z "},"¦":{"ha":765,"x_min":309,"x_max":457,"o":"m 309 1051 l 457 1051 l 457 498 l 309 498 l 309 1051 m 309 237 l 457 237 l 457 -315 l 309 -315 l 309 237 z "},"§":{"ha":675,"x_min":14,"x_max":697,"o":"m 102 515 q 134 626 102 576 q 239 722 166 676 q 191 780 210 745 q 172 852 172 814 q 252 1011 172 954 q 464 1069 331 1069 q 697 1010 581 1069 l 642 879 q 450 936 542 936 q 353 864 353 936 q 380 812 353 835 q 467 764 408 790 q 631 558 631 692 q 500 353 631 431 q 543 295 526 329 q 561 221 561 260 q 475 49 561 112 q 241 -14 390 -14 q 14 37 103 -14 l 14 189 q 248 118 130 118 q 346 142 315 118 q 376 204 376 165 q 354 253 376 231 q 268 307 332 276 q 145 396 189 346 q 102 515 102 446 m 343 656 q 288 608 309 639 q 267 541 267 577 q 296 475 267 504 q 393 415 326 446 q 445 468 427 436 q 463 533 463 500 q 343 656 463 607 z "},"¨":{"ha":770,"x_min":269,"x_max":742,"o":"m 269 937 q 298 1017 269 990 q 379 1044 327 1044 q 469 971 469 1044 q 443 892 469 922 q 361 863 416 863 q 269 937 269 863 m 542 937 q 570 1017 542 990 q 652 1044 599 1044 q 719 1025 696 1044 q 742 971 742 1006 q 715 892 742 922 q 633 863 688 863 q 542 937 542 863 z "},"©":{"ha":1156,"x_min":85,"x_max":1104,"o":"m 632 685 q 522 635 557 685 q 486 490 486 586 q 524 353 486 399 q 632 306 562 306 q 706 316 661 306 q 790 346 750 327 l 790 216 q 612 178 701 178 q 404 261 479 178 q 329 489 329 344 q 409 727 329 642 q 629 812 488 812 q 822 764 726 812 l 771 646 q 632 685 694 685 m 85 496 q 153 750 85 631 q 339 937 220 869 q 595 1006 458 1006 q 848 939 730 1006 q 1035 752 966 871 q 1104 496 1104 632 q 1037 243 1104 361 q 852 56 970 125 q 595 -14 734 -14 q 336 57 454 -14 q 151 244 217 127 q 85 496 85 361 m 180 496 q 236 289 180 385 q 388 138 291 193 q 595 82 484 82 q 804 138 708 82 q 954 290 899 195 q 1008 496 1008 385 q 954 702 1008 606 q 803 853 899 797 q 595 909 707 909 q 387 853 484 909 q 235 702 290 798 q 180 496 180 606 z "},"ª":{"ha":524,"x_min":103,"x_max":595,"o":"m 250 510 q 142 557 180 510 q 103 692 103 605 q 134 846 103 771 q 218 962 165 922 q 338 1003 270 1003 q 460 933 419 1003 l 464 933 l 490 994 l 595 994 l 488 518 l 383 518 l 389 581 l 387 581 q 250 510 333 510 m 300 612 q 357 641 330 612 q 401 722 383 669 q 419 827 419 775 q 359 899 419 899 q 276 833 310 899 q 241 688 241 768 q 300 612 241 612 z "},"«":{"ha":781,"x_min":49,"x_max":781,"o":"m 49 386 l 321 700 l 450 595 l 261 368 l 353 131 l 186 61 l 49 374 l 49 386 m 379 386 l 652 700 l 781 595 l 591 368 l 684 131 l 517 61 l 379 374 l 379 386 z "},"¬":{"ha":765,"x_min":74,"x_max":720,"o":"m 720 168 l 571 168 l 571 415 l 74 415 l 74 564 l 720 564 l 720 168 z "},"­":{"ha":447,"x_min":28,"x_max":419,"o":"m 28 288 l 64 457 l 419 457 l 383 288 l 28 288 z "},"®":{"ha":1156,"x_min":85,"x_max":1104,"o":"m 839 610 q 809 508 839 551 q 721 443 779 465 l 854 199 l 682 199 l 589 400 l 543 400 l 543 199 l 387 199 l 387 791 l 596 791 q 776 746 713 791 q 839 610 839 700 m 543 514 l 578 514 q 654 535 627 514 q 682 597 682 556 q 658 657 682 637 q 579 677 634 677 l 543 677 l 543 514 m 85 496 q 153 750 85 631 q 339 937 220 869 q 595 1006 458 1006 q 848 939 730 1006 q 1035 752 966 871 q 1104 496 1104 632 q 1037 243 1104 361 q 852 56 970 125 q 595 -14 734 -14 q 336 57 454 -14 q 151 244 217 127 q 85 496 85 361 m 180 496 q 236 289 180 385 q 388 138 291 193 q 595 82 484 82 q 804 138 708 82 q 954 290 899 195 q 1008 496 1008 385 q 954 702 1008 606 q 803 853 899 797 q 595 909 707 909 q 387 853 484 909 q 235 702 290 798 q 180 496 180 606 z "},"¯":{"ha":694,"x_min":-4,"x_max":729,"o":"m 699 1055 l -4 1055 l 26 1192 l 729 1192 l 699 1055 z "},"°":{"ha":595,"x_min":111,"x_max":581,"o":"m 111 771 q 143 889 111 834 q 229 975 174 943 q 346 1006 284 1006 q 464 974 409 1006 q 549 888 518 942 q 581 771 581 833 q 549 654 581 708 q 464 569 518 600 q 346 538 410 538 q 229 568 283 538 q 143 653 174 599 q 111 771 111 707 m 240 771 q 271 697 240 728 q 346 667 302 667 q 421 698 391 667 q 452 771 452 729 q 421 846 452 814 q 346 878 390 878 q 271 845 302 878 q 240 771 240 813 z "},"±":{"ha":765,"x_min":74,"x_max":720,"o":"m 322 457 l 74 457 l 74 606 l 322 606 l 322 856 l 471 856 l 471 606 l 720 606 l 720 457 l 471 457 l 471 210 l 322 210 l 322 457 m 74 0 l 74 149 l 720 149 l 720 0 l 74 0 z "},"²":{"ha":526,"x_min":40,"x_max":550,"o":"m 479 397 l 40 397 l 64 510 l 249 659 q 345 741 324 720 q 375 781 365 762 q 385 819 385 800 q 367 861 385 848 q 326 875 350 875 q 199 819 268 875 l 131 926 q 237 985 181 965 q 367 1006 292 1006 q 500 963 450 1006 q 550 854 550 920 q 535 771 550 807 q 488 701 520 735 q 359 597 455 667 l 272 533 l 507 533 l 479 397 z "},"³":{"ha":526,"x_min":62,"x_max":551,"o":"m 551 861 q 517 763 551 802 q 404 703 482 723 l 404 700 q 509 581 509 677 q 436 439 509 492 q 243 386 363 386 q 144 396 192 386 q 62 424 96 407 l 62 554 q 235 505 147 505 q 319 526 286 505 q 353 586 353 547 q 335 628 353 611 q 275 646 317 646 l 189 646 l 212 754 l 273 754 q 363 773 330 754 q 396 831 396 792 q 378 871 396 858 q 330 885 361 885 q 203 840 272 885 l 147 942 q 359 1004 243 1004 q 499 967 448 1004 q 551 861 551 929 z "},"´":{"ha":770,"x_min":328,"x_max":705,"o":"m 328 859 q 478 1064 381 918 l 705 1064 l 705 1053 q 601 949 674 1015 q 469 842 528 884 l 328 842 l 328 859 z "},"µ":{"ha":847,"x_min":-46,"x_max":823,"o":"m 288 236 q 309 173 288 195 q 363 151 330 151 q 473 223 424 151 q 553 440 522 296 l 619 758 l 823 758 l 663 0 l 507 0 l 519 119 l 515 119 q 335 -14 436 -14 q 274 0 300 -14 q 235 32 248 13 l 231 32 q 216 -62 225 -13 q 160 -334 207 -112 l -46 -334 l 186 758 l 390 758 l 298 321 q 288 236 288 273 z "},"¶":{"ha":909,"x_min":100,"x_max":815,"o":"m 815 -176 l 705 -176 l 705 920 l 593 920 l 593 -176 l 484 -176 l 484 379 q 385 367 441 367 q 169 452 238 367 q 100 707 100 536 q 173 968 100 880 q 406 1055 245 1055 l 815 1055 l 815 -176 z "},"·":{"ha":396,"x_min":89,"x_max":329,"o":"m 89 471 q 125 569 89 532 q 227 606 161 606 q 301 580 273 606 q 329 507 329 554 q 292 412 329 448 q 194 375 254 375 q 117 400 144 375 q 89 471 89 426 z "},"¸":{"ha":285,"x_min":-140,"x_max":178,"o":"m 178 -170 q 121 -291 178 -248 q -37 -334 65 -334 q -140 -318 -96 -334 l -140 -204 q -56 -220 -98 -220 q 14 -164 14 -220 q -7 -126 14 -141 q -82 -104 -28 -111 l -17 0 l 109 0 l 82 -49 q 178 -170 178 -82 z "},"¹":{"ha":526,"x_min":87,"x_max":498,"o":"m 358 991 l 498 991 l 372 397 l 205 397 l 262 667 q 300 807 279 741 q 245 766 289 797 l 157 711 l 87 823 l 358 991 z "},"º":{"ha":511,"x_min":110,"x_max":549,"o":"m 549 810 q 516 652 549 723 q 426 546 483 581 q 293 510 369 510 q 156 561 202 510 q 110 704 110 612 q 180 920 110 838 q 368 1003 251 1003 q 502 953 456 1003 q 549 810 549 903 m 354 892 q 281 831 311 892 q 252 696 252 770 q 306 621 252 621 q 377 679 349 621 q 406 819 406 736 q 354 892 406 892 z "},"»":{"ha":781,"x_min":0,"x_max":732,"o":"m 732 363 l 460 49 l 330 154 l 519 380 l 428 618 l 595 688 l 732 375 l 732 363 m 401 363 l 129 49 l 0 154 l 189 380 l 97 618 l 264 688 l 401 375 l 401 363 z "},"¼":{"ha":1223,"x_min":66,"x_max":1092,"o":"m 1017 991 l 282 0 l 120 0 l 857 991 l 1017 991 m 336 991 l 477 991 l 351 397 l 184 397 l 241 667 q 278 807 257 741 q 224 766 267 797 l 135 711 l 66 823 l 336 991 m 1067 103 l 986 103 l 964 1 l 803 1 l 825 103 l 572 103 l 593 221 l 916 599 l 1092 599 l 1010 217 l 1090 217 l 1067 103 m 849 217 l 888 374 l 903 424 q 874 385 895 410 q 731 217 854 359 l 849 217 z "},"½":{"ha":1223,"x_min":66,"x_max":1147,"o":"m 1077 1 l 637 1 l 661 113 l 846 262 q 942 345 922 323 q 972 385 962 366 q 982 422 982 404 q 965 465 982 451 q 924 478 947 478 q 796 422 865 478 l 728 530 q 834 589 779 568 q 964 609 890 609 q 1098 566 1048 609 q 1147 458 1147 524 q 1133 374 1147 410 q 1085 304 1118 338 q 957 201 1053 270 l 869 136 l 1105 136 l 1077 1 m 336 991 l 477 991 l 351 397 l 184 397 l 241 667 q 278 807 257 741 q 224 766 267 797 l 135 711 l 66 823 l 336 991 m 1017 991 l 282 0 l 120 0 l 857 991 l 1017 991 z "},"¾":{"ha":1223,"x_min":90,"x_max":1133,"o":"m 1107 991 l 372 0 l 210 0 l 947 991 l 1107 991 m 1108 103 l 1027 103 l 1006 1 l 844 1 l 867 103 l 614 103 l 635 221 l 957 599 l 1133 599 l 1051 217 l 1132 217 l 1108 103 m 890 217 l 930 374 l 945 424 q 916 385 936 410 q 772 217 895 359 l 890 217 m 579 861 q 545 763 579 802 q 432 703 510 723 l 432 700 q 536 581 536 677 q 464 439 536 492 q 271 386 391 386 q 172 396 220 386 q 90 424 124 407 l 90 554 q 262 505 175 505 q 347 526 314 505 q 380 586 380 547 q 363 628 380 611 q 303 646 345 646 l 217 646 l 240 754 l 301 754 q 391 773 358 754 q 424 831 424 792 q 406 871 424 858 q 358 885 389 885 q 231 840 300 885 l 175 942 q 387 1004 271 1004 q 527 967 475 1004 q 579 861 579 929 z "},"¿":{"ha":637,"x_min":-46,"x_max":524,"o":"m 460 411 l 450 358 q 398 236 437 287 q 283 134 359 185 q 177 48 201 77 q 154 -18 154 19 q 244 -98 154 -98 q 316 -87 278 -98 q 453 -31 355 -77 l 515 -180 q 214 -265 366 -265 q 24 -206 94 -265 q -46 -40 -46 -146 q -27 61 -46 16 q 30 145 -7 106 q 158 244 67 184 q 245 316 221 286 q 279 389 269 347 l 285 411 l 460 411 m 524 663 q 486 564 524 600 q 385 528 448 528 q 311 553 338 528 q 283 627 283 579 q 320 722 283 685 q 418 758 357 758 q 495 733 467 758 q 524 663 524 708 z "},"À":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 654 1071 l 530 1071 q 436 1175 481 1118 q 366 1279 390 1232 l 366 1293 l 576 1293 q 654 1088 601 1193 l 654 1071 z "},"Á":{"ha":872,"x_min":-83,"x_max":876,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 498 1088 q 649 1293 552 1147 l 876 1293 l 876 1282 q 772 1178 845 1244 q 640 1071 699 1113 l 498 1071 l 498 1088 z "},"Â":{"ha":872,"x_min":-83,"x_max":838,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 838 1071 l 703 1071 q 593 1185 661 1107 q 436 1071 522 1125 l 289 1071 l 289 1088 q 393 1187 332 1126 q 489 1293 454 1249 l 718 1293 q 768 1197 733 1257 q 838 1088 804 1137 l 838 1071 z "},"Ã":{"ha":872,"x_min":-83,"x_max":872,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 677 1071 q 619 1082 644 1071 q 572 1106 593 1093 q 530 1131 550 1120 q 488 1142 510 1142 q 450 1123 467 1142 q 424 1069 433 1104 l 304 1069 q 494 1279 344 1279 q 554 1268 528 1279 q 602 1243 580 1257 q 644 1219 625 1230 q 685 1208 664 1208 q 724 1226 708 1208 q 755 1280 741 1243 l 872 1280 q 677 1071 827 1071 z "},"Ä":{"ha":872,"x_min":-83,"x_max":823,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 350 1166 q 379 1246 350 1219 q 460 1274 408 1274 q 550 1200 550 1274 q 524 1121 550 1151 q 441 1092 497 1092 q 350 1166 350 1092 m 623 1166 q 651 1246 623 1219 q 732 1274 680 1274 q 800 1255 777 1274 q 823 1200 823 1236 q 796 1121 823 1151 q 714 1092 769 1092 q 623 1166 623 1092 z "},"Å":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 737 1063 q 690 945 737 990 q 565 900 642 900 q 444 943 490 900 q 397 1061 397 986 q 443 1179 397 1135 q 565 1222 490 1222 q 688 1178 640 1222 q 737 1063 737 1134 m 631 1061 q 612 1109 631 1092 q 565 1126 593 1126 q 518 1109 536 1126 q 500 1061 500 1092 q 516 1013 500 1031 q 565 996 532 996 q 612 1013 593 996 q 631 1061 631 1031 z "},"Æ":{"ha":1243,"x_min":-83,"x_max":1291,"o":"m 1080 0 l 526 0 l 576 236 l 288 236 l 139 0 l -83 0 l 542 991 l 1291 991 l 1254 819 l 907 819 l 861 602 l 1185 602 l 1147 429 l 823 429 l 770 174 l 1117 174 l 1080 0 m 614 412 l 700 819 l 646 819 l 399 412 l 614 412 z "},"Ç":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 453 777 524 832 q 338 615 381 722 q 294 386 294 509 q 341 218 294 273 q 489 163 387 163 q 718 215 588 163 l 718 39 q 447 -14 583 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 764 992 699 1007 q 905 936 830 977 l 825 766 q 707 819 753 806 q 614 832 660 832 m 559 -170 q 503 -291 559 -248 q 345 -334 447 -334 q 241 -318 286 -334 l 241 -204 q 326 -220 284 -220 q 395 -164 395 -220 q 374 -126 395 -141 q 300 -104 353 -111 l 365 0 l 490 0 l 464 -49 q 559 -170 559 -82 z "},"È":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 614 1071 l 490 1071 q 396 1175 441 1118 q 326 1279 350 1232 l 326 1293 l 536 1293 q 614 1088 561 1193 l 614 1071 z "},"É":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 412 1088 q 563 1293 466 1147 l 790 1293 l 790 1282 q 686 1178 759 1244 q 554 1071 612 1113 l 412 1071 l 412 1088 z "},"Ê":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 798 1071 l 664 1071 q 554 1185 621 1107 q 397 1071 483 1125 l 250 1071 l 250 1088 q 353 1187 292 1126 q 450 1293 414 1249 l 679 1293 q 729 1197 694 1257 q 798 1088 764 1137 l 798 1071 z "},"Ë":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 297 1166 q 326 1246 297 1219 q 407 1274 355 1274 q 497 1200 497 1274 q 471 1121 497 1151 q 389 1092 444 1092 q 297 1166 297 1092 m 570 1166 q 598 1246 570 1219 q 680 1274 627 1274 q 747 1255 724 1274 q 770 1200 770 1236 q 743 1121 770 1151 q 661 1092 716 1092 q 570 1166 570 1092 z "},"Ð":{"ha":940,"x_min":25,"x_max":897,"o":"m 897 616 q 831 287 897 427 q 638 73 764 146 q 342 0 513 0 l 36 0 l 121 404 l 25 404 l 62 576 l 157 576 l 245 991 l 514 991 q 797 895 697 991 q 897 616 897 798 m 351 174 q 526 225 452 174 q 643 377 601 277 q 685 606 685 477 q 636 765 685 710 q 494 819 587 819 l 416 819 l 366 576 l 526 576 l 489 404 l 328 404 l 279 174 l 351 174 z "},"Ñ":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 846 0 l 614 0 l 372 750 l 368 750 l 366 728 q 321 467 344 582 l 222 0 l 36 0 l 245 991 l 488 991 l 718 261 l 721 261 q 747 408 729 313 q 869 991 766 504 l 1055 991 l 846 0 m 755 1071 q 697 1082 722 1071 q 650 1106 671 1093 q 608 1131 628 1120 q 566 1142 588 1142 q 528 1123 545 1142 q 502 1069 511 1104 l 382 1069 q 572 1279 422 1279 q 632 1268 606 1279 q 680 1243 658 1257 q 722 1219 703 1230 q 763 1208 742 1208 q 802 1226 786 1208 q 833 1280 819 1243 l 950 1280 q 755 1071 905 1071 z "},"Ò":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 714 1071 l 589 1071 q 495 1175 541 1118 q 425 1279 450 1232 l 425 1293 l 636 1293 q 714 1088 661 1193 l 714 1071 z "},"Ó":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 511 1088 q 661 1293 564 1147 l 888 1293 l 888 1282 q 784 1178 857 1244 q 652 1071 711 1113 l 511 1071 l 511 1088 z "},"Ô":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 887 1071 l 753 1071 q 643 1185 710 1107 q 486 1071 572 1125 l 338 1071 l 338 1088 q 442 1187 381 1126 q 538 1293 503 1249 l 768 1293 q 818 1197 783 1257 q 887 1088 853 1137 l 887 1071 z "},"Õ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 726 1071 q 668 1082 693 1071 q 621 1106 642 1093 q 579 1131 599 1120 q 536 1142 559 1142 q 499 1123 515 1142 q 473 1069 482 1104 l 353 1069 q 543 1279 393 1279 q 603 1268 576 1279 q 651 1243 629 1257 q 693 1219 673 1230 q 734 1208 713 1208 q 773 1226 757 1208 q 804 1280 789 1243 l 921 1280 q 726 1071 876 1071 z "},"Ö":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 397 1166 q 426 1246 397 1219 q 507 1274 454 1274 q 597 1200 597 1274 q 570 1121 597 1151 q 488 1092 544 1092 q 397 1166 397 1092 m 669 1166 q 698 1246 669 1219 q 779 1274 726 1274 q 846 1255 823 1274 q 869 1200 869 1236 q 843 1121 869 1151 q 761 1092 816 1092 q 669 1166 669 1092 z "},"×":{"ha":765,"x_min":87,"x_max":705,"o":"m 290 490 l 87 694 l 191 799 l 395 596 l 602 799 l 705 697 l 498 490 l 703 285 l 602 182 l 395 386 l 191 183 l 89 286 l 290 490 z "},"Ø":{"ha":1014,"x_min":68,"x_max":989,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 245 35 330 -14 l 172 -58 l 68 20 l 150 122 q 83 364 83 216 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 815 956 732 1007 l 886 1044 l 989 965 l 909 867 q 971 636 971 776 m 590 836 q 435 774 505 836 q 326 603 365 712 q 288 364 288 494 q 293 296 288 342 l 697 807 q 590 836 650 836 m 768 631 l 765 685 l 366 183 q 469 158 406 158 q 623 218 553 158 q 730 386 692 279 q 768 631 768 494 z "},"Ù":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 680 1071 l 555 1071 q 461 1175 507 1118 q 391 1279 415 1232 l 391 1293 l 602 1293 q 680 1088 626 1193 l 680 1071 z "},"Ú":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 513 1088 q 664 1293 567 1147 l 891 1293 l 891 1282 q 787 1178 860 1244 q 655 1071 713 1113 l 513 1071 l 513 1088 z "},"Û":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 871 1071 l 736 1071 q 627 1185 694 1107 q 469 1071 555 1125 l 322 1071 l 322 1088 q 426 1187 365 1126 q 522 1293 487 1249 l 751 1293 q 802 1197 766 1257 q 871 1088 837 1137 l 871 1071 z "},"Ü":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 383 1166 q 412 1246 383 1219 q 493 1274 441 1274 q 583 1200 583 1274 q 557 1121 583 1151 q 475 1092 530 1092 q 383 1166 383 1092 m 656 1166 q 684 1246 656 1219 q 766 1274 713 1274 q 833 1255 810 1274 q 856 1200 856 1236 q 829 1121 856 1151 q 747 1092 802 1092 q 656 1166 656 1092 z "},"Ý":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 m 411 1088 q 562 1293 465 1147 l 789 1293 l 789 1282 q 684 1178 758 1244 q 553 1071 611 1113 l 411 1071 l 411 1088 z "},"Þ":{"ha":806,"x_min":36,"x_max":775,"o":"m 775 547 q 660 291 775 382 q 343 199 544 199 l 285 199 l 243 0 l 36 0 l 245 991 l 453 991 l 419 836 l 443 836 q 691 764 607 836 q 775 547 775 692 m 322 371 l 359 371 q 510 416 454 371 q 567 542 567 461 q 435 664 567 664 l 385 664 l 322 371 z "},"ß":{"ha":916,"x_min":-176,"x_max":882,"o":"m 574 1063 q 798 1002 715 1063 q 882 839 882 941 q 848 709 882 762 q 728 606 815 656 q 663 559 678 577 q 647 522 647 541 q 662 489 647 507 q 715 441 677 471 q 813 339 788 385 q 839 237 839 294 q 755 54 839 122 q 526 -14 671 -14 q 325 28 399 -14 l 325 191 q 500 138 412 138 q 600 160 568 138 q 632 218 632 182 q 614 269 632 245 q 541 335 596 293 q 453 423 477 384 q 429 509 429 463 q 460 607 429 566 q 570 693 490 648 q 641 745 614 718 q 667 810 667 771 q 640 877 667 852 q 555 901 613 901 q 450 866 490 901 q 392 750 409 831 l 220 -77 q 120 -272 191 -211 q -68 -334 50 -334 q -176 -317 -129 -334 l -176 -153 q -98 -167 -135 -167 q 17 -46 -8 -167 l 189 772 q 313 994 221 924 q 574 1063 404 1063 z "},"à":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 589 842 l 465 842 q 371 946 416 888 q 300 1050 325 1003 l 300 1064 l 511 1064 q 589 859 536 964 l 589 842 z "},"á":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 406 859 q 556 1064 459 918 l 783 1064 l 783 1053 q 679 949 752 1015 q 547 842 606 884 l 406 842 l 406 859 z "},"â":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 760 841 l 625 841 q 515 955 583 877 q 358 841 444 895 l 211 841 l 211 858 q 315 958 254 897 q 411 1063 376 1019 l 640 1063 q 690 967 655 1027 q 760 858 726 907 l 760 841 z "},"ã":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 600 842 q 541 853 566 842 q 494 877 515 864 q 452 902 472 890 q 410 913 432 913 q 372 894 389 913 q 346 840 355 875 l 226 840 q 416 1050 266 1050 q 476 1039 450 1050 q 524 1014 502 1027 q 566 990 547 1001 q 607 979 586 979 q 646 997 630 979 q 677 1051 663 1014 l 794 1051 q 600 842 749 842 z "},"ä":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 269 937 q 298 1017 269 990 q 379 1044 327 1044 q 469 971 469 1044 q 443 892 469 922 q 361 863 416 863 q 269 937 269 863 m 542 937 q 570 1017 542 990 q 652 1044 599 1044 q 719 1025 696 1044 q 742 971 742 1006 q 715 892 742 922 q 633 863 688 863 q 542 937 542 863 z "},"å":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 694 1003 q 646 885 694 930 q 522 840 599 840 q 400 883 447 840 q 353 1002 353 926 q 400 1119 353 1076 q 522 1162 446 1162 q 645 1118 596 1162 q 694 1003 694 1074 m 587 1002 q 569 1049 587 1032 q 522 1067 550 1067 q 475 1049 493 1067 q 456 1002 456 1032 q 473 954 456 971 q 522 936 489 936 q 569 954 550 936 q 587 1002 587 971 z "},"æ":{"ha":1211,"x_min":61,"x_max":1177,"o":"m 818 -14 q 696 5 744 -14 q 616 64 648 23 l 606 0 l 478 0 l 488 98 l 484 98 q 384 13 435 39 q 271 -14 333 -14 q 116 60 172 -14 q 61 261 61 134 q 107 516 61 397 q 233 704 154 635 q 408 772 312 772 q 517 746 473 772 q 595 661 561 720 l 599 661 l 637 758 l 765 758 l 753 697 q 834 751 783 730 q 949 772 886 772 q 1116 716 1055 772 q 1177 566 1177 659 q 1063 370 1177 439 q 741 301 950 301 l 705 301 l 704 288 l 704 275 q 742 175 704 210 q 850 140 779 140 q 953 156 895 140 q 1063 199 1011 172 l 1063 45 q 818 -14 941 -14 m 351 151 q 442 197 400 151 q 509 322 484 243 q 534 488 534 401 q 512 574 534 542 q 443 607 490 607 q 356 560 397 607 q 292 434 315 513 q 268 271 268 355 q 290 182 268 214 q 351 151 312 151 m 909 625 q 797 571 850 625 q 728 439 744 517 l 758 439 q 922 472 863 439 q 981 561 981 505 q 909 625 981 625 z "},"ç":{"ha":671,"x_min":61,"x_max":685,"o":"m 343 -14 q 134 59 207 -14 q 61 265 61 132 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 299 184 268 217 q 385 151 330 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 m 443 -170 q 387 -291 443 -248 q 228 -334 330 -334 q 125 -318 170 -334 l 125 -204 q 210 -220 168 -220 q 279 -164 279 -220 q 258 -126 279 -141 q 183 -104 237 -111 l 248 0 l 374 0 l 347 -49 q 443 -170 443 -82 z "},"è":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 576 842 l 451 842 q 357 946 403 888 q 287 1050 311 1003 l 287 1064 l 498 1064 q 576 859 522 964 l 576 842 z "},"é":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 358 859 q 509 1064 412 918 l 736 1064 l 736 1053 q 631 949 705 1015 q 500 842 558 884 l 358 842 l 358 859 z "},"ê":{"ha":774,"x_min":61,"x_max":747,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 747 842 l 612 842 q 503 956 570 878 q 345 842 431 896 l 198 842 l 198 859 q 302 958 241 897 q 398 1064 363 1019 l 627 1064 q 677 967 642 1027 q 747 859 713 907 l 747 842 z "},"ë":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 248 937 q 276 1017 248 990 q 357 1044 305 1044 q 448 971 448 1044 q 421 892 448 922 q 339 863 395 863 q 248 937 248 863 m 520 937 q 549 1017 520 990 q 630 1044 577 1044 q 697 1025 674 1044 q 720 971 720 1006 q 693 892 720 922 q 612 863 667 863 q 520 937 520 863 z "},"ì":{"ha":412,"x_min":25,"x_max":393,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 393 842 l 268 842 q 174 946 220 888 q 104 1050 128 1003 l 104 1064 l 315 1064 q 393 859 339 964 l 393 842 z "},"í":{"ha":412,"x_min":25,"x_max":575,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 197 859 q 348 1064 251 918 l 575 1064 l 575 1053 q 471 949 544 1015 q 339 842 397 884 l 197 842 l 197 859 z "},"î":{"ha":412,"x_min":24,"x_max":573,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 573 842 l 439 842 q 329 956 396 878 q 172 842 258 896 l 24 842 l 24 859 q 128 958 67 897 q 224 1064 189 1019 l 454 1064 q 504 967 469 1027 q 573 859 539 907 l 573 842 z "},"ï":{"ha":412,"x_min":25,"x_max":558,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 85 937 q 114 1017 85 990 q 195 1044 143 1044 q 286 971 286 1044 q 259 892 286 922 q 177 863 233 863 q 85 937 85 863 m 358 937 q 387 1017 358 990 q 468 1044 415 1044 q 535 1025 512 1044 q 558 971 558 1006 q 531 892 558 922 q 450 863 505 863 q 358 937 358 863 z "},"ð":{"ha":802,"x_min":49,"x_max":785,"o":"m 419 888 q 335 942 396 911 l 415 1068 q 572 974 506 1027 l 733 1063 l 785 960 l 654 888 q 731 728 709 815 q 753 539 753 642 q 706 246 753 370 q 568 54 659 121 q 349 -14 477 -14 q 125 61 202 -14 q 49 275 49 136 q 93 479 49 387 q 215 623 136 572 q 395 675 294 675 q 497 654 451 675 q 575 590 544 633 l 579 590 q 500 800 566 734 l 343 711 l 283 811 l 419 888 m 358 139 q 441 177 403 139 q 502 277 479 214 q 524 408 524 340 q 497 491 524 460 q 424 522 471 522 q 336 486 374 522 q 276 389 297 450 q 254 256 254 328 q 281 170 254 201 q 358 139 307 139 z "},"ñ":{"ha":839,"x_min":25,"x_max":811,"o":"m 663 0 l 458 0 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 663 0 m 616 842 q 558 853 583 842 q 511 877 532 864 q 469 902 489 890 q 427 913 449 913 q 389 894 406 913 q 363 840 372 875 l 243 840 q 433 1050 283 1050 q 493 1039 467 1050 q 541 1014 519 1027 q 583 990 564 1001 q 624 979 603 979 q 663 997 647 979 q 694 1051 680 1014 l 811 1051 q 616 842 766 842 z "},"ò":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 573 842 l 448 842 q 354 946 400 888 q 284 1050 309 1003 l 284 1064 l 495 1064 q 573 859 519 964 l 573 842 z "},"ó":{"ha":812,"x_min":61,"x_max":765,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 387 859 q 538 1064 441 918 l 765 1064 l 765 1053 q 661 949 734 1015 q 529 842 587 884 l 387 842 l 387 859 z "},"ô":{"ha":812,"x_min":61,"x_max":752,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 752 842 l 618 842 q 508 956 575 878 q 351 842 437 896 l 203 842 l 203 859 q 307 958 246 897 q 404 1064 368 1019 l 633 1064 q 683 967 648 1027 q 752 859 718 907 l 752 842 z "},"õ":{"ha":812,"x_min":61,"x_max":781,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 587 842 q 528 853 553 842 q 481 877 503 864 q 439 902 459 890 q 397 913 419 913 q 359 894 376 913 q 333 840 342 875 l 213 840 q 404 1050 253 1050 q 463 1039 437 1050 q 511 1014 489 1027 q 553 990 534 1001 q 594 979 573 979 q 633 997 617 979 q 665 1051 650 1014 l 781 1051 q 587 842 736 842 z "},"ö":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 262 937 q 291 1017 262 990 q 372 1044 319 1044 q 462 971 462 1044 q 435 892 462 922 q 353 863 409 863 q 262 937 262 863 m 534 937 q 563 1017 534 990 q 644 1044 591 1044 q 711 1025 688 1044 q 734 971 734 1006 q 708 892 734 922 q 626 863 681 863 q 534 937 534 863 z "},"÷":{"ha":765,"x_min":74,"x_max":720,"o":"m 74 415 l 74 564 l 720 564 l 720 415 l 74 415 m 301 253 q 326 330 301 304 q 396 355 351 355 q 466 329 441 355 q 490 253 490 302 q 465 178 490 205 q 396 150 440 150 q 327 176 352 150 q 301 253 301 203 m 301 726 q 326 803 301 777 q 396 829 351 829 q 466 802 441 829 q 490 726 490 774 q 465 651 490 679 q 396 624 440 624 q 327 650 352 624 q 301 726 301 677 z "},"ø":{"ha":812,"x_min":29,"x_max":764,"o":"m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 199 22 268 -14 l 125 -69 l 29 4 l 110 104 q 61 278 61 177 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 618 734 553 772 l 665 794 l 764 720 l 707 648 q 751 472 751 576 m 449 612 q 351 570 394 612 q 284 455 308 528 q 261 297 261 382 l 261 289 l 509 596 q 449 612 485 612 m 368 146 q 499 236 446 146 q 553 452 553 326 l 553 463 l 310 161 q 334 151 317 156 q 368 146 351 146 z "},"ù":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 573 842 l 448 842 q 354 946 400 888 q 284 1050 309 1003 l 284 1064 l 495 1064 q 573 859 519 964 l 573 842 z "},"ú":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 414 859 q 564 1064 467 918 l 791 1064 l 791 1053 q 687 949 760 1015 q 555 842 614 884 l 414 842 l 414 859 z "},"û":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 775 842 l 641 842 q 531 956 598 878 q 374 842 460 896 l 227 842 l 227 859 q 330 958 269 897 q 427 1064 391 1019 l 656 1064 q 706 967 671 1027 q 775 859 741 907 l 775 842 z "},"ü":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 279 937 q 308 1017 279 990 q 389 1044 336 1044 q 479 971 479 1044 q 452 892 479 922 q 370 863 426 863 q 279 937 279 863 m 551 937 q 580 1017 551 990 q 661 1044 608 1044 q 728 1025 705 1044 q 751 971 751 1006 q 725 892 751 922 q 643 863 698 863 q 551 937 551 863 z "},"ý":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 337 859 q 488 1064 391 918 l 715 1064 l 715 1053 q 610 949 684 1015 q 479 842 537 884 l 337 842 l 337 859 z "},"þ":{"ha":827,"x_min":-46,"x_max":765,"o":"m 551 772 q 709 700 653 772 q 765 496 765 628 q 718 237 765 361 q 595 50 671 114 q 425 -14 518 -14 q 241 97 304 -14 l 236 97 q 207 -103 228 -11 l 158 -334 l -46 -334 l 249 1055 l 453 1055 l 408 847 q 354 657 389 758 l 359 657 q 551 772 448 772 m 463 607 q 374 563 414 607 q 310 438 334 519 q 285 271 285 357 q 308 184 285 216 q 379 151 330 151 q 467 195 426 151 q 533 320 507 239 q 558 488 558 400 q 533 577 558 547 q 463 607 507 607 z "},"ÿ":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 210 937 q 239 1017 210 990 q 320 1044 268 1044 q 410 971 410 1044 q 384 892 410 922 q 302 863 357 863 q 210 937 210 863 m 483 937 q 511 1017 483 990 q 593 1044 540 1044 q 660 1025 637 1044 q 683 971 683 1006 q 656 892 683 922 q 574 863 629 863 q 483 937 483 863 z "},"Ā":{"ha":872,"x_min":-83,"x_max":811,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 391 1214 l 811 1214 l 781 1071 l 361 1071 l 391 1214 z "},"ā":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 315 985 l 735 985 l 705 842 l 285 842 l 315 985 z "},"Ă":{"ha":872,"x_min":-83,"x_max":840,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 840 1300 q 574 1071 803 1071 q 412 1120 470 1071 q 354 1255 354 1170 q 358 1300 354 1281 l 476 1300 q 501 1236 476 1256 q 581 1215 526 1215 q 667 1234 633 1215 q 712 1300 701 1252 l 840 1300 z "},"ă":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 766 1071 q 500 842 729 842 q 338 891 396 842 q 280 1026 280 941 q 284 1071 280 1052 l 402 1071 q 427 1006 402 1027 q 507 986 452 986 q 593 1004 559 986 q 638 1071 627 1023 l 766 1071 z "},"Ą":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 722 0 q 617 -100 642 -65 q 593 -170 593 -136 q 604 -199 593 -189 q 633 -210 614 -210 q 703 -197 663 -210 l 703 -317 q 591 -334 646 -334 q 482 -297 522 -334 q 441 -201 441 -261 q 474 -99 441 -146 q 587 0 506 -52 l 722 0 z "},"ą":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 620 0 q 515 -100 539 -65 q 490 -170 490 -136 q 501 -199 490 -189 q 531 -210 512 -210 q 600 -197 561 -210 l 600 -317 q 489 -334 543 -334 q 379 -297 420 -334 q 339 -201 339 -261 q 371 -99 339 -146 q 485 0 404 -52 l 620 0 z "},"Ć":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 453 777 524 832 q 338 615 381 722 q 294 386 294 509 q 341 218 294 273 q 489 163 387 163 q 718 215 588 163 l 718 39 q 447 -14 583 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 764 992 699 1007 q 905 936 830 977 l 825 766 q 707 819 753 806 q 614 832 660 832 m 498 1088 q 649 1293 552 1147 l 876 1293 l 876 1282 q 772 1178 845 1244 q 640 1071 699 1113 l 498 1071 l 498 1088 z "},"ć":{"ha":671,"x_min":61,"x_max":724,"o":"m 343 -14 q 134 59 207 -14 q 61 265 61 132 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 299 184 268 217 q 385 151 330 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 m 346 859 q 496 1064 399 918 l 724 1064 l 724 1053 q 619 949 692 1015 q 488 842 546 884 l 346 842 l 346 859 z "},"Ĉ":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 453 777 524 832 q 338 615 381 722 q 294 386 294 509 q 341 218 294 273 q 489 163 387 163 q 718 215 588 163 l 718 39 q 447 -14 583 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 764 992 699 1007 q 905 936 830 977 l 825 766 q 707 819 753 806 q 614 832 660 832 m 876 1071 l 742 1071 q 632 1185 699 1107 q 475 1071 561 1125 l 328 1071 l 328 1088 q 431 1187 370 1126 q 528 1293 492 1249 l 757 1293 q 807 1197 772 1257 q 876 1088 842 1137 l 876 1071 z "},"ĉ":{"ha":671,"x_min":61,"x_max":720,"o":"m 343 -14 q 134 59 207 -14 q 61 265 61 132 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 299 184 268 217 q 385 151 330 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 m 720 842 l 586 842 q 476 956 543 878 q 319 842 405 896 l 172 842 l 172 859 q 275 958 214 897 q 372 1064 336 1019 l 601 1064 q 651 967 616 1027 q 720 859 686 907 l 720 842 z "},"Ċ":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 453 777 524 832 q 338 615 381 722 q 294 386 294 509 q 341 218 294 273 q 489 163 387 163 q 718 215 588 163 l 718 39 q 447 -14 583 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 764 992 699 1007 q 905 936 830 977 l 825 766 q 707 819 753 806 q 614 832 660 832 m 526 1165 q 558 1254 526 1224 q 649 1284 590 1284 q 724 1263 699 1284 q 750 1203 750 1242 q 720 1115 750 1149 q 628 1082 690 1082 q 526 1165 526 1082 z "},"ċ":{"ha":671,"x_min":61,"x_max":685,"o":"m 343 -14 q 134 59 207 -14 q 61 265 61 132 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 299 184 268 217 q 385 151 330 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 m 360 936 q 392 1025 360 995 q 484 1055 425 1055 q 559 1034 533 1055 q 585 974 585 1013 q 555 886 585 920 q 463 852 525 852 q 360 936 360 852 z "},"Č":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 453 777 524 832 q 338 615 381 722 q 294 386 294 509 q 341 218 294 273 q 489 163 387 163 q 718 215 588 163 l 718 39 q 447 -14 583 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 764 992 699 1007 q 905 936 830 977 l 825 766 q 707 819 753 806 q 614 832 660 832 m 349 1293 l 483 1293 q 593 1179 526 1257 q 750 1293 671 1243 l 897 1293 l 897 1276 q 697 1071 753 1142 l 468 1071 q 418 1167 453 1107 q 349 1276 382 1227 l 349 1293 z "},"č":{"ha":671,"x_min":61,"x_max":758,"o":"m 343 -14 q 134 59 207 -14 q 61 265 61 132 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 299 184 268 217 q 385 151 330 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 m 209 1064 l 343 1064 q 453 950 386 1028 q 610 1064 531 1014 l 758 1064 l 758 1047 q 557 842 614 913 l 328 842 q 278 938 313 878 q 209 1047 243 998 l 209 1064 z "},"Ď":{"ha":940,"x_min":36,"x_max":897,"o":"m 897 616 q 831 287 897 427 q 638 73 764 146 q 342 0 513 0 l 36 0 l 245 991 l 514 991 q 797 895 697 991 q 897 616 897 798 m 351 174 q 526 225 452 174 q 643 377 601 277 q 685 606 685 477 q 636 765 685 710 q 494 819 587 819 l 416 819 l 279 174 l 351 174 m 318 1293 l 452 1293 q 562 1179 495 1257 q 720 1293 640 1243 l 867 1293 l 867 1276 q 667 1071 723 1142 l 437 1071 q 387 1167 422 1107 q 318 1276 352 1227 l 318 1293 z "},"ď":{"ha":825,"x_min":61,"x_max":1158,"o":"m 275 -14 q 118 59 176 -14 q 61 262 61 132 q 110 516 61 395 q 237 705 158 637 q 412 772 317 772 q 508 747 468 772 q 585 661 549 722 l 590 661 l 591 680 q 608 812 595 755 l 660 1055 l 864 1055 l 640 0 l 485 0 l 494 98 l 492 98 q 391 13 444 39 q 275 -14 338 -14 m 361 151 q 448 198 406 151 q 516 321 490 244 q 542 488 542 399 q 516 574 542 542 q 447 607 491 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 361 151 268 151 m 882 851 q 966 1055 939 972 l 1158 1055 l 1158 1042 q 1093 942 1138 1003 q 1004 833 1048 880 l 882 833 l 882 851 z "},"Đ":{"ha":940,"x_min":25,"x_max":897,"o":"m 897 616 q 831 287 897 427 q 638 73 764 146 q 342 0 513 0 l 36 0 l 121 404 l 25 404 l 62 576 l 157 576 l 245 991 l 514 991 q 797 895 697 991 q 897 616 897 798 m 351 174 q 526 225 452 174 q 643 377 601 277 q 685 606 685 477 q 636 765 685 710 q 494 819 587 819 l 416 819 l 366 576 l 526 576 l 489 404 l 328 404 l 279 174 l 351 174 z "},"đ":{"ha":825,"x_min":61,"x_max":945,"o":"m 404 730 q 506 707 464 730 q 579 629 549 684 l 585 629 q 588 684 585 648 q 608 811 592 721 l 408 811 l 436 946 l 636 946 l 660 1055 l 864 1055 l 840 946 l 945 946 l 917 811 l 811 811 l 640 0 l 485 0 l 494 98 l 492 98 q 390 12 439 37 q 282 -14 340 -14 q 120 58 179 -14 q 61 262 61 130 q 109 498 61 385 q 233 671 156 612 q 404 730 309 730 m 364 151 q 450 192 410 151 q 515 308 489 232 q 541 457 541 384 q 518 536 541 506 q 447 566 496 566 q 357 524 399 566 q 292 414 316 483 q 268 271 268 346 q 294 181 268 211 q 364 151 319 151 z "},"Ē":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 350 1214 l 770 1214 l 739 1071 l 319 1071 l 350 1214 z "},"ē":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 298 985 l 718 985 l 688 842 l 268 842 l 298 985 z "},"Ĕ":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 799 1300 q 532 1071 762 1071 q 371 1120 429 1071 q 313 1255 313 1170 q 317 1300 313 1281 l 435 1300 q 459 1236 435 1256 q 539 1215 484 1215 q 626 1234 592 1215 q 671 1300 659 1252 l 799 1300 z "},"ĕ":{"ha":774,"x_min":61,"x_max":762,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 762 1071 q 495 842 724 842 q 333 891 391 842 q 275 1026 275 941 q 279 1071 275 1052 l 397 1071 q 422 1006 397 1027 q 502 986 447 986 q 588 1004 555 986 q 633 1071 622 1023 l 762 1071 z "},"Ė":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 422 1145 q 455 1235 422 1204 q 546 1265 487 1265 q 621 1244 595 1265 q 647 1183 647 1223 q 617 1096 647 1129 q 525 1062 587 1062 q 422 1145 422 1062 z "},"ė":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 388 936 q 420 1025 388 995 q 511 1055 452 1055 q 587 1034 561 1055 q 612 974 612 1013 q 583 886 612 920 q 490 852 553 852 q 388 936 388 852 z "},"Ę":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 524 0 q 418 -100 443 -65 q 394 -170 394 -136 q 405 -199 394 -189 q 435 -210 416 -210 q 504 -197 465 -210 l 504 -317 q 393 -334 447 -334 q 283 -297 323 -334 q 243 -201 243 -261 q 275 -99 243 -146 q 389 0 307 -52 l 524 0 z "},"ę":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 469 14 q 363 -87 388 -52 q 339 -156 339 -122 q 350 -185 339 -175 q 380 -196 361 -196 q 449 -184 410 -196 l 449 -303 q 338 -320 392 -320 q 228 -284 269 -320 q 188 -188 188 -248 q 220 -85 188 -132 q 334 14 252 -39 l 469 14 z "},"Ě":{"ha":753,"x_min":36,"x_max":835,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 286 1293 l 420 1293 q 530 1179 463 1257 q 688 1293 608 1243 l 835 1293 l 835 1276 q 635 1071 691 1142 l 406 1071 q 355 1167 391 1107 q 286 1276 320 1227 l 286 1293 z "},"ě":{"ha":774,"x_min":61,"x_max":795,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 247 1064 l 381 1064 q 491 950 424 1028 q 648 1064 569 1014 l 795 1064 l 795 1047 q 595 842 652 913 l 366 842 q 316 938 351 878 q 247 1047 281 998 l 247 1064 z "},"Ĝ":{"ha":958,"x_min":83,"x_max":942,"o":"m 511 557 l 893 557 l 783 40 q 615 -2 692 9 q 450 -14 537 -14 q 179 86 275 -14 q 83 372 83 186 q 156 701 83 554 q 360 927 229 848 q 664 1007 492 1007 q 942 940 812 1007 l 864 770 q 764 813 814 797 q 654 829 713 829 q 469 773 551 829 q 341 613 387 717 q 294 389 294 509 q 343 217 294 272 q 494 163 393 163 q 610 179 546 163 l 654 382 l 473 382 l 511 557 m 887 1071 l 753 1071 q 643 1185 710 1107 q 486 1071 572 1125 l 338 1071 l 338 1088 q 442 1187 381 1126 q 538 1293 503 1249 l 768 1293 q 818 1197 783 1257 q 887 1088 853 1137 l 887 1071 z "},"ĝ":{"ha":751,"x_min":-78,"x_max":807,"o":"m 804 757 l 781 644 l 663 616 q 673 536 673 581 q 591 327 673 404 q 368 250 509 250 q 301 257 328 250 q 244 204 244 239 q 264 171 244 181 q 325 155 285 161 l 418 143 q 579 86 528 129 q 629 -39 629 43 q 524 -258 629 -182 q 221 -334 418 -334 q 1 -282 80 -334 q -78 -142 -78 -231 q -32 -23 -78 -73 q 114 60 15 27 q 64 150 64 92 q 94 233 64 198 q 193 300 124 268 q 128 376 149 333 q 107 479 107 418 q 192 693 107 614 q 424 772 277 772 q 536 757 480 772 l 804 757 m 248 -4 q 139 -43 176 -14 q 102 -117 102 -72 q 233 -195 102 -195 q 388 -164 336 -195 q 440 -78 440 -134 q 418 -37 440 -52 q 325 -14 396 -23 l 248 -4 m 416 643 q 332 591 364 643 q 300 461 300 539 q 370 380 300 380 q 452 432 420 380 q 484 564 484 484 q 416 643 484 643 m 807 842 l 673 842 q 563 956 630 878 q 406 842 492 896 l 258 842 l 258 859 q 362 958 301 897 q 458 1064 423 1019 l 688 1064 q 738 967 703 1027 q 807 859 773 907 l 807 842 z "},"Ğ":{"ha":958,"x_min":83,"x_max":942,"o":"m 511 557 l 893 557 l 783 40 q 615 -2 692 9 q 450 -14 537 -14 q 179 86 275 -14 q 83 372 83 186 q 156 701 83 554 q 360 927 229 848 q 664 1007 492 1007 q 942 940 812 1007 l 864 770 q 764 813 814 797 q 654 829 713 829 q 469 773 551 829 q 341 613 387 717 q 294 389 294 509 q 343 217 294 272 q 494 163 393 163 q 610 179 546 163 l 654 382 l 473 382 l 511 557 m 884 1300 q 617 1071 846 1071 q 455 1120 513 1071 q 397 1255 397 1170 q 401 1300 397 1281 l 519 1300 q 544 1236 519 1256 q 624 1215 569 1215 q 710 1234 677 1215 q 755 1300 744 1252 l 884 1300 z "},"ğ":{"ha":751,"x_min":-78,"x_max":804,"o":"m 804 757 l 781 644 l 663 616 q 673 536 673 581 q 591 327 673 404 q 368 250 509 250 q 301 257 328 250 q 244 204 244 239 q 264 171 244 181 q 325 155 285 161 l 418 143 q 579 86 528 129 q 629 -39 629 43 q 524 -258 629 -182 q 221 -334 418 -334 q 1 -282 80 -334 q -78 -142 -78 -231 q -32 -23 -78 -73 q 114 60 15 27 q 64 150 64 92 q 94 233 64 198 q 193 300 124 268 q 128 376 149 333 q 107 479 107 418 q 192 693 107 614 q 424 772 277 772 q 536 757 480 772 l 804 757 m 248 -4 q 139 -43 176 -14 q 102 -117 102 -72 q 233 -195 102 -195 q 388 -164 336 -195 q 440 -78 440 -134 q 418 -37 440 -52 q 325 -14 396 -23 l 248 -4 m 416 643 q 332 591 364 643 q 300 461 300 539 q 370 380 300 380 q 452 432 420 380 q 484 564 484 484 q 416 643 484 643 m 779 1071 q 513 842 742 842 q 351 891 409 842 q 293 1026 293 941 q 297 1071 293 1052 l 415 1071 q 440 1006 415 1027 q 519 986 465 986 q 606 1004 572 986 q 651 1071 640 1023 l 779 1071 z "},"Ġ":{"ha":958,"x_min":83,"x_max":942,"o":"m 511 557 l 893 557 l 783 40 q 615 -2 692 9 q 450 -14 537 -14 q 179 86 275 -14 q 83 372 83 186 q 156 701 83 554 q 360 927 229 848 q 664 1007 492 1007 q 942 940 812 1007 l 864 770 q 764 813 814 797 q 654 829 713 829 q 469 773 551 829 q 341 613 387 717 q 294 389 294 509 q 343 217 294 272 q 494 163 393 163 q 610 179 546 163 l 654 382 l 473 382 l 511 557 m 527 1165 q 559 1254 527 1224 q 650 1284 591 1284 q 726 1263 700 1284 q 751 1203 751 1242 q 722 1115 751 1149 q 629 1082 692 1082 q 527 1165 527 1082 z "},"ġ":{"ha":751,"x_min":-78,"x_max":804,"o":"m 804 757 l 781 644 l 663 616 q 673 536 673 581 q 591 327 673 404 q 368 250 509 250 q 301 257 328 250 q 244 204 244 239 q 264 171 244 181 q 325 155 285 161 l 418 143 q 579 86 528 129 q 629 -39 629 43 q 524 -258 629 -182 q 221 -334 418 -334 q 1 -282 80 -334 q -78 -142 -78 -231 q -32 -23 -78 -73 q 114 60 15 27 q 64 150 64 92 q 94 233 64 198 q 193 300 124 268 q 128 376 149 333 q 107 479 107 418 q 192 693 107 614 q 424 772 277 772 q 536 757 480 772 l 804 757 m 248 -4 q 139 -43 176 -14 q 102 -117 102 -72 q 233 -195 102 -195 q 388 -164 336 -195 q 440 -78 440 -134 q 418 -37 440 -52 q 325 -14 396 -23 l 248 -4 m 416 643 q 332 591 364 643 q 300 461 300 539 q 370 380 300 380 q 452 432 420 380 q 484 564 484 484 q 416 643 484 643 m 416 936 q 448 1025 416 995 q 539 1055 480 1055 q 614 1034 589 1055 q 640 974 640 1013 q 610 886 640 920 q 518 852 581 852 q 416 936 416 852 z "},"Ģ":{"ha":958,"x_min":83,"x_max":942,"o":"m 511 557 l 893 557 l 783 40 q 615 -2 692 9 q 450 -14 537 -14 q 179 86 275 -14 q 83 372 83 186 q 156 701 83 554 q 360 927 229 848 q 664 1007 492 1007 q 942 940 812 1007 l 864 770 q 764 813 814 797 q 654 829 713 829 q 469 773 551 829 q 341 613 387 717 q 294 389 294 509 q 343 217 294 272 q 494 163 393 163 q 610 179 546 163 l 654 382 l 473 382 l 511 557 m 274 -289 q 318 -189 291 -254 q 359 -85 346 -123 l 550 -85 l 550 -98 q 485 -198 528 -140 q 396 -307 443 -255 l 274 -307 l 274 -289 z "},"ģ":{"ha":751,"x_min":-78,"x_max":804,"o":"m 804 757 l 781 644 l 663 616 q 673 536 673 581 q 591 327 673 404 q 368 250 509 250 q 301 257 328 250 q 244 204 244 239 q 264 171 244 181 q 325 155 285 161 l 418 143 q 579 86 528 129 q 629 -39 629 43 q 524 -258 629 -182 q 221 -334 418 -334 q 1 -282 80 -334 q -78 -142 -78 -231 q -32 -23 -78 -73 q 114 60 15 27 q 64 150 64 92 q 94 233 64 198 q 193 300 124 268 q 128 376 149 333 q 107 479 107 418 q 192 693 107 614 q 424 772 277 772 q 536 757 480 772 l 804 757 m 248 -4 q 139 -43 176 -14 q 102 -117 102 -72 q 233 -195 102 -195 q 388 -164 336 -195 q 440 -78 440 -134 q 418 -37 440 -52 q 325 -14 396 -23 l 248 -4 m 416 643 q 332 591 364 643 q 300 461 300 539 q 370 380 300 380 q 452 432 420 380 q 484 564 484 484 q 416 643 484 643 m 675 1046 q 632 950 662 1019 q 591 842 603 882 l 399 842 l 399 856 q 464 955 420 896 q 553 1064 507 1014 l 675 1064 l 675 1046 z "},"Ĥ":{"ha":972,"x_min":36,"x_max":979,"o":"m 770 0 l 562 0 l 653 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 979 991 l 770 0 m 884 1071 l 750 1071 q 640 1185 707 1107 q 483 1071 569 1125 l 336 1071 l 336 1088 q 439 1187 378 1126 q 536 1293 500 1249 l 765 1293 q 815 1197 780 1257 q 884 1088 850 1137 l 884 1071 z "},"ĥ":{"ha":839,"x_min":25,"x_max":812,"o":"m 663 0 l 458 0 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 249 1055 l 453 1055 q 412 867 427 932 q 354 657 398 801 l 359 657 q 453 741 401 709 q 572 772 505 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 663 0 m 812 1108 l 678 1108 q 568 1222 635 1144 q 411 1108 497 1162 l 264 1108 l 264 1125 q 368 1225 307 1164 q 464 1331 429 1286 l 693 1331 q 743 1234 708 1294 q 812 1125 779 1174 l 812 1108 z "},"Ħ":{"ha":972,"x_min":36,"x_max":1072,"o":"m 951 860 l 1072 860 l 1044 725 l 922 725 l 770 0 l 562 0 l 653 428 l 334 428 l 243 0 l 36 0 l 189 725 l 69 725 l 97 860 l 218 860 l 245 991 l 453 991 l 425 860 l 745 860 l 772 991 l 979 991 l 951 860 m 690 603 l 715 725 l 396 725 l 371 603 l 690 603 z "},"ħ":{"ha":839,"x_min":25,"x_max":760,"o":"m 663 0 l 458 0 l 543 401 q 554 482 554 448 q 482 566 554 566 q 368 487 419 566 q 288 272 317 409 l 229 0 l 25 0 l 197 811 l 87 811 l 117 946 l 225 946 l 249 1055 l 453 1055 l 431 946 l 633 946 l 604 811 l 401 811 q 347 615 376 700 l 353 615 q 445 699 395 668 q 564 730 496 730 q 709 673 659 730 q 760 513 760 616 q 745 390 760 459 l 663 0 z "},"ĩ":{"ha":412,"x_min":25,"x_max":605,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 410 842 q 352 853 377 842 q 304 877 326 864 q 263 902 283 890 q 220 913 243 913 q 183 894 199 913 q 157 840 166 875 l 37 840 q 227 1050 77 1050 q 287 1039 260 1050 q 335 1014 313 1027 q 377 990 357 1001 q 418 979 397 979 q 457 997 441 979 q 488 1051 473 1014 l 605 1051 q 410 842 560 842 z "},"ī":{"ha":412,"x_min":25,"x_max":537,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 117 985 l 537 985 l 507 842 l 87 842 l 117 985 z "},"ĭ":{"ha":412,"x_min":25,"x_max":577,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 577 1071 q 311 842 540 842 q 149 891 207 842 q 91 1026 91 941 q 95 1071 91 1052 l 213 1071 q 238 1006 213 1027 q 317 986 262 986 q 404 1004 370 986 q 449 1071 437 1023 l 577 1071 z "},"į":{"ha":412,"x_min":-52,"x_max":443,"o":"m 218 936 q 251 1025 218 995 q 342 1055 283 1055 q 417 1034 391 1055 q 443 974 443 1013 q 413 886 443 920 q 321 852 383 852 q 218 936 218 852 m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 229 0 q 124 -100 149 -65 q 100 -170 100 -136 q 111 -199 100 -189 q 140 -210 121 -210 q 210 -197 170 -210 l 210 -317 q 98 -334 153 -334 q -11 -297 29 -334 q -52 -201 -52 -261 q -19 -99 -52 -146 q 94 0 13 -52 l 229 0 z "},"ı":{"ha":412,"x_min":25,"x_max":390,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 z "},"ĳ":{"ha":825,"x_min":25,"x_max":857,"o":"m 218 936 q 251 1025 218 995 q 342 1055 283 1055 q 417 1034 391 1055 q 443 974 443 1013 q 413 886 443 920 q 321 852 383 852 q 218 936 218 852 m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 351 -334 q 233 -317 281 -334 l 233 -153 q 311 -167 275 -167 q 428 -52 404 -167 l 600 758 l 804 758 l 625 -82 q 351 -334 572 -334 m 632 936 q 664 1025 632 995 q 755 1055 696 1055 q 831 1034 805 1055 q 857 974 857 1013 q 827 886 857 920 q 734 852 797 852 q 632 936 632 852 z "},"Ĵ":{"ha":460,"x_min":-218,"x_max":644,"o":"m -92 -292 q -218 -273 -155 -292 l -218 -102 q -107 -115 -159 -115 q 2 -74 -40 -115 q 62 56 43 -33 l 261 991 l 468 991 l 262 26 q 143 -216 227 -140 q -92 -292 60 -292 m 644 1071 l 509 1071 q 399 1185 467 1107 q 242 1071 328 1125 l 95 1071 l 95 1088 q 199 1187 138 1126 q 295 1293 260 1249 l 524 1293 q 574 1197 539 1257 q 644 1088 610 1137 l 644 1071 z "},"ĵ":{"ha":412,"x_min":-178,"x_max":567,"o":"m -60 -334 q -178 -317 -130 -334 l -178 -153 q -100 -167 -136 -167 q -27 -140 -58 -167 q 17 -52 4 -113 l 189 758 l 393 758 l 214 -82 q -60 -334 161 -334 m 567 842 l 433 842 q 323 956 390 878 q 165 842 252 896 l 18 842 l 18 859 q 122 958 61 897 q 218 1064 183 1019 l 448 1064 q 498 967 463 1027 q 567 859 533 907 l 567 842 z "},"Ķ":{"ha":851,"x_min":36,"x_max":979,"o":"m 774 0 l 545 0 l 401 401 l 317 354 l 243 0 l 36 0 l 245 991 l 453 991 l 350 515 l 457 654 l 734 991 l 979 991 l 576 517 l 774 0 m 205 -289 q 250 -189 222 -254 q 290 -85 277 -123 l 481 -85 l 481 -98 q 417 -198 459 -140 q 328 -307 374 -255 l 205 -307 l 205 -289 z "},"ķ":{"ha":789,"x_min":25,"x_max":857,"o":"m 624 758 l 857 758 l 519 416 l 713 0 l 485 0 l 361 285 l 279 236 l 229 0 l 25 0 l 249 1055 l 453 1055 l 353 585 q 333 505 347 557 l 314 436 l 317 436 l 624 758 m 167 -289 q 211 -189 184 -254 q 252 -85 239 -123 l 443 -85 l 443 -98 q 378 -198 420 -140 q 289 -307 336 -255 l 167 -307 l 167 -289 z "},"ĸ":{"ha":789,"x_min":25,"x_max":857,"o":"m 624 758 l 857 758 l 519 416 l 713 0 l 485 0 l 361 285 l 279 236 l 229 0 l 25 0 l 186 758 l 390 758 q 331 501 342 542 q 311 432 320 460 l 314 432 l 624 758 z "},"Ĺ":{"ha":720,"x_min":36,"x_max":652,"o":"m 36 0 l 245 991 l 453 991 l 279 174 l 627 174 l 590 0 l 36 0 m 274 1088 q 425 1293 328 1147 l 652 1293 l 652 1282 q 547 1178 621 1244 q 416 1071 474 1113 l 274 1071 l 274 1088 z "},"ĺ":{"ha":412,"x_min":25,"x_max":638,"o":"m 229 0 l 25 0 l 249 1055 l 453 1055 l 229 0 m 260 1126 q 411 1332 314 1186 l 638 1332 l 638 1320 q 534 1217 607 1282 q 402 1109 460 1152 l 260 1109 l 260 1126 z "},"Ļ":{"ha":720,"x_min":36,"x_max":627,"o":"m 36 0 l 245 991 l 453 991 l 279 174 l 627 174 l 590 0 l 36 0 m 128 -289 q 173 -189 145 -254 q 213 -85 200 -123 l 404 -85 l 404 -98 q 339 -198 382 -140 q 250 -307 297 -255 l 128 -307 l 128 -289 z "},"ļ":{"ha":412,"x_min":-67,"x_max":453,"o":"m 229 0 l 25 0 l 249 1055 l 453 1055 l 229 0 m -67 -289 q -23 -189 -50 -254 q 18 -85 5 -123 l 209 -85 l 209 -98 q 144 -198 186 -140 q 55 -307 102 -255 l -67 -307 l -67 -289 z "},"Ľ":{"ha":720,"x_min":36,"x_max":807,"o":"m 36 0 l 245 991 l 453 991 l 279 174 l 627 174 l 590 0 l 36 0 m 531 788 q 615 992 587 909 l 807 992 l 807 979 q 742 879 787 940 q 653 770 696 817 l 531 770 l 531 788 z "},"ľ":{"ha":412,"x_min":25,"x_max":747,"o":"m 229 0 l 25 0 l 249 1055 l 453 1055 l 229 0 m 471 851 q 555 1055 528 972 l 747 1055 l 747 1042 q 682 942 727 1003 q 593 833 637 880 l 471 833 l 471 851 z "},"Ŀ":{"ha":720,"x_min":36,"x_max":696,"o":"m 36 0 l 245 991 l 453 991 l 279 174 l 627 174 l 590 0 l 36 0 m 471 491 q 504 580 471 550 q 595 610 536 610 q 670 589 644 610 q 696 529 696 568 q 666 441 696 475 q 574 408 636 408 q 471 491 471 408 z "},"ŀ":{"ha":603,"x_min":25,"x_max":639,"o":"m 229 0 l 25 0 l 249 1055 l 453 1055 l 229 0 m 414 453 q 447 542 414 512 q 538 572 479 572 q 613 551 587 572 q 639 491 639 530 q 609 403 639 437 q 517 370 579 370 q 414 453 414 370 z "},"Ł":{"ha":721,"x_min":0,"x_max":628,"o":"m 39 0 l 109 326 l 69 306 l 0 443 l 150 524 l 249 991 l 454 991 l 382 648 l 478 701 l 550 564 l 339 450 l 281 174 l 628 174 l 591 0 l 39 0 z "},"ł":{"ha":454,"x_min":0,"x_max":494,"o":"m 379 635 l 422 660 l 494 522 l 338 437 l 244 0 l 43 0 l 110 317 l 69 294 l 0 432 l 151 514 l 267 1055 l 468 1055 l 379 635 z "},"Ń":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 846 0 l 614 0 l 372 750 l 368 750 l 366 728 q 321 467 344 582 l 222 0 l 36 0 l 245 991 l 488 991 l 718 261 l 721 261 q 747 408 729 313 q 869 991 766 504 l 1055 991 l 846 0 m 581 1088 q 731 1293 634 1147 l 958 1293 l 958 1282 q 854 1178 927 1244 q 722 1071 781 1113 l 581 1071 l 581 1088 z "},"ń":{"ha":839,"x_min":25,"x_max":783,"o":"m 663 0 l 458 0 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 663 0 m 406 859 q 556 1064 459 918 l 783 1064 l 783 1053 q 679 949 752 1015 q 547 842 606 884 l 406 842 l 406 859 z "},"Ņ":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 846 0 l 614 0 l 372 750 l 368 750 l 366 728 q 321 467 344 582 l 222 0 l 36 0 l 245 991 l 488 991 l 718 261 l 721 261 q 747 408 729 313 q 869 991 766 504 l 1055 991 l 846 0 m 258 -289 q 303 -189 275 -254 q 343 -85 330 -123 l 534 -85 l 534 -98 q 470 -198 512 -140 q 380 -307 427 -255 l 258 -307 l 258 -289 z "},"ņ":{"ha":839,"x_min":25,"x_max":768,"o":"m 663 0 l 458 0 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 663 0 m 161 -289 q 206 -189 178 -254 q 246 -85 233 -123 l 437 -85 l 437 -98 q 373 -198 415 -140 q 283 -307 330 -255 l 161 -307 l 161 -289 z "},"Ň":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 846 0 l 614 0 l 372 750 l 368 750 l 366 728 q 321 467 344 582 l 222 0 l 36 0 l 245 991 l 488 991 l 718 261 l 721 261 q 747 408 729 313 q 869 991 766 504 l 1055 991 l 846 0 m 421 1293 l 555 1293 q 665 1179 598 1257 q 823 1293 743 1243 l 970 1293 l 970 1276 q 770 1071 826 1142 l 541 1071 q 490 1167 526 1107 q 421 1276 455 1227 l 421 1293 z "},"ň":{"ha":839,"x_min":25,"x_max":808,"o":"m 663 0 l 458 0 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 663 0 m 260 1064 l 394 1064 q 504 950 437 1028 q 661 1064 582 1014 l 808 1064 l 808 1047 q 608 842 665 913 l 379 842 q 329 938 364 878 q 260 1047 294 998 l 260 1064 z "},"ŉ":{"ha":946,"x_min":1,"x_max":876,"o":"m 770 0 l 566 0 l 659 443 q 669 524 669 489 q 596 607 669 607 q 483 530 534 607 q 403 314 432 452 l 336 0 l 132 0 l 293 758 l 449 758 l 435 618 l 439 618 q 680 772 538 772 q 824 716 773 772 q 876 554 876 659 q 860 432 876 505 l 770 0 m 326 991 l 332 977 q 154 652 262 823 l 1 652 q 133 991 61 791 l 326 991 z "},"Ŋ":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 493 -292 q 364 -275 412 -292 l 364 -100 q 473 -115 422 -115 q 656 0 619 -115 l 372 750 l 368 750 l 366 728 q 321 467 344 582 l 222 0 l 36 0 l 245 991 l 469 991 l 728 323 l 732 323 q 781 593 760 500 l 869 991 l 1055 991 l 846 0 q 725 -219 814 -146 q 493 -292 635 -292 z "},"ŋ":{"ha":839,"x_min":25,"x_max":768,"o":"m 371 -334 q 253 -317 300 -334 l 253 -153 q 330 -167 294 -167 q 403 -139 372 -167 q 447 -52 435 -112 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 646 -79 q 550 -272 618 -210 q 371 -334 481 -334 z "},"Ō":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 453 1214 l 873 1214 l 842 1071 l 422 1071 l 453 1214 z "},"ō":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 301 985 l 721 985 l 690 842 l 271 842 l 301 985 z "},"Ŏ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 897 1300 q 631 1071 860 1071 q 469 1120 527 1071 q 411 1255 411 1170 q 415 1300 411 1281 l 533 1300 q 558 1236 533 1256 q 637 1215 583 1215 q 724 1234 690 1215 q 769 1300 758 1252 l 897 1300 z "},"ŏ":{"ha":812,"x_min":61,"x_max":753,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 753 1071 q 487 842 716 842 q 325 891 383 842 q 267 1026 267 941 q 271 1071 267 1052 l 389 1071 q 414 1006 389 1027 q 494 986 439 986 q 580 1004 547 986 q 625 1071 614 1023 l 753 1071 z "},"Ő":{"ha":1014,"x_min":83,"x_max":1040,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 408 1088 q 564 1293 485 1175 l 771 1293 l 771 1282 q 668 1182 742 1246 q 528 1071 593 1118 l 408 1071 l 408 1088 m 677 1088 q 833 1293 754 1175 l 1040 1293 l 1040 1282 q 937 1182 1011 1246 q 798 1071 863 1118 l 677 1071 l 677 1088 z "},"ő":{"ha":812,"x_min":61,"x_max":887,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 254 859 q 411 1064 332 945 l 618 1064 l 618 1053 q 514 952 589 1017 q 375 842 440 888 l 254 842 l 254 859 m 524 859 q 680 1064 601 945 l 887 1064 l 887 1053 q 784 952 858 1017 q 644 842 709 888 l 524 842 l 524 859 z "},"Œ":{"ha":1251,"x_min":83,"x_max":1299,"o":"m 1089 0 l 574 0 q 452 -14 511 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 750 991 703 1007 l 1299 991 l 1263 819 l 916 819 l 869 602 l 1193 602 l 1156 429 l 832 429 l 778 174 l 1125 174 l 1089 0 m 467 163 q 574 184 526 163 l 705 806 q 591 832 663 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 z "},"œ":{"ha":1225,"x_min":61,"x_max":1190,"o":"m 812 -14 q 671 13 734 -14 q 578 85 609 39 q 478 13 535 39 q 338 -14 421 -14 q 136 66 211 -14 q 61 281 61 145 q 108 539 61 427 q 243 711 155 650 q 453 772 332 772 q 665 664 595 772 q 936 772 770 772 q 1123 717 1056 772 q 1190 566 1190 662 q 1077 370 1190 439 q 754 301 964 301 l 720 301 l 718 287 l 718 273 q 753 176 718 212 q 852 140 787 140 q 960 153 911 140 q 1076 199 1008 166 l 1076 45 q 950 0 1013 14 q 812 -14 888 -14 m 437 606 q 351 565 389 606 q 290 445 313 524 q 267 281 267 366 q 291 186 267 219 q 366 153 316 153 q 487 244 439 153 q 534 472 534 335 q 509 571 534 537 q 437 606 484 606 m 924 625 q 811 572 864 625 q 742 439 759 519 l 772 439 q 936 472 878 439 q 994 561 994 505 q 924 625 994 625 z "},"Ŕ":{"ha":846,"x_min":36,"x_max":815,"o":"m 359 551 l 412 551 q 551 590 501 551 q 600 708 600 629 q 568 791 600 764 q 467 819 536 819 l 416 819 l 359 551 m 323 380 l 243 0 l 36 0 l 245 991 l 489 991 q 730 922 650 991 q 811 720 811 853 q 755 535 811 612 q 593 421 699 458 l 770 0 l 545 0 l 404 380 l 323 380 m 437 1088 q 588 1293 491 1147 l 815 1293 l 815 1282 q 711 1178 784 1244 q 579 1071 637 1113 l 437 1071 l 437 1088 z "},"ŕ":{"ha":585,"x_min":25,"x_max":689,"o":"m 571 772 q 636 765 611 772 l 591 568 q 524 579 561 579 q 386 517 445 579 q 301 339 326 455 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 571 772 431 772 m 311 859 q 462 1064 365 918 l 689 1064 l 689 1053 q 585 949 658 1015 q 453 842 511 884 l 311 842 l 311 859 z "},"Ŗ":{"ha":846,"x_min":36,"x_max":811,"o":"m 359 551 l 412 551 q 551 590 501 551 q 600 708 600 629 q 568 791 600 764 q 467 819 536 819 l 416 819 l 359 551 m 323 380 l 243 0 l 36 0 l 245 991 l 489 991 q 730 922 650 991 q 811 720 811 853 q 755 535 811 612 q 593 421 699 458 l 770 0 l 545 0 l 404 380 l 323 380 m 203 -289 q 247 -189 220 -254 q 288 -85 275 -123 l 479 -85 l 479 -98 q 414 -198 456 -140 q 325 -307 372 -255 l 203 -307 l 203 -289 z "},"ŗ":{"ha":585,"x_min":-64,"x_max":636,"o":"m 571 772 q 636 765 611 772 l 591 568 q 524 579 561 579 q 386 517 445 579 q 301 339 326 455 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 571 772 431 772 m -64 -289 q -20 -189 -47 -254 q 20 -85 7 -123 l 212 -85 l 212 -98 q 147 -198 189 -140 q 58 -307 104 -255 l -64 -307 l -64 -289 z "},"Ř":{"ha":846,"x_min":36,"x_max":849,"o":"m 359 551 l 412 551 q 551 590 501 551 q 600 708 600 629 q 568 791 600 764 q 467 819 536 819 l 416 819 l 359 551 m 323 380 l 243 0 l 36 0 l 245 991 l 489 991 q 730 922 650 991 q 811 720 811 853 q 755 535 811 612 q 593 421 699 458 l 770 0 l 545 0 l 404 380 l 323 380 m 300 1293 l 435 1293 q 545 1179 477 1257 q 702 1293 623 1243 l 849 1293 l 849 1276 q 649 1071 705 1142 l 420 1071 q 370 1167 405 1107 q 300 1276 334 1227 l 300 1293 z "},"ř":{"ha":585,"x_min":25,"x_max":724,"o":"m 571 772 q 636 765 611 772 l 591 568 q 524 579 561 579 q 386 517 445 579 q 301 339 326 455 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 571 772 431 772 m 176 1064 l 310 1064 q 420 950 353 1028 q 577 1064 498 1014 l 724 1064 l 724 1047 q 524 842 581 913 l 295 842 q 245 938 280 878 q 176 1047 210 998 l 176 1064 z "},"Ś":{"ha":736,"x_min":28,"x_max":776,"o":"m 642 293 q 541 69 642 151 q 269 -14 441 -14 q 28 47 119 -14 l 28 233 q 271 160 159 160 q 389 189 347 160 q 432 268 432 218 q 423 319 432 297 q 397 360 414 341 q 313 429 380 379 q 181 562 219 496 q 143 704 143 628 q 185 860 143 791 q 305 967 227 929 q 484 1006 382 1006 q 753 939 631 1006 l 679 781 q 484 831 573 831 q 391 800 427 831 q 355 720 355 770 q 378 647 355 678 q 478 566 400 616 q 601 446 560 511 q 642 293 642 380 m 398 1088 q 549 1293 452 1147 l 776 1293 l 776 1282 q 671 1178 745 1244 q 540 1071 598 1113 l 398 1071 l 398 1088 z "},"ś":{"ha":657,"x_min":16,"x_max":678,"o":"m 562 250 q 478 55 562 123 q 243 -14 393 -14 q 116 -3 170 -14 q 16 31 62 7 l 16 199 q 232 138 122 138 q 321 160 286 138 q 355 220 355 182 q 330 272 355 249 q 241 330 305 295 q 127 422 159 376 q 94 530 94 468 q 169 709 94 646 q 383 772 244 772 q 629 708 519 772 l 562 562 q 387 619 467 619 q 325 602 349 619 q 301 555 301 585 q 323 509 301 529 q 404 458 345 489 q 525 366 488 416 q 562 250 562 315 m 300 859 q 451 1064 354 918 l 678 1064 l 678 1053 q 574 949 647 1015 q 442 842 500 884 l 300 842 l 300 859 z "},"Ŝ":{"ha":736,"x_min":28,"x_max":762,"o":"m 642 293 q 541 69 642 151 q 269 -14 441 -14 q 28 47 119 -14 l 28 233 q 271 160 159 160 q 389 189 347 160 q 432 268 432 218 q 423 319 432 297 q 397 360 414 341 q 313 429 380 379 q 181 562 219 496 q 143 704 143 628 q 185 860 143 791 q 305 967 227 929 q 484 1006 382 1006 q 753 939 631 1006 l 679 781 q 484 831 573 831 q 391 800 427 831 q 355 720 355 770 q 378 647 355 678 q 478 566 400 616 q 601 446 560 511 q 642 293 642 380 m 762 1071 l 628 1071 q 518 1185 585 1107 q 361 1071 447 1125 l 214 1071 l 214 1088 q 317 1187 256 1126 q 414 1293 378 1249 l 643 1293 q 693 1197 658 1257 q 762 1088 728 1137 l 762 1071 z "},"ŝ":{"ha":657,"x_min":16,"x_max":665,"o":"m 562 250 q 478 55 562 123 q 243 -14 393 -14 q 116 -3 170 -14 q 16 31 62 7 l 16 199 q 232 138 122 138 q 321 160 286 138 q 355 220 355 182 q 330 272 355 249 q 241 330 305 295 q 127 422 159 376 q 94 530 94 468 q 169 709 94 646 q 383 772 244 772 q 629 708 519 772 l 562 562 q 387 619 467 619 q 325 602 349 619 q 301 555 301 585 q 323 509 301 529 q 404 458 345 489 q 525 366 488 416 q 562 250 562 315 m 665 842 l 530 842 q 420 956 488 878 q 263 842 349 896 l 116 842 l 116 859 q 220 958 159 897 q 316 1064 281 1019 l 545 1064 q 595 967 560 1027 q 665 859 631 907 l 665 842 z "},"Ş":{"ha":736,"x_min":28,"x_max":753,"o":"m 642 293 q 541 69 642 151 q 269 -14 441 -14 q 28 47 119 -14 l 28 233 q 271 160 159 160 q 389 189 347 160 q 432 268 432 218 q 423 319 432 297 q 397 360 414 341 q 313 429 380 379 q 181 562 219 496 q 143 704 143 628 q 185 860 143 791 q 305 967 227 929 q 484 1006 382 1006 q 753 939 631 1006 l 679 781 q 484 831 573 831 q 391 800 427 831 q 355 720 355 770 q 378 647 355 678 q 478 566 400 616 q 601 446 560 511 q 642 293 642 380 m 419 -170 q 363 -291 419 -248 q 204 -334 307 -334 q 101 -318 146 -334 l 101 -204 q 186 -220 144 -220 q 255 -164 255 -220 q 234 -126 255 -141 q 159 -104 213 -111 l 224 0 l 350 0 l 323 -49 q 419 -170 419 -82 z "},"ş":{"ha":657,"x_min":16,"x_max":629,"o":"m 562 250 q 478 55 562 123 q 243 -14 393 -14 q 116 -3 170 -14 q 16 31 62 7 l 16 199 q 232 138 122 138 q 321 160 286 138 q 355 220 355 182 q 330 272 355 249 q 241 330 305 295 q 127 422 159 376 q 94 530 94 468 q 169 709 94 646 q 383 772 244 772 q 629 708 519 772 l 562 562 q 387 619 467 619 q 325 602 349 619 q 301 555 301 585 q 323 509 301 529 q 404 458 345 489 q 525 366 488 416 q 562 250 562 315 m 383 -170 q 327 -291 383 -248 q 168 -334 271 -334 q 65 -318 110 -334 l 65 -204 q 150 -220 108 -220 q 219 -164 219 -220 q 198 -126 219 -141 q 123 -104 177 -111 l 189 0 l 314 0 l 288 -49 q 383 -170 383 -82 z "},"Š":{"ha":736,"x_min":28,"x_max":794,"o":"m 642 293 q 541 69 642 151 q 269 -14 441 -14 q 28 47 119 -14 l 28 233 q 271 160 159 160 q 389 189 347 160 q 432 268 432 218 q 423 319 432 297 q 397 360 414 341 q 313 429 380 379 q 181 562 219 496 q 143 704 143 628 q 185 860 143 791 q 305 967 227 929 q 484 1006 382 1006 q 753 939 631 1006 l 679 781 q 484 831 573 831 q 391 800 427 831 q 355 720 355 770 q 378 647 355 678 q 478 566 400 616 q 601 446 560 511 q 642 293 642 380 m 245 1293 l 380 1293 q 490 1179 422 1257 q 647 1293 568 1243 l 794 1293 l 794 1276 q 594 1071 650 1142 l 365 1071 q 315 1167 350 1107 q 245 1276 279 1227 l 245 1293 z "},"š":{"ha":657,"x_min":16,"x_max":718,"o":"m 562 250 q 478 55 562 123 q 243 -14 393 -14 q 116 -3 170 -14 q 16 31 62 7 l 16 199 q 232 138 122 138 q 321 160 286 138 q 355 220 355 182 q 330 272 355 249 q 241 330 305 295 q 127 422 159 376 q 94 530 94 468 q 169 709 94 646 q 383 772 244 772 q 629 708 519 772 l 562 562 q 387 619 467 619 q 325 602 349 619 q 301 555 301 585 q 323 509 301 529 q 404 458 345 489 q 525 366 488 416 q 562 250 562 315 m 169 1064 l 303 1064 q 413 950 346 1028 q 570 1064 491 1014 l 718 1064 l 718 1047 q 517 842 574 913 l 288 842 q 238 938 273 878 q 169 1047 203 998 l 169 1064 z "},"Ț":{"ha":737,"x_min":86,"x_max":836,"o":"m 387 0 l 180 0 l 353 817 l 114 817 l 151 991 l 836 991 l 799 817 l 559 817 l 387 0 m 86 -289 q 131 -189 103 -254 q 171 -85 158 -123 l 362 -85 l 362 -98 q 297 -198 340 -140 q 208 -307 255 -255 l 86 -307 l 86 -289 z "},"ț":{"ha":570,"x_min":38,"x_max":596,"o":"m 349 151 q 458 175 393 151 l 458 22 q 278 -14 383 -14 q 129 29 176 -14 q 81 161 81 72 q 89 237 81 195 l 167 603 l 64 603 l 83 703 l 216 760 l 306 920 l 437 920 l 404 758 l 596 758 l 562 603 l 371 603 l 293 237 q 289 201 289 217 q 349 151 289 151 m 38 -289 q 82 -189 55 -254 q 123 -85 110 -123 l 314 -85 l 314 -98 q 249 -198 292 -140 q 160 -307 207 -255 l 38 -307 l 38 -289 z "},"Ť":{"ha":737,"x_min":114,"x_max":836,"o":"m 387 0 l 180 0 l 353 817 l 114 817 l 151 991 l 836 991 l 799 817 l 559 817 l 387 0 m 269 1293 l 404 1293 q 513 1179 446 1257 q 671 1293 591 1243 l 818 1293 l 818 1276 q 618 1071 674 1142 l 389 1071 q 338 1167 374 1107 q 269 1276 303 1227 l 269 1293 z "},"ť":{"ha":570,"x_min":64,"x_max":786,"o":"m 349 151 q 458 175 393 151 l 458 22 q 278 -14 383 -14 q 129 29 176 -14 q 81 161 81 72 q 89 237 81 195 l 167 603 l 64 603 l 83 703 l 216 760 l 306 920 l 437 920 l 404 758 l 596 758 l 562 603 l 371 603 l 293 237 q 289 201 289 217 q 349 151 289 151 m 510 865 q 594 1069 566 985 l 786 1069 l 786 1055 q 721 955 766 1017 q 632 847 675 894 l 510 847 l 510 865 z "},"Ŧ":{"ha":737,"x_min":113,"x_max":836,"o":"m 509 576 l 668 576 l 631 404 l 472 404 l 387 0 l 180 0 l 265 404 l 113 404 l 150 576 l 301 576 l 353 817 l 114 817 l 151 991 l 836 991 l 799 817 l 559 817 l 509 576 z "},"ŧ":{"ha":570,"x_min":21,"x_max":596,"o":"m 349 151 q 458 175 393 151 l 458 22 q 278 -14 383 -14 q 129 29 176 -14 q 81 161 81 72 q 89 237 81 195 l 111 338 l 21 338 l 49 472 l 139 472 l 167 603 l 64 603 l 83 703 l 216 760 l 306 920 l 437 920 l 404 758 l 596 758 l 562 603 l 371 603 l 343 472 l 501 472 l 473 338 l 314 338 l 293 237 q 289 201 289 217 q 349 151 289 151 z "},"Ũ":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 726 1071 q 668 1082 693 1071 q 621 1106 642 1093 q 579 1131 599 1120 q 536 1142 559 1142 q 499 1123 515 1142 q 473 1069 482 1104 l 353 1069 q 543 1279 393 1279 q 603 1268 576 1279 q 651 1243 629 1257 q 693 1219 673 1230 q 734 1208 713 1208 q 773 1226 757 1208 q 804 1280 789 1243 l 921 1280 q 726 1071 876 1071 z "},"ũ":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 621 842 q 562 853 587 842 q 515 877 536 864 q 473 902 493 890 q 431 913 453 913 q 393 894 410 913 q 367 840 376 875 l 247 840 q 437 1050 287 1050 q 497 1039 471 1050 q 545 1014 523 1027 q 587 990 568 1001 q 628 979 607 979 q 667 997 651 979 q 699 1051 684 1014 l 815 1051 q 621 842 770 842 z "},"Ū":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 439 1214 l 859 1214 l 828 1071 l 408 1071 l 439 1214 z "},"ū":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 330 985 l 750 985 l 720 842 l 300 842 l 330 985 z "},"Ŭ":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 888 1300 q 621 1071 850 1071 q 459 1120 517 1071 q 401 1255 401 1170 q 406 1300 401 1281 l 524 1300 q 548 1236 524 1256 q 628 1215 573 1215 q 714 1234 681 1215 q 760 1300 748 1252 l 888 1300 z "},"ŭ":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 787 1071 q 521 842 750 842 q 359 891 417 842 q 301 1026 301 941 q 305 1071 301 1052 l 423 1071 q 448 1006 423 1027 q 528 986 473 986 q 614 1004 581 986 q 659 1071 648 1023 l 787 1071 z "},"Ů":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 810 1232 q 762 1115 810 1160 q 637 1069 715 1069 q 516 1113 563 1069 q 469 1231 469 1156 q 516 1348 469 1305 q 637 1392 562 1392 q 761 1348 712 1392 q 810 1232 810 1303 m 703 1231 q 685 1279 703 1261 q 637 1296 666 1296 q 591 1279 609 1296 q 572 1231 572 1261 q 589 1183 572 1200 q 637 1165 605 1165 q 685 1183 666 1165 q 703 1231 703 1200 z "},"ů":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 701 1003 q 654 885 701 930 q 529 840 606 840 q 408 883 454 840 q 361 1002 361 926 q 407 1119 361 1076 q 529 1162 454 1162 q 652 1118 604 1162 q 701 1003 701 1074 m 595 1002 q 576 1049 595 1032 q 529 1067 557 1067 q 482 1049 500 1067 q 464 1002 464 1032 q 480 954 464 971 q 529 936 496 936 q 576 954 557 936 q 595 1002 595 971 z "},"Ű":{"ha":960,"x_min":96,"x_max":1038,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 406 1088 q 562 1293 483 1175 l 769 1293 l 769 1282 q 666 1182 740 1246 q 526 1071 591 1118 l 406 1071 l 406 1088 m 675 1088 q 831 1293 752 1175 l 1038 1293 l 1038 1282 q 935 1182 1009 1246 q 795 1071 861 1118 l 675 1071 l 675 1088 z "},"ű":{"ha":839,"x_min":75,"x_max":924,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 291 859 q 448 1064 368 945 l 654 1064 l 654 1053 q 551 952 625 1017 q 412 842 477 888 l 291 842 l 291 859 m 560 859 q 717 1064 637 945 l 924 1064 l 924 1053 q 820 952 895 1017 q 681 842 746 888 l 560 842 l 560 859 z "},"Ų":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 585 0 q 480 -100 505 -65 q 456 -170 456 -136 q 467 -199 456 -189 q 496 -210 477 -210 q 566 -197 526 -210 l 566 -317 q 454 -334 509 -334 q 345 -297 385 -334 q 304 -201 304 -261 q 337 -99 304 -146 q 450 0 369 -52 l 585 0 z "},"ų":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 633 0 q 528 -100 553 -65 q 504 -170 504 -136 q 515 -199 504 -189 q 545 -210 526 -210 q 614 -197 574 -210 l 614 -317 q 503 -334 557 -334 q 393 -297 433 -334 q 353 -201 353 -261 q 385 -99 353 -146 q 498 0 417 -52 l 633 0 z "},"Ŵ":{"ha":1242,"x_min":125,"x_max":1372,"o":"m 682 690 q 604 488 651 591 l 385 0 l 155 0 l 125 991 l 319 991 l 323 450 q 321 333 323 415 q 314 215 318 251 l 318 215 q 363 337 333 258 q 404 436 394 416 l 654 991 l 838 991 l 852 399 q 846 215 852 300 l 850 215 q 939 452 879 302 l 1162 991 l 1372 991 l 933 0 l 699 0 l 684 489 l 682 583 q 685 690 682 643 l 682 690 m 1030 1071 l 896 1071 q 786 1185 853 1107 q 629 1071 715 1125 l 481 1071 l 481 1088 q 585 1187 524 1126 q 682 1293 646 1249 l 911 1293 q 961 1197 926 1257 q 1030 1088 996 1137 l 1030 1071 z "},"ŵ":{"ha":1095,"x_min":85,"x_max":1165,"o":"m 581 583 q 497 367 538 463 l 339 0 l 119 0 l 85 758 l 275 758 l 278 422 l 275 309 l 271 193 l 273 193 q 283 221 277 207 q 317 314 288 236 q 349 395 347 392 l 505 758 l 728 758 l 728 395 q 721 193 728 298 l 725 193 l 744 248 q 808 422 793 389 l 957 758 l 1165 758 l 806 0 l 582 0 l 578 353 q 585 583 578 458 l 581 583 m 896 842 l 762 842 q 652 956 719 878 q 494 842 581 896 l 347 842 l 347 859 q 451 958 390 897 q 547 1064 512 1019 l 777 1064 q 827 967 791 1027 q 896 859 862 907 l 896 842 z "},"Ŷ":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 m 781 1071 l 646 1071 q 536 1185 604 1107 q 379 1071 465 1125 l 232 1071 l 232 1088 q 336 1187 275 1126 q 432 1293 397 1249 l 661 1293 q 711 1197 676 1257 q 781 1088 747 1137 l 781 1071 z "},"ŷ":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 701 842 l 566 842 q 456 956 524 878 q 299 842 385 896 l 152 842 l 152 859 q 256 958 195 897 q 352 1064 317 1019 l 581 1064 q 631 967 596 1027 q 701 859 667 907 l 701 842 z "},"Ÿ":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 m 293 1166 q 322 1246 293 1219 q 403 1274 351 1274 q 493 1200 493 1274 q 467 1121 493 1151 q 385 1092 440 1092 q 293 1166 293 1092 m 566 1166 q 594 1246 566 1219 q 675 1274 623 1274 q 743 1255 720 1274 q 766 1200 766 1236 q 739 1121 766 1151 q 657 1092 712 1092 q 566 1166 566 1092 z "},"Ź":{"ha":745,"x_min":-41,"x_max":814,"o":"m 624 0 l -41 0 l -16 136 l 511 818 l 143 818 l 179 991 l 814 991 l 786 854 l 256 174 l 660 174 l 624 0 m 399 1088 q 550 1293 453 1147 l 777 1293 l 777 1282 q 673 1178 746 1244 q 541 1071 600 1113 l 399 1071 l 399 1088 z "},"ź":{"ha":632,"x_min":-32,"x_max":701,"o":"m 507 0 l -32 0 l -8 122 l 382 600 l 113 600 l 147 758 l 656 758 l 627 623 l 243 158 l 541 158 l 507 0 m 323 859 q 473 1064 376 918 l 701 1064 l 701 1053 q 596 949 669 1015 q 465 842 523 884 l 323 842 l 323 859 z "},"Ż":{"ha":745,"x_min":-41,"x_max":814,"o":"m 624 0 l -41 0 l -16 136 l 511 818 l 143 818 l 179 991 l 814 991 l 786 854 l 256 174 l 660 174 l 624 0 m 403 1165 q 435 1254 403 1224 q 526 1284 467 1284 q 602 1263 576 1284 q 627 1203 627 1242 q 597 1115 627 1149 q 505 1082 568 1082 q 403 1165 403 1082 z "},"ż":{"ha":632,"x_min":-32,"x_max":656,"o":"m 507 0 l -32 0 l -8 122 l 382 600 l 113 600 l 147 758 l 656 758 l 627 623 l 243 158 l 541 158 l 507 0 m 309 936 q 341 1025 309 995 q 432 1055 373 1055 q 507 1034 481 1055 q 533 974 533 1013 q 503 886 533 920 q 411 852 473 852 q 309 936 309 852 z "},"Ž":{"ha":745,"x_min":-41,"x_max":814,"o":"m 624 0 l -41 0 l -16 136 l 511 818 l 143 818 l 179 991 l 814 991 l 786 854 l 256 174 l 660 174 l 624 0 m 262 1293 l 397 1293 q 507 1179 439 1257 q 664 1293 585 1243 l 811 1293 l 811 1276 q 611 1071 667 1142 l 382 1071 q 332 1167 367 1107 q 262 1276 296 1227 l 262 1293 z "},"ž":{"ha":632,"x_min":-32,"x_max":728,"o":"m 507 0 l -32 0 l -8 122 l 382 600 l 113 600 l 147 758 l 656 758 l 627 623 l 243 158 l 541 158 l 507 0 m 180 1064 l 314 1064 q 424 950 357 1028 q 581 1064 502 1014 l 728 1064 l 728 1047 q 528 842 585 913 l 299 842 q 249 938 284 878 q 180 1047 214 998 l 180 1064 z "},"ſ":{"ha":497,"x_min":-167,"x_max":652,"o":"m -49 -334 q -167 -317 -119 -334 l -167 -153 q -89 -167 -125 -167 q 28 -52 3 -167 l 212 815 q 307 1004 241 945 q 492 1063 373 1063 q 652 1029 579 1063 l 597 878 q 507 899 551 899 q 445 871 469 899 q 412 800 422 844 l 225 -82 q -49 -334 173 -334 z "},"ƒ":{"ha":765,"x_min":-21,"x_max":785,"o":"m 97 -334 q -21 -317 26 -334 l -21 -153 q 57 -167 20 -167 q 174 -52 149 -167 l 300 546 l 186 546 l 205 647 l 334 701 l 346 758 q 440 946 374 887 q 625 1006 506 1006 q 785 972 714 1006 l 730 821 q 640 842 684 842 q 578 814 602 842 q 546 743 554 787 l 538 701 l 686 701 l 653 546 l 504 546 l 371 -82 q 97 -334 319 -334 z "},"Ǻ":{"ha":872,"x_min":-83,"x_max":896,"o":"m 736 991 q 684 869 736 916 l 789 0 l 587 0 l 567 224 l 249 224 l 134 0 l -83 0 l 412 913 q 396 990 396 945 q 442 1108 396 1065 q 564 1152 488 1152 q 687 1107 638 1152 q 736 991 736 1063 m 521 1198 q 590 1258 545 1217 q 664 1331 635 1299 l 896 1331 l 896 1324 q 790 1253 857 1291 q 667 1189 724 1215 l 521 1189 l 521 1198 m 629 990 q 611 1038 629 1021 q 564 1055 592 1055 q 517 1038 535 1055 q 498 990 498 1021 q 515 942 498 960 q 564 925 531 925 q 611 942 592 925 q 629 990 629 960 m 521 779 q 456 632 492 704 l 338 400 l 557 400 l 539 610 q 529 779 532 667 l 521 779 z "},"ǻ":{"ha":818,"x_min":61,"x_max":836,"o":"m 461 1198 q 533 1261 488 1219 q 604 1331 578 1302 l 836 1331 l 836 1324 q 730 1253 797 1291 q 607 1189 664 1215 l 461 1189 l 461 1198 m 675 975 q 627 858 675 903 q 503 812 580 812 q 381 856 427 812 q 335 974 335 900 q 381 1091 335 1047 q 503 1135 427 1135 q 626 1090 577 1135 q 675 975 675 1046 m 568 974 q 550 1022 568 1004 q 503 1039 531 1039 q 456 1022 474 1039 q 437 974 437 1004 q 454 926 437 943 q 503 908 470 908 q 550 926 531 908 q 568 974 568 943 m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 z "},"Ǽ":{"ha":1243,"x_min":-83,"x_max":1291,"o":"m 1080 0 l 526 0 l 576 236 l 288 236 l 139 0 l -83 0 l 542 991 l 1291 991 l 1254 819 l 907 819 l 861 602 l 1185 602 l 1147 429 l 823 429 l 770 174 l 1117 174 l 1080 0 m 614 412 l 700 819 l 646 819 l 399 412 l 614 412 m 765 1088 q 916 1293 819 1147 l 1143 1293 l 1143 1282 q 1038 1178 1112 1244 q 907 1071 965 1113 l 765 1071 l 765 1088 z "},"ǽ":{"ha":1211,"x_min":61,"x_max":1177,"o":"m 818 -14 q 696 5 744 -14 q 616 64 648 23 l 606 0 l 478 0 l 488 98 l 484 98 q 384 13 435 39 q 271 -14 333 -14 q 116 60 172 -14 q 61 261 61 134 q 107 516 61 397 q 233 704 154 635 q 408 772 312 772 q 517 746 473 772 q 595 661 561 720 l 599 661 l 637 758 l 765 758 l 753 697 q 834 751 783 730 q 949 772 886 772 q 1116 716 1055 772 q 1177 566 1177 659 q 1063 370 1177 439 q 741 301 950 301 l 705 301 l 704 288 l 704 275 q 742 175 704 210 q 850 140 779 140 q 953 156 895 140 q 1063 199 1011 172 l 1063 45 q 818 -14 941 -14 m 351 151 q 442 197 400 151 q 509 322 484 243 q 534 488 534 401 q 512 574 534 542 q 443 607 490 607 q 356 560 397 607 q 292 434 315 513 q 268 271 268 355 q 290 182 268 214 q 351 151 312 151 m 909 625 q 797 571 850 625 q 728 439 744 517 l 758 439 q 922 472 863 439 q 981 561 981 505 q 909 625 981 625 m 643 859 q 793 1064 696 918 l 1021 1064 l 1021 1053 q 916 949 989 1015 q 785 842 843 884 l 643 842 l 643 859 z "},"Ǿ":{"ha":1014,"x_min":68,"x_max":989,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 245 35 330 -14 l 172 -58 l 68 20 l 150 122 q 83 364 83 216 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 815 956 732 1007 l 886 1044 l 989 965 l 909 867 q 971 636 971 776 m 590 836 q 435 774 505 836 q 326 603 365 712 q 288 364 288 494 q 293 296 288 342 l 697 807 q 590 836 650 836 m 768 631 l 765 685 l 366 183 q 469 158 406 158 q 623 218 553 158 q 730 386 692 279 q 768 631 768 494 m 511 1088 q 661 1293 564 1147 l 888 1293 l 888 1282 q 784 1178 857 1244 q 652 1071 711 1113 l 511 1071 l 511 1088 z "},"ǿ":{"ha":812,"x_min":29,"x_max":764,"o":"m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 199 22 268 -14 l 125 -69 l 29 4 l 110 104 q 61 278 61 177 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 618 734 553 772 l 665 794 l 764 720 l 707 648 q 751 472 751 576 m 449 612 q 351 570 394 612 q 284 455 308 528 q 261 297 261 382 l 261 289 l 509 596 q 449 612 485 612 m 368 146 q 499 236 446 146 q 553 452 553 326 l 553 463 l 310 161 q 334 151 317 156 q 368 146 351 146 m 376 859 q 527 1064 430 918 l 754 1064 l 754 1053 q 650 949 723 1015 q 518 842 576 884 l 376 842 l 376 859 z "},"Ș":{"ha":736,"x_min":28,"x_max":753,"o":"m 642 293 q 541 69 642 151 q 269 -14 441 -14 q 28 47 119 -14 l 28 233 q 271 160 159 160 q 389 189 347 160 q 432 268 432 218 q 423 319 432 297 q 397 360 414 341 q 313 429 380 379 q 181 562 219 496 q 143 704 143 628 q 185 860 143 791 q 305 967 227 929 q 484 1006 382 1006 q 753 939 631 1006 l 679 781 q 484 831 573 831 q 391 800 427 831 q 355 720 355 770 q 378 647 355 678 q 478 566 400 616 q 601 446 560 511 q 642 293 642 380 m 102 -289 q 146 -189 119 -254 q 186 -85 174 -123 l 378 -85 l 378 -98 q 313 -198 355 -140 q 224 -307 271 -255 l 102 -307 l 102 -289 z "},"ș":{"ha":657,"x_min":16,"x_max":629,"o":"m 562 250 q 478 55 562 123 q 243 -14 393 -14 q 116 -3 170 -14 q 16 31 62 7 l 16 199 q 232 138 122 138 q 321 160 286 138 q 355 220 355 182 q 330 272 355 249 q 241 330 305 295 q 127 422 159 376 q 94 530 94 468 q 169 709 94 646 q 383 772 244 772 q 629 708 519 772 l 562 562 q 387 619 467 619 q 325 602 349 619 q 301 555 301 585 q 323 509 301 529 q 404 458 345 489 q 525 366 488 416 q 562 250 562 315 m 73 -289 q 118 -189 90 -254 q 158 -85 145 -123 l 349 -85 l 349 -98 q 284 -198 327 -140 q 195 -307 242 -255 l 73 -307 l 73 -289 z "},"ˆ":{"ha":770,"x_min":211,"x_max":760,"o":"m 760 842 l 625 842 q 515 956 583 878 q 358 842 444 896 l 211 842 l 211 859 q 315 958 254 897 q 411 1064 376 1019 l 640 1064 q 690 967 655 1027 q 760 859 726 907 l 760 842 z "},"ˇ":{"ha":770,"x_min":256,"x_max":804,"o":"m 256 1064 l 390 1064 q 500 950 433 1028 q 657 1064 578 1014 l 804 1064 l 804 1047 q 604 842 661 913 l 375 842 q 325 938 360 878 q 256 1047 290 998 l 256 1064 z "},"ˉ":{"ha":743,"x_min":261,"x_max":711,"o":"m 292 985 l 711 985 l 681 842 l 261 842 l 292 985 z "},"˘":{"ha":770,"x_min":292,"x_max":778,"o":"m 778 1071 q 511 842 741 842 q 350 891 408 842 q 292 1026 292 941 q 296 1071 292 1052 l 414 1071 q 438 1006 414 1027 q 518 986 463 986 q 605 1004 571 986 q 650 1071 638 1023 l 778 1071 z "},"˙":{"ha":412,"x_min":218,"x_max":443,"o":"m 218 936 q 251 1025 218 995 q 342 1055 283 1055 q 417 1034 391 1055 q 443 974 443 1013 q 413 886 443 920 q 321 852 383 852 q 218 936 218 852 z "},"˚":{"ha":802,"x_min":361,"x_max":701,"o":"m 701 1003 q 654 885 701 930 q 529 840 606 840 q 408 883 454 840 q 361 1002 361 926 q 407 1119 361 1076 q 529 1162 454 1162 q 652 1118 604 1162 q 701 1003 701 1074 m 595 1002 q 576 1049 595 1032 q 529 1067 557 1067 q 482 1049 500 1067 q 464 1002 464 1032 q 480 954 464 971 q 529 936 496 936 q 576 954 557 936 q 595 1002 595 971 z "},"˛":{"ha":286,"x_min":-117,"x_max":164,"o":"m 164 0 q 59 -100 83 -65 q 35 -170 35 -136 q 45 -199 35 -189 q 75 -210 56 -210 q 144 -197 105 -210 l 144 -317 q 33 -334 87 -334 q -76 -297 -36 -334 q -117 -201 -117 -261 q -84 -99 -117 -146 q 29 0 -52 -52 l 164 0 z "},"˜":{"ha":770,"x_min":214,"x_max":782,"o":"m 587 842 q 529 853 554 842 q 481 877 503 864 q 440 902 460 890 q 397 913 420 913 q 360 894 376 913 q 334 840 343 875 l 214 840 q 404 1050 254 1050 q 464 1039 437 1050 q 512 1014 490 1027 q 554 990 534 1001 q 595 979 574 979 q 634 997 618 979 q 665 1051 650 1014 l 782 1051 q 587 842 737 842 z "},"˝":{"ha":770,"x_min":189,"x_max":822,"o":"m 189 859 q 346 1064 267 945 l 553 1064 l 553 1053 q 449 952 524 1017 q 310 842 375 888 l 189 842 l 189 859 m 458 859 q 615 1064 536 945 l 822 1064 l 822 1053 q 719 952 793 1017 q 579 842 644 888 l 458 842 l 458 859 z "},"΄":{"ha":770,"x_min":383,"x_max":677,"o":"m 383 863 q 485 1105 435 966 l 677 1105 l 677 1089 q 505 842 596 955 l 383 842 l 383 863 z "},"΅":{"ha":770,"x_min":232,"x_max":786,"o":"m 437 960 q 476 1050 452 988 q 518 1164 501 1113 l 694 1164 l 694 1150 q 533 942 633 1053 l 437 942 l 437 960 m 232 937 q 258 1017 232 990 q 330 1044 284 1044 q 392 1025 371 1044 q 412 971 412 1006 q 388 892 412 922 q 314 863 364 863 q 232 937 232 863 m 606 937 q 632 1017 606 990 q 704 1044 658 1044 q 765 1025 745 1044 q 786 971 786 1006 q 762 892 786 922 q 688 863 738 863 q 606 937 606 863 z "},"Ά":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 50 791 q 152 1034 102 895 l 345 1034 l 345 1018 q 172 770 263 884 l 50 770 l 50 791 z "},"·":{"ha":396,"x_min":89,"x_max":329,"o":"m 89 471 q 125 569 89 532 q 227 606 161 606 q 301 580 273 606 q 329 507 329 554 q 292 412 329 448 q 194 375 254 375 q 117 400 144 375 q 89 471 89 426 z "},"Έ":{"ha":875,"x_min":23,"x_max":900,"o":"m 690 0 l 136 0 l 345 991 l 900 991 l 863 819 l 516 819 l 471 602 l 794 602 l 757 429 l 433 429 l 379 174 l 726 174 l 690 0 m 23 791 q 125 1034 75 895 l 317 1034 l 317 1018 q 145 770 236 884 l 23 770 l 23 791 z "},"Ή":{"ha":1072,"x_min":23,"x_max":1079,"o":"m 869 0 l 662 0 l 753 428 l 433 428 l 342 0 l 136 0 l 345 991 l 553 991 l 471 603 l 790 603 l 872 991 l 1079 991 l 869 0 m 23 791 q 125 1034 75 895 l 317 1034 l 317 1018 q 145 770 236 884 l 23 770 l 23 791 z "},"Ό":{"ha":1095,"x_min":42,"x_max":1052,"o":"m 1052 636 q 985 293 1052 444 q 801 64 918 141 q 532 -14 684 -14 q 261 86 359 -14 q 164 364 164 186 q 231 695 164 544 q 416 926 298 846 q 689 1007 534 1007 q 957 909 862 1007 q 1052 636 1052 812 m 672 832 q 522 770 590 832 q 414 600 453 708 q 375 364 375 491 q 420 214 375 264 q 547 163 465 163 q 697 222 629 163 q 802 389 764 281 q 840 631 840 496 q 796 780 840 727 q 672 832 752 832 m 42 791 q 144 1034 94 895 l 336 1034 l 336 1018 q 164 770 255 884 l 42 770 l 42 791 z "},"Ύ":{"ha":994,"x_min":23,"x_max":1122,"o":"m 636 590 l 890 991 l 1122 991 l 703 379 l 622 0 l 416 0 l 497 379 l 337 991 l 549 991 l 636 590 m 23 791 q 125 1034 75 895 l 317 1034 l 317 1018 q 145 770 236 884 l 23 770 l 23 791 z "},"Ώ":{"ha":1109,"x_min":42,"x_max":1068,"o":"m 682 832 q 547 789 607 832 q 449 662 487 747 q 412 482 412 578 q 437 308 412 378 q 517 187 463 238 l 477 0 l 63 0 l 99 176 l 352 176 q 243 302 283 219 q 203 488 203 385 q 266 760 203 639 q 440 944 329 881 q 697 1007 551 1007 q 969 913 871 1007 q 1068 654 1068 820 q 995 365 1068 488 q 785 176 922 243 l 1032 176 l 995 0 l 555 0 l 595 187 q 857 629 857 341 q 812 780 857 728 q 682 832 766 832 m 42 791 q 144 1034 94 895 l 336 1034 l 336 1018 q 164 770 255 884 l 42 770 l 42 791 z "},"ΐ":{"ha":510,"x_min":48,"x_max":602,"o":"m 334 151 q 443 175 378 151 l 443 22 q 262 -14 368 -14 q 114 29 162 -14 q 65 161 65 71 q 81 268 65 197 l 184 758 l 389 758 l 283 256 q 275 200 275 216 q 334 151 275 151 m 254 960 q 293 1050 268 988 q 334 1164 317 1113 l 511 1164 l 511 1150 q 349 942 450 1053 l 254 942 l 254 960 m 48 937 q 74 1017 48 990 q 146 1044 100 1044 q 208 1025 187 1044 q 229 971 229 1006 q 204 892 229 922 q 130 863 180 863 q 48 937 48 863 m 422 937 q 448 1017 422 990 q 520 1044 474 1044 q 582 1025 561 1044 q 602 971 602 1006 q 578 892 602 922 q 504 863 554 863 q 422 937 422 863 z "},"Α":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 z "},"Β":{"ha":861,"x_min":36,"x_max":848,"o":"m 534 991 q 769 936 690 991 q 848 771 848 881 q 792 603 848 669 q 632 515 736 537 l 632 511 q 740 446 700 494 q 781 323 781 398 q 677 84 781 168 q 390 0 573 0 l 36 0 l 245 991 l 534 991 m 370 599 l 471 599 q 594 632 553 599 q 635 726 635 665 q 519 819 635 819 l 416 819 l 370 599 m 279 174 l 401 174 q 526 213 481 174 q 571 322 571 252 q 447 432 571 432 l 335 432 l 279 174 z "},"Γ":{"ha":699,"x_min":36,"x_max":798,"o":"m 240 0 l 36 0 l 245 991 l 798 991 l 761 819 l 414 819 l 240 0 z "},"Δ":{"ha":840,"x_min":-36,"x_max":761,"o":"m 427 996 l 665 996 l 761 118 l 734 0 l -36 0 l -12 122 l 427 996 m 510 796 q 471 700 499 759 l 216 175 l 567 175 l 515 689 q 510 796 510 754 z "},"Ε":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 z "},"Ζ":{"ha":745,"x_min":-41,"x_max":814,"o":"m 624 0 l -41 0 l -16 136 l 511 818 l 143 818 l 179 991 l 814 991 l 786 854 l 256 174 l 660 174 l 624 0 z "},"Η":{"ha":972,"x_min":36,"x_max":979,"o":"m 770 0 l 562 0 l 653 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 979 991 l 770 0 z "},"Θ":{"ha":1031,"x_min":83,"x_max":987,"o":"m 705 590 l 669 418 l 368 418 l 404 590 l 705 590 m 987 612 q 924 285 987 429 q 744 63 861 140 q 469 -14 626 -14 q 185 91 288 -14 q 83 376 83 195 q 152 707 83 560 q 339 931 220 854 q 612 1007 458 1007 q 889 903 791 1007 q 987 612 987 799 m 600 832 q 442 775 511 832 q 334 610 373 718 q 294 371 294 502 q 344 219 294 275 q 478 163 393 163 q 637 220 570 163 q 741 383 705 277 q 777 623 777 489 q 729 775 777 719 q 600 832 682 832 z "},"Κ":{"ha":851,"x_min":36,"x_max":979,"o":"m 774 0 l 545 0 l 401 401 l 317 354 l 243 0 l 36 0 l 245 991 l 453 991 l 350 515 l 457 654 l 734 991 l 979 991 l 576 517 l 774 0 z "},"Λ":{"ha":833,"x_min":-83,"x_max":750,"o":"m -83 0 l 424 996 l 656 996 l 750 0 l 550 0 l 510 567 q 504 796 504 644 l 484 743 q 424 597 452 656 l 134 0 l -83 0 z "},"Μ":{"ha":1222,"x_min":36,"x_max":1229,"o":"m 568 250 l 942 991 l 1229 991 l 1019 0 l 829 0 l 928 469 q 999 768 964 637 l 996 768 l 610 0 l 419 0 l 378 768 l 375 768 q 349 612 368 709 q 222 0 331 515 l 36 0 l 245 991 l 519 991 l 566 250 l 568 250 z "},"Ν":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 846 0 l 614 0 l 372 750 l 368 750 l 366 728 q 321 467 344 582 l 222 0 l 36 0 l 245 991 l 488 991 l 718 261 l 721 261 q 747 408 729 313 q 869 991 766 504 l 1055 991 l 846 0 z "},"Ξ":{"ha":724,"x_min":-29,"x_max":765,"o":"m 178 602 l 631 602 l 593 429 l 140 429 l 178 602 m 207 991 l 765 991 l 729 819 l 171 819 l 207 991 m 618 174 l 582 0 l -29 0 l 5 174 l 618 174 z "},"Ο":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 z "},"Π":{"ha":965,"x_min":36,"x_max":972,"o":"m 762 0 l 555 0 l 729 817 l 416 817 l 243 0 l 36 0 l 245 991 l 972 991 l 762 0 z "},"Ρ":{"ha":806,"x_min":36,"x_max":807,"o":"m 354 525 l 392 525 q 544 572 488 525 q 599 697 599 618 q 467 819 599 819 l 416 819 l 354 525 m 807 703 q 692 446 807 539 q 375 353 577 353 l 317 353 l 243 0 l 36 0 l 245 991 l 475 991 q 723 919 639 991 q 807 703 807 847 z "},"Σ":{"ha":754,"x_min":-29,"x_max":802,"o":"m -29 0 l 4 164 l 372 507 l 154 833 l 187 991 l 802 991 l 765 819 l 386 819 l 602 493 l 262 174 l 667 174 l 631 0 l -29 0 z "},"Τ":{"ha":737,"x_min":114,"x_max":836,"o":"m 387 0 l 180 0 l 353 817 l 114 817 l 151 991 l 836 991 l 799 817 l 559 817 l 387 0 z "},"Υ":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 z "},"Φ":{"ha":1133,"x_min":83,"x_max":1090,"o":"m 378 -14 l 411 138 q 238 184 311 145 q 124 297 164 224 q 83 468 83 370 q 210 767 83 659 q 570 884 336 875 l 595 1006 l 787 1006 l 762 884 q 1005 785 920 870 q 1090 557 1090 700 q 962 252 1090 362 q 604 139 833 142 l 571 -14 l 378 -14 m 639 301 q 821 377 758 309 q 884 557 884 444 q 844 674 884 631 q 728 720 804 717 l 639 301 m 534 720 q 355 647 420 713 q 290 467 290 581 q 330 347 290 391 q 446 301 370 304 l 534 720 z "},"Χ":{"ha":842,"x_min":-79,"x_max":950,"o":"m 762 0 l 538 0 l 421 368 l 153 0 l -79 0 l 311 518 l 150 991 l 367 991 l 471 640 l 717 991 l 950 991 l 581 500 l 762 0 z "},"Ψ":{"ha":1133,"x_min":121,"x_max":1185,"o":"m 656 294 l 642 294 l 579 0 l 386 0 l 450 294 l 440 294 q 205 365 290 294 q 121 559 121 435 q 136 693 121 620 l 200 991 l 400 991 l 332 667 q 322 587 322 621 q 360 493 322 521 q 473 465 397 465 l 485 465 l 596 991 l 789 991 l 677 465 l 689 465 q 840 512 789 465 q 914 664 891 559 l 983 991 l 1185 991 l 1109 640 q 656 294 1036 294 z "},"Ω":{"ha":1006,"x_min":-41,"x_max":964,"o":"m 578 832 q 443 789 503 832 q 345 662 382 747 q 307 482 307 578 q 333 308 307 378 q 412 187 359 238 l 372 0 l -41 0 l -5 176 l 248 176 q 139 302 179 219 q 98 488 98 385 q 161 760 98 639 q 336 944 224 881 q 593 1007 447 1007 q 865 913 766 1007 q 964 654 964 820 q 890 365 964 488 q 681 176 817 243 l 928 176 l 890 0 l 450 0 l 490 187 q 753 629 753 341 q 707 780 753 728 q 578 832 662 832 z "},"Ϋ":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 m 293 1166 q 322 1246 293 1219 q 403 1274 351 1274 q 493 1200 493 1274 q 467 1121 493 1151 q 385 1092 440 1092 q 293 1166 293 1092 m 566 1166 q 594 1246 566 1219 q 675 1274 623 1274 q 743 1255 720 1274 q 766 1200 766 1236 q 739 1121 766 1151 q 657 1092 712 1092 q 566 1166 566 1092 z "},"ά":{"ha":842,"x_min":61,"x_max":842,"o":"m 602 656 q 634 713 614 684 q 669 758 654 743 l 842 758 q 780 620 811 702 q 730 457 748 538 l 685 240 q 681 204 681 220 q 722 160 681 160 q 766 168 747 160 l 766 7 q 654 -14 724 -14 q 488 98 518 -14 l 484 98 q 379 10 429 34 q 268 -14 330 -14 q 115 59 170 -14 q 61 261 61 131 q 106 523 61 405 q 234 706 152 640 q 418 772 316 772 q 520 746 478 772 q 597 656 563 720 l 602 656 m 358 151 q 450 199 410 151 q 512 338 489 247 q 534 488 534 429 q 513 574 534 542 q 447 607 491 607 q 358 561 399 607 q 292 438 317 515 q 268 281 268 362 q 290 182 268 214 q 358 151 312 151 m 429 863 q 531 1105 481 966 l 724 1105 l 724 1089 q 551 842 642 955 l 429 842 l 429 863 z "},"έ":{"ha":713,"x_min":26,"x_max":726,"o":"m 517 323 l 416 323 q 288 297 335 323 q 241 225 241 271 q 272 166 241 187 q 361 146 302 146 q 480 160 423 146 q 600 207 536 174 l 600 40 q 328 -14 492 -14 q 107 39 188 -14 q 26 186 26 92 q 249 397 26 361 l 249 401 q 165 461 195 422 q 136 547 136 499 q 220 713 136 654 q 453 772 303 772 q 726 714 619 772 l 664 564 q 554 607 602 595 q 458 619 507 619 q 357 597 393 619 q 322 534 322 576 q 355 483 322 499 q 456 467 388 467 l 547 467 l 517 323 m 381 863 q 483 1105 433 966 l 675 1105 l 675 1089 q 503 842 594 955 l 381 842 l 381 863 z "},"ή":{"ha":839,"x_min":25,"x_max":768,"o":"m 591 -334 l 387 -334 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 591 -334 m 428 863 q 530 1105 479 966 l 722 1105 l 722 1089 q 550 842 641 955 l 428 842 l 428 863 z "},"ί":{"ha":510,"x_min":65,"x_max":520,"o":"m 334 151 q 443 175 378 151 l 443 22 q 262 -14 368 -14 q 114 29 162 -14 q 65 161 65 71 q 81 268 65 197 l 184 758 l 389 758 l 283 256 q 275 200 275 216 q 334 151 275 151 m 226 863 q 328 1105 277 966 l 520 1105 l 520 1089 q 348 842 439 955 l 226 842 l 226 863 z "},"ΰ":{"ha":856,"x_min":81,"x_max":794,"o":"m 361 -14 q 153 54 224 -14 q 81 244 81 121 q 92 346 81 292 l 179 758 l 382 758 l 294 340 q 285 258 285 299 q 380 153 285 153 q 590 758 590 153 l 794 758 q 767 393 794 534 q 687 165 740 252 q 553 32 635 78 q 361 -14 471 -14 m 446 960 q 485 1050 460 988 q 526 1164 509 1113 l 703 1164 l 703 1150 q 541 942 642 1053 l 446 942 l 446 960 m 240 937 q 266 1017 240 990 q 338 1044 292 1044 q 400 1025 379 1044 q 420 971 420 1006 q 396 892 420 922 q 322 863 372 863 q 240 937 240 863 m 614 937 q 640 1017 614 990 q 712 1044 666 1044 q 773 1025 753 1044 q 794 971 794 1006 q 770 892 794 922 q 696 863 746 863 q 614 937 614 863 z "},"α":{"ha":842,"x_min":61,"x_max":842,"o":"m 602 656 q 634 713 614 684 q 669 758 654 743 l 842 758 q 780 620 811 702 q 730 457 748 538 l 685 240 q 681 204 681 220 q 722 160 681 160 q 766 168 747 160 l 766 7 q 654 -14 724 -14 q 488 98 518 -14 l 484 98 q 379 10 429 34 q 268 -14 330 -14 q 115 59 170 -14 q 61 261 61 131 q 106 523 61 405 q 234 706 152 640 q 418 772 316 772 q 520 746 478 772 q 597 656 563 720 l 602 656 m 358 151 q 450 199 410 151 q 512 338 489 247 q 534 488 534 429 q 513 574 534 542 q 447 607 491 607 q 358 561 399 607 q 292 438 317 515 q 268 281 268 362 q 290 182 268 214 q 358 151 312 151 z "},"β":{"ha":861,"x_min":-45,"x_max":835,"o":"m 545 1063 q 759 1000 683 1063 q 835 825 835 937 q 772 639 835 706 q 596 553 709 572 q 729 479 681 537 q 778 330 778 420 q 734 148 778 229 q 614 27 690 67 q 436 -14 538 -14 q 336 -2 382 -14 q 239 37 290 9 l 161 -334 l -45 -334 l 189 775 q 306 993 220 924 q 545 1063 392 1063 m 533 901 q 442 861 477 901 q 390 736 408 820 l 272 193 q 326 163 290 175 q 397 151 361 151 q 518 202 474 151 q 562 339 562 254 q 527 433 562 401 q 424 464 491 464 l 392 464 l 427 628 l 467 628 q 583 674 541 628 q 625 804 625 720 q 600 876 625 850 q 533 901 575 901 z "},"γ":{"ha":711,"x_min":40,"x_max":791,"o":"m 258 -334 l 40 -334 q 164 9 75 -159 l 69 758 l 269 758 q 295 431 286 545 q 302 205 304 317 l 306 205 q 331 269 316 233 q 362 337 347 304 q 572 758 377 369 l 791 758 l 418 72 q 315 -144 351 -51 q 258 -334 279 -237 z "},"δ":{"ha":817,"x_min":37,"x_max":835,"o":"m 359 628 q 257 821 257 713 q 338 998 257 933 q 558 1063 420 1063 q 701 1045 634 1063 q 835 986 768 1027 l 754 840 q 559 909 648 909 q 487 888 514 909 q 460 828 460 866 q 467 791 460 808 q 489 758 473 775 q 575 684 505 741 q 733 387 733 557 q 627 95 733 203 q 335 -14 522 -14 q 118 58 198 -14 q 37 253 37 130 q 121 490 37 391 q 359 628 205 589 m 358 153 q 472 217 427 153 q 518 382 518 281 q 449 536 518 481 q 308 435 363 507 q 253 273 253 362 q 279 184 253 216 q 358 153 305 153 z "},"ε":{"ha":713,"x_min":26,"x_max":726,"o":"m 517 323 l 416 323 q 288 297 335 323 q 241 225 241 271 q 272 166 241 187 q 361 146 302 146 q 480 160 423 146 q 600 207 536 174 l 600 40 q 328 -14 492 -14 q 107 39 188 -14 q 26 186 26 92 q 249 397 26 361 l 249 401 q 165 461 195 422 q 136 547 136 499 q 220 713 136 654 q 453 772 303 772 q 726 714 619 772 l 664 564 q 554 607 602 595 q 458 619 507 619 q 357 597 393 619 q 322 534 322 576 q 355 483 322 499 q 456 467 388 467 l 547 467 l 517 323 z "},"ζ":{"ha":643,"x_min":61,"x_max":779,"o":"m 61 297 q 103 496 61 403 q 229 680 146 589 q 500 913 313 770 q 378 904 447 904 l 216 904 l 250 1055 l 779 1055 l 753 932 q 461 678 562 779 q 314 494 360 577 q 268 326 268 410 q 297 238 268 275 q 389 174 326 202 q 493 113 460 140 q 543 53 526 86 q 559 -25 559 20 q 530 -141 559 -87 q 433 -257 500 -195 l 220 -257 q 327 -137 300 -176 q 353 -66 353 -97 q 334 -26 353 -43 q 260 17 315 -8 q 108 132 155 64 q 61 297 61 199 z "},"η":{"ha":839,"x_min":25,"x_max":768,"o":"m 591 -334 l 387 -334 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 591 -334 z "},"θ":{"ha":812,"x_min":68,"x_max":789,"o":"m 334 -14 q 136 65 203 -14 q 68 293 68 144 q 88 505 68 387 q 149 740 109 623 q 242 928 190 858 q 365 1034 294 998 q 529 1071 435 1071 q 723 991 658 1071 q 789 761 789 911 q 731 377 789 581 q 575 79 673 172 q 334 -14 476 -14 m 349 136 q 454 215 410 136 q 536 456 498 293 l 290 456 q 269 262 269 342 q 349 136 269 136 m 513 921 q 323 610 397 921 l 568 610 q 587 802 587 717 q 569 888 587 856 q 513 921 551 921 z "},"ι":{"ha":510,"x_min":65,"x_max":443,"o":"m 334 151 q 443 175 378 151 l 443 22 q 262 -14 368 -14 q 114 29 162 -14 q 65 161 65 71 q 81 268 65 197 l 184 758 l 389 758 l 283 256 q 275 200 275 216 q 334 151 275 151 z "},"κ":{"ha":789,"x_min":25,"x_max":857,"o":"m 624 758 l 857 758 l 519 416 l 713 0 l 485 0 l 361 285 l 279 236 l 229 0 l 25 0 l 186 758 l 390 758 q 331 501 342 542 q 311 432 320 460 l 314 432 l 624 758 z "},"λ":{"ha":794,"x_min":-62,"x_max":732,"o":"m 353 720 l 346 782 q 319 866 340 842 q 256 890 298 890 q 187 882 226 890 l 163 1048 q 293 1064 222 1064 q 462 1005 403 1064 q 539 817 522 945 l 608 297 q 636 190 618 219 q 686 160 653 160 q 732 167 708 160 l 732 8 q 603 -14 682 -14 q 484 31 525 -14 q 429 171 443 76 l 410 307 q 397 469 402 357 q 365 394 382 437 q 326 311 348 352 l 160 0 l -62 0 l 353 720 z "},"μ":{"ha":847,"x_min":-46,"x_max":823,"o":"m 288 236 q 309 173 288 195 q 363 151 330 151 q 473 223 424 151 q 553 440 522 296 l 619 758 l 823 758 l 663 0 l 507 0 l 519 119 l 515 119 q 335 -14 436 -14 q 274 0 300 -14 q 235 32 248 13 l 231 32 q 216 -62 225 -13 q 160 -334 207 -112 l -46 -334 l 186 758 l 390 758 l 298 321 q 288 236 288 273 z "},"ν":{"ha":764,"x_min":69,"x_max":777,"o":"m 69 758 l 269 758 l 311 340 q 318 184 318 275 q 467 426 408 291 q 568 758 526 560 l 777 758 q 633 335 732 516 q 366 0 534 153 l 164 0 l 69 758 z "},"ξ":{"ha":643,"x_min":62,"x_max":733,"o":"m 575 478 l 528 478 q 337 434 406 478 q 268 313 268 391 q 292 238 268 267 q 389 174 315 209 q 499 107 470 133 q 544 49 529 81 q 559 -25 559 17 q 530 -141 559 -87 q 433 -257 500 -195 l 220 -257 q 323 -139 296 -180 q 350 -66 350 -98 q 330 -23 350 -41 q 260 17 310 -6 q 110 127 157 64 q 62 278 62 191 q 309 557 62 493 l 309 561 q 207 615 243 576 q 171 708 171 654 q 223 834 171 784 q 390 913 276 884 q 225 904 264 904 l 189 904 l 222 1055 l 733 1055 l 703 913 l 686 913 q 523 891 595 913 q 415 829 451 869 q 379 732 379 788 q 419 649 379 677 q 536 621 458 621 l 606 621 l 575 478 z "},"ο":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 z "},"π":{"ha":993,"x_min":64,"x_max":1018,"o":"m 796 149 q 885 171 840 149 l 885 24 q 717 -14 817 -14 q 581 30 628 -14 q 533 155 533 73 q 537 197 533 174 q 618 603 541 221 l 432 603 l 304 0 l 97 0 l 227 603 l 64 603 l 83 703 l 216 758 l 1018 758 l 986 603 l 823 603 l 750 236 q 745 197 745 209 q 796 149 745 149 z "},"ρ":{"ha":827,"x_min":-45,"x_max":765,"o":"m 765 478 q 721 223 765 336 q 595 48 677 111 q 410 -14 514 -14 q 235 71 299 -14 q 218 -45 229 15 q 158 -334 207 -104 l -45 -334 l 110 400 q 186 622 141 547 q 304 735 232 697 q 484 772 377 772 q 690 694 616 772 q 765 478 765 616 m 471 607 q 376 554 412 607 q 317 390 340 500 l 279 211 q 380 151 313 151 q 467 195 427 151 q 532 323 507 239 q 558 481 558 407 q 536 574 558 541 q 471 607 513 607 z "},"ς":{"ha":643,"x_min":61,"x_max":685,"o":"m 268 330 q 294 240 268 276 q 389 174 321 204 q 493 113 460 140 q 543 53 526 86 q 559 -25 559 20 q 530 -141 559 -87 q 433 -257 500 -195 l 220 -257 q 323 -139 296 -180 q 350 -66 350 -98 q 329 -21 350 -39 q 260 20 308 -2 q 107 135 153 68 q 61 302 61 202 q 116 544 61 431 q 262 714 172 656 q 468 772 353 772 q 685 724 583 772 l 623 568 q 471 607 537 607 q 368 569 414 607 q 295 466 321 531 q 268 330 268 401 z "},"σ":{"ha":859,"x_min":61,"x_max":908,"o":"m 745 400 q 715 244 745 326 q 635 105 686 162 q 514 17 585 48 q 355 -14 444 -14 q 140 66 219 -14 q 61 288 61 146 q 115 537 61 431 q 273 701 170 644 q 517 758 376 758 l 908 758 l 876 607 l 684 607 q 727 523 709 576 q 745 400 745 470 m 498 607 q 375 566 427 607 q 294 453 322 526 q 267 292 267 381 q 368 153 267 153 q 496 241 447 153 q 546 463 546 330 q 518 607 546 538 l 498 607 z "},"τ":{"ha":693,"x_min":64,"x_max":720,"o":"m 437 151 q 547 175 481 151 l 547 22 q 367 -14 472 -14 q 218 29 267 -14 q 170 161 170 71 q 178 237 170 195 l 256 603 l 64 603 l 83 703 l 212 758 l 720 758 l 686 603 l 460 603 l 382 237 q 378 201 378 217 q 437 151 378 151 z "},"υ":{"ha":856,"x_min":81,"x_max":794,"o":"m 361 -14 q 153 54 224 -14 q 81 244 81 121 q 92 346 81 292 l 179 758 l 382 758 l 294 340 q 285 258 285 299 q 380 153 285 153 q 590 758 590 153 l 794 758 q 767 393 794 534 q 687 165 740 252 q 553 32 635 78 q 361 -14 471 -14 z "},"φ":{"ha":1061,"x_min":61,"x_max":1000,"o":"m 567 154 q 687 212 636 165 q 765 335 738 260 q 793 498 793 410 q 729 619 793 619 q 642 500 669 619 l 567 154 m 269 -334 l 340 -7 q 137 94 212 10 q 61 313 61 178 q 119 564 61 450 q 309 786 178 677 l 439 667 q 309 491 349 575 q 269 319 269 407 q 298 205 269 245 q 372 153 326 164 l 447 503 q 548 709 479 645 q 736 772 617 772 q 930 694 861 772 q 1000 481 1000 616 q 943 229 1000 339 q 779 57 886 119 q 532 -12 672 -6 l 467 -334 l 269 -334 z "},"χ":{"ha":766,"x_min":-176,"x_max":854,"o":"m 208 772 q 335 725 292 772 q 395 567 378 677 l 412 443 l 629 758 l 854 758 l 465 233 l 515 -81 q 538 -140 522 -120 q 587 -160 554 -160 q 657 -150 618 -160 l 657 -311 q 525 -334 591 -334 q 395 -287 439 -334 q 335 -131 351 -239 l 307 60 l 46 -334 l -176 -334 l 257 272 l 221 498 q 198 573 212 551 q 155 595 184 595 q 106 585 132 595 l 71 746 q 208 772 139 772 z "},"ψ":{"ha":1122,"x_min":81,"x_max":1061,"o":"m 794 1054 l 602 146 q 796 314 734 168 q 857 758 857 461 l 1061 758 q 1008 318 1061 476 q 846 77 956 159 q 567 -20 737 -5 l 500 -334 l 304 -334 l 371 -20 q 155 62 229 -5 q 81 244 81 129 q 92 346 81 292 l 179 758 l 382 758 l 294 340 q 285 258 285 299 q 316 176 285 206 q 406 143 347 146 l 599 1054 l 794 1054 z "},"ω":{"ha":1139,"x_min":61,"x_max":1078,"o":"m 297 -14 q 123 58 184 -14 q 61 258 61 130 q 228 758 61 493 l 433 758 q 304 508 352 639 q 257 264 257 376 q 334 147 257 147 q 410 187 381 147 q 457 317 438 227 l 500 517 l 693 517 q 651 322 665 389 q 637 225 637 256 q 705 147 637 147 q 795 200 754 147 q 860 354 836 254 q 885 564 885 454 q 864 758 885 666 l 1057 758 q 1078 579 1078 673 q 981 145 1078 304 q 710 -14 884 -14 q 524 123 562 -14 q 424 18 479 50 q 297 -14 369 -14 z "},"ϊ":{"ha":510,"x_min":65,"x_max":574,"o":"m 334 151 q 443 175 378 151 l 443 22 q 262 -14 368 -14 q 114 29 162 -14 q 65 161 65 71 q 81 268 65 197 l 184 758 l 389 758 l 283 256 q 275 200 275 216 q 334 151 275 151 m 102 937 q 131 1017 102 990 q 212 1044 159 1044 q 302 971 302 1044 q 275 892 302 922 q 193 863 249 863 q 102 937 102 863 m 374 937 q 403 1017 374 990 q 484 1044 431 1044 q 551 1025 528 1044 q 574 971 574 1006 q 548 892 574 922 q 466 863 521 863 q 374 937 374 863 z "},"ϋ":{"ha":856,"x_min":81,"x_max":794,"o":"m 361 -14 q 153 54 224 -14 q 81 244 81 121 q 92 346 81 292 l 179 758 l 382 758 l 294 340 q 285 258 285 299 q 380 153 285 153 q 590 758 590 153 l 794 758 q 767 393 794 534 q 687 165 740 252 q 553 32 635 78 q 361 -14 471 -14 m 272 937 q 301 1017 272 990 q 382 1044 330 1044 q 472 971 472 1044 q 446 892 472 922 q 363 863 419 863 q 272 937 272 863 m 545 937 q 573 1017 545 990 q 654 1044 602 1044 q 722 1025 699 1044 q 745 971 745 1006 q 718 892 745 922 q 636 863 691 863 q 545 937 545 863 z "},"ό":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 404 863 q 506 1105 456 966 l 699 1105 l 699 1089 q 526 842 617 955 l 404 842 l 404 863 z "},"ύ":{"ha":856,"x_min":81,"x_max":794,"o":"m 361 -14 q 153 54 224 -14 q 81 244 81 121 q 92 346 81 292 l 179 758 l 382 758 l 294 340 q 285 258 285 299 q 380 153 285 153 q 590 758 590 153 l 794 758 q 767 393 794 534 q 687 165 740 252 q 553 32 635 78 q 361 -14 471 -14 m 416 863 q 518 1105 468 966 l 711 1105 l 711 1089 q 538 842 629 955 l 416 842 l 416 863 z "},"ώ":{"ha":1139,"x_min":61,"x_max":1078,"o":"m 297 -14 q 123 58 184 -14 q 61 258 61 130 q 228 758 61 493 l 433 758 q 304 508 352 639 q 257 264 257 376 q 334 147 257 147 q 410 187 381 147 q 457 317 438 227 l 500 517 l 693 517 q 651 322 665 389 q 637 225 637 256 q 705 147 637 147 q 795 200 754 147 q 860 354 836 254 q 885 564 885 454 q 864 758 885 666 l 1057 758 q 1078 579 1078 673 q 981 145 1078 304 q 710 -14 884 -14 q 524 123 562 -14 q 424 18 479 50 q 297 -14 369 -14 m 570 863 q 672 1105 622 966 l 865 1105 l 865 1089 q 692 842 783 955 l 570 842 l 570 863 z "},"Ё":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 309 1166 q 338 1246 309 1219 q 419 1274 367 1274 q 509 1200 509 1274 q 483 1121 509 1151 q 401 1092 456 1092 q 309 1166 309 1092 m 582 1166 q 610 1246 582 1219 q 692 1274 639 1274 q 759 1255 736 1274 q 782 1200 782 1236 q 755 1121 782 1151 q 673 1092 728 1092 q 582 1166 582 1092 z "},"Ђ":{"ha":1031,"x_min":114,"x_max":940,"o":"m 632 -14 q 500 12 553 -14 l 500 184 q 600 158 554 158 q 675 184 650 158 q 714 267 701 210 q 730 348 726 324 q 732 379 733 372 q 710 439 732 420 q 642 457 689 457 l 484 457 l 386 0 l 179 0 l 353 817 l 114 817 l 151 991 l 829 991 l 791 817 l 559 817 l 521 632 l 685 632 q 873 573 806 632 q 940 408 940 514 q 938 359 940 382 q 918 242 936 337 q 867 94 901 148 q 780 14 834 39 q 632 -14 726 -12 z "},"Ѓ":{"ha":699,"x_min":36,"x_max":798,"o":"m 240 0 l 36 0 l 245 991 l 798 991 l 761 819 l 414 819 l 240 0 m 412 1088 q 563 1293 466 1147 l 790 1293 l 790 1282 q 686 1178 759 1244 q 554 1071 612 1113 l 412 1071 l 412 1088 z "},"Є":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 440 767 515 832 q 328 586 366 703 l 689 586 l 653 414 l 296 414 l 294 393 l 294 372 q 489 163 294 163 q 718 215 588 163 l 718 39 q 447 -14 591 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 766 990 696 1007 q 905 936 835 974 l 825 766 q 725 813 777 794 q 614 832 673 832 z "},"Ѕ":{"ha":736,"x_min":28,"x_max":753,"o":"m 642 293 q 541 69 642 151 q 269 -14 441 -14 q 28 47 119 -14 l 28 233 q 271 160 159 160 q 389 189 347 160 q 432 268 432 218 q 423 319 432 297 q 397 360 414 341 q 313 429 380 379 q 181 562 219 496 q 143 704 143 628 q 185 860 143 791 q 305 967 227 929 q 484 1006 382 1006 q 753 939 631 1006 l 679 781 q 484 831 573 831 q 391 800 427 831 q 355 720 355 770 q 378 647 355 678 q 478 566 400 616 q 601 446 560 511 q 642 293 642 380 z "},"Ј":{"ha":460,"x_min":-218,"x_max":468,"o":"m -92 -292 q -218 -273 -155 -292 l -218 -102 q -107 -115 -159 -115 q 2 -74 -40 -115 q 62 56 43 -33 l 261 991 l 468 991 l 262 26 q 143 -216 227 -140 q -92 -292 60 -292 z "},"Љ":{"ha":1331,"x_min":-41,"x_max":1258,"o":"m 880 611 l 926 611 q 1173 541 1087 611 q 1258 340 1258 471 q 1151 88 1258 176 q 842 0 1044 0 l 545 0 l 717 817 l 545 817 q 435 425 491 600 q 330 158 380 251 q 219 26 280 66 q 56 -14 157 -14 q -41 3 1 -14 l -41 175 q 26 161 -5 161 q 99 183 71 161 q 155 252 127 204 q 217 399 182 299 q 297 651 253 499 q 389 991 340 803 l 961 991 l 880 611 m 787 172 l 868 172 q 1002 213 956 172 q 1048 334 1048 254 q 1016 411 1048 384 q 918 439 984 439 l 844 439 l 787 172 z "},"Њ":{"ha":1303,"x_min":36,"x_max":1231,"o":"m 1231 343 q 1125 89 1231 178 q 821 0 1019 0 l 517 0 l 610 439 l 336 439 l 243 0 l 36 0 l 245 991 l 453 991 l 372 611 l 644 611 l 726 991 l 933 991 l 852 611 l 911 611 q 1149 542 1067 611 q 1231 343 1231 473 m 760 172 l 846 172 q 976 213 930 172 q 1021 329 1021 254 q 890 439 1021 439 l 817 439 l 760 172 z "},"Ћ":{"ha":1031,"x_min":114,"x_max":939,"o":"m 732 374 q 707 438 732 420 q 631 457 682 457 l 484 457 l 386 0 l 179 0 l 353 817 l 114 817 l 151 991 l 829 991 l 791 817 l 559 817 l 521 632 l 673 632 q 872 571 806 632 q 939 401 939 510 q 924 283 939 359 l 867 0 l 657 0 l 725 319 q 732 374 732 353 z "},"Ќ":{"ha":827,"x_min":36,"x_max":954,"o":"m 760 0 l 530 0 l 346 488 l 243 0 l 36 0 l 245 991 l 453 991 l 354 528 l 721 991 l 954 991 l 559 501 l 760 0 m 476 1088 q 627 1293 530 1147 l 854 1293 l 854 1282 q 749 1178 823 1244 q 618 1071 676 1113 l 476 1071 l 476 1088 z "},"Ў":{"ha":831,"x_min":21,"x_max":958,"o":"m 164 -14 q 21 8 80 -14 l 21 189 q 155 163 76 163 q 213 174 188 163 q 259 208 238 186 q 314 285 281 230 l 121 991 l 329 991 l 433 564 q 453 461 449 500 q 498 562 484 536 l 732 991 l 958 991 l 550 293 q 411 88 460 140 q 303 11 361 36 q 164 -14 245 -14 m 884 1314 q 818 1173 861 1223 q 703 1097 774 1122 q 528 1071 631 1071 q 319 1123 392 1071 q 247 1282 247 1175 q 250 1314 247 1298 l 431 1314 l 429 1296 l 429 1282 q 545 1187 429 1187 q 648 1217 612 1187 q 700 1314 684 1247 l 884 1314 z "},"Џ":{"ha":965,"x_min":36,"x_max":972,"o":"m 245 991 l 454 991 l 281 175 l 593 175 l 766 991 l 972 991 l 762 0 l 503 0 l 440 -289 l 235 -289 l 297 0 l 36 0 l 245 991 z "},"А":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 z "},"Б":{"ha":822,"x_min":36,"x_max":803,"o":"m 415 611 q 662 540 576 611 q 747 334 747 469 q 640 86 747 173 q 330 0 533 0 l 36 0 l 245 991 l 803 991 l 766 819 l 414 819 l 370 611 l 415 611 m 345 172 q 488 212 439 172 q 538 323 538 252 q 407 439 538 439 l 334 439 l 277 172 l 345 172 z "},"В":{"ha":861,"x_min":36,"x_max":848,"o":"m 534 991 q 769 936 690 991 q 848 771 848 881 q 792 603 848 669 q 632 515 736 537 l 632 511 q 740 446 700 494 q 781 323 781 398 q 677 84 781 168 q 390 0 573 0 l 36 0 l 245 991 l 534 991 m 370 599 l 471 599 q 594 632 553 599 q 635 726 635 665 q 519 819 635 819 l 416 819 l 370 599 m 279 174 l 401 174 q 526 213 481 174 q 571 322 571 252 q 447 432 571 432 l 335 432 l 279 174 z "},"Г":{"ha":699,"x_min":36,"x_max":798,"o":"m 240 0 l 36 0 l 245 991 l 798 991 l 761 819 l 414 819 l 240 0 z "},"Д":{"ha":1000,"x_min":-134,"x_max":954,"o":"m -36 175 l 52 175 q 260 543 168 342 q 435 991 353 743 l 954 991 l 781 175 l 907 175 l 808 -289 l 603 -289 l 665 0 l 134 0 l 71 -289 l -134 -289 l -36 175 m 570 817 q 281 175 424 399 l 568 175 l 705 817 l 570 817 z "},"Е":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 z "},"Ж":{"ha":1204,"x_min":-85,"x_max":1317,"o":"m 335 529 l 146 991 l 351 991 l 532 528 l 631 991 l 829 991 l 730 528 l 1095 991 l 1317 991 l 922 501 l 1122 0 l 908 0 l 722 488 l 619 0 l 421 0 l 524 486 l 147 0 l -85 0 l 335 529 z "},"З":{"ha":828,"x_min":28,"x_max":814,"o":"m 814 775 q 740 594 814 661 q 532 519 665 528 l 532 517 q 685 448 629 505 q 742 302 742 391 q 633 68 742 151 q 315 -14 524 -14 q 151 -1 221 -14 q 28 40 81 11 l 28 218 q 298 151 151 151 q 472 192 414 151 q 530 311 530 233 q 478 404 530 374 q 314 433 426 433 l 218 433 l 253 597 l 339 597 q 599 733 599 597 q 567 810 599 782 q 471 838 534 838 q 227 754 355 838 l 153 896 q 335 982 250 958 q 522 1006 420 1006 q 673 976 606 1006 q 777 893 740 946 q 814 775 814 840 z "},"И":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 286 283 l 804 991 l 1055 991 l 846 0 l 659 0 q 756 463 722 302 q 814 720 790 623 l 808 721 l 290 0 l 36 0 l 245 991 l 436 991 l 336 522 q 279 283 292 331 l 286 283 z "},"Й":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 286 283 l 804 991 l 1055 991 l 846 0 l 659 0 q 756 463 722 302 q 814 720 790 623 l 808 721 l 290 0 l 36 0 l 245 991 l 436 991 l 336 522 q 279 283 292 331 l 286 283 m 1005 1314 q 939 1173 982 1223 q 823 1097 895 1122 q 648 1071 751 1071 q 440 1123 513 1071 q 368 1282 368 1175 q 371 1314 368 1298 l 551 1314 l 550 1296 l 550 1282 q 665 1187 550 1187 q 769 1217 732 1187 q 821 1314 805 1247 l 1005 1314 z "},"К":{"ha":827,"x_min":36,"x_max":954,"o":"m 760 0 l 530 0 l 346 488 l 243 0 l 36 0 l 245 991 l 453 991 l 354 528 l 721 991 l 954 991 l 559 501 l 760 0 z "},"Л":{"ha":965,"x_min":-41,"x_max":972,"o":"m 545 817 q 435 425 491 600 q 330 158 380 251 q 219 26 280 66 q 56 -14 157 -14 q -41 3 1 -14 l -41 175 q 26 161 -5 161 q 99 183 71 161 q 155 252 127 204 q 217 399 182 299 q 297 651 253 499 q 389 991 340 803 l 972 991 l 761 0 l 555 0 l 729 817 l 545 817 z "},"М":{"ha":1222,"x_min":36,"x_max":1229,"o":"m 568 250 l 942 991 l 1229 991 l 1019 0 l 829 0 l 928 469 q 999 768 964 637 l 996 768 l 610 0 l 419 0 l 378 768 l 375 768 q 349 612 368 709 q 222 0 331 515 l 36 0 l 245 991 l 519 991 l 566 250 l 568 250 z "},"Н":{"ha":972,"x_min":36,"x_max":979,"o":"m 770 0 l 562 0 l 653 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 979 991 l 770 0 z "},"О":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 z "},"П":{"ha":965,"x_min":36,"x_max":972,"o":"m 762 0 l 555 0 l 729 817 l 416 817 l 243 0 l 36 0 l 245 991 l 972 991 l 762 0 z "},"Р":{"ha":806,"x_min":36,"x_max":807,"o":"m 354 525 l 392 525 q 544 572 488 525 q 599 697 599 618 q 467 819 599 819 l 416 819 l 354 525 m 807 703 q 692 446 807 539 q 375 353 577 353 l 317 353 l 243 0 l 36 0 l 245 991 l 475 991 q 723 919 639 991 q 807 703 807 847 z "},"С":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 453 777 524 832 q 338 615 381 722 q 294 386 294 509 q 341 218 294 273 q 489 163 387 163 q 718 215 588 163 l 718 39 q 447 -14 583 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 764 992 699 1007 q 905 936 830 977 l 825 766 q 707 819 753 806 q 614 832 660 832 z "},"Т":{"ha":737,"x_min":114,"x_max":836,"o":"m 387 0 l 180 0 l 353 817 l 114 817 l 151 991 l 836 991 l 799 817 l 559 817 l 387 0 z "},"У":{"ha":831,"x_min":21,"x_max":958,"o":"m 164 -14 q 21 8 80 -14 l 21 189 q 155 163 76 163 q 213 174 188 163 q 259 208 238 186 q 314 285 281 230 l 121 991 l 329 991 l 433 564 q 453 461 449 500 q 498 562 484 536 l 732 991 l 958 991 l 550 293 q 411 88 460 140 q 303 11 361 36 q 164 -14 245 -14 z "},"Ф":{"ha":1133,"x_min":83,"x_max":1090,"o":"m 378 -14 l 411 138 q 238 184 311 145 q 124 297 164 224 q 83 468 83 370 q 210 767 83 659 q 570 884 336 875 l 595 1006 l 787 1006 l 762 884 q 1005 785 920 870 q 1090 557 1090 700 q 962 252 1090 362 q 604 139 833 142 l 571 -14 l 378 -14 m 639 301 q 821 377 758 309 q 884 557 884 444 q 844 674 884 631 q 728 720 804 717 l 639 301 m 534 720 q 355 647 420 713 q 290 467 290 581 q 330 347 290 391 q 446 301 370 304 l 534 720 z "},"Х":{"ha":842,"x_min":-79,"x_max":950,"o":"m 762 0 l 538 0 l 421 368 l 153 0 l -79 0 l 311 518 l 150 991 l 367 991 l 471 640 l 717 991 l 950 991 l 581 500 l 762 0 z "},"Ц":{"ha":1018,"x_min":36,"x_max":972,"o":"m 939 167 l 842 -289 l 636 -289 l 699 0 l 36 0 l 245 991 l 454 991 l 281 175 l 593 175 l 766 991 l 972 991 l 798 167 l 939 167 z "},"Ч":{"ha":935,"x_min":125,"x_max":942,"o":"m 525 0 l 606 380 q 370 322 479 322 q 191 380 256 322 q 125 541 125 437 q 134 619 125 579 l 210 991 l 416 991 l 343 642 q 336 586 336 610 q 440 497 336 497 q 640 547 529 497 l 734 991 l 942 991 l 732 0 l 525 0 z "},"Ш":{"ha":1394,"x_min":36,"x_max":1401,"o":"m 36 0 l 245 991 l 458 991 l 285 175 l 543 175 l 717 991 l 930 991 l 757 175 l 1015 175 l 1189 991 l 1401 991 l 1192 0 l 36 0 z "},"Щ":{"ha":1447,"x_min":36,"x_max":1401,"o":"m 1368 167 l 1271 -289 l 1065 -289 l 1128 0 l 36 0 l 245 991 l 458 991 l 285 175 l 543 175 l 717 991 l 930 991 l 757 175 l 1015 175 l 1189 991 l 1401 991 l 1226 167 l 1368 167 z "},"Ъ":{"ha":966,"x_min":114,"x_max":895,"o":"m 517 611 l 562 611 q 810 540 725 611 q 895 334 895 469 q 787 86 895 173 q 478 0 680 0 l 180 0 l 353 817 l 114 817 l 151 991 l 597 991 l 517 611 m 424 172 l 492 172 q 635 212 586 172 q 685 323 685 252 q 554 439 685 439 l 481 439 l 424 172 z "},"Ы":{"ha":1187,"x_min":36,"x_max":1194,"o":"m 985 0 l 772 0 l 982 991 l 1194 991 l 985 0 m 729 334 q 622 86 729 173 q 313 0 515 0 l 36 0 l 245 991 l 453 991 l 372 611 l 397 611 q 645 540 560 611 q 729 334 729 469 m 279 172 l 326 172 q 470 212 420 172 q 519 323 519 252 q 389 439 519 439 l 336 439 l 279 172 z "},"Ь":{"ha":822,"x_min":36,"x_max":750,"o":"m 750 334 q 643 86 750 173 q 334 0 536 0 l 36 0 l 245 991 l 453 991 l 372 611 l 418 611 q 665 540 581 611 q 750 334 750 469 m 279 172 l 347 172 q 491 212 441 172 q 541 323 541 252 q 410 439 541 439 l 336 439 l 279 172 z "},"Э":{"ha":850,"x_min":18,"x_max":807,"o":"m 264 161 q 452 223 378 161 q 567 414 526 286 l 201 414 l 237 586 l 595 586 l 596 603 l 596 621 q 421 832 596 832 q 335 823 377 832 q 203 779 292 814 l 149 946 q 447 1007 290 1007 q 714 908 622 1007 q 807 624 807 808 q 740 292 807 442 q 557 64 673 142 q 288 -14 441 -14 q 140 -1 205 -14 q 18 43 75 12 l 18 227 q 264 161 136 161 z "},"Ю":{"ha":1397,"x_min":36,"x_max":1354,"o":"m 1354 636 q 1295 296 1354 447 q 1125 66 1235 146 q 867 -14 1016 -14 q 611 86 703 -14 q 518 364 518 186 q 521 428 518 398 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 549 603 q 724 903 603 798 q 1011 1007 845 1007 q 1264 909 1175 1007 q 1354 636 1354 812 m 993 832 q 859 770 920 832 q 764 600 798 708 q 729 364 729 491 q 769 214 729 264 q 882 163 810 163 q 1015 222 954 163 q 1109 388 1075 281 q 1143 631 1143 494 q 1105 779 1143 725 q 993 832 1066 832 z "},"Я":{"ha":851,"x_min":-85,"x_max":859,"o":"m 443 380 l 161 0 l -85 0 l 264 446 q 161 545 191 492 q 131 671 131 598 q 235 907 131 822 q 529 991 339 991 l 859 991 l 648 0 l 441 0 l 522 380 l 443 380 m 615 819 l 524 819 q 392 781 437 819 q 347 667 347 742 q 384 582 347 613 q 485 551 421 551 l 558 551 l 615 819 z "},"а":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 z "},"б":{"ha":812,"x_min":74,"x_max":860,"o":"m 74 313 q 163 723 74 537 q 406 978 252 908 q 545 1019 454 1000 q 839 1065 636 1038 l 860 890 q 573 844 652 860 q 449 799 494 828 q 373 720 404 769 q 322 591 342 670 l 323 591 q 426 677 368 648 q 549 707 484 707 q 697 643 645 707 q 750 457 750 578 q 700 213 750 323 q 560 45 650 103 q 354 -14 470 -14 q 146 70 218 -14 q 74 313 74 153 m 374 154 q 457 195 418 154 q 520 307 496 236 q 545 450 545 378 q 467 554 545 554 q 383 524 429 554 q 297 437 338 493 q 281 306 281 359 q 374 154 281 154 z "},"в":{"ha":796,"x_min":61,"x_max":755,"o":"m 482 772 q 682 717 609 772 q 755 568 755 662 q 714 447 755 492 q 591 383 673 402 l 591 380 q 682 325 652 363 q 713 229 713 286 q 673 102 713 157 q 559 17 633 47 q 385 -14 485 -14 q 146 65 231 -14 q 61 293 61 144 q 113 539 61 430 q 261 711 165 649 q 482 772 357 772 m 267 322 l 265 301 l 265 279 q 296 169 265 208 q 387 129 327 129 q 476 158 445 129 q 507 233 507 187 q 474 300 507 278 q 366 322 441 322 l 267 322 m 473 625 q 368 581 416 625 q 294 463 321 537 l 431 463 q 522 486 490 463 q 554 557 554 510 q 532 607 554 589 q 473 625 509 625 z "},"г":{"ha":665,"x_min":14,"x_max":631,"o":"m 113 713 q 378 772 237 772 q 565 719 499 772 q 631 567 631 666 q 608 461 631 503 q 548 391 586 419 q 460 342 510 362 q 354 302 410 322 q 264 267 286 279 q 232 240 242 254 q 221 205 221 226 q 318 138 221 138 q 539 199 410 138 l 539 45 q 414 0 475 13 q 275 -14 353 -14 q 82 43 151 -14 q 14 201 14 100 q 37 307 14 264 q 99 377 61 349 q 184 423 136 405 q 278 457 231 441 q 387 498 367 487 q 416 525 406 510 q 425 561 425 540 q 343 619 425 619 q 163 568 266 619 l 113 713 z "},"д":{"ha":835,"x_min":61,"x_max":790,"o":"m 790 629 q 736 288 790 437 q 584 63 682 140 q 354 -14 487 -14 q 137 65 214 -14 q 61 286 61 144 q 102 509 61 412 q 218 660 143 606 q 389 713 293 713 q 579 589 514 713 l 583 589 l 585 613 l 585 633 q 543 838 585 774 q 406 903 500 903 q 268 875 334 903 l 225 1036 q 437 1069 311 1069 q 790 629 790 1069 m 366 153 q 487 229 437 153 q 559 452 537 304 q 516 526 546 496 q 437 555 486 555 q 313 480 359 555 q 267 279 267 406 q 292 186 267 220 q 366 153 318 153 z "},"е":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 z "},"ж":{"ha":1333,"x_min":-14,"x_max":1348,"o":"m 550 306 l 447 306 q 312 71 408 155 q 78 -14 215 -14 q -14 -5 26 -14 l 18 157 q 72 151 54 151 q 173 195 129 151 q 242 313 218 238 q 267 476 267 389 q 242 574 267 541 q 174 607 218 607 q 92 589 143 607 l 92 754 q 212 772 143 772 q 399 695 331 772 q 468 479 468 618 l 468 461 l 467 443 l 579 443 l 647 758 l 843 758 l 775 443 l 882 443 q 1019 685 920 597 q 1255 772 1118 772 q 1348 764 1303 772 l 1312 602 q 1258 607 1276 607 q 1119 515 1173 607 q 1064 282 1064 422 q 1088 184 1064 217 q 1157 151 1113 151 q 1239 170 1187 151 l 1239 4 q 1118 -14 1190 -14 q 930 62 998 -14 q 863 275 863 138 l 863 306 l 746 306 l 681 0 l 485 0 l 550 306 z "},"з":{"ha":728,"x_min":17,"x_max":692,"o":"m 314 467 q 448 487 409 467 q 488 553 488 507 q 465 602 488 584 q 383 619 441 619 q 279 604 336 619 q 170 566 222 589 l 121 714 q 419 772 273 772 q 621 724 550 772 q 692 585 692 676 q 649 467 692 514 q 515 396 606 420 l 515 392 q 644 239 644 354 q 547 52 644 117 q 269 -14 450 -14 q 132 0 201 -14 q 17 37 64 14 l 17 205 q 262 146 136 146 q 437 244 437 146 q 318 323 437 323 l 199 323 l 229 467 l 314 467 z "},"и":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 z "},"й":{"ha":839,"x_min":75,"x_max":858,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 858 1084 q 791 944 835 994 q 676 867 748 893 q 501 842 604 842 q 293 893 366 842 q 220 1053 220 945 q 224 1084 220 1069 l 404 1084 l 403 1067 l 403 1053 q 518 958 403 958 q 622 988 585 958 q 673 1084 658 1018 l 858 1084 z "},"к":{"ha":803,"x_min":25,"x_max":848,"o":"m 615 758 l 848 758 l 524 378 l 711 0 l 482 0 l 309 370 l 229 0 l 25 0 l 187 758 l 392 758 l 317 406 l 615 758 z "},"л":{"ha":854,"x_min":-40,"x_max":823,"o":"m 669 0 l 465 0 l 593 600 q 550 606 566 606 q 474 584 505 606 q 418 516 444 563 q 345 323 393 469 q 298 192 321 254 q 244 85 275 131 q 170 13 214 39 q 61 -14 126 -14 q -40 3 1 -14 l -40 171 q 17 160 -15 160 q 78 196 51 160 q 130 307 104 231 q 237 583 199 512 q 320 694 275 654 q 431 753 366 734 q 589 772 496 772 q 712 762 648 772 q 823 733 777 751 l 669 0 z "},"м":{"ha":1099,"x_min":16,"x_max":1076,"o":"m 835 547 q 788 455 816 505 q 732 351 760 405 l 545 0 l 387 0 l 345 342 q 323 550 328 479 l 208 0 l 16 0 l 178 758 l 453 758 l 493 435 q 504 329 500 378 q 510 232 507 280 q 550 324 528 273 q 603 429 572 376 l 786 758 l 1076 758 l 917 0 l 718 0 l 835 547 z "},"н":{"ha":856,"x_min":25,"x_max":832,"o":"m 393 758 l 330 467 l 567 467 l 628 758 l 832 758 l 671 0 l 467 0 l 532 313 l 297 313 l 231 0 l 25 0 l 187 758 l 393 758 z "},"о":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 z "},"п":{"ha":839,"x_min":25,"x_max":768,"o":"m 663 0 l 458 0 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 663 0 z "},"р":{"ha":827,"x_min":-46,"x_max":765,"o":"m 551 772 q 708 700 650 772 q 765 496 765 627 q 719 247 765 366 q 591 57 672 127 q 414 -14 511 -14 q 317 12 357 -14 q 241 97 276 37 l 236 97 q 207 -103 228 -11 l 158 -334 l -46 -334 l 186 758 l 342 758 l 330 643 l 336 643 q 551 772 430 772 m 469 607 q 380 561 423 607 q 311 439 337 515 q 285 271 285 363 q 310 184 285 216 q 379 151 335 151 q 466 198 425 151 q 533 327 507 245 q 558 488 558 408 q 469 607 558 607 z "},"с":{"ha":671,"x_min":61,"x_max":685,"o":"m 343 -14 q 134 59 207 -14 q 61 265 61 132 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 299 184 268 217 q 385 151 330 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 z "},"т":{"ha":1257,"x_min":25,"x_max":1186,"o":"m 572 772 q 750 618 721 772 l 754 618 q 863 732 800 692 q 997 772 926 772 q 1138 715 1089 772 q 1186 554 1186 657 q 1171 432 1186 503 l 1080 0 l 876 0 l 970 443 q 981 524 981 489 q 914 607 981 607 q 801 531 852 607 q 721 315 751 455 l 656 0 l 452 0 l 545 443 q 555 524 555 489 q 489 607 555 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 z "},"у":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 z "},"ф":{"ha":1060,"x_min":61,"x_max":999,"o":"m 711 762 q 924 659 850 742 q 999 446 999 575 q 944 215 999 315 q 788 58 889 115 q 546 -12 688 2 l 481 -334 l 283 -334 l 354 -5 q 139 95 217 10 q 61 307 61 179 q 118 539 61 437 q 277 699 176 642 q 517 764 378 755 l 578 1055 l 772 1055 l 711 762 m 269 323 q 298 208 269 254 q 386 153 328 161 l 484 606 q 373 566 420 602 q 297 464 325 530 q 269 323 269 397 m 581 153 q 690 197 644 161 q 764 299 736 233 q 791 441 791 364 q 761 550 791 507 q 676 603 730 593 l 581 153 z "},"х":{"ha":737,"x_min":-68,"x_max":806,"o":"m 257 389 l 104 758 l 322 758 l 400 532 l 566 758 l 806 758 l 489 378 l 654 0 l 433 0 l 349 232 l 170 0 l -68 0 l 257 389 z "},"ц":{"ha":861,"x_min":72,"x_max":815,"o":"m 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 705 240 q 701 204 701 220 q 743 160 701 160 q 804 170 770 160 l 711 -272 l 522 -272 l 587 0 q 500 122 522 31 l 498 122 q 268 -14 402 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 z "},"ч":{"ha":827,"x_min":111,"x_max":803,"o":"m 165 758 l 370 758 l 328 561 q 317 481 317 515 q 338 416 317 438 q 397 395 359 395 q 507 461 464 395 q 581 672 550 528 l 599 758 l 803 758 l 642 0 l 437 0 l 481 205 l 510 328 l 505 328 q 307 232 418 232 q 163 290 216 232 q 111 450 111 349 q 131 595 111 504 l 165 758 z "},"ш":{"ha":1257,"x_min":72,"x_max":1234,"o":"m 807 758 l 714 315 q 703 235 703 268 q 770 151 703 151 q 883 229 833 151 q 962 444 933 307 l 1029 758 l 1234 758 l 1072 0 l 917 0 l 930 140 l 926 140 q 686 -14 828 -14 q 509 140 538 -14 l 504 140 q 261 -14 406 -14 q 121 43 171 -14 q 72 204 72 99 q 87 326 72 254 l 178 758 l 382 758 l 289 315 q 278 235 278 269 q 345 151 278 151 q 456 226 407 151 q 538 443 506 301 l 603 758 l 807 758 z "},"щ":{"ha":1279,"x_min":72,"x_max":1234,"o":"m 807 758 l 714 315 q 703 235 703 268 q 770 151 703 151 q 883 229 833 151 q 962 444 933 307 l 1029 758 l 1234 758 l 1124 240 q 1120 204 1120 220 q 1161 160 1120 160 q 1222 170 1189 160 l 1129 -272 l 940 -272 l 1006 0 q 918 125 936 32 l 917 125 q 686 -14 819 -14 q 509 140 538 -14 l 504 140 q 261 -14 406 -14 q 121 43 171 -14 q 72 204 72 99 q 87 326 72 254 l 178 758 l 382 758 l 289 315 q 278 235 278 269 q 345 151 278 151 q 456 226 407 151 q 538 443 506 301 l 603 758 l 807 758 z "},"ъ":{"ha":936,"x_min":62,"x_max":859,"o":"m 538 758 l 471 450 q 618 465 530 465 q 794 409 730 465 q 859 260 859 353 q 816 117 859 178 q 693 21 774 55 q 496 -14 612 -14 q 294 43 363 -14 q 225 208 225 99 q 241 330 225 256 l 301 603 l 62 603 l 96 758 l 538 758 m 428 215 q 454 151 428 174 q 525 129 479 129 q 618 159 583 129 q 653 239 653 189 q 551 322 653 322 q 443 310 504 322 q 433 262 438 288 q 428 215 428 235 z "},"ы":{"ha":1116,"x_min":72,"x_max":1092,"o":"m 383 758 l 317 450 q 454 465 383 465 q 608 410 549 465 q 667 264 667 354 q 628 119 667 182 q 514 22 589 57 q 336 -14 439 -14 q 72 207 72 -14 q 87 335 72 266 l 179 758 l 383 758 m 378 322 q 289 310 339 322 q 277 247 279 264 q 275 212 275 229 q 296 150 275 171 q 353 129 317 129 q 432 160 402 129 q 463 241 463 192 q 378 322 463 322 m 930 0 l 726 0 l 888 758 l 1092 758 l 930 0 z "},"ь":{"ha":782,"x_min":71,"x_max":704,"o":"m 317 450 q 464 465 375 465 q 640 409 576 465 q 704 260 704 353 q 662 116 704 178 q 539 21 620 55 q 342 -14 458 -14 q 140 43 210 -14 q 71 208 71 100 q 87 330 71 252 l 179 758 l 383 758 l 317 450 m 397 322 q 289 310 350 322 q 273 215 273 240 q 300 151 273 173 q 371 129 326 129 q 464 159 429 129 q 498 239 498 190 q 397 322 498 322 z "},"э":{"ha":671,"x_min":21,"x_max":610,"o":"m 332 772 q 537 693 464 772 q 610 468 610 614 q 561 214 610 323 q 418 46 511 105 q 195 -14 324 -14 q 21 24 92 -14 l 21 195 q 97 164 56 178 q 191 151 138 151 q 315 191 267 151 q 385 314 362 231 l 132 314 l 161 452 l 403 452 l 404 465 l 404 478 q 375 573 404 540 q 290 607 345 607 q 220 596 252 607 q 150 567 189 585 l 96 717 q 332 772 207 772 z "},"ю":{"ha":1160,"x_min":25,"x_max":1099,"o":"m 1099 472 q 1053 218 1099 329 q 921 47 1007 108 q 715 -14 834 -14 q 511 63 584 -14 q 437 277 437 140 l 437 313 l 297 313 l 231 0 l 25 0 l 187 758 l 393 758 l 330 467 l 461 467 q 593 692 500 612 q 822 772 687 772 q 1026 693 954 772 q 1099 472 1099 614 m 804 606 q 721 562 758 606 q 661 439 684 517 q 637 278 637 360 q 730 153 637 153 q 811 195 774 153 q 871 313 848 237 q 893 472 893 389 q 804 606 893 606 z "},"я":{"ha":808,"x_min":-14,"x_max":783,"o":"m 439 282 q 372 255 400 282 q 313 161 345 229 q 216 26 269 65 q 89 -14 164 -14 q -14 3 27 -14 l -14 171 q 39 160 14 160 q 85 175 67 160 q 117 214 103 191 l 138 248 q 245 342 181 322 q 139 501 139 386 q 225 690 139 622 q 467 758 312 758 l 783 758 l 624 0 l 419 0 l 481 282 l 439 282 m 464 612 q 379 583 410 612 q 347 504 347 553 q 371 444 347 467 q 447 421 395 421 l 510 421 l 550 612 l 464 612 z "},"ё":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 241 937 q 270 1017 241 990 q 351 1044 298 1044 q 441 971 441 1044 q 414 892 441 922 q 332 863 388 863 q 241 937 241 863 m 513 937 q 542 1017 513 990 q 623 1044 570 1044 q 690 1025 667 1044 q 713 971 713 1006 q 687 892 713 922 q 605 863 660 863 q 513 937 513 863 z "},"ђ":{"ha":839,"x_min":25,"x_max":760,"o":"m 431 946 l 633 946 l 604 811 l 403 811 q 347 615 377 684 l 353 615 q 445 699 395 668 q 564 730 496 730 q 709 673 659 730 q 760 513 760 616 q 745 390 760 459 l 646 -79 q 550 -272 618 -210 q 371 -334 481 -334 q 253 -317 300 -334 l 253 -153 q 330 -167 294 -167 q 403 -139 372 -167 q 447 -52 435 -112 l 543 401 q 554 482 554 448 q 482 566 554 566 q 369 489 420 566 q 289 272 319 412 l 229 0 l 25 0 l 196 811 l 87 811 l 117 946 l 225 946 l 249 1055 l 453 1055 l 431 946 z "},"ѓ":{"ha":665,"x_min":14,"x_max":707,"o":"m 113 713 q 378 772 237 772 q 565 719 499 772 q 631 567 631 666 q 608 461 631 503 q 548 391 586 419 q 460 342 510 362 q 354 302 410 322 q 264 267 286 279 q 232 240 242 254 q 221 205 221 226 q 318 138 221 138 q 539 199 410 138 l 539 45 q 414 0 475 13 q 275 -14 353 -14 q 82 43 151 -14 q 14 201 14 100 q 37 307 14 264 q 99 377 61 349 q 184 423 136 405 q 278 457 231 441 q 387 498 367 487 q 416 525 406 510 q 425 561 425 540 q 343 619 425 619 q 163 568 266 619 l 113 713 m 329 859 q 479 1064 382 918 l 707 1064 l 707 1053 q 602 949 675 1015 q 471 842 529 884 l 329 842 l 329 859 z "},"є":{"ha":671,"x_min":61,"x_max":685,"o":"m 343 -14 q 134 60 208 -14 q 61 267 61 133 q 112 533 61 416 q 254 711 163 650 q 463 772 344 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 362 568 409 607 q 292 452 315 529 l 541 452 l 511 314 l 268 314 l 267 298 l 267 282 q 385 151 267 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 z "},"ѕ":{"ha":657,"x_min":16,"x_max":629,"o":"m 562 250 q 478 55 562 123 q 243 -14 393 -14 q 116 -3 170 -14 q 16 31 62 7 l 16 199 q 232 138 122 138 q 321 160 286 138 q 355 220 355 182 q 330 272 355 249 q 241 330 305 295 q 127 422 159 376 q 94 530 94 468 q 169 709 94 646 q 383 772 244 772 q 629 708 519 772 l 562 562 q 387 619 467 619 q 325 602 349 619 q 301 555 301 585 q 323 509 301 529 q 404 458 345 489 q 525 366 488 416 q 562 250 562 315 z "},"і":{"ha":412,"x_min":25,"x_max":443,"o":"m 218 936 q 251 1025 218 995 q 342 1055 283 1055 q 417 1034 391 1055 q 443 974 443 1013 q 413 886 443 920 q 321 852 383 852 q 218 936 218 852 m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 z "},"ї":{"ha":412,"x_min":25,"x_max":558,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 85 937 q 114 1017 85 990 q 195 1044 143 1044 q 286 971 286 1044 q 259 892 286 922 q 177 863 233 863 q 85 937 85 863 m 358 937 q 387 1017 358 990 q 468 1044 415 1044 q 535 1025 512 1044 q 558 971 558 1006 q 531 892 558 922 q 450 863 505 863 q 358 937 358 863 z "},"ј":{"ha":412,"x_min":-179,"x_max":444,"o":"m -61 -334 q -179 -317 -132 -334 l -179 -153 q -102 -167 -138 -167 q 16 -52 -9 -167 l 187 758 l 392 758 l 212 -82 q -61 -334 160 -334 m 220 936 q 252 1025 220 995 q 343 1055 284 1055 q 418 1034 393 1055 q 444 974 444 1013 q 414 886 444 920 q 322 852 385 852 q 220 936 220 852 z "},"љ":{"ha":1198,"x_min":-40,"x_max":1125,"o":"m 737 450 q 885 465 810 465 q 1061 409 997 465 q 1125 260 1125 353 q 1083 116 1125 178 q 960 21 1041 55 q 762 -14 879 -14 q 561 43 630 -14 q 492 208 492 99 q 509 330 492 258 l 570 603 l 539 606 q 464 584 494 606 q 409 516 433 562 q 339 323 385 471 q 255 107 290 166 q 173 17 220 48 q 57 -14 125 -14 q 2 -9 22 -14 q -40 3 -18 -5 l -40 171 q 17 160 -15 160 q 78 195 52 160 q 127 306 104 230 l 157 397 q 260 639 212 568 q 377 741 308 710 q 553 772 446 772 q 799 733 692 772 l 737 450 m 818 322 q 710 310 771 322 q 695 236 696 248 q 694 215 694 224 q 720 151 694 174 q 791 129 746 129 q 885 159 850 129 q 920 239 920 189 q 818 322 920 322 z "},"њ":{"ha":1198,"x_min":33,"x_max":1125,"o":"m 737 450 q 885 465 816 465 q 1061 409 997 465 q 1125 260 1125 353 q 1083 116 1125 178 q 960 21 1041 55 q 762 -14 879 -14 q 561 43 630 -14 q 492 208 492 99 q 505 313 492 250 l 306 313 l 239 0 l 33 0 l 196 758 l 401 758 l 339 467 l 539 467 l 600 758 l 804 758 l 737 450 m 818 322 q 710 310 771 322 q 695 236 696 248 q 694 215 694 224 q 720 151 694 174 q 791 129 746 129 q 885 159 850 129 q 920 239 920 189 q 818 322 920 322 z "},"ћ":{"ha":839,"x_min":25,"x_max":760,"o":"m 663 0 l 458 0 l 543 401 q 554 482 554 448 q 482 566 554 566 q 368 487 419 566 q 288 272 317 409 l 229 0 l 25 0 l 197 811 l 87 811 l 117 946 l 225 946 l 249 1055 l 453 1055 l 431 946 l 633 946 l 604 811 l 401 811 q 347 615 376 700 l 353 615 q 445 699 395 668 q 564 730 496 730 q 709 673 659 730 q 760 513 760 616 q 745 390 760 459 l 663 0 z "},"ќ":{"ha":803,"x_min":25,"x_max":848,"o":"m 615 758 l 848 758 l 524 378 l 711 0 l 482 0 l 309 370 l 229 0 l 25 0 l 187 758 l 392 758 l 317 406 l 615 758 m 423 859 q 574 1064 477 918 l 801 1064 l 801 1053 q 696 949 770 1015 q 565 842 623 884 l 423 842 l 423 859 z "},"ў":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 784 1084 q 718 944 761 994 q 602 867 674 893 q 427 842 530 842 q 219 893 292 842 q 146 1053 146 945 q 150 1084 146 1069 l 330 1084 l 329 1067 l 329 1053 q 444 958 329 958 q 548 988 511 958 q 600 1084 584 1018 l 784 1084 z "},"џ":{"ha":839,"x_min":72,"x_max":815,"o":"m 404 -28 l 437 -28 l 372 -334 l 182 -334 l 233 -100 l 404 -28 m 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 z "},"Ґ":{"ha":699,"x_min":36,"x_max":840,"o":"m 611 991 l 656 1202 l 840 1202 l 761 819 l 414 819 l 240 0 l 36 0 l 245 991 l 611 991 z "},"ґ":{"ha":643,"x_min":25,"x_max":730,"o":"m 652 590 l 354 590 l 229 0 l 25 0 l 186 758 l 498 758 l 542 965 l 730 965 l 652 590 z "},"Ẁ":{"ha":1242,"x_min":125,"x_max":1372,"o":"m 682 690 q 604 488 651 591 l 385 0 l 155 0 l 125 991 l 319 991 l 323 450 q 321 333 323 415 q 314 215 318 251 l 318 215 q 363 337 333 258 q 404 436 394 416 l 654 991 l 838 991 l 852 399 q 846 215 852 300 l 850 215 q 939 452 879 302 l 1162 991 l 1372 991 l 933 0 l 699 0 l 684 489 l 682 583 q 685 690 682 643 l 682 690 m 832 1071 l 707 1071 q 613 1175 659 1118 q 543 1279 568 1232 l 543 1293 l 754 1293 q 832 1088 779 1193 l 832 1071 z "},"ẁ":{"ha":1095,"x_min":85,"x_max":1165,"o":"m 581 583 q 497 367 538 463 l 339 0 l 119 0 l 85 758 l 275 758 l 278 422 l 275 309 l 271 193 l 273 193 q 283 221 277 207 q 317 314 288 236 q 349 395 347 392 l 505 758 l 728 758 l 728 395 q 721 193 728 298 l 725 193 l 744 248 q 808 422 793 389 l 957 758 l 1165 758 l 806 0 l 582 0 l 578 353 q 585 583 578 458 l 581 583 m 711 842 l 587 842 q 493 946 538 888 q 422 1050 447 1003 l 422 1064 l 633 1064 q 711 859 658 964 l 711 842 z "},"Ẃ":{"ha":1242,"x_min":125,"x_max":1372,"o":"m 682 690 q 604 488 651 591 l 385 0 l 155 0 l 125 991 l 319 991 l 323 450 q 321 333 323 415 q 314 215 318 251 l 318 215 q 363 337 333 258 q 404 436 394 416 l 654 991 l 838 991 l 852 399 q 846 215 852 300 l 850 215 q 939 452 879 302 l 1162 991 l 1372 991 l 933 0 l 699 0 l 684 489 l 682 583 q 685 690 682 643 l 682 690 m 647 1088 q 798 1293 701 1147 l 1025 1293 l 1025 1282 q 920 1178 994 1244 q 789 1071 847 1113 l 647 1071 l 647 1088 z "},"ẃ":{"ha":1095,"x_min":85,"x_max":1165,"o":"m 581 583 q 497 367 538 463 l 339 0 l 119 0 l 85 758 l 275 758 l 278 422 l 275 309 l 271 193 l 273 193 q 283 221 277 207 q 317 314 288 236 q 349 395 347 392 l 505 758 l 728 758 l 728 395 q 721 193 728 298 l 725 193 l 744 248 q 808 422 793 389 l 957 758 l 1165 758 l 806 0 l 582 0 l 578 353 q 585 583 578 458 l 581 583 m 541 859 q 692 1064 595 918 l 919 1064 l 919 1053 q 814 949 888 1015 q 683 842 741 884 l 541 842 l 541 859 z "},"Ẅ":{"ha":1242,"x_min":125,"x_max":1372,"o":"m 682 690 q 604 488 651 591 l 385 0 l 155 0 l 125 991 l 319 991 l 323 450 q 321 333 323 415 q 314 215 318 251 l 318 215 q 363 337 333 258 q 404 436 394 416 l 654 991 l 838 991 l 852 399 q 846 215 852 300 l 850 215 q 939 452 879 302 l 1162 991 l 1372 991 l 933 0 l 699 0 l 684 489 l 682 583 q 685 690 682 643 l 682 690 m 528 1166 q 556 1246 528 1219 q 637 1274 585 1274 q 728 1200 728 1274 q 701 1121 728 1151 q 619 1092 675 1092 q 528 1166 528 1092 m 800 1166 q 829 1246 800 1219 q 910 1274 857 1274 q 977 1255 954 1274 q 1000 1200 1000 1236 q 974 1121 1000 1151 q 892 1092 947 1092 q 800 1166 800 1092 z "},"ẅ":{"ha":1095,"x_min":85,"x_max":1165,"o":"m 581 583 q 497 367 538 463 l 339 0 l 119 0 l 85 758 l 275 758 l 278 422 l 275 309 l 271 193 l 273 193 q 283 221 277 207 q 317 314 288 236 q 349 395 347 392 l 505 758 l 728 758 l 728 395 q 721 193 728 298 l 725 193 l 744 248 q 808 422 793 389 l 957 758 l 1165 758 l 806 0 l 582 0 l 578 353 q 585 583 578 458 l 581 583 m 397 937 q 426 1017 397 990 q 507 1044 454 1044 q 597 971 597 1044 q 570 892 597 922 q 488 863 544 863 q 397 937 397 863 m 669 937 q 698 1017 669 990 q 779 1044 726 1044 q 846 1025 823 1044 q 869 971 869 1006 q 843 892 869 922 q 761 863 816 863 q 669 937 669 863 z "},"Ỳ":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 m 587 1071 l 462 1071 q 368 1175 414 1118 q 298 1279 322 1232 l 298 1293 l 509 1293 q 587 1088 533 1193 l 587 1071 z "},"ỳ":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 512 842 l 387 842 q 293 946 339 888 q 223 1050 248 1003 l 223 1064 l 434 1064 q 512 859 458 964 l 512 842 z "},"–":{"ha":667,"x_min":28,"x_max":639,"o":"m 28 296 l 61 452 l 639 452 l 606 296 l 28 296 z "},"—":{"ha":1333,"x_min":28,"x_max":1305,"o":"m 28 296 l 61 452 l 1305 452 l 1272 296 l 28 296 z "},"―":{"ha":1333,"x_min":28,"x_max":1305,"o":"m 28 296 l 61 452 l 1305 452 l 1272 296 l 28 296 z "},"‗":{"ha":555,"x_min":-144,"x_max":471,"o":"m 450 -125 l -106 -125 l -86 -31 l 471 -31 l 450 -125 m 413 -313 l -144 -313 l -123 -218 l 434 -218 l 413 -313 z "},"‘":{"ha":298,"x_min":78,"x_max":408,"o":"m 83 652 l 78 667 q 256 991 148 821 l 408 991 q 277 652 347 847 l 83 652 z "},"’":{"ha":298,"x_min":72,"x_max":403,"o":"m 397 991 l 403 977 q 225 652 333 823 l 72 652 q 204 991 132 791 l 397 991 z "},"‚":{"ha":386,"x_min":-69,"x_max":261,"o":"m 256 161 l 261 146 q 83 -179 191 -8 l -69 -179 q 62 161 -9 -39 l 256 161 z "},"‛":{"ha":298,"x_min":151,"x_max":346,"o":"m 342 991 q 339 850 339 921 q 346 652 339 748 l 204 652 q 151 977 159 834 l 160 991 l 342 991 z "},"“":{"ha":602,"x_min":78,"x_max":711,"o":"m 386 652 l 380 667 q 558 991 450 821 l 711 991 q 579 652 646 838 l 386 652 m 83 652 l 78 667 q 256 991 148 821 l 408 991 q 277 652 347 847 l 83 652 z "},"”":{"ha":602,"x_min":72,"x_max":705,"o":"m 397 991 l 403 977 q 225 652 333 823 l 72 652 q 204 991 132 791 l 397 991 m 700 991 l 705 977 q 528 652 635 823 l 375 652 q 407 727 391 688 q 507 991 422 766 l 700 991 z "},"„":{"ha":690,"x_min":-69,"x_max":566,"o":"m 256 161 l 261 146 q 83 -179 191 -8 l -69 -179 q 62 161 -9 -39 l 256 161 m 559 161 l 566 146 q 387 -179 498 -4 l 235 -179 q 268 -99 251 -140 q 367 161 285 -57 l 559 161 z "},"†":{"ha":703,"x_min":129,"x_max":703,"o":"m 668 629 l 457 650 l 354 0 l 163 0 l 336 648 l 129 629 l 164 793 l 364 774 l 387 1055 l 579 1055 l 484 774 l 703 793 l 668 629 z "},"‡":{"ha":717,"x_min":40,"x_max":717,"o":"m 407 379 l 627 399 l 591 235 l 380 254 l 363 0 l 170 0 l 260 254 l 40 235 l 75 399 l 286 379 l 289 533 l 350 676 l 131 657 l 165 821 l 376 802 l 395 1055 l 587 1055 l 497 802 l 717 821 l 682 657 l 471 676 l 471 533 l 407 379 z "},"•":{"ha":501,"x_min":71,"x_max":471,"o":"m 71 465 q 99 597 71 537 q 181 689 128 656 q 304 722 233 722 q 428 677 386 722 q 471 547 471 631 q 409 359 471 427 q 240 292 347 292 q 116 337 161 292 q 71 465 71 382 z "},"…":{"ha":1157,"x_min":17,"x_max":1018,"o":"m 17 78 q 53 176 17 139 q 155 212 90 212 q 229 186 201 212 q 257 114 257 161 q 220 18 257 55 q 122 -18 182 -18 q 45 7 73 -18 q 17 78 17 33 m 397 78 q 434 176 397 139 q 536 212 470 212 q 610 186 582 212 q 637 114 637 161 q 600 18 637 55 q 503 -18 563 -18 q 425 7 453 -18 q 397 78 397 33 m 778 78 q 814 176 778 139 q 916 212 850 212 q 990 186 962 212 q 1018 114 1018 161 q 981 18 1018 55 q 883 -18 943 -18 q 806 7 833 -18 q 778 78 778 33 z "},"‰":{"ha":1691,"x_min":78,"x_max":1642,"o":"m 351 864 q 276 777 309 864 q 244 589 244 690 q 282 524 244 524 q 358 612 326 524 q 390 799 390 701 q 351 864 390 864 m 557 790 q 519 580 557 677 q 416 433 481 482 q 269 383 352 383 q 126 440 175 383 q 78 600 78 496 q 116 811 78 715 q 216 957 153 908 q 363 1006 279 1006 q 506 951 456 1006 q 557 790 557 897 m 1054 991 l 319 0 l 157 0 l 895 991 l 1054 991 m 1436 468 q 1385 430 1410 468 q 1345 324 1360 392 q 1329 193 1329 256 q 1367 127 1329 127 q 1443 216 1411 127 q 1475 403 1475 305 q 1436 468 1475 468 m 1642 400 q 1604 187 1642 287 q 1503 38 1567 87 q 1358 -12 1440 -12 q 1212 41 1261 -12 q 1162 192 1162 94 q 1198 411 1162 313 q 1299 559 1234 509 q 1447 610 1363 610 q 1591 556 1540 610 q 1642 400 1642 503 m 933 468 q 882 430 907 468 q 842 326 858 392 q 827 193 827 259 q 864 127 827 127 q 916 165 892 127 q 957 270 941 202 q 972 403 972 337 q 933 468 972 468 m 1139 400 q 1102 188 1139 287 q 1002 38 1065 88 q 856 -12 938 -12 q 709 41 758 -12 q 660 192 660 94 q 696 411 660 312 q 796 559 732 509 q 945 610 861 610 q 1088 556 1038 610 q 1139 400 1139 503 z "},"′":{"ha":354,"x_min":136,"x_max":372,"o":"m 372 991 l 269 633 l 136 633 l 184 991 l 372 991 z "},"″":{"ha":629,"x_min":136,"x_max":647,"o":"m 372 991 l 269 633 l 136 633 l 184 991 l 372 991 m 647 991 l 545 633 l 410 633 l 460 991 l 647 991 z "},"‹":{"ha":450,"x_min":49,"x_max":450,"o":"m 49 386 l 321 700 l 450 595 l 261 368 l 353 131 l 186 61 l 49 374 l 49 386 z "},"›":{"ha":450,"x_min":0,"x_max":401,"o":"m 401 363 l 129 49 l 0 154 l 189 380 l 97 618 l 264 688 l 401 375 l 401 363 z "},"‼":{"ha":779,"x_min":17,"x_max":821,"o":"m 265 329 l 102 329 l 208 991 l 439 991 l 265 329 m 17 78 q 53 176 17 139 q 155 212 90 212 q 229 186 201 212 q 257 114 257 161 q 220 18 257 55 q 122 -18 182 -18 q 45 7 73 -18 q 17 78 17 33 m 647 329 l 484 329 l 590 991 l 821 991 l 647 329 m 399 78 q 435 176 399 139 q 537 212 471 212 q 611 186 583 212 q 639 114 639 161 q 602 18 639 55 q 504 -18 564 -18 q 427 7 454 -18 q 399 78 399 33 z "},"⁄":{"ha":174,"x_min":-361,"x_max":536,"o":"m 536 991 l -199 0 l -361 0 l 376 991 l 536 991 z "},"ⁿ":{"ha":538,"x_min":90,"x_max":581,"o":"m 374 518 l 431 790 q 436 835 436 812 q 392 885 436 885 q 320 838 351 885 q 271 707 289 791 l 229 518 l 90 518 l 191 991 l 306 991 l 294 909 q 447 1003 362 1003 q 547 965 513 1003 q 581 864 581 928 q 575 810 581 833 l 515 518 l 374 518 z "},"₣":{"ha":765,"x_min":0,"x_max":821,"o":"m 325 298 l 504 298 l 479 178 l 300 178 l 264 0 l 60 0 l 97 178 l 0 178 l 25 298 l 122 298 l 269 991 l 821 991 l 785 819 l 437 819 l 389 591 l 713 591 l 675 419 l 351 419 l 325 298 z "},"₤":{"ha":765,"x_min":-8,"x_max":842,"o":"m 252 644 l 269 733 q 379 937 297 867 q 591 1007 462 1007 q 842 949 724 1007 l 765 791 q 604 838 669 838 q 522 811 555 838 q 475 721 488 785 l 458 644 l 661 644 l 635 525 l 433 525 l 416 447 l 618 447 l 593 326 l 390 326 q 257 176 361 223 l 703 176 l 665 0 l -8 0 l 25 167 q 131 227 94 189 q 184 326 168 264 l 54 326 l 79 447 l 210 447 l 227 525 l 96 525 l 122 644 l 252 644 z "},"₧":{"ha":1189,"x_min":39,"x_max":1173,"o":"m 345 525 l 379 525 q 528 575 475 525 q 582 714 582 625 q 549 792 582 765 q 453 819 517 819 l 407 819 l 345 525 m 783 718 q 672 449 783 546 q 364 353 560 353 l 309 353 l 233 0 l 39 0 l 250 991 l 465 991 q 700 920 617 991 q 783 718 783 848 m 986 138 q 1034 145 1012 138 q 1084 165 1055 153 l 1084 22 q 930 -14 1014 -14 q 793 30 842 -14 q 743 151 743 73 q 755 241 743 183 l 798 432 l 722 432 l 737 504 l 843 582 l 926 734 l 1043 734 l 1008 574 l 1173 574 l 1141 432 l 978 432 l 933 224 q 929 189 929 206 q 945 151 929 165 q 986 138 960 138 z "},"€":{"ha":765,"x_min":28,"x_max":844,"o":"m 610 839 q 490 788 544 839 q 399 644 437 738 l 635 644 l 608 525 l 364 525 q 347 447 357 502 l 550 447 l 525 326 l 335 326 q 365 203 335 245 q 465 161 395 161 q 657 204 555 161 l 657 29 q 433 -14 572 -14 q 131 326 131 -14 l 28 326 l 53 447 l 139 447 q 154 525 145 492 l 69 525 l 96 644 l 187 644 q 357 911 246 815 q 611 1007 468 1007 q 732 991 679 1007 q 844 937 786 976 l 760 786 q 671 829 701 819 q 610 839 641 839 z "},"℅":{"ha":1063,"x_min":83,"x_max":996,"o":"m 289 510 q 153 560 202 510 q 104 694 104 610 q 173 916 104 829 q 355 1003 241 1003 q 496 975 429 1003 l 458 868 q 361 892 401 892 q 301 865 327 892 q 260 793 275 838 q 245 705 245 749 q 264 643 245 665 q 317 621 282 621 q 360 626 339 621 q 424 653 380 631 l 424 543 q 289 510 359 510 m 981 991 l 245 0 l 83 0 l 821 991 l 981 991 m 996 286 q 927 68 996 151 q 741 -14 859 -14 q 606 36 656 -14 q 557 174 557 86 q 626 395 557 311 q 812 479 695 479 q 947 428 899 479 q 996 286 996 377 m 802 368 q 749 341 772 368 q 712 266 726 313 q 699 172 699 218 q 713 116 699 136 q 753 97 727 97 q 824 155 795 97 q 852 296 852 213 q 802 368 852 368 z "},"ℓ":{"ha":694,"x_min":28,"x_max":644,"o":"m 422 129 q 479 162 457 129 q 504 265 500 196 l 644 265 q 578 52 637 116 q 400 -12 519 -12 q 217 58 283 -12 q 151 261 151 128 l 151 347 q 28 314 74 325 l 28 447 q 151 484 94 465 l 151 762 q 211 945 151 885 q 399 1004 270 1004 q 564 946 503 1004 q 624 785 624 887 q 597 644 624 705 q 517 534 571 583 q 350 428 463 486 l 350 254 q 422 129 350 129 m 446 781 q 399 875 446 875 q 360 849 370 875 q 350 781 350 823 l 350 574 q 446 781 446 627 z "},"№":{"ha":1360,"x_min":17,"x_max":1318,"o":"m 715 0 l 511 0 l 339 704 l 336 704 q 317 577 332 671 q 289 427 301 482 l 199 0 l 17 0 l 227 991 l 431 991 l 604 283 l 606 283 q 652 559 621 417 l 743 991 l 925 991 l 715 0 m 817 0 l 843 127 l 1243 127 l 1217 0 l 817 0 m 1318 485 q 1287 333 1318 403 q 1198 225 1255 264 q 1063 186 1141 186 q 927 235 976 186 q 879 370 879 283 q 912 532 879 458 q 1003 642 946 605 q 1136 679 1061 679 q 1269 627 1219 679 q 1318 485 1318 575 m 1178 497 q 1166 548 1178 528 q 1128 568 1154 568 q 1075 542 1099 568 q 1036 464 1051 515 q 1021 364 1021 413 q 1071 297 1021 297 q 1123 322 1099 297 q 1162 400 1147 348 q 1178 497 1178 452 z "},"™":{"ha":1040,"x_min":72,"x_max":1039,"o":"m 319 503 l 205 503 l 205 890 l 72 890 l 72 991 l 454 991 l 454 890 l 319 890 l 319 503 m 710 503 l 597 861 l 593 861 l 596 786 l 596 503 l 485 503 l 485 991 l 653 991 l 761 646 l 876 991 l 1039 991 l 1039 503 l 925 503 l 925 779 l 928 861 l 924 861 l 806 503 l 710 503 z "},"Ω":{"ha":1006,"x_min":-41,"x_max":964,"o":"m 578 832 q 443 789 503 832 q 345 662 382 747 q 307 482 307 578 q 333 308 307 378 q 412 187 359 238 l 372 0 l -41 0 l -5 176 l 248 176 q 139 302 179 219 q 98 488 98 385 q 161 760 98 639 q 336 944 224 881 q 593 1007 447 1007 q 865 913 766 1007 q 964 654 964 820 q 890 365 964 488 q 681 176 817 243 l 928 176 l 890 0 l 450 0 l 490 187 q 753 629 753 341 q 707 780 753 728 q 578 832 662 832 z "},"℮":{"ha":860,"x_min":74,"x_max":793,"o":"m 433 -24 q 245 26 327 -24 q 118 164 163 76 q 74 359 74 253 q 117 555 74 469 q 245 692 160 642 q 433 743 330 743 q 619 695 536 743 q 747 559 701 647 q 793 359 793 471 l 232 359 l 232 118 q 321 58 265 82 q 433 35 378 35 q 584 70 523 35 q 701 193 646 105 l 750 165 q 610 18 684 60 q 433 -24 536 -24 m 636 418 l 636 606 q 547 664 602 642 q 432 686 492 686 q 232 607 315 686 l 232 418 l 636 418 z "},"⅛":{"ha":1223,"x_min":66,"x_max":1136,"o":"m 939 606 q 1084 568 1033 606 q 1136 465 1136 530 q 1102 369 1136 405 q 1008 312 1068 334 q 1079 254 1052 288 q 1105 172 1105 221 q 1038 33 1105 83 q 855 -16 971 -16 q 702 27 759 -16 q 644 142 644 71 q 685 247 644 206 q 800 313 726 288 q 746 367 765 337 q 726 438 726 396 q 786 559 726 513 q 939 606 846 606 m 887 246 q 801 153 801 216 q 819 108 801 125 q 867 91 837 91 q 922 112 902 91 q 943 163 943 134 q 928 212 943 193 q 887 246 913 231 m 937 499 q 897 482 913 499 q 880 438 880 465 q 924 372 880 400 q 987 450 987 399 q 973 486 987 473 q 937 499 959 499 m 336 991 l 477 991 l 351 397 l 184 397 l 241 667 q 278 807 257 741 q 224 766 267 797 l 135 711 l 66 823 l 336 991 m 1017 991 l 282 0 l 120 0 l 857 991 l 1017 991 z "},"⅜":{"ha":1223,"x_min":62,"x_max":1190,"o":"m 551 861 q 517 763 551 802 q 404 703 482 723 l 404 700 q 509 581 509 677 q 436 439 509 492 q 243 386 363 386 q 144 396 192 386 q 62 424 96 407 l 62 554 q 235 505 147 505 q 319 526 286 505 q 353 586 353 547 q 335 628 353 611 q 275 646 317 646 l 189 646 l 212 754 l 273 754 q 363 773 330 754 q 396 831 396 792 q 378 871 396 858 q 330 885 361 885 q 203 840 272 885 l 147 942 q 359 1004 243 1004 q 499 967 448 1004 q 551 861 551 929 m 1085 991 l 350 0 l 188 0 l 925 991 l 1085 991 m 993 606 q 1139 568 1087 606 q 1190 465 1190 530 q 1156 369 1190 405 q 1062 312 1122 334 q 1133 254 1106 288 q 1160 172 1160 221 q 1093 33 1160 83 q 909 -16 1025 -16 q 756 27 813 -16 q 699 142 699 71 q 739 247 699 206 q 854 313 780 288 q 800 367 819 337 q 781 438 781 396 q 840 559 781 513 q 993 606 900 606 m 941 246 q 855 153 855 216 q 873 108 855 125 q 921 91 891 91 q 977 112 956 91 q 997 163 997 134 q 982 212 997 193 q 941 246 968 231 m 991 499 q 951 482 968 499 q 935 438 935 465 q 978 372 935 400 q 1042 450 1042 399 q 1027 486 1042 473 q 991 499 1013 499 z "},"⅝":{"ha":1223,"x_min":69,"x_max":1179,"o":"m 337 781 q 462 735 414 781 q 511 618 511 690 q 437 449 511 513 q 241 386 363 386 q 69 422 132 386 l 69 546 q 146 513 104 525 q 227 501 188 501 q 320 528 287 501 q 354 602 354 554 q 265 676 354 676 q 175 663 222 676 l 123 708 l 204 991 l 562 991 l 534 867 l 294 867 l 265 772 q 337 781 290 781 m 1074 991 l 339 0 l 177 0 l 914 991 l 1074 991 m 982 606 q 1128 568 1076 606 q 1179 465 1179 530 q 1145 369 1179 405 q 1051 312 1112 334 q 1122 254 1095 288 q 1149 172 1149 221 q 1082 33 1149 83 q 899 -16 1015 -16 q 745 27 802 -16 q 688 142 688 71 q 728 247 688 206 q 843 313 769 288 q 789 367 808 337 q 770 438 770 396 q 829 559 770 513 q 982 606 889 606 m 930 246 q 844 153 844 216 q 862 108 844 125 q 910 91 880 91 q 966 112 945 91 q 986 163 986 134 q 971 212 986 193 q 930 246 957 231 m 981 499 q 940 482 957 499 q 924 438 924 465 q 967 372 924 400 q 1031 450 1031 399 q 1017 486 1031 473 q 981 499 1002 499 z "},"⅞":{"ha":1223,"x_min":100,"x_max":1137,"o":"m 100 397 l 414 867 l 139 867 l 165 991 l 612 991 l 591 890 l 275 397 l 100 397 m 1019 991 l 283 0 l 121 0 l 859 991 l 1019 991 m 940 606 q 1086 568 1034 606 q 1137 465 1137 530 q 1103 369 1137 405 q 1009 312 1069 334 q 1080 254 1053 288 q 1107 172 1107 221 q 1040 33 1107 83 q 857 -16 972 -16 q 703 27 760 -16 q 646 142 646 71 q 686 247 646 206 q 801 313 727 288 q 747 367 766 337 q 728 438 728 396 q 787 559 728 513 q 940 606 847 606 m 888 246 q 802 153 802 216 q 820 108 802 125 q 868 91 838 91 q 924 112 903 91 q 944 163 944 134 q 929 212 944 193 q 888 246 915 231 m 939 499 q 898 482 915 499 q 882 438 882 465 q 925 372 882 400 q 989 450 989 399 q 975 486 989 473 q 939 499 960 499 z "},"∂":{"ha":807,"x_min":52,"x_max":772,"o":"m 772 624 q 715 294 772 446 q 558 65 657 143 q 329 -14 458 -14 q 123 58 194 -14 q 52 271 52 130 q 100 491 52 386 q 228 650 149 597 q 410 704 308 704 q 559 659 503 704 q 514 795 552 754 q 407 836 477 836 q 222 775 314 836 l 222 950 q 450 1006 326 1006 q 689 909 605 1006 q 772 624 772 812 m 340 151 q 467 241 411 151 q 549 486 522 330 q 508 532 535 513 q 444 550 480 550 q 358 513 397 550 q 294 404 319 477 q 269 254 269 330 q 340 151 269 151 z "},"∆":{"ha":840,"x_min":-36,"x_max":761,"o":"m 427 996 l 665 996 l 761 118 l 734 0 l -36 0 l -12 122 l 427 996 m 510 796 q 471 700 499 759 l 216 175 l 567 175 l 515 689 q 510 796 510 754 z "},"∏":{"ha":1029,"x_min":131,"x_max":935,"o":"m 720 -310 l 720 817 l 346 817 l 346 -310 l 131 -310 l 131 991 l 935 991 l 935 -310 l 720 -310 z "},"∑":{"ha":876,"x_min":83,"x_max":925,"o":"m 83 -310 l 83 -195 l 473 371 l 94 879 l 94 991 l 885 991 l 885 821 l 372 821 l 707 375 l 355 -138 l 925 -138 l 925 -310 l 83 -310 z "},"−":{"ha":765,"x_min":74,"x_max":720,"o":"m 74 415 l 74 564 l 720 564 l 720 415 l 74 415 z "},"√":{"ha":762,"x_min":66,"x_max":907,"o":"m 492 -9 l 368 -9 l 186 490 l 66 490 l 66 635 l 288 635 l 427 250 l 758 1192 l 907 1192 l 492 -9 z "},"∞":{"ha":982,"x_min":90,"x_max":920,"o":"m 920 486 q 858 323 920 390 q 704 257 796 257 q 501 376 585 257 q 410 292 460 322 q 309 261 361 261 q 151 323 212 261 q 90 490 90 386 q 152 653 90 588 q 309 718 213 718 q 505 600 429 718 q 704 715 590 715 q 859 653 799 715 q 920 486 920 591 m 315 399 q 428 490 375 399 q 314 582 377 582 q 252 555 275 582 q 229 489 229 529 q 253 424 229 448 q 315 399 276 399 m 694 578 q 581 488 635 578 q 696 395 635 395 q 758 422 735 395 q 781 488 781 450 q 756 553 781 528 q 694 578 732 578 z "},"∫":{"ha":572,"x_min":0,"x_max":572,"o":"m 465 882 q 410 857 431 882 q 390 789 390 833 l 390 -77 q 323 -269 390 -203 q 132 -334 257 -334 q 0 -306 58 -334 l 0 -134 q 107 -160 62 -160 q 182 -64 182 -160 l 182 799 q 248 990 182 924 q 440 1055 313 1055 q 572 1028 514 1055 l 572 856 q 465 882 512 882 z "},"≈":{"ha":765,"x_min":74,"x_max":720,"o":"m 232 589 q 156 568 197 589 q 74 507 115 547 l 74 664 q 248 737 142 737 q 321 729 288 737 q 421 694 355 722 q 496 667 465 676 q 561 657 528 657 q 637 678 595 657 q 720 739 678 699 l 720 582 q 546 509 650 509 q 472 516 506 509 q 372 551 438 524 q 292 581 319 574 q 232 589 264 589 m 232 318 q 156 298 197 318 q 74 236 115 277 l 74 393 q 248 467 143 467 q 321 459 288 467 q 421 424 355 451 q 499 394 471 403 q 561 386 528 386 q 720 468 634 386 l 720 311 q 546 237 650 237 q 467 247 503 237 q 372 281 431 256 q 292 311 319 303 q 232 318 264 318 z "},"≠":{"ha":765,"x_min":74,"x_max":720,"o":"m 380 283 l 294 97 l 158 154 l 218 283 l 74 283 l 74 432 l 288 432 l 342 547 l 74 547 l 74 694 l 410 694 l 498 885 l 635 827 l 572 694 l 720 694 l 720 547 l 504 547 l 450 432 l 720 432 l 720 283 l 380 283 z "},"≤":{"ha":765,"x_min":74,"x_max":721,"o":"m 74 0 l 74 149 l 720 149 l 720 0 l 74 0 m 721 179 l 75 476 l 75 574 l 721 909 l 721 747 l 285 532 l 721 342 l 721 179 z "},"≥":{"ha":765,"x_min":74,"x_max":720,"o":"m 74 0 l 74 149 l 720 149 l 720 0 l 74 0 m 74 342 l 510 532 l 74 747 l 74 909 l 720 574 l 720 476 l 74 179 l 74 342 z "},"◊":{"ha":810,"x_min":77,"x_max":765,"o":"m 765 498 l 460 0 l 382 0 l 77 498 l 382 999 l 460 999 l 765 498 m 586 498 l 421 777 l 256 498 l 421 221 l 586 498 z "},"ﬁ":{"ha":917,"x_min":-149,"x_max":947,"o":"m -31 -334 q -149 -317 -101 -334 l -149 -153 q -71 -167 -107 -167 q 2 -140 -29 -167 q 46 -52 33 -113 l 184 603 l 74 603 l 94 701 l 218 758 l 231 815 q 325 1003 258 944 q 510 1063 391 1063 q 669 1029 599 1063 l 615 878 q 525 899 568 899 q 463 871 486 899 q 431 800 439 844 l 422 758 l 571 758 l 538 603 l 389 603 l 243 -82 q -31 -334 191 -334 m 722 936 q 754 1025 722 995 q 846 1055 787 1055 q 921 1034 895 1055 q 947 974 947 1013 q 917 886 947 920 q 825 852 887 852 q 722 936 722 852 m 733 0 l 529 0 l 690 758 l 894 758 l 733 0 z "},"ﬂ":{"ha":917,"x_min":-149,"x_max":957,"o":"m -31 -334 q -149 -317 -101 -334 l -149 -153 q -71 -167 -107 -167 q 2 -140 -29 -167 q 46 -52 33 -113 l 184 603 l 74 603 l 94 701 l 218 758 l 231 815 q 325 1003 258 944 q 510 1063 391 1063 q 669 1029 599 1063 l 615 878 q 525 899 568 899 q 463 871 486 899 q 431 800 439 844 l 422 758 l 571 758 l 538 603 l 389 603 l 243 -82 q -31 -334 191 -334 m 733 0 l 529 0 l 753 1055 l 957 1055 l 733 0 z "},"ȷ":{"ha":412,"x_min":-178,"x_max":393,"o":"m -60 -334 q -178 -317 -130 -334 l -178 -153 q -100 -167 -136 -167 q -27 -140 -58 -167 q 17 -52 4 -113 l 189 758 l 393 758 l 214 -82 q -60 -334 161 -334 z "},"⁰":{"ha":526,"x_min":66,"x_max":546,"o":"m 340 864 q 266 777 298 864 q 233 589 233 690 q 271 524 233 524 q 347 612 315 524 q 379 799 379 701 q 340 864 379 864 m 546 796 q 510 582 546 676 q 409 435 475 487 q 258 383 344 383 q 118 437 170 383 q 66 587 66 491 q 102 809 66 711 q 201 956 138 907 q 351 1006 264 1006 q 495 952 444 1006 q 546 796 546 899 z "},"⁴":{"ha":526,"x_min":32,"x_max":551,"o":"m 526 500 l 446 500 l 424 397 l 262 397 l 285 500 l 32 500 l 53 618 l 375 996 l 551 996 l 469 614 l 550 614 l 526 500 m 309 614 l 348 770 l 363 821 q 334 781 354 807 q 191 614 313 755 l 309 614 z "},"⁵":{"ha":526,"x_min":64,"x_max":557,"o":"m 332 781 q 457 735 408 781 q 505 618 505 690 q 431 449 505 513 q 236 386 357 386 q 64 422 127 386 l 64 546 q 140 513 98 525 q 221 501 182 501 q 315 528 281 501 q 349 602 349 554 q 260 676 349 676 q 170 663 217 676 l 118 708 l 199 991 l 557 991 l 529 867 l 289 867 l 260 772 q 332 781 284 781 z "},"⁶":{"ha":526,"x_min":61,"x_max":545,"o":"m 225 725 q 358 785 279 785 q 470 743 429 785 q 511 627 511 701 q 444 454 511 522 q 268 386 377 386 q 112 444 163 386 q 61 606 61 503 q 108 815 61 723 q 238 956 155 908 q 437 1004 322 1004 q 496 1000 462 1004 q 545 990 531 995 l 515 867 q 418 882 477 882 q 293 841 344 882 q 221 725 242 801 l 225 725 m 271 503 q 337 533 312 503 q 363 612 363 564 q 346 664 363 645 q 300 682 328 682 q 234 656 258 682 q 210 581 210 630 q 225 525 210 547 q 271 503 241 503 z "},"⁷":{"ha":526,"x_min":83,"x_max":595,"o":"m 83 397 l 397 867 l 122 867 l 149 991 l 595 991 l 574 890 l 258 397 l 83 397 z "},"⁸":{"ha":526,"x_min":56,"x_max":547,"o":"m 350 1006 q 496 968 444 1006 q 547 864 547 930 q 513 769 547 804 q 419 711 479 733 q 490 654 463 687 q 517 571 517 621 q 450 433 517 482 q 267 383 382 383 q 113 427 170 383 q 56 542 56 471 q 96 646 56 606 q 211 713 137 687 q 157 766 176 736 q 138 838 138 795 q 197 959 138 912 q 350 1006 257 1006 m 298 646 q 212 553 212 616 q 230 507 212 524 q 278 490 248 490 q 334 512 313 490 q 354 562 354 533 q 339 611 354 592 q 298 646 325 630 m 349 899 q 308 882 325 899 q 292 838 292 865 q 335 771 292 800 q 399 850 399 799 q 385 886 399 873 q 349 899 370 899 z "},"⁹":{"ha":526,"x_min":61,"x_max":536,"o":"m 536 793 q 491 576 536 669 q 360 435 446 484 q 160 386 275 386 q 61 399 100 386 l 61 525 q 111 513 80 517 q 164 509 142 509 q 299 546 247 509 q 378 667 352 583 q 239 606 317 606 q 127 647 168 606 q 86 764 86 689 q 153 937 86 870 q 329 1004 220 1004 q 483 950 429 1004 q 536 793 536 895 m 326 888 q 261 858 287 888 q 236 781 236 827 q 253 730 236 748 q 298 711 270 711 q 364 737 339 711 q 389 814 389 762 q 374 867 389 846 q 326 888 359 888 z "}," ":{"ha":694,"x_min":0,"x_max":0,"o":""}," ":{"ha":1389,"x_min":0,"x_max":0,"o":""}," ":{"ha":694,"x_min":0,"x_max":0,"o":""}," ":{"ha":1389,"x_min":0,"x_max":0,"o":""}," ":{"ha":463,"x_min":0,"x_max":0,"o":""}," ":{"ha":347,"x_min":0,"x_max":0,"o":""}," ":{"ha":232,"x_min":0,"x_max":0,"o":""}," ":{"ha":777,"x_min":0,"x_max":0,"o":""}," ":{"ha":396,"x_min":0,"x_max":0,"o":""}," ":{"ha":278,"x_min":0,"x_max":0,"o":""}," ":{"ha":139,"x_min":0,"x_max":0,"o":""},"​":{"ha":0,"x_min":0,"x_max":0,"o":""},"\ufeff":{"ha":0,"x_min":0,"x_max":0,"o":""},"￼":{"ha":1389,"x_min":57,"x_max":1346,"o":"m 57 823 l 57 1029 l 262 1029 l 262 954 l 132 954 l 132 823 l 57 823 m 1140 954 l 1140 1029 l 1346 1029 l 1346 823 l 1272 823 l 1272 954 l 1140 954 m 57 -260 l 57 -54 l 132 -54 l 132 -186 l 262 -186 l 262 -260 l 57 -260 m 1140 -260 l 1140 -186 l 1272 -186 l 1272 -54 l 1346 -54 l 1346 -260 l 1140 -260 m 875 -260 l 875 -186 l 1060 -186 l 1060 -260 l 875 -260 m 345 -260 l 345 -186 l 528 -186 l 528 -260 l 345 -260 m 345 954 l 345 1029 l 528 1029 l 528 954 l 345 954 m 1346 26 l 1272 26 l 1272 210 l 1346 210 l 1346 26 m 1346 558 l 1272 558 l 1272 742 l 1346 742 l 1346 558 m 610 -260 l 610 -186 l 794 -186 l 794 -260 l 610 -260 m 132 26 l 57 26 l 57 210 l 132 210 l 132 26 m 610 954 l 610 1029 l 794 1029 l 794 954 l 610 954 m 875 954 l 875 1029 l 1060 1029 l 1060 954 l 875 954 m 132 292 l 57 292 l 57 476 l 132 476 l 132 292 m 132 558 l 57 558 l 57 742 l 132 742 l 132 558 m 1346 292 l 1272 292 l 1272 476 l 1346 476 l 1346 292 m 586 427 q 540 275 586 328 q 408 222 494 222 q 276 275 322 222 q 231 427 231 328 q 276 578 231 526 q 408 631 322 631 q 540 578 494 631 q 586 427 586 526 m 317 427 q 408 293 317 293 q 500 427 500 293 q 408 559 500 559 q 317 427 317 559 m 643 625 l 760 625 q 871 603 833 625 q 909 524 909 580 q 894 467 909 490 q 848 439 878 444 l 848 436 q 905 404 888 427 q 921 343 921 381 q 884 258 921 288 q 783 228 847 228 l 643 228 l 643 625 m 726 468 l 771 468 q 814 479 802 468 q 827 513 827 491 q 812 546 827 536 q 766 555 798 555 l 726 555 l 726 468 m 726 401 l 726 297 l 777 297 q 822 312 810 297 q 835 351 835 326 q 774 401 835 401 l 726 401 m 1011 224 q 957 231 976 224 l 957 300 q 1003 294 986 294 q 1061 353 1061 294 l 1061 625 l 1146 625 l 1146 355 q 1111 257 1146 291 q 1011 224 1075 224 z "},"�":{"ha":1389,"x_min":57,"x_max":1331,"o":"m 693 1055 l 1331 419 l 693 -216 l 57 419 l 693 1055 m 737 249 l 737 281 q 752 337 737 315 q 811 392 767 359 q 906 490 881 448 q 930 593 930 533 q 867 736 930 684 q 692 789 804 789 q 575 770 638 789 q 464 722 512 751 l 519 602 q 689 656 628 656 q 753 636 732 656 q 774 585 774 616 q 757 523 774 549 q 692 461 741 498 q 615 377 635 415 q 595 289 595 339 l 595 249 l 737 249 m 576 62 q 601 -5 576 20 q 672 -29 625 -29 q 742 -4 717 -29 q 766 62 766 20 q 742 131 766 106 q 672 155 718 155 q 600 131 623 155 q 576 62 576 106 z "},"ǰ":{"ha":412,"x_min":-178,"x_max":614,"o":"m -60 -334 q -178 -317 -130 -334 l -178 -153 q -100 -167 -136 -167 q -27 -140 -58 -167 q 17 -52 4 -113 l 189 758 l 393 758 l 214 -82 q -60 -334 161 -334 m 66 1064 l 200 1064 q 310 950 243 1028 q 467 1064 388 1014 l 614 1064 l 614 1047 q 414 842 471 913 l 185 842 q 135 938 170 878 q 66 1047 100 998 l 66 1064 z "},"ʼ":{"ha":298,"x_min":72,"x_max":403,"o":"m 397 991 l 403 977 q 225 652 333 823 l 72 652 q 204 991 132 791 l 397 991 z "},"ϑ":{"ha":962,"x_min":79,"x_max":990,"o":"m 507 803 q 553 708 507 743 q 684 672 600 674 q 688 746 688 706 q 663 871 688 828 q 596 914 639 914 q 529 883 551 914 q 507 803 507 852 m 867 517 q 767 209 830 323 q 613 40 704 94 q 401 -14 522 -14 q 210 39 280 -14 q 140 182 140 91 q 161 292 140 229 q 178 364 178 344 q 139 403 178 403 q 79 386 110 403 l 79 532 q 232 562 158 562 q 339 528 301 562 q 376 432 376 494 q 353 302 376 382 q 335 216 335 246 q 419 147 335 147 q 562 237 502 147 q 661 514 621 327 q 470 556 551 519 q 348 655 390 593 q 306 794 306 717 q 387 995 306 921 q 607 1069 469 1069 q 818 979 745 1069 q 890 721 890 889 l 890 696 l 889 672 l 990 672 l 957 517 l 867 517 z "},"ϒ":{"ha":799,"x_min":125,"x_max":917,"o":"m 424 590 l 469 673 q 647 934 576 868 q 807 1000 718 1000 q 917 982 863 1000 l 879 825 q 832 835 858 835 q 749 781 792 835 q 489 372 656 667 l 410 0 l 204 0 l 285 379 l 125 991 l 336 991 l 424 590 z "},"ϖ":{"ha":1303,"x_min":64,"x_max":1329,"o":"m 375 -14 q 201 58 262 -14 q 139 258 139 130 q 169 438 139 345 q 249 603 199 532 l 64 603 l 83 703 l 216 758 l 1329 758 l 1297 603 l 1132 603 q 1143 468 1143 543 q 1095 219 1143 334 q 966 45 1046 104 q 787 -14 886 -14 q 668 19 714 -14 q 602 123 622 52 q 502 18 557 50 q 375 -14 447 -14 m 951 521 q 947 603 951 570 l 432 603 q 335 264 335 412 q 411 147 335 147 q 486 185 458 147 q 534 317 514 222 l 555 410 l 749 410 l 728 317 q 715 225 715 259 q 783 147 715 147 q 906 249 861 147 q 951 521 951 350 z "},"Ḿ":{"ha":1222,"x_min":36,"x_max":1229,"o":"m 568 250 l 942 991 l 1229 991 l 1019 0 l 829 0 l 928 469 q 999 768 964 637 l 996 768 l 610 0 l 419 0 l 378 768 l 375 768 q 349 612 368 709 q 222 0 331 515 l 36 0 l 245 991 l 519 991 l 566 250 l 568 250 m 629 1089 q 779 1295 682 1149 l 1006 1295 l 1006 1283 q 902 1180 975 1245 q 770 1072 829 1114 l 629 1072 l 629 1089 z "},"ḿ":{"ha":1257,"x_min":25,"x_max":1186,"o":"m 572 772 q 750 618 721 772 l 754 618 q 863 732 800 692 q 997 772 926 772 q 1138 715 1089 772 q 1186 554 1186 657 q 1171 432 1186 503 l 1080 0 l 876 0 l 970 443 q 981 524 981 489 q 914 607 981 607 q 801 531 852 607 q 721 315 751 455 l 656 0 l 452 0 l 545 443 q 555 524 555 489 q 489 607 555 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 m 640 859 q 791 1064 694 918 l 1018 1064 l 1018 1053 q 913 949 987 1015 q 782 842 840 884 l 640 842 l 640 859 z "},"Ḁ":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 508 -244 q 460 -362 508 -317 q 336 -407 413 -407 q 214 -363 260 -407 q 168 -245 168 -319 q 214 -129 168 -172 q 336 -85 260 -85 q 459 -129 410 -85 q 508 -244 508 -173 m 401 -245 q 383 -198 401 -215 q 336 -180 364 -180 q 289 -198 307 -180 q 271 -245 271 -215 q 287 -294 271 -276 q 336 -311 303 -311 q 383 -294 364 -311 q 401 -245 401 -276 z "},"ḁ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 489 -244 q 441 -362 489 -317 q 317 -407 394 -407 q 195 -363 241 -407 q 149 -245 149 -319 q 195 -129 149 -172 q 317 -85 241 -85 q 440 -129 391 -85 q 489 -244 489 -173 m 382 -245 q 364 -198 382 -215 q 317 -180 345 -180 q 270 -198 288 -180 q 252 -245 252 -215 q 268 -294 252 -276 q 317 -311 284 -311 q 364 -294 345 -311 q 382 -245 382 -276 z "},"Ὅ":{"ha":1082,"x_min":-186,"x_max":1039,"o":"m 1039 636 q 972 293 1039 444 q 788 64 905 141 q 519 -14 671 -14 q 249 86 346 -14 q 151 364 151 186 q 218 695 151 544 q 404 926 286 846 q 676 1007 522 1007 q 944 909 849 1007 q 1039 636 1039 812 m 659 832 q 509 770 577 832 q 401 600 440 708 q 362 364 362 491 q 407 214 362 264 q 534 163 452 163 q 684 222 616 163 q 789 389 751 281 q 827 631 827 496 q 783 780 827 727 q 659 832 739 832 m 26 789 q 123 993 67 871 l 300 993 l 300 979 q 130 771 219 863 l 26 771 l 26 789 m -186 844 q -135 947 -186 908 q 26 1004 -84 987 l 26 954 q -48 929 -21 943 q -75 889 -75 915 q -68 875 -75 880 q -52 865 -62 871 q -28 849 -37 858 q -19 821 -19 840 q -38 780 -19 795 q -94 765 -57 765 q -159 785 -132 765 q -186 844 -186 806 z "},"˳":{"ha":463,"x_min":-69,"x_max":271,"o":"m 271 -244 q 223 -362 271 -317 q 98 -407 176 -407 q -23 -363 22 -407 q -69 -245 -69 -319 q -23 -129 -69 -172 q 98 -85 22 -85 q 222 -129 173 -85 q 271 -244 271 -173 m 164 -245 q 145 -198 164 -215 q 98 -180 127 -180 q 52 -198 70 -180 q 33 -245 33 -215 q 50 -294 33 -276 q 98 -311 66 -311 q 145 -294 127 -311 q 164 -245 164 -276 z "},"ﬃ":{"ha":1389,"x_min":-149,"x_max":1419,"o":"m -31 -334 q -149 -317 -101 -334 l -149 -153 q -71 -167 -107 -167 q 2 -140 -29 -167 q 46 -52 33 -113 l 184 603 l 74 603 l 94 701 l 218 758 l 231 815 q 325 1003 258 944 q 510 1063 391 1063 q 669 1029 599 1063 l 615 878 q 525 899 568 899 q 463 871 486 899 q 431 800 439 844 l 422 758 l 690 758 l 703 815 q 797 1003 730 944 q 982 1063 863 1063 q 1141 1029 1071 1063 l 1088 878 q 997 899 1041 899 q 935 871 958 899 q 903 800 911 844 l 895 758 l 1043 758 l 1010 603 l 861 603 l 715 -82 q 441 -334 663 -334 q 323 -317 371 -334 l 323 -153 q 401 -167 365 -167 q 518 -52 494 -167 l 657 603 l 389 603 l 243 -82 q -31 -334 191 -334 m 1206 0 l 1002 0 l 1162 758 l 1367 758 l 1206 0 m 1194 936 q 1227 1025 1194 995 q 1318 1055 1259 1055 q 1394 1034 1368 1055 q 1419 974 1419 1013 q 1390 886 1419 920 q 1297 852 1360 852 q 1194 936 1194 852 z "},"ﬄ":{"ha":1389,"x_min":-149,"x_max":1429,"o":"m -31 -334 q -149 -317 -101 -334 l -149 -153 q -71 -167 -107 -167 q 2 -140 -29 -167 q 46 -52 33 -113 l 184 603 l 74 603 l 94 701 l 218 758 l 231 815 q 325 1003 258 944 q 510 1063 391 1063 q 669 1029 599 1063 l 615 878 q 525 899 568 899 q 463 871 486 899 q 431 800 439 844 l 422 758 l 690 758 l 703 815 q 797 1003 730 944 q 982 1063 863 1063 q 1141 1029 1071 1063 l 1088 878 q 997 899 1041 899 q 935 871 958 899 q 903 800 911 844 l 895 758 l 1043 758 l 1010 603 l 861 603 l 715 -82 q 441 -334 663 -334 q 323 -317 371 -334 l 323 -153 q 401 -167 365 -167 q 518 -52 494 -167 l 657 603 l 389 603 l 243 -82 q -31 -334 191 -334 m 1206 0 l 1002 0 l 1225 1055 l 1429 1055 l 1206 0 z "},"Ơ":{"ha":1072,"x_min":83,"x_max":1219,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 909 867 816 1007 q 1007 1055 985 917 l 1213 1055 l 1219 1039 q 1124 860 1187 931 q 958 750 1061 789 q 971 636 971 693 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 z "},"ơ":{"ha":893,"x_min":61,"x_max":1015,"o":"m 464 772 q 690 673 612 772 q 765 739 736 692 q 808 872 793 785 l 1008 872 l 1015 856 q 920 667 983 734 q 742 559 857 600 q 751 472 751 525 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 z "},"Ư":{"ha":1076,"x_min":96,"x_max":1280,"o":"m 972 991 l 946 867 q 1026 925 998 883 q 1068 1055 1055 968 l 1274 1055 l 1280 1039 q 1147 824 1240 901 q 918 739 1054 748 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 z "},"ư":{"ha":987,"x_min":72,"x_max":1135,"o":"m 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 799 682 q 857 712 833 691 q 894 766 880 733 q 922 871 909 799 l 1128 871 l 1135 854 q 1003 642 1095 718 q 772 554 911 565 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 z "},"̀":{"ha":0,"x_min":-532,"x_max":-243,"o":"m -243 842 l -368 842 q -462 946 -416 888 q -532 1050 -508 1003 l -532 1064 l -321 1064 q -243 859 -297 964 l -243 842 z "},"́":{"ha":0,"x_min":-402,"x_max":-24,"o":"m -402 859 q -252 1064 -349 918 l -24 1064 l -24 1053 q -129 949 -56 1015 q -260 842 -202 884 l -402 842 l -402 859 z "},"̃":{"ha":0,"x_min":-608,"x_max":-39,"o":"m -234 842 q -293 853 -267 842 q -340 877 -318 864 q -381 902 -361 890 q -424 913 -401 913 q -461 894 -445 913 q -488 840 -478 875 l -608 840 q -417 1050 -568 1050 q -358 1039 -384 1050 q -309 1014 -332 1027 q -267 990 -287 1001 q -227 979 -248 979 q -187 997 -203 979 q -156 1051 -171 1014 l -39 1051 q -234 842 -84 842 z "},"̉":{"ha":0,"x_min":-410,"x_max":-118,"o":"m -118 1028 q -252 875 -118 916 l -265 827 l -389 827 l -379 926 q -304 955 -326 936 q -282 1003 -282 973 q -293 1029 -282 1019 q -325 1039 -304 1039 q -410 1025 -359 1039 l -410 1136 q -292 1153 -360 1153 q -163 1121 -209 1153 q -118 1028 -118 1088 z "},"̣":{"ha":0,"x_min":-628,"x_max":-403,"o":"m -628 -208 q -595 -119 -628 -150 q -504 -89 -563 -89 q -430 -110 -456 -89 q -403 -171 -403 -130 q -433 -258 -403 -225 q -525 -292 -463 -292 q -628 -208 -628 -292 z "},"Ѐ":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 614 1071 l 490 1071 q 396 1175 441 1118 q 326 1279 350 1232 l 326 1293 l 536 1293 q 614 1088 561 1193 l 614 1071 z "},"Ѝ":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 286 283 l 804 991 l 1055 991 l 846 0 l 659 0 q 756 463 722 302 q 814 720 790 623 l 808 721 l 290 0 l 36 0 l 245 991 l 436 991 l 336 522 q 279 283 292 331 l 286 283 m 735 1071 l 610 1071 q 516 1175 562 1118 q 446 1279 471 1232 l 446 1293 l 657 1293 q 735 1088 682 1193 l 735 1071 z "},"ѐ":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 549 842 l 425 842 q 331 946 376 888 q 260 1050 285 1003 l 260 1064 l 471 1064 q 549 859 496 964 l 549 842 z "},"ѝ":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 573 842 l 448 842 q 354 946 400 888 q 284 1050 309 1003 l 284 1064 l 495 1064 q 573 859 519 964 l 573 842 z "},"Ѡ":{"ha":1422,"x_min":87,"x_max":1378,"o":"m 1050 838 q 985 824 1015 838 q 921 786 956 810 l 850 933 q 1084 1004 961 1004 q 1303 918 1227 1004 q 1378 668 1378 832 q 1316 314 1378 472 q 1149 71 1254 156 q 890 -14 1044 -14 q 654 111 722 -14 q 550 14 605 41 q 408 -14 495 -14 q 172 87 256 -14 q 87 366 87 187 q 212 820 87 635 q 557 1004 337 1004 q 676 984 623 1004 q 765 935 730 964 l 675 787 l 650 805 q 555 838 604 838 q 426 773 485 838 q 332 601 366 709 q 298 366 298 492 q 431 163 298 163 q 528 199 491 163 q 585 317 566 236 l 621 485 l 827 485 l 800 354 q 787 258 787 296 q 812 189 787 216 q 886 163 837 163 q 1030 223 968 163 q 1129 405 1092 283 q 1166 663 1166 526 q 1050 838 1166 838 z "},"ѡ":{"ha":1153,"x_min":69,"x_max":1165,"o":"m 164 0 l 69 758 l 269 758 l 309 351 q 318 184 314 294 l 504 518 l 482 758 l 679 758 l 701 311 q 705 184 705 236 q 855 428 798 295 q 956 758 913 562 l 1165 758 q 1019 332 1120 517 q 753 0 918 146 l 555 0 l 530 282 l 528 282 l 380 0 l 164 0 z "},"Ѣ":{"ha":872,"x_min":83,"x_max":800,"o":"m 800 334 q 693 86 800 173 q 383 0 586 0 l 86 0 l 249 762 l 83 762 l 117 918 l 281 918 l 310 1055 l 517 1055 l 488 918 l 685 918 l 652 762 l 454 762 l 422 611 l 468 611 q 715 540 629 611 q 800 334 800 469 m 329 172 l 397 172 q 541 212 492 172 q 590 323 590 252 q 460 439 590 439 l 386 439 l 329 172 z "},"ѣ":{"ha":838,"x_min":41,"x_max":760,"o":"m 602 603 l 406 603 l 372 450 q 519 465 431 465 q 695 409 631 465 q 760 260 760 353 q 718 116 760 178 q 594 21 675 55 q 397 -14 513 -14 q 196 43 265 -14 q 126 208 126 100 q 143 334 126 254 l 201 603 l 41 603 l 74 758 l 236 758 l 265 895 l 469 895 l 439 758 l 633 758 l 602 603 m 453 322 q 345 310 406 322 q 329 215 329 240 q 355 151 329 173 q 427 129 382 129 q 519 159 485 129 q 554 239 554 190 q 453 322 554 322 z "},"Ѥ":{"ha":1232,"x_min":36,"x_max":1287,"o":"m 996 832 q 827 772 901 832 q 715 603 753 711 l 1075 603 l 1039 431 l 681 431 q 676 372 676 407 q 723 217 676 271 q 854 163 770 163 q 958 174 905 163 q 1100 215 1011 184 l 1100 39 q 825 -14 973 -14 q 559 88 653 -14 q 465 370 465 189 l 468 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 498 603 q 685 900 554 793 q 996 1007 815 1007 q 1147 990 1078 1007 q 1287 936 1217 974 l 1207 766 q 996 832 1093 832 z "},"ѥ":{"ha":1042,"x_min":25,"x_max":1055,"o":"m 714 -14 q 505 60 578 -14 q 432 267 432 133 q 435 314 432 292 l 297 314 l 231 0 l 25 0 l 187 758 l 393 758 l 330 467 l 460 467 q 603 692 505 611 q 833 772 702 772 q 1055 724 956 772 l 993 568 q 922 595 957 583 q 842 607 886 607 q 742 570 787 607 q 671 467 697 533 l 914 467 l 882 314 l 639 314 l 637 298 l 637 282 q 669 184 637 217 q 755 151 701 151 q 839 163 797 151 q 942 207 880 175 l 942 40 q 714 -14 838 -14 z "},"Ѧ":{"ha":929,"x_min":-83,"x_max":846,"o":"m 489 0 l 298 0 l 390 428 l 358 428 l 135 0 l -83 0 l 465 996 l 718 996 l 846 0 l 654 0 l 608 428 l 575 428 l 489 0 m 590 589 q 567 839 572 753 q 447 589 531 755 l 590 589 z "},"ѧ":{"ha":806,"x_min":-85,"x_max":734,"o":"m 607 758 l 734 0 l 546 0 l 507 286 l 482 286 l 428 0 l 244 0 l 310 286 l 282 286 l 123 0 l -85 0 l 361 758 l 607 758 m 490 427 q 464 623 471 554 l 364 427 l 490 427 z "},"Ѩ":{"ha":1283,"x_min":36,"x_max":1200,"o":"m 1008 0 l 962 428 l 929 428 l 843 0 l 653 0 l 745 428 l 713 428 l 489 0 l 271 0 l 505 428 l 328 428 l 237 0 l 36 0 l 245 991 l 447 991 l 366 603 l 603 603 l 819 996 l 1072 996 l 1200 0 l 1008 0 m 802 589 l 945 589 q 921 839 926 736 q 802 589 892 772 z "},"ѩ":{"ha":1161,"x_min":25,"x_max":1090,"o":"m 859 313 l 842 313 l 783 0 l 600 0 l 671 313 l 652 313 l 479 0 l 271 0 l 454 313 l 275 313 l 208 0 l 25 0 l 186 758 l 371 758 l 309 467 l 545 467 l 717 758 l 962 758 l 1090 0 l 901 0 l 859 313 m 840 467 l 819 623 l 741 467 l 840 467 z "},"Ѫ":{"ha":1014,"x_min":-58,"x_max":1042,"o":"m -58 0 l 113 367 q 217 513 159 465 q 371 578 275 560 l 220 899 l 239 991 l 1042 991 l 1023 895 l 725 568 q 845 481 807 544 q 892 301 884 419 l 914 0 l 711 0 l 696 309 q 676 402 692 374 q 629 431 661 431 l 624 431 l 539 0 l 329 0 l 418 431 l 412 431 q 346 404 375 431 q 289 313 316 377 l 157 0 l -58 0 m 551 597 l 728 817 l 453 817 l 551 597 z "},"ѫ":{"ha":804,"x_min":-69,"x_max":825,"o":"m -69 0 l 56 252 q 144 379 97 336 q 273 440 191 422 l 140 688 l 155 758 l 825 758 l 811 688 l 571 437 q 653 370 625 416 q 694 216 681 324 l 720 0 l 547 0 l 532 208 q 516 279 528 258 q 484 306 505 301 l 421 0 l 240 0 l 310 309 q 259 288 278 307 q 222 231 240 269 l 114 0 l -69 0 m 421 461 l 547 618 l 350 618 l 421 461 z "},"Ѭ":{"ha":1368,"x_min":36,"x_max":1396,"o":"m 905 597 l 1080 817 l 807 817 l 905 597 m 893 0 l 684 0 l 772 431 l 766 431 q 701 405 728 431 q 646 315 673 378 l 511 0 l 296 0 l 440 310 q 514 428 474 385 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 715 603 l 574 899 l 593 991 l 1396 991 l 1378 895 l 1079 568 q 1174 512 1143 543 q 1223 432 1206 481 q 1246 301 1240 382 l 1268 0 l 1065 0 l 1050 309 q 1031 402 1046 374 q 983 431 1015 431 l 978 431 l 893 0 z "},"ѭ":{"ha":1150,"x_min":25,"x_max":1171,"o":"m 277 0 l 387 225 q 450 313 416 285 l 275 313 l 208 0 l 25 0 l 186 758 l 371 758 l 309 467 l 606 467 l 486 688 l 501 758 l 1171 758 l 1157 688 l 917 437 q 1000 368 973 416 q 1040 216 1027 321 l 1065 0 l 893 0 l 878 208 q 862 279 874 257 q 829 306 850 301 l 766 0 l 586 0 l 656 309 q 605 288 624 307 q 568 231 586 269 l 460 0 l 277 0 m 766 461 l 893 618 l 696 618 l 766 461 z "},"Ѯ":{"ha":828,"x_min":-54,"x_max":814,"o":"m 814 775 q 740 594 814 661 q 532 519 665 528 l 532 517 q 686 448 631 505 q 742 302 742 391 q 702 149 742 213 q 575 46 661 85 q 330 -12 488 7 q 210 -32 241 -23 q 164 -55 178 -41 q 150 -89 150 -68 q 231 -139 150 -139 q 338 -136 279 -139 q 435 -132 397 -132 q 538 -160 517 -132 l 538 -315 q 502 -296 527 -304 q 439 -288 477 -288 l 186 -293 q 10 -241 74 -293 q -54 -100 -54 -190 q -22 29 -54 -20 q 83 107 11 77 q 304 160 155 138 q 436 191 387 172 q 508 239 486 211 q 530 315 530 268 q 479 405 530 377 q 314 433 428 433 l 218 433 l 253 597 l 339 597 q 599 733 599 597 q 567 810 599 782 q 471 838 534 838 q 227 754 355 838 l 153 896 q 271 959 211 933 q 406 997 331 985 q 302 1168 372 1067 l 302 1185 l 415 1185 q 519 1067 488 1109 q 606 1153 574 1127 q 672 1191 639 1178 q 745 1204 705 1204 q 814 1193 785 1204 l 814 1092 q 765 1099 791 1099 q 708 1076 740 1099 q 621 994 675 1053 q 761 912 709 972 q 814 775 814 853 z "},"ѯ":{"ha":728,"x_min":-62,"x_max":722,"o":"m 318 467 q 451 487 414 467 q 488 553 488 507 q 465 602 488 584 q 383 619 441 619 q 279 604 336 619 q 170 566 222 589 l 121 714 q 296 762 216 749 q 211 900 268 817 l 211 917 l 323 917 q 428 799 396 841 q 515 885 483 860 q 582 923 547 909 q 653 936 616 936 q 722 925 695 936 l 722 823 q 673 831 697 831 q 623 814 649 831 q 554 755 596 798 q 692 585 692 713 q 649 467 692 514 q 515 396 606 420 l 515 392 q 644 239 644 354 q 604 107 644 159 q 484 26 564 56 q 248 -20 405 -3 q 143 -43 172 -28 q 114 -87 114 -58 q 138 -128 114 -117 q 204 -139 162 -139 q 299 -136 251 -139 q 392 -132 348 -132 q 460 -139 438 -132 q 493 -160 483 -146 l 493 -315 q 456 -296 481 -304 q 395 -288 430 -288 q 280 -290 336 -288 q 161 -293 224 -293 q -6 -240 50 -293 q -62 -96 -62 -188 q 8 65 -62 7 q 229 140 78 123 q 363 163 324 151 q 420 195 402 175 q 437 249 437 215 q 408 304 437 284 q 318 323 378 323 l 199 323 l 229 467 l 318 467 z "},"Ѱ":{"ha":1133,"x_min":121,"x_max":1185,"o":"m 656 294 l 642 294 l 579 0 l 386 0 l 450 294 l 440 294 q 205 365 290 294 q 121 559 121 435 q 136 693 121 620 l 200 991 l 400 991 l 332 667 q 322 587 322 621 q 360 493 322 521 q 473 465 397 465 l 485 465 l 596 991 l 789 991 l 677 465 l 689 465 q 840 512 789 465 q 914 664 891 559 l 983 991 l 1185 991 l 1109 640 q 656 294 1036 294 z "},"ѱ":{"ha":1122,"x_min":81,"x_max":1061,"o":"m 794 1054 l 602 146 q 796 314 734 168 q 857 758 857 461 l 1061 758 q 1008 318 1061 476 q 846 77 956 159 q 567 -20 737 -5 l 500 -334 l 304 -334 l 371 -20 q 155 62 229 -5 q 81 244 81 129 q 92 346 81 292 l 179 758 l 382 758 l 294 340 q 285 258 285 299 q 316 176 285 206 q 406 143 347 146 l 599 1054 l 794 1054 z "},"Ѳ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 467 163 q 626 231 554 163 q 733 421 698 299 l 296 421 q 293 364 293 402 q 339 214 293 264 q 467 163 385 163 m 591 832 q 441 770 510 832 q 330 596 372 708 l 760 596 l 761 631 q 717 779 761 725 q 591 832 673 832 z "},"ѳ":{"ha":812,"x_min":61,"x_max":751,"o":"m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 368 149 q 463 191 420 149 q 528 310 505 233 l 264 310 l 262 290 l 262 277 q 290 182 262 215 q 368 149 317 149 m 449 611 q 356 569 398 611 q 290 453 315 528 l 550 453 l 550 472 q 524 575 550 540 q 449 611 498 611 z "},"Ѵ":{"ha":903,"x_min":125,"x_max":999,"o":"m 364 207 q 402 309 377 246 q 439 395 427 372 l 595 721 q 697 901 657 850 q 784 976 737 951 q 896 1000 831 1000 q 999 981 951 1000 l 999 812 q 933 825 964 825 q 859 795 890 825 q 794 697 829 764 l 437 0 l 211 0 l 125 991 l 325 991 l 359 416 q 363 295 363 350 q 359 207 363 249 l 364 207 z "},"ѵ":{"ha":758,"x_min":69,"x_max":807,"o":"m 309 210 q 371 355 330 270 l 464 546 q 543 681 509 639 q 620 744 578 724 q 718 764 661 764 q 807 746 769 764 l 807 585 q 753 597 779 597 q 708 581 729 597 q 672 537 688 565 q 382 0 657 509 l 163 0 l 69 758 l 269 758 l 302 329 l 305 250 l 304 210 l 309 210 z "},"Ѷ":{"ha":903,"x_min":125,"x_max":999,"o":"m 364 207 q 402 309 377 246 q 439 395 427 372 l 595 721 q 697 901 657 850 q 784 976 737 951 q 896 1000 831 1000 q 999 981 951 1000 l 999 812 q 933 825 964 825 q 859 795 890 825 q 794 697 829 764 l 437 0 l 211 0 l 125 991 l 325 991 l 359 416 q 363 295 363 350 q 359 207 363 249 l 364 207 m 393 1071 q 299 1175 345 1118 q 229 1279 254 1232 l 229 1293 l 421 1293 q 499 1088 447 1187 l 499 1071 l 393 1071 m 652 1071 q 558 1175 604 1118 q 488 1279 512 1232 l 488 1293 l 680 1293 q 757 1088 705 1190 l 757 1071 l 652 1071 z "},"ѷ":{"ha":758,"x_min":69,"x_max":807,"o":"m 309 210 q 371 355 330 270 l 464 546 q 543 681 509 639 q 620 744 578 724 q 718 764 661 764 q 807 746 769 764 l 807 585 q 753 597 779 597 q 708 581 729 597 q 672 537 688 565 q 382 0 657 509 l 163 0 l 69 758 l 269 758 l 302 329 l 305 250 l 304 210 l 309 210 m 281 842 q 187 946 233 888 q 117 1050 141 1003 l 117 1064 l 309 1064 q 387 859 334 958 l 387 842 l 281 842 m 539 842 q 445 946 491 888 q 375 1050 399 1003 l 375 1064 l 567 1064 q 644 859 592 961 l 644 842 l 539 842 z "},"Ѹ":{"ha":1724,"x_min":83,"x_max":1796,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 1072 758 l 1272 758 l 1310 407 q 1320 208 1320 324 l 1324 208 q 1354 289 1337 243 q 1398 393 1370 336 l 1574 758 l 1796 758 l 1335 -109 q 1007 -334 1215 -334 q 907 -321 946 -334 l 907 -158 q 986 -167 954 -167 q 1086 -134 1043 -167 q 1166 -33 1129 -102 l 1183 0 l 1072 758 z "},"ѹ":{"ha":1474,"x_min":61,"x_max":1546,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 822 758 l 1022 758 l 1060 407 q 1069 208 1069 324 l 1074 208 q 1103 289 1087 243 q 1147 393 1120 336 l 1324 758 l 1546 758 l 1084 -109 q 757 -334 964 -334 q 657 -321 696 -334 l 657 -158 q 736 -167 703 -167 q 836 -134 793 -167 q 916 -33 879 -102 l 933 0 l 822 758 z "},"Ѻ":{"ha":1051,"x_min":83,"x_max":1008,"o":"m 1008 599 q 953 303 1008 436 q 798 91 898 170 q 566 -7 699 12 q 534 -65 557 -45 q 468 -85 512 -85 q 405 -64 427 -85 q 383 -5 383 -43 q 161 130 239 22 q 83 404 83 238 q 141 691 83 559 q 298 902 198 823 q 529 1000 397 981 q 561 1056 538 1037 q 628 1075 584 1075 q 690 1055 668 1075 q 713 999 711 1036 q 930 869 852 972 q 1008 599 1008 765 m 498 222 q 575 178 552 222 q 738 326 677 214 q 798 593 798 438 q 769 732 798 675 q 686 815 741 790 q 596 768 652 768 q 517 817 538 768 q 355 665 415 779 q 294 408 294 551 q 325 258 294 316 q 410 178 355 201 q 498 222 446 222 z "},"ѻ":{"ha":879,"x_min":61,"x_max":818,"o":"m 818 446 q 728 140 818 260 q 475 -7 638 20 q 385 -75 458 -75 q 328 -57 348 -75 q 306 -5 307 -38 q 126 100 192 18 q 61 306 61 182 q 154 617 61 495 q 410 765 246 740 q 494 817 429 817 q 571 765 557 817 q 752 659 686 743 q 818 446 818 574 m 612 446 q 554 586 612 550 q 468 530 525 530 q 392 583 411 530 q 301 474 335 550 q 267 306 267 397 q 330 168 267 203 q 365 200 346 189 q 412 211 384 211 q 485 168 465 211 q 578 271 544 196 q 612 446 612 345 z "},"Ѽ":{"ha":1422,"x_min":87,"x_max":1378,"o":"m 1139 1402 l 1111 1271 l 1076 1271 q 987 1282 1028 1271 q 910 1308 945 1294 q 845 1333 875 1321 q 789 1344 815 1344 q 742 1327 760 1344 q 715 1270 725 1310 l 585 1270 q 647 1430 594 1375 q 789 1485 701 1485 q 871 1472 831 1485 q 951 1443 911 1459 q 1031 1415 991 1428 q 1116 1402 1072 1402 l 1139 1402 m 935 1190 q 881 1066 935 1114 q 714 1013 827 1019 l 714 1075 q 784 1101 763 1084 q 806 1146 806 1118 q 800 1163 806 1158 q 781 1174 793 1168 q 753 1192 764 1182 q 743 1225 743 1202 q 765 1272 743 1255 q 828 1289 786 1289 q 905 1262 876 1289 q 935 1190 935 1234 m 1050 838 q 985 824 1015 838 q 921 786 956 810 l 850 933 q 1084 1004 961 1004 q 1303 918 1227 1004 q 1378 668 1378 832 q 1317 306 1378 460 q 1146 69 1256 151 q 890 -14 1036 -14 q 749 13 806 -14 q 650 90 692 39 q 535 9 591 32 q 408 -14 479 -14 q 172 87 256 -14 q 87 366 87 187 q 144 700 87 554 q 308 925 201 845 q 557 1004 414 1004 q 676 984 623 1004 q 765 935 730 964 l 675 787 l 650 805 q 555 838 604 838 q 429 777 488 838 q 334 605 370 716 q 298 366 298 494 q 437 163 298 163 q 560 201 496 163 q 685 315 623 239 q 740 226 713 256 q 803 180 766 197 q 886 163 840 163 q 1029 228 966 163 q 1129 410 1093 293 q 1166 663 1166 526 q 1050 838 1166 838 z "},"ѽ":{"ha":1160,"x_min":61,"x_max":1099,"o":"m 721 -14 q 526 61 597 -14 q 326 -14 435 -14 q 129 63 197 -14 q 61 285 61 139 q 110 542 61 427 q 242 715 159 658 q 437 772 326 772 q 603 730 534 772 l 545 591 q 454 619 504 619 q 361 578 404 619 q 292 461 317 536 q 267 292 267 387 q 370 140 267 140 q 450 162 408 140 q 546 236 492 183 q 697 140 606 140 q 839 237 785 140 q 893 481 893 333 q 871 587 893 554 q 806 619 848 619 q 707 591 766 619 l 667 730 q 851 772 756 772 q 1036 697 973 772 q 1099 481 1099 623 q 1050 219 1099 336 q 917 44 1002 102 q 721 -14 831 -14 m 985 1189 l 957 1057 l 922 1057 q 832 1069 873 1057 q 756 1094 791 1080 q 691 1119 721 1107 q 635 1131 661 1131 q 588 1113 606 1131 q 561 1055 570 1095 l 431 1055 q 493 1216 440 1161 q 635 1271 547 1271 q 717 1258 677 1271 q 797 1230 757 1245 q 877 1202 837 1215 q 961 1189 918 1189 l 985 1189 m 781 977 q 724 850 781 896 q 559 799 667 804 l 559 861 q 630 887 609 871 q 652 932 652 903 q 645 949 652 943 q 627 960 639 954 q 599 978 610 968 q 589 1011 589 988 q 673 1075 589 1075 q 751 1047 722 1075 q 781 977 781 1019 z "},"Ѿ":{"ha":1422,"x_min":87,"x_max":1378,"o":"m 1050 838 q 985 824 1015 838 q 921 786 956 810 l 850 933 q 1084 1004 961 1004 q 1303 918 1227 1004 q 1378 668 1378 832 q 1316 314 1378 472 q 1149 71 1254 156 q 890 -14 1044 -14 q 654 111 722 -14 q 550 14 605 41 q 408 -14 495 -14 q 172 87 256 -14 q 87 366 87 187 q 212 820 87 635 q 557 1004 337 1004 q 676 984 623 1004 q 765 935 730 964 l 675 787 l 650 805 q 555 838 604 838 q 426 773 485 838 q 332 601 366 709 q 298 366 298 492 q 431 163 298 163 q 528 199 491 163 q 585 317 566 236 l 621 485 l 827 485 l 800 354 q 787 258 787 296 q 812 189 787 216 q 886 163 837 163 q 1030 223 968 163 q 1129 405 1092 283 q 1166 663 1166 526 q 1050 838 1166 838 m 1145 1260 l 1132 1200 l 1054 1083 l 1007 1083 l 989 1153 l 900 1153 l 854 1083 l 807 1083 l 789 1153 l 700 1153 l 654 1083 l 607 1083 l 579 1200 l 591 1260 l 1145 1260 z "},"ѿ":{"ha":1153,"x_min":69,"x_max":1165,"o":"m 164 0 l 69 758 l 269 758 l 309 351 q 318 184 314 294 l 504 518 l 482 758 l 679 758 l 701 311 q 705 184 705 236 q 855 428 798 295 q 956 758 913 562 l 1165 758 q 1019 332 1120 517 q 753 0 918 146 l 555 0 l 530 282 l 528 282 l 380 0 l 164 0 m 951 1025 l 939 965 l 861 848 l 814 848 l 798 918 l 708 918 l 661 848 l 614 848 l 597 918 l 509 918 l 461 848 l 414 848 l 387 965 l 400 1025 l 951 1025 z "},"Ҁ":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 450 775 522 832 q 336 608 378 718 q 294 372 294 498 q 341 215 294 267 q 486 163 389 163 q 660 187 561 163 l 550 -334 l 343 -334 l 412 -12 q 169 97 255 -3 q 83 370 83 197 q 153 700 83 549 q 341 929 223 850 q 614 1007 459 1007 q 766 990 696 1007 q 905 936 835 974 l 825 766 q 725 813 777 794 q 614 832 673 832 z "},"ҁ":{"ha":671,"x_min":61,"x_max":685,"o":"m 416 -334 l 212 -334 l 285 -11 q 120 75 179 3 q 61 265 61 148 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 387 151 268 151 q 526 182 455 151 l 416 -334 z "},"҂":{"ha":846,"x_min":71,"x_max":777,"o":"m 399 293 l 591 180 l 543 97 l 350 208 l 228 -4 l 140 46 l 262 260 l 71 371 l 118 454 l 313 343 l 447 578 l 254 689 l 302 774 l 496 663 l 619 875 l 705 825 l 582 611 l 777 500 l 726 416 l 534 528 l 399 293 z "},"҃":{"ha":743,"x_min":204,"x_max":743,"o":"m 354 842 q 271 778 331 778 q 221 798 238 778 q 204 848 204 818 q 229 916 204 889 q 296 943 253 943 l 595 943 q 676 1007 616 1007 q 727 989 711 1007 q 743 942 743 971 q 719 869 743 897 q 653 842 694 842 l 354 842 z "},"҄":{"ha":771,"x_min":216,"x_max":750,"o":"m 260 974 q 435 1015 338 974 q 593 1055 532 1055 q 708 1015 666 1055 q 750 899 750 974 q 745 840 750 865 l 621 840 l 623 861 q 570 916 623 916 q 511 904 541 916 q 443 879 481 892 q 357 853 405 865 q 245 842 309 842 l 216 842 l 244 974 l 260 974 z "},"҅":{"ha":770,"x_min":408,"x_max":614,"o":"m 408 977 q 444 1065 408 1029 q 536 1101 479 1101 q 595 1083 577 1101 q 614 1039 614 1065 q 602 1006 614 1019 q 566 981 591 992 q 539 964 549 973 q 529 937 529 955 q 591 884 529 899 l 591 827 q 458 873 507 832 q 408 977 408 914 z "},"҆":{"ha":770,"x_min":387,"x_max":616,"o":"m 616 1003 q 387 825 616 837 l 387 888 q 462 913 437 897 q 488 958 488 930 q 481 975 488 970 q 463 986 475 981 q 435 1004 446 994 q 425 1038 425 1015 q 510 1101 425 1101 q 587 1074 558 1101 q 616 1003 616 1046 z "},"҈":{"ha":1373,"x_min":28,"x_max":1346,"o":"m 679 966 q 780 932 742 966 q 823 835 819 898 l 770 835 q 746 880 766 865 q 679 895 726 895 q 609 881 626 895 q 589 835 592 867 l 538 835 q 679 966 545 966 m 679 -85 q 780 -119 741 -85 q 823 -216 819 -154 l 770 -216 q 746 -172 766 -186 q 679 -157 726 -157 q 609 -171 626 -157 q 589 -216 592 -184 l 538 -216 q 575 -120 541 -156 q 679 -85 609 -85 m 1072 104 q 1174 70 1135 104 q 1217 -28 1213 35 l 1162 -28 q 1139 17 1159 3 q 1072 32 1118 32 q 1002 19 1019 32 q 982 -28 985 5 l 930 -28 q 968 69 934 33 q 1072 104 1002 104 m 290 104 q 392 70 353 104 q 435 -28 431 35 l 380 -28 q 357 17 377 3 q 290 32 336 32 q 220 19 237 32 q 200 -28 203 5 l 149 -28 q 186 69 152 33 q 290 104 220 104 m 1072 774 q 1174 739 1135 774 q 1217 642 1213 705 l 1162 642 q 1139 687 1159 672 q 1072 701 1118 701 q 1002 688 1019 701 q 982 642 985 675 l 930 642 q 968 738 934 703 q 1072 774 1002 774 m 290 774 q 392 739 353 774 q 435 642 431 705 l 380 642 q 357 687 377 672 q 290 701 336 701 q 220 688 237 701 q 200 642 203 675 l 149 642 q 186 738 152 703 q 290 774 220 774 m 1202 443 q 1303 408 1264 443 q 1346 311 1342 372 l 1292 311 q 1268 356 1289 341 q 1202 371 1248 371 q 1132 357 1149 371 q 1111 311 1114 344 l 1060 311 q 1202 443 1067 443 m 170 443 q 271 408 232 443 q 314 311 310 374 l 260 311 q 236 356 256 342 q 170 371 216 371 q 100 358 117 371 q 79 311 83 345 l 28 311 q 65 408 31 372 q 170 443 100 443 z "},"҉":{"ha":1328,"x_min":28,"x_max":1300,"o":"m 739 -33 q 704 -143 728 -78 q 656 -261 680 -208 l 590 -261 q 637 -24 626 -111 l 732 -24 l 739 -33 m 590 783 q 628 899 603 831 q 673 1011 652 967 l 739 1011 q 692 774 704 862 l 597 774 l 590 783 m 1072 449 q 1188 411 1120 436 q 1300 366 1256 387 l 1300 300 q 1063 347 1150 336 l 1063 441 l 1072 449 m 256 300 q 146 335 211 311 q 28 383 81 359 l 28 449 q 265 401 178 413 l 265 307 l 256 300 m 1120 804 l 1166 758 q 965 624 1046 684 l 899 690 l 900 701 q 1010 758 945 728 q 1120 804 1074 787 m 208 -83 l 161 -37 q 363 97 281 37 l 429 31 l 428 20 q 208 -83 323 -41 m 220 815 l 265 863 q 400 661 349 728 l 334 595 l 322 596 q 220 815 267 691 m 1107 -96 l 1061 -143 q 996 -43 1040 -109 q 926 58 952 23 l 993 125 l 1004 123 q 1061 11 1031 77 q 1107 -96 1092 -55 z "},"Ҋ":{"ha":1140,"x_min":36,"x_max":1090,"o":"m 245 991 l 436 991 l 336 522 q 279 283 292 331 l 286 283 l 804 991 l 1055 991 l 884 180 l 1090 180 l 879 -289 l 644 -289 l 822 0 l 659 0 q 756 463 722 302 q 814 720 790 623 l 808 721 l 290 0 l 36 0 l 245 991 m 1019 1310 q 953 1169 996 1219 q 838 1093 909 1118 q 663 1067 766 1067 q 454 1119 527 1067 q 382 1278 382 1171 q 385 1310 382 1295 l 566 1310 l 564 1278 q 679 1183 564 1183 q 783 1214 747 1183 q 835 1310 820 1245 l 1019 1310 z "},"ҋ":{"ha":873,"x_min":72,"x_max":859,"o":"m 486 0 l 500 122 l 498 122 q 268 -14 402 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 686 151 l 857 151 l 672 -272 l 467 -272 l 614 0 l 486 0 m 859 1084 q 738 897 825 953 q 501 842 652 842 q 294 894 366 842 q 221 1053 221 946 q 224 1084 221 1069 l 404 1084 l 403 1067 l 403 1053 q 518 958 403 958 q 622 988 585 958 q 673 1084 658 1018 l 859 1084 z "},"Ҍ":{"ha":822,"x_min":36,"x_max":750,"o":"m 750 334 q 643 86 750 173 q 334 0 536 0 l 36 0 l 189 717 l 87 717 l 125 889 l 224 889 l 245 991 l 453 991 l 431 889 l 599 889 l 561 717 l 395 717 l 372 611 l 418 611 q 665 540 581 611 q 750 334 750 469 m 279 172 l 347 172 q 491 212 441 172 q 541 323 541 252 q 410 439 541 439 l 336 439 l 279 172 z "},"ҍ":{"ha":785,"x_min":78,"x_max":711,"o":"m 421 904 l 627 904 l 599 770 l 392 770 l 323 450 q 471 465 383 465 q 647 409 583 465 q 711 260 711 353 q 669 117 711 178 q 546 21 627 55 q 349 -14 465 -14 q 147 43 216 -14 q 78 208 78 99 q 94 330 78 256 l 189 770 l 82 770 l 110 904 l 218 904 l 250 1055 l 454 1055 l 421 904 m 404 322 q 296 310 357 322 q 286 262 291 288 q 281 215 281 235 q 307 151 281 174 q 378 129 332 129 q 471 159 436 129 q 505 239 505 190 q 404 322 505 322 z "},"Ҏ":{"ha":806,"x_min":36,"x_max":807,"o":"m 807 703 q 766 532 807 606 q 646 414 724 458 l 688 326 l 570 271 l 524 368 q 375 353 454 353 l 317 353 l 243 0 l 36 0 l 245 991 l 475 991 q 723 919 639 991 q 807 703 807 847 m 354 525 l 392 525 q 449 529 421 525 l 414 606 l 529 661 l 562 590 q 599 697 599 633 q 467 819 599 819 l 416 819 l 354 525 z "},"ҏ":{"ha":827,"x_min":-46,"x_max":765,"o":"m 551 772 q 708 700 650 772 q 765 496 765 627 q 712 230 765 356 q 571 40 659 103 l 608 -46 l 490 -102 l 449 -12 l 414 -14 q 317 12 357 -14 q 241 97 276 37 l 236 97 q 207 -103 228 -11 l 158 -334 l -46 -334 l 186 758 l 342 758 l 330 643 l 336 643 q 551 772 430 772 m 469 607 q 380 563 422 607 q 311 437 338 519 q 285 271 285 355 q 308 180 285 210 q 364 151 332 151 l 372 151 l 335 233 l 450 289 l 484 218 q 538 342 519 269 q 558 488 558 414 q 469 607 558 607 z "},"Ғ":{"ha":699,"x_min":20,"x_max":798,"o":"m 363 576 l 572 576 l 534 404 l 325 404 l 240 0 l 36 0 l 122 404 l 20 404 l 57 576 l 158 576 l 245 991 l 798 991 l 761 819 l 414 819 l 363 576 z "},"ғ":{"ha":643,"x_min":-8,"x_max":688,"o":"m 688 758 l 652 590 l 354 590 l 322 443 l 500 443 l 467 283 l 289 283 l 229 0 l 25 0 l 86 283 l -8 283 l 25 443 l 119 443 l 186 758 l 688 758 z "},"Ҕ":{"ha":925,"x_min":36,"x_max":807,"o":"m 406 379 q 319 371 356 379 l 240 0 l 36 0 l 245 991 l 798 991 l 761 819 l 414 819 l 355 542 q 469 555 410 555 q 650 507 572 555 q 768 373 729 458 q 807 174 807 288 q 750 -100 807 22 q 593 -284 694 -222 q 364 -347 493 -347 q 167 -314 250 -347 l 167 -138 q 350 -172 254 -172 q 528 -82 460 -172 q 596 151 596 8 q 547 321 596 263 q 406 379 498 379 z "},"ҕ":{"ha":796,"x_min":25,"x_max":688,"o":"m 665 125 q 616 -125 665 -17 q 476 -287 566 -234 q 264 -340 386 -340 q 107 -311 163 -340 l 107 -127 q 257 -164 172 -164 q 406 -91 353 -164 q 458 110 458 -18 q 428 228 458 186 q 339 269 398 269 q 283 260 307 269 l 229 0 l 25 0 l 186 758 l 688 758 l 652 590 l 354 590 l 318 422 q 407 435 353 435 q 597 352 528 435 q 665 125 665 269 z "},"Җ":{"ha":1276,"x_min":-85,"x_max":1317,"o":"m 908 0 l 722 488 l 619 0 l 421 0 l 524 486 l 147 0 l -85 0 l 335 529 l 146 991 l 351 991 l 532 528 l 631 991 l 829 991 l 730 528 l 1095 991 l 1317 991 l 922 501 l 1055 167 l 1197 167 l 1100 -289 l 895 -289 l 957 0 l 908 0 z "},"җ":{"ha":1333,"x_min":-14,"x_max":1348,"o":"m 212 772 q 399 695 331 772 q 468 479 468 618 l 468 461 l 467 443 l 579 443 l 647 758 l 843 758 l 775 443 l 882 443 q 1019 685 920 597 q 1255 772 1118 772 q 1348 764 1303 772 l 1312 602 q 1258 607 1276 607 q 1119 515 1173 607 q 1064 282 1064 422 q 1090 184 1064 217 q 1164 151 1117 151 q 1274 174 1219 151 l 1181 -272 l 991 -272 l 1054 -7 q 913 84 963 12 q 863 275 863 157 l 863 306 l 746 306 l 681 0 l 485 0 l 550 306 l 447 306 q 312 71 408 155 q 78 -14 215 -14 q -14 -5 26 -14 l 18 157 q 72 151 54 151 q 173 195 129 151 q 242 313 218 238 q 267 476 267 389 q 242 574 267 541 q 174 607 218 607 q 92 589 143 607 l 92 754 q 212 772 143 772 z "},"Ҙ":{"ha":828,"x_min":28,"x_max":814,"o":"m 814 775 q 740 594 814 661 q 532 519 665 528 l 532 517 q 685 448 629 505 q 742 302 742 391 q 633 68 742 151 q 315 -14 524 -14 q 151 -1 221 -14 q 28 40 81 11 l 28 218 q 298 151 151 151 q 472 192 414 151 q 530 311 530 233 q 478 404 530 374 q 314 433 426 433 l 218 433 l 253 597 l 339 597 q 599 733 599 597 q 567 810 599 782 q 471 838 534 838 q 227 754 355 838 l 153 896 q 335 982 250 958 q 522 1006 420 1006 q 673 976 606 1006 q 777 893 740 946 q 814 775 814 840 m 247 -210 q 321 -140 321 -210 q 304 -72 321 -104 q 257 0 288 -39 l 379 0 q 465 -172 465 -80 q 414 -292 465 -250 q 275 -334 363 -334 q 171 -317 212 -334 l 171 -195 q 247 -210 210 -210 z "},"ҙ":{"ha":728,"x_min":17,"x_max":692,"o":"m 314 467 q 448 487 409 467 q 488 553 488 507 q 465 602 488 584 q 383 619 441 619 q 279 604 336 619 q 170 566 222 589 l 121 714 q 419 772 273 772 q 621 724 550 772 q 692 585 692 676 q 649 467 692 514 q 515 396 606 420 l 515 392 q 644 239 644 354 q 547 52 644 117 q 269 -14 450 -14 q 132 0 201 -14 q 17 37 64 14 l 17 205 q 262 146 136 146 q 437 244 437 146 q 318 323 437 323 l 199 323 l 229 467 l 314 467 m 200 -210 q 274 -140 274 -210 q 257 -72 274 -104 q 210 0 241 -39 l 332 0 q 418 -172 418 -80 q 368 -292 418 -250 q 228 -334 317 -334 q 124 -317 165 -334 l 124 -195 q 200 -210 163 -210 z "},"Қ":{"ha":954,"x_min":36,"x_max":954,"o":"m 694 167 l 892 167 l 794 -289 l 589 -289 l 652 0 l 530 0 l 346 488 l 243 0 l 36 0 l 245 991 l 453 991 l 354 528 l 721 991 l 954 991 l 559 501 l 694 167 z "},"қ":{"ha":850,"x_min":25,"x_max":848,"o":"m 615 758 l 848 758 l 524 378 l 627 170 l 793 170 l 700 -272 l 511 -272 l 576 0 l 482 0 l 309 370 l 229 0 l 25 0 l 187 758 l 392 758 l 317 406 l 615 758 z "},"Ҝ":{"ha":827,"x_min":36,"x_max":974,"o":"m 760 0 l 539 0 l 456 227 l 439 131 l 342 131 l 400 411 l 318 354 l 243 0 l 36 0 l 245 991 l 453 991 l 354 528 l 453 653 l 504 896 l 602 896 l 581 800 l 741 991 l 974 991 l 558 503 l 760 0 z "},"ҝ":{"ha":817,"x_min":61,"x_max":885,"o":"m 265 0 l 61 0 l 224 758 l 428 758 l 353 406 l 411 473 l 457 688 l 547 688 l 530 611 l 657 758 l 885 758 l 561 382 l 559 374 l 747 0 l 524 0 l 439 180 l 415 61 l 323 61 l 376 302 l 345 371 l 265 0 z "},"Ҟ":{"ha":851,"x_min":36,"x_max":989,"o":"m 774 0 l 545 0 l 401 401 l 317 354 l 243 0 l 36 0 l 191 728 l 103 728 l 139 900 l 227 900 l 245 991 l 453 991 l 433 900 l 524 900 l 488 728 l 396 728 l 350 515 l 745 991 l 989 991 l 576 510 l 774 0 z "},"ҟ":{"ha":789,"x_min":25,"x_max":857,"o":"m 118 946 l 227 946 l 249 1055 l 453 1055 l 429 946 l 636 946 l 607 811 l 400 811 l 353 585 q 314 437 335 503 l 318 437 l 624 758 l 857 758 l 519 416 l 713 0 l 485 0 l 361 285 l 279 236 l 229 0 l 25 0 l 197 811 l 89 811 l 118 946 z "},"Ҡ":{"ha":951,"x_min":114,"x_max":1079,"o":"m 885 0 l 656 0 l 471 488 l 368 0 l 161 0 l 334 817 l 114 817 l 150 991 l 578 991 l 479 528 l 846 991 l 1079 991 l 685 501 l 885 0 z "},"ҡ":{"ha":900,"x_min":50,"x_max":968,"o":"m 734 758 l 968 758 l 643 378 l 831 0 l 602 0 l 428 370 l 349 0 l 144 0 l 273 603 l 50 603 l 83 758 l 511 758 l 436 406 l 734 758 z "},"Ң":{"ha":1064,"x_min":36,"x_max":997,"o":"m 804 167 l 997 167 l 900 -289 l 694 -289 l 757 0 l 562 0 l 653 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 979 991 l 804 167 z "},"ң":{"ha":917,"x_min":25,"x_max":860,"o":"m 393 758 l 330 467 l 567 467 l 628 758 l 832 758 l 707 170 l 860 170 l 766 -272 l 578 -272 l 642 0 l 467 0 l 532 313 l 297 313 l 231 0 l 25 0 l 187 758 l 393 758 z "},"Ҥ":{"ha":1069,"x_min":36,"x_max":1189,"o":"m 942 817 l 770 0 l 562 0 l 653 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 1189 991 l 1153 817 l 942 817 z "},"ҥ":{"ha":987,"x_min":25,"x_max":1064,"o":"m 393 758 l 330 467 l 567 467 l 628 758 l 1064 758 l 1031 603 l 799 603 l 671 0 l 467 0 l 532 313 l 297 313 l 231 0 l 25 0 l 187 758 l 393 758 z "},"Ҧ":{"ha":1434,"x_min":36,"x_max":1315,"o":"m 864 542 q 978 555 913 555 q 1158 507 1079 555 q 1276 372 1236 458 q 1315 174 1315 287 q 1259 -97 1315 24 q 1104 -283 1203 -219 q 875 -347 1004 -347 q 675 -314 758 -347 l 675 -138 q 859 -172 762 -172 q 1036 -82 968 -172 q 1104 151 1104 7 q 1055 320 1104 262 q 914 379 1006 379 q 828 371 862 379 l 749 0 l 543 0 l 717 817 l 416 817 l 243 0 l 36 0 l 245 991 l 958 991 l 864 542 z "},"ҧ":{"ha":1200,"x_min":25,"x_max":1093,"o":"m 818 758 l 746 422 q 835 435 781 435 q 1025 352 956 435 q 1093 125 1093 269 q 1044 -125 1093 -17 q 904 -287 994 -234 q 692 -340 814 -340 q 534 -311 593 -340 l 534 -127 q 685 -164 601 -164 q 833 -91 781 -164 q 886 110 886 -18 q 856 228 886 187 q 766 269 825 269 q 711 260 735 269 l 657 0 l 453 0 l 579 603 l 358 603 l 231 0 l 25 0 l 187 758 l 818 758 z "},"Ҩ":{"ha":1014,"x_min":83,"x_max":958,"o":"m 958 533 q 905 301 958 412 q 762 117 852 191 q 812 109 779 109 q 907 126 855 109 l 907 -39 q 854 -52 888 -46 q 786 -57 820 -57 q 600 8 677 -57 q 452 -14 535 -14 q 182 85 280 -14 q 83 359 83 184 q 151 695 83 543 q 335 927 218 847 q 606 1007 452 1007 q 775 977 697 1007 l 718 814 q 606 835 663 835 q 447 776 517 835 q 336 605 377 717 q 294 364 294 492 q 340 213 294 267 q 465 158 386 158 l 473 158 q 431 361 431 239 q 469 576 431 484 q 577 720 507 669 q 736 770 647 770 q 900 708 842 770 q 958 533 958 646 m 640 222 q 734 366 697 274 q 771 543 771 458 q 729 612 771 612 q 650 537 682 612 q 618 343 618 462 q 640 222 618 277 z "},"ҩ":{"ha":851,"x_min":61,"x_max":790,"o":"m 790 380 q 749 218 790 298 q 647 100 708 139 q 685 96 662 96 q 765 110 727 96 l 765 -32 q 660 -49 718 -49 q 493 12 566 -49 q 343 -14 428 -14 q 134 68 208 -14 q 61 294 61 149 q 113 546 61 435 q 256 715 165 657 q 469 772 347 772 q 551 764 510 772 q 614 746 592 755 l 566 597 q 476 611 522 611 q 367 572 414 611 q 293 456 320 532 q 267 296 267 380 q 295 180 267 218 q 370 142 323 142 l 386 142 q 362 210 371 167 q 353 286 353 252 q 418 494 353 418 q 595 571 483 571 q 739 522 688 571 q 790 380 790 472 m 539 183 q 600 271 576 213 q 624 380 624 329 q 615 418 624 404 q 590 432 607 432 q 539 388 558 432 q 519 285 519 344 q 525 231 519 260 q 539 183 530 201 z "},"Ҫ":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 453 777 524 832 q 338 615 381 722 q 294 386 294 509 q 341 218 294 273 q 489 163 387 163 q 718 215 588 163 l 718 39 q 447 -14 583 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 764 992 699 1007 q 905 936 830 977 l 825 766 q 707 819 753 806 q 614 832 660 832 m 337 -210 q 411 -140 411 -210 q 394 -72 411 -104 q 347 0 378 -39 l 469 0 q 555 -172 555 -80 q 505 -292 555 -250 q 365 -334 454 -334 q 261 -317 302 -334 l 261 -195 q 337 -210 300 -210 z "},"ҫ":{"ha":671,"x_min":61,"x_max":685,"o":"m 343 -14 q 134 59 207 -14 q 61 265 61 132 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 299 184 268 217 q 385 151 330 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 m 247 -210 q 321 -140 321 -210 q 304 -72 321 -104 q 257 0 288 -39 l 379 0 q 465 -172 465 -80 q 414 -292 465 -250 q 275 -334 363 -334 q 171 -317 212 -334 l 171 -195 q 247 -210 210 -210 z "},"Ҭ":{"ha":737,"x_min":114,"x_max":836,"o":"m 180 0 l 353 817 l 114 817 l 151 991 l 836 991 l 799 817 l 559 817 l 422 167 l 615 167 l 518 -289 l 313 -289 l 375 0 l 180 0 z "},"ҭ":{"ha":1286,"x_min":25,"x_max":1229,"o":"m 572 772 q 750 618 721 772 l 754 618 q 863 732 800 692 q 997 772 926 772 q 1138 715 1089 772 q 1186 554 1186 657 q 1171 433 1186 504 l 1131 240 q 1126 204 1126 220 q 1168 160 1126 160 q 1229 170 1196 160 l 1136 -272 l 947 -272 l 1013 0 q 917 151 917 33 q 926 237 917 193 l 970 443 q 981 524 981 489 q 914 607 981 607 q 801 531 852 607 q 721 315 751 455 l 656 0 l 452 0 l 545 443 q 555 524 555 489 q 489 607 555 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 z "},"Ү":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 z "},"ү":{"ha":711,"x_min":69,"x_max":791,"o":"m 310 210 q 371 355 336 287 l 572 758 l 791 758 l 378 0 l 307 -334 l 96 -334 l 167 0 l 69 758 l 269 758 l 302 330 q 306 210 306 275 l 310 210 z "},"Ұ":{"ha":783,"x_min":52,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 488 358 l 688 358 l 652 183 l 450 183 l 411 0 l 205 0 l 244 183 l 52 183 l 87 358 l 282 358 l 286 379 l 126 991 l 338 991 l 425 590 z "},"ұ":{"ha":711,"x_min":-41,"x_max":791,"o":"m 307 207 q 371 355 332 281 l 572 758 l 791 758 l 378 0 l 564 0 l 530 -155 l 345 -155 l 307 -334 l 96 -334 l 134 -155 l -41 -155 l -8 0 l 167 0 l 69 758 l 269 758 l 300 361 q 302 207 302 322 l 307 207 z "},"Ҳ":{"ha":960,"x_min":-79,"x_max":950,"o":"m 538 0 l 421 368 l 153 0 l -79 0 l 311 518 l 150 991 l 367 991 l 471 640 l 717 991 l 950 991 l 581 500 l 701 167 l 880 167 l 783 -289 l 578 -289 l 640 0 l 538 0 z "},"ҳ":{"ha":817,"x_min":-68,"x_max":806,"o":"m 257 389 l 104 758 l 322 758 l 400 532 l 566 758 l 806 758 l 489 378 l 579 170 l 760 170 l 667 -272 l 478 -272 l 542 0 l 433 0 l 349 232 l 170 0 l -68 0 l 257 389 z "},"Ҵ":{"ha":1162,"x_min":114,"x_max":1117,"o":"m 1086 180 l 986 -289 l 781 -289 l 843 0 l 180 0 l 353 817 l 114 817 l 151 991 l 815 991 l 779 817 l 559 817 l 425 175 l 737 175 l 911 991 l 1117 991 l 945 180 l 1086 180 z "},"ҵ":{"ha":947,"x_min":62,"x_max":901,"o":"m 435 603 l 375 315 q 364 231 364 269 q 433 151 364 151 q 550 229 499 151 q 631 444 602 307 l 697 758 l 901 758 l 791 240 q 787 204 787 220 q 829 160 787 160 q 890 170 856 160 l 798 -272 l 608 -272 l 673 0 q 586 122 608 31 l 585 122 q 354 -14 488 -14 q 210 41 261 -14 q 158 195 158 96 q 178 347 158 256 l 232 603 l 62 603 l 96 758 l 636 758 l 603 603 l 435 603 z "},"Ҷ":{"ha":1039,"x_min":125,"x_max":960,"o":"m 525 0 l 606 380 q 370 322 479 322 q 191 380 256 322 q 125 541 125 437 q 134 619 125 579 l 210 991 l 416 991 l 343 642 q 336 586 336 610 q 440 497 336 497 q 640 547 529 497 l 734 991 l 942 991 l 766 167 l 960 167 l 863 -289 l 657 -289 l 720 0 l 525 0 z "},"ҷ":{"ha":888,"x_min":111,"x_max":831,"o":"m 437 0 l 481 205 l 510 328 l 505 328 q 307 232 418 232 q 163 290 216 232 q 111 450 111 349 q 131 595 111 504 l 165 758 l 370 758 l 328 561 q 317 481 317 515 q 338 416 317 438 q 397 395 359 395 q 507 461 464 395 q 581 672 550 528 l 599 758 l 803 758 l 677 170 l 831 170 l 737 -272 l 549 -272 l 614 0 l 437 0 z "},"Ҹ":{"ha":935,"x_min":125,"x_max":942,"o":"m 732 0 l 525 0 l 606 380 q 485 336 536 349 l 437 117 l 339 117 l 383 322 l 370 322 q 191 380 256 322 q 125 541 125 437 q 134 619 125 579 l 210 991 l 416 991 l 343 642 q 336 586 336 610 q 421 497 336 506 l 468 720 l 567 720 l 521 505 q 640 547 576 517 l 734 991 l 942 991 l 732 0 z "},"ҹ":{"ha":839,"x_min":111,"x_max":815,"o":"m 370 758 l 328 561 q 317 481 317 515 q 366 400 317 417 l 399 555 l 492 555 l 460 408 q 538 498 507 432 q 593 672 569 564 l 611 758 l 815 758 l 654 0 l 450 0 l 493 205 l 522 328 l 518 328 q 427 257 476 281 l 390 87 l 297 87 l 329 232 q 168 289 225 232 q 111 450 111 346 q 131 595 111 504 l 165 758 l 370 758 z "},"Һ":{"ha":935,"x_min":36,"x_max":852,"o":"m 245 991 l 453 991 l 372 611 q 608 669 499 669 q 787 612 722 669 q 852 452 852 554 q 844 372 852 416 l 768 0 l 561 0 l 635 350 q 642 406 642 381 q 538 494 642 494 q 338 444 449 494 l 243 0 l 36 0 l 245 991 z "},"һ":{"ha":839,"x_min":25,"x_max":717,"o":"m 663 0 l 458 0 l 500 197 q 511 278 511 245 q 490 342 511 321 q 431 364 469 364 q 321 297 364 364 q 248 86 278 231 l 229 0 l 25 0 l 186 758 l 390 758 l 347 553 l 318 431 l 322 431 q 521 526 409 526 q 665 468 612 526 q 717 309 717 410 q 697 164 717 262 l 663 0 z "},"Ҽ":{"ha":1082,"x_min":41,"x_max":1082,"o":"m 294 589 q 484 898 354 789 q 799 1007 614 1007 q 1008 940 935 1007 q 1082 751 1082 873 q 948 503 1082 587 q 553 419 814 419 l 481 419 l 479 404 l 479 386 q 527 218 479 273 q 673 163 575 163 q 917 214 783 163 l 917 39 q 639 -14 797 -14 q 365 86 461 -14 q 268 370 268 186 l 271 428 q 100 477 158 433 q 41 597 41 521 q 92 743 41 677 l 262 743 q 227 647 227 688 q 242 605 227 621 q 288 589 257 589 l 294 589 m 781 832 q 620 764 694 832 q 514 589 547 696 l 576 589 q 799 629 725 589 q 873 746 873 669 q 850 809 873 786 q 781 832 827 832 z "},"ҽ":{"ha":918,"x_min":14,"x_max":884,"o":"m 505 -14 q 284 63 363 -14 q 205 279 205 140 l 205 307 q 14 468 14 328 q 53 591 14 536 l 197 591 q 168 500 168 548 q 182 456 168 471 q 218 440 196 440 l 227 440 q 375 685 267 597 q 629 772 482 772 q 817 717 749 772 q 884 566 884 662 q 770 370 884 439 q 447 301 657 301 l 412 301 l 411 287 l 411 273 q 446 176 411 212 q 546 140 481 140 q 653 153 605 140 q 770 199 701 166 l 770 45 q 505 -14 653 -14 m 616 625 q 504 571 557 625 q 435 439 451 517 l 465 439 q 629 472 570 439 q 688 561 688 505 q 616 625 688 625 z "},"Ҿ":{"ha":1082,"x_min":41,"x_max":1082,"o":"m 781 832 q 620 764 694 832 q 514 589 547 696 l 576 589 q 799 629 725 589 q 873 746 873 669 q 850 809 873 786 q 781 832 827 832 m 41 597 q 92 743 41 677 l 262 743 q 227 647 227 688 q 242 605 227 621 q 288 589 257 589 l 294 589 q 488 900 358 792 q 799 1007 617 1007 q 1008 940 935 1007 q 1082 751 1082 873 q 948 503 1082 587 q 553 419 814 419 l 481 419 l 479 404 l 479 386 q 527 218 479 273 q 673 163 575 163 q 917 214 783 163 l 917 39 q 701 -11 826 -3 l 643 -289 l 437 -289 l 501 4 q 328 132 388 38 q 268 370 268 227 l 271 428 q 100 477 158 433 q 41 597 41 521 z "},"ҿ":{"ha":918,"x_min":14,"x_max":884,"o":"m 616 625 q 504 571 557 625 q 435 439 451 517 l 465 439 q 629 472 570 439 q 688 561 688 505 q 616 625 688 625 m 227 440 q 375 685 267 597 q 629 772 482 772 q 817 717 749 772 q 884 566 884 662 q 770 370 884 439 q 447 301 657 301 l 412 301 l 411 287 l 411 273 q 446 176 411 212 q 546 140 481 140 q 653 153 605 140 q 770 199 701 166 l 770 45 q 571 -11 680 -1 l 517 -272 l 328 -272 l 390 1 q 253 99 301 28 q 205 279 205 170 l 205 307 q 14 468 14 328 q 53 591 14 536 l 197 591 q 168 500 168 548 q 182 456 168 471 q 218 440 196 440 l 227 440 z "},"Ӂ":{"ha":1204,"x_min":-85,"x_max":1317,"o":"m 335 529 l 146 991 l 351 991 l 532 528 l 631 991 l 829 991 l 730 528 l 1095 991 l 1317 991 l 922 501 l 1122 0 l 908 0 l 722 488 l 619 0 l 421 0 l 524 486 l 147 0 l -85 0 l 335 529 m 1091 1314 q 1025 1173 1068 1223 q 909 1097 981 1122 q 734 1071 838 1071 q 526 1123 599 1071 q 454 1282 454 1175 q 457 1314 454 1298 l 637 1314 l 636 1296 l 636 1282 q 751 1187 636 1187 q 855 1217 819 1187 q 907 1314 891 1247 l 1091 1314 z "},"ӂ":{"ha":1333,"x_min":-14,"x_max":1348,"o":"m 550 306 l 447 306 q 312 71 408 155 q 78 -14 215 -14 q -14 -5 26 -14 l 18 157 q 72 151 54 151 q 173 195 129 151 q 242 313 218 238 q 267 476 267 389 q 242 574 267 541 q 174 607 218 607 q 92 589 143 607 l 92 754 q 212 772 143 772 q 399 695 331 772 q 468 479 468 618 l 468 461 l 467 443 l 579 443 l 647 758 l 843 758 l 775 443 l 882 443 q 1019 685 920 597 q 1255 772 1118 772 q 1348 764 1303 772 l 1312 602 q 1258 607 1276 607 q 1119 515 1173 607 q 1064 282 1064 422 q 1088 184 1064 217 q 1157 151 1113 151 q 1239 170 1187 151 l 1239 4 q 1118 -14 1190 -14 q 930 62 998 -14 q 863 275 863 138 l 863 306 l 746 306 l 681 0 l 485 0 l 550 306 m 1108 1084 q 1042 944 1085 994 q 926 867 998 893 q 751 842 854 842 q 543 893 616 842 q 471 1053 471 945 q 474 1084 471 1069 l 654 1084 l 653 1067 l 653 1053 q 768 958 653 958 q 872 988 836 958 q 924 1084 908 1018 l 1108 1084 z "},"Ӄ":{"ha":961,"x_min":36,"x_max":954,"o":"m 425 370 q 317 353 369 370 l 243 0 l 36 0 l 245 991 l 453 991 l 354 528 l 721 991 l 954 991 l 578 526 q 717 466 658 512 q 810 343 777 419 q 843 168 843 267 q 787 -100 843 21 q 632 -284 730 -220 q 400 -347 533 -347 q 203 -314 286 -347 l 203 -138 q 386 -172 286 -172 q 564 -82 496 -172 q 632 151 632 8 q 425 370 632 370 z "},"ӄ":{"ha":860,"x_min":25,"x_max":848,"o":"m 615 758 l 848 758 l 532 396 q 682 303 629 377 q 736 104 736 229 q 688 -128 736 -26 q 550 -285 640 -229 q 335 -340 459 -340 q 178 -311 241 -340 l 178 -127 q 328 -164 244 -164 q 475 -96 420 -164 q 529 94 529 -28 q 487 218 529 173 q 370 262 445 262 q 282 245 322 262 l 229 0 l 25 0 l 186 758 l 390 758 l 315 406 l 615 758 z "},"Ӆ":{"ha":1055,"x_min":-41,"x_max":1006,"o":"m 972 991 l 799 180 l 1006 180 l 794 -289 l 559 -289 l 737 0 l 555 0 l 729 817 l 545 817 q 435 425 491 600 q 330 158 380 251 q 219 26 280 66 q 56 -14 157 -14 q -41 3 1 -14 l -41 175 q 26 161 -5 161 q 99 183 71 161 q 155 252 127 204 q 217 399 182 299 q 297 651 253 499 q 389 991 340 803 l 972 991 z "},"ӆ":{"ha":916,"x_min":-40,"x_max":873,"o":"m 701 151 l 873 151 l 689 -272 l 484 -272 l 631 0 l 465 0 l 593 600 q 550 606 566 606 q 474 584 505 606 q 418 516 444 563 q 345 323 393 469 q 298 192 321 254 q 244 85 275 131 q 170 13 214 39 q 61 -14 126 -14 q -40 3 1 -14 l -40 171 q 17 160 -15 160 q 78 196 51 160 q 130 307 104 231 q 237 583 199 512 q 320 694 275 654 q 431 753 366 734 q 589 772 496 772 q 712 762 648 772 q 823 733 777 751 l 701 151 z "},"Ӈ":{"ha":972,"x_min":36,"x_max":979,"o":"m 368 -347 q 170 -314 253 -347 l 170 -129 q 354 -163 254 -163 q 500 -102 446 -163 q 581 85 554 -42 l 653 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 979 991 l 778 39 q 637 -252 736 -157 q 368 -347 538 -347 z "},"ӈ":{"ha":856,"x_min":25,"x_max":832,"o":"m 393 758 l 330 467 l 567 467 l 628 758 l 832 758 l 671 0 q 551 -255 635 -169 q 323 -340 467 -340 q 149 -301 218 -340 l 149 -123 q 301 -164 226 -164 q 408 -120 368 -164 q 472 26 449 -77 l 532 313 l 297 313 l 231 0 l 25 0 l 187 758 l 393 758 z "},"Ӊ":{"ha":1064,"x_min":36,"x_max":1014,"o":"m 562 0 l 653 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 979 991 l 807 180 l 1014 180 l 803 -289 l 568 -289 l 746 0 l 562 0 z "},"ӊ":{"ha":917,"x_min":25,"x_max":875,"o":"m 467 0 l 532 313 l 297 313 l 231 0 l 25 0 l 187 758 l 393 758 l 330 467 l 567 467 l 628 758 l 832 758 l 703 151 l 875 151 l 690 -272 l 485 -272 l 632 0 l 467 0 z "},"Ӌ":{"ha":935,"x_min":125,"x_max":942,"o":"m 538 0 l 476 -289 l 271 -289 l 371 167 l 559 167 l 606 380 q 370 322 479 322 q 191 380 256 322 q 125 541 125 437 q 134 619 125 579 l 210 991 l 416 991 l 343 642 q 336 586 336 610 q 440 497 336 497 q 640 547 529 497 l 734 991 l 942 991 l 732 0 l 538 0 z "},"ӌ":{"ha":827,"x_min":111,"x_max":803,"o":"m 370 758 l 328 561 q 317 481 317 515 q 338 416 317 438 q 397 395 359 395 q 507 461 464 395 q 581 672 550 528 l 599 758 l 803 758 l 642 0 l 450 0 l 393 -272 l 204 -272 l 307 170 l 472 170 l 481 207 q 496 277 486 237 q 510 328 506 317 l 505 328 q 307 232 418 232 q 163 290 216 232 q 111 450 111 349 q 131 595 111 504 l 165 758 l 370 758 z "},"Ӎ":{"ha":1314,"x_min":36,"x_max":1264,"o":"m 419 0 l 378 768 l 375 768 q 350 617 368 720 q 319 461 332 515 l 222 0 l 36 0 l 245 991 l 519 991 l 566 250 l 568 250 l 942 991 l 1229 991 l 1057 180 l 1264 180 l 1053 -289 l 818 -289 l 996 0 l 829 0 l 928 469 q 999 768 967 651 l 996 768 l 610 0 l 419 0 z "},"ӎ":{"ha":1162,"x_min":16,"x_max":1121,"o":"m 718 0 l 835 547 q 788 455 816 505 q 732 351 760 405 l 545 0 l 387 0 l 345 342 q 323 550 328 479 l 208 0 l 16 0 l 178 758 l 453 758 l 493 435 q 504 329 500 378 q 510 232 507 280 q 603 429 570 370 l 786 758 l 1076 758 l 949 151 l 1121 151 l 936 -272 l 730 -272 l 878 0 l 718 0 z "},"Ӑ":{"ha":872,"x_min":-83,"x_max":932,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 932 1314 q 865 1173 909 1223 q 750 1097 822 1122 q 575 1071 678 1071 q 367 1123 439 1071 q 294 1282 294 1175 q 298 1314 294 1298 l 478 1314 l 477 1296 l 477 1282 q 592 1187 477 1187 q 695 1217 659 1187 q 747 1314 732 1247 l 932 1314 z "},"ӑ":{"ha":825,"x_min":61,"x_max":866,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 866 1084 q 800 944 843 994 q 684 867 756 893 q 509 842 612 842 q 301 893 374 842 q 229 1053 229 945 q 232 1084 229 1069 l 412 1084 l 411 1067 l 411 1053 q 526 958 411 958 q 630 988 593 958 q 682 1084 666 1018 l 866 1084 z "},"Ӓ":{"ha":872,"x_min":-83,"x_max":819,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 346 1166 q 375 1246 346 1219 q 456 1274 404 1274 q 546 1200 546 1274 q 519 1121 546 1151 q 437 1092 493 1092 q 346 1166 346 1092 m 618 1166 q 647 1246 618 1219 q 728 1274 675 1274 q 795 1255 772 1274 q 819 1200 819 1236 q 792 1121 819 1151 q 710 1092 765 1092 q 618 1166 618 1092 z "},"ӓ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 271 937 q 299 1017 271 990 q 380 1044 328 1044 q 471 971 471 1044 q 444 892 471 922 q 362 863 418 863 q 271 937 271 863 m 543 937 q 572 1017 543 990 q 653 1044 600 1044 q 720 1025 697 1044 q 743 971 743 1006 q 716 892 743 922 q 635 863 690 863 q 543 937 543 863 z "},"Ӕ":{"ha":1243,"x_min":-83,"x_max":1291,"o":"m 1080 0 l 526 0 l 576 236 l 288 236 l 139 0 l -83 0 l 542 991 l 1291 991 l 1254 819 l 907 819 l 861 602 l 1185 602 l 1147 429 l 823 429 l 770 174 l 1117 174 l 1080 0 m 614 412 l 700 819 l 646 819 l 399 412 l 614 412 z "},"ӕ":{"ha":1211,"x_min":61,"x_max":1177,"o":"m 818 -14 q 696 5 744 -14 q 616 64 648 23 l 606 0 l 478 0 l 488 98 l 484 98 q 384 13 435 39 q 271 -14 333 -14 q 116 60 172 -14 q 61 261 61 134 q 107 516 61 397 q 233 704 154 635 q 408 772 312 772 q 517 746 473 772 q 595 661 561 720 l 599 661 l 637 758 l 765 758 l 753 697 q 834 751 783 730 q 949 772 886 772 q 1116 716 1055 772 q 1177 566 1177 659 q 1063 370 1177 439 q 741 301 950 301 l 705 301 l 704 288 l 704 275 q 742 175 704 210 q 850 140 779 140 q 953 156 895 140 q 1063 199 1011 172 l 1063 45 q 818 -14 941 -14 m 351 151 q 442 197 400 151 q 509 322 484 243 q 534 488 534 401 q 512 574 534 542 q 443 607 490 607 q 356 560 397 607 q 292 434 315 513 q 268 271 268 355 q 290 182 268 214 q 351 151 312 151 m 909 625 q 797 571 850 625 q 728 439 744 517 l 758 439 q 922 472 863 439 q 981 561 981 505 q 909 625 981 625 z "},"Ӗ":{"ha":753,"x_min":36,"x_max":879,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 879 1314 q 812 1173 856 1223 q 697 1097 769 1122 q 522 1071 625 1071 q 314 1123 387 1071 q 241 1282 241 1175 q 245 1314 241 1298 l 425 1314 l 424 1296 l 424 1282 q 539 1187 424 1187 q 643 1217 606 1187 q 694 1314 679 1247 l 879 1314 z "},"ӗ":{"ha":774,"x_min":61,"x_max":848,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 848 1084 q 781 944 825 994 q 666 867 738 893 q 491 842 594 842 q 283 893 355 842 q 210 1053 210 945 q 214 1084 210 1069 l 394 1084 l 393 1067 l 393 1053 q 508 958 393 958 q 611 988 575 958 q 663 1084 648 1018 l 848 1084 z "},"Ә":{"ha":917,"x_min":46,"x_max":873,"o":"m 471 831 q 336 816 397 831 q 218 779 275 801 l 218 954 q 496 1007 340 1007 q 775 907 677 1007 q 873 618 873 806 q 805 294 873 444 q 617 65 736 144 q 347 -14 498 -14 q 125 53 203 -14 q 46 241 46 119 q 184 491 46 409 q 589 574 321 574 l 661 574 q 664 618 664 590 q 616 774 664 718 q 471 831 568 831 m 349 161 q 514 222 443 161 q 629 404 586 283 l 525 404 q 324 364 394 404 q 254 249 254 323 q 281 185 254 208 q 349 161 307 161 z "},"ә":{"ha":774,"x_min":35,"x_max":713,"o":"m 301 134 q 414 187 361 134 q 484 319 467 240 l 453 319 q 289 287 348 319 q 231 197 231 254 q 301 134 231 134 m 412 772 q 634 695 555 772 q 713 479 713 618 q 658 226 713 341 q 508 48 604 111 q 289 -14 412 -14 q 102 42 169 -14 q 35 193 35 97 q 148 388 35 319 q 471 457 260 457 l 505 457 l 507 485 q 472 582 507 547 q 372 618 437 618 q 265 605 313 618 q 149 559 217 592 l 149 714 q 280 760 218 747 q 412 772 341 772 z "},"Ӛ":{"ha":917,"x_min":46,"x_max":873,"o":"m 471 831 q 336 816 397 831 q 218 779 275 801 l 218 954 q 496 1007 340 1007 q 775 907 677 1007 q 873 618 873 806 q 805 294 873 444 q 617 65 736 144 q 347 -14 498 -14 q 125 53 203 -14 q 46 241 46 119 q 184 491 46 409 q 589 574 321 574 l 661 574 q 664 618 664 590 q 616 774 664 718 q 471 831 568 831 m 349 161 q 514 222 443 161 q 629 404 586 283 l 525 404 q 324 364 394 404 q 254 249 254 323 q 281 185 254 208 q 349 161 307 161 m 354 1166 q 383 1246 354 1219 q 464 1274 412 1274 q 554 1200 554 1274 q 528 1121 554 1151 q 446 1092 501 1092 q 354 1166 354 1092 m 627 1166 q 655 1246 627 1219 q 736 1274 684 1274 q 804 1255 781 1274 q 827 1200 827 1236 q 800 1121 827 1151 q 718 1092 773 1092 q 627 1166 627 1092 z "},"ӛ":{"ha":774,"x_min":35,"x_max":715,"o":"m 301 134 q 414 187 361 134 q 484 319 467 240 l 453 319 q 289 287 348 319 q 231 197 231 254 q 301 134 231 134 m 412 772 q 634 695 555 772 q 713 479 713 618 q 658 226 713 341 q 508 48 604 111 q 289 -14 412 -14 q 102 42 169 -14 q 35 193 35 97 q 148 388 35 319 q 471 457 260 457 l 505 457 l 507 485 q 472 582 507 547 q 372 618 437 618 q 265 605 313 618 q 149 559 217 592 l 149 714 q 280 760 218 747 q 412 772 341 772 m 242 937 q 271 1017 242 990 q 352 1044 300 1044 q 442 971 442 1044 q 416 892 442 922 q 334 863 389 863 q 242 937 242 863 m 515 937 q 543 1017 515 990 q 625 1044 572 1044 q 692 1025 669 1044 q 715 971 715 1006 q 688 892 715 922 q 606 863 661 863 q 515 937 515 863 z "},"Ӝ":{"ha":1204,"x_min":-85,"x_max":1317,"o":"m 335 529 l 146 991 l 351 991 l 532 528 l 631 991 l 829 991 l 730 528 l 1095 991 l 1317 991 l 922 501 l 1122 0 l 908 0 l 722 488 l 619 0 l 421 0 l 524 486 l 147 0 l -85 0 l 335 529 m 519 1166 q 548 1246 519 1219 q 629 1274 577 1274 q 720 1200 720 1274 q 693 1121 720 1151 q 611 1092 667 1092 q 519 1166 519 1092 m 792 1166 q 821 1246 792 1219 q 902 1274 849 1274 q 969 1255 946 1274 q 992 1200 992 1236 q 965 1121 992 1151 q 884 1092 939 1092 q 792 1166 792 1092 z "},"ӝ":{"ha":1333,"x_min":-14,"x_max":1348,"o":"m 550 306 l 447 306 q 312 71 408 155 q 78 -14 215 -14 q -14 -5 26 -14 l 18 157 q 72 151 54 151 q 173 195 129 151 q 242 313 218 238 q 267 476 267 389 q 242 574 267 541 q 174 607 218 607 q 92 589 143 607 l 92 754 q 212 772 143 772 q 399 695 331 772 q 468 479 468 618 l 468 461 l 467 443 l 579 443 l 647 758 l 843 758 l 775 443 l 882 443 q 1019 685 920 597 q 1255 772 1118 772 q 1348 764 1303 772 l 1312 602 q 1258 607 1276 607 q 1119 515 1173 607 q 1064 282 1064 422 q 1088 184 1064 217 q 1157 151 1113 151 q 1239 170 1187 151 l 1239 4 q 1118 -14 1190 -14 q 930 62 998 -14 q 863 275 863 138 l 863 306 l 746 306 l 681 0 l 485 0 l 550 306 m 540 937 q 569 1017 540 990 q 650 1044 597 1044 q 740 971 740 1044 q 713 892 740 922 q 631 863 687 863 q 540 937 540 863 m 812 937 q 841 1017 812 990 q 922 1044 869 1044 q 989 1025 966 1044 q 1013 971 1013 1006 q 986 892 1013 922 q 904 863 959 863 q 812 937 812 863 z "},"Ӟ":{"ha":828,"x_min":28,"x_max":814,"o":"m 814 775 q 740 594 814 661 q 532 519 665 528 l 532 517 q 685 448 629 505 q 742 302 742 391 q 633 68 742 151 q 315 -14 524 -14 q 151 -1 221 -14 q 28 40 81 11 l 28 218 q 298 151 151 151 q 472 192 414 151 q 530 311 530 233 q 478 404 530 374 q 314 433 426 433 l 218 433 l 253 597 l 339 597 q 599 733 599 597 q 567 810 599 782 q 471 838 534 838 q 227 754 355 838 l 153 896 q 335 982 250 958 q 522 1006 420 1006 q 673 976 606 1006 q 777 893 740 946 q 814 775 814 840 m 300 1166 q 329 1246 300 1219 q 410 1274 357 1274 q 500 1200 500 1274 q 473 1121 500 1151 q 391 1092 447 1092 q 300 1166 300 1092 m 572 1166 q 601 1246 572 1219 q 682 1274 629 1274 q 749 1255 726 1274 q 772 1200 772 1236 q 746 1121 772 1151 q 664 1092 719 1092 q 572 1166 572 1092 z "},"ӟ":{"ha":728,"x_min":17,"x_max":692,"o":"m 314 467 q 448 487 409 467 q 488 553 488 507 q 465 602 488 584 q 383 619 441 619 q 279 604 336 619 q 170 566 222 589 l 121 714 q 419 772 273 772 q 621 724 550 772 q 692 585 692 676 q 649 467 692 514 q 515 396 606 420 l 515 392 q 644 239 644 354 q 547 52 644 117 q 269 -14 450 -14 q 132 0 201 -14 q 17 37 64 14 l 17 205 q 262 146 136 146 q 437 244 437 146 q 318 323 437 323 l 199 323 l 229 467 l 314 467 m 220 937 q 249 1017 220 990 q 330 1044 277 1044 q 420 971 420 1044 q 393 892 420 922 q 311 863 367 863 q 220 937 220 863 m 492 937 q 521 1017 492 990 q 602 1044 549 1044 q 669 1025 646 1044 q 692 971 692 1006 q 666 892 692 922 q 584 863 639 863 q 492 937 492 863 z "},"Ӡ":{"ha":771,"x_min":-3,"x_max":787,"o":"m 440 572 q 621 496 556 559 q 685 321 685 432 q 573 74 685 162 q 261 -14 460 -14 q -3 40 97 -14 l -3 218 q 121 171 48 190 q 244 151 194 151 q 413 195 353 151 q 473 317 473 238 q 430 413 473 382 q 298 443 387 443 l 195 443 l 225 582 l 482 818 l 168 818 l 205 991 l 787 991 l 758 859 l 440 572 z "},"ӡ":{"ha":760,"x_min":-61,"x_max":725,"o":"m 441 600 l 113 600 l 146 758 l 725 758 l 697 625 l 371 321 q 554 240 487 310 q 621 62 621 171 q 568 -147 621 -56 q 418 -287 515 -238 q 195 -336 321 -336 q -61 -282 49 -336 l -61 -102 q 51 -147 -14 -129 q 170 -165 116 -165 q 344 -109 279 -165 q 408 43 408 -52 q 362 154 408 114 q 232 193 316 193 l 140 193 l 171 339 l 441 600 z "},"Ӣ":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 286 283 l 804 991 l 1055 991 l 846 0 l 659 0 q 756 463 722 302 q 814 720 790 623 l 808 721 l 290 0 l 36 0 l 245 991 l 436 991 l 336 522 q 279 283 292 331 l 286 283 m 473 1214 l 893 1214 l 863 1071 l 443 1071 l 473 1214 z "},"ӣ":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 326 985 l 746 985 l 715 842 l 296 842 l 326 985 z "},"Ӥ":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 286 283 l 804 991 l 1055 991 l 846 0 l 659 0 q 756 463 722 302 q 814 720 790 623 l 808 721 l 290 0 l 36 0 l 245 991 l 436 991 l 336 522 q 279 283 292 331 l 286 283 m 433 1166 q 462 1246 433 1219 q 543 1274 491 1274 q 633 1200 633 1274 q 607 1121 633 1151 q 525 1092 581 1092 q 433 1166 433 1092 m 706 1166 q 734 1246 706 1219 q 816 1274 763 1274 q 883 1255 860 1274 q 906 1200 906 1236 q 879 1121 906 1151 q 798 1092 852 1092 q 706 1166 706 1092 z "},"ӥ":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 279 937 q 308 1017 279 990 q 389 1044 336 1044 q 479 971 479 1044 q 452 892 479 922 q 370 863 426 863 q 279 937 279 863 m 551 937 q 580 1017 551 990 q 661 1044 608 1044 q 728 1025 705 1044 q 751 971 751 1006 q 725 892 751 922 q 643 863 698 863 q 551 937 551 863 z "},"Ӧ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 397 1166 q 426 1246 397 1219 q 507 1274 454 1274 q 597 1200 597 1274 q 570 1121 597 1151 q 488 1092 544 1092 q 397 1166 397 1092 m 669 1166 q 698 1246 669 1219 q 779 1274 726 1274 q 846 1255 823 1274 q 869 1200 869 1236 q 843 1121 869 1151 q 761 1092 816 1092 q 669 1166 669 1092 z "},"ӧ":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 254 937 q 283 1017 254 990 q 364 1044 312 1044 q 454 971 454 1044 q 428 892 454 922 q 346 863 401 863 q 254 937 254 863 m 527 937 q 555 1017 527 990 q 637 1044 584 1044 q 704 1025 681 1044 q 727 971 727 1006 q 700 892 727 922 q 618 863 673 863 q 527 937 527 863 z "},"Ө":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 467 163 q 626 231 554 163 q 733 421 698 299 l 296 421 q 293 364 293 402 q 339 214 293 264 q 467 163 385 163 m 591 832 q 441 770 510 832 q 330 596 372 708 l 760 596 l 761 631 q 717 779 761 725 q 591 832 673 832 z "},"ө":{"ha":812,"x_min":61,"x_max":751,"o":"m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 368 149 q 463 191 420 149 q 528 310 505 233 l 264 310 l 262 290 l 262 277 q 290 182 262 215 q 368 149 317 149 m 449 611 q 356 569 398 611 q 290 453 315 528 l 550 453 l 550 472 q 524 575 550 540 q 449 611 498 611 z "},"Ӫ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 467 163 q 626 231 554 163 q 733 421 698 299 l 296 421 q 293 364 293 402 q 339 214 293 264 q 467 163 385 163 m 591 832 q 441 770 510 832 q 330 596 372 708 l 760 596 l 761 631 q 717 779 761 725 q 591 832 673 832 m 397 1166 q 426 1246 397 1219 q 507 1274 454 1274 q 597 1200 597 1274 q 570 1121 597 1151 q 488 1092 544 1092 q 397 1166 397 1092 m 669 1166 q 698 1246 669 1219 q 779 1274 726 1274 q 846 1255 823 1274 q 869 1200 869 1236 q 843 1121 869 1151 q 761 1092 816 1092 q 669 1166 669 1092 z "},"ӫ":{"ha":812,"x_min":61,"x_max":751,"o":"m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 368 149 q 463 191 420 149 q 528 310 505 233 l 264 310 l 262 290 l 262 277 q 290 182 262 215 q 368 149 317 149 m 449 611 q 356 569 398 611 q 290 453 315 528 l 550 453 l 550 472 q 524 575 550 540 q 449 611 498 611 m 254 937 q 283 1017 254 990 q 364 1044 312 1044 q 454 971 454 1044 q 428 892 454 922 q 346 863 401 863 q 254 937 254 863 m 527 937 q 555 1017 527 990 q 637 1044 584 1044 q 704 1025 681 1044 q 727 971 727 1006 q 700 892 727 922 q 618 863 673 863 q 527 937 527 863 z "},"Ӭ":{"ha":850,"x_min":18,"x_max":807,"o":"m 264 161 q 452 223 378 161 q 567 414 526 286 l 201 414 l 237 586 l 595 586 l 596 603 l 596 621 q 421 832 596 832 q 335 823 377 832 q 203 779 292 814 l 149 946 q 447 1007 290 1007 q 714 908 622 1007 q 807 624 807 808 q 740 292 807 442 q 557 64 673 142 q 288 -14 441 -14 q 140 -1 205 -14 q 18 43 75 12 l 18 227 q 264 161 136 161 m 269 1166 q 298 1246 269 1219 q 379 1274 327 1274 q 469 1200 469 1274 q 443 1121 469 1151 q 361 1092 416 1092 q 269 1166 269 1092 m 542 1166 q 570 1246 542 1219 q 652 1274 599 1274 q 719 1255 696 1274 q 742 1200 742 1236 q 715 1121 742 1151 q 633 1092 688 1092 q 542 1166 542 1092 z "},"ӭ":{"ha":671,"x_min":21,"x_max":622,"o":"m 332 772 q 537 693 464 772 q 610 468 610 614 q 561 214 610 323 q 418 46 511 105 q 195 -14 324 -14 q 21 24 92 -14 l 21 195 q 97 164 56 178 q 191 151 138 151 q 315 191 267 151 q 385 314 362 231 l 132 314 l 161 452 l 403 452 l 404 465 l 404 478 q 375 573 404 540 q 290 607 345 607 q 220 596 252 607 q 150 567 189 585 l 96 717 q 332 772 207 772 m 149 937 q 178 1017 149 990 q 259 1044 207 1044 q 349 971 349 1044 q 323 892 349 922 q 241 863 296 863 q 149 937 149 863 m 422 937 q 450 1017 422 990 q 532 1044 479 1044 q 599 1025 576 1044 q 622 971 622 1006 q 595 892 622 922 q 513 863 568 863 q 422 937 422 863 z "},"Ӯ":{"ha":831,"x_min":21,"x_max":958,"o":"m 164 -14 q 21 8 80 -14 l 21 189 q 155 163 76 163 q 213 174 188 163 q 259 208 238 186 q 314 285 281 230 l 121 991 l 329 991 l 433 564 q 453 461 449 500 q 498 562 484 536 l 732 991 l 958 991 l 550 293 q 411 88 460 140 q 303 11 361 36 q 164 -14 245 -14 m 366 1214 l 785 1214 l 755 1071 l 335 1071 l 366 1214 z "},"ӯ":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 256 985 l 676 985 l 646 842 l 226 842 l 256 985 z "},"Ӱ":{"ha":831,"x_min":21,"x_max":958,"o":"m 164 -14 q 21 8 80 -14 l 21 189 q 155 163 76 163 q 213 174 188 163 q 259 208 238 186 q 314 285 281 230 l 121 991 l 329 991 l 433 564 q 453 461 449 500 q 498 562 484 536 l 732 991 l 958 991 l 550 293 q 411 88 460 140 q 303 11 361 36 q 164 -14 245 -14 m 302 1166 q 331 1246 302 1219 q 412 1274 360 1274 q 503 1200 503 1274 q 476 1121 503 1151 q 394 1092 450 1092 q 302 1166 302 1092 m 575 1166 q 604 1246 575 1219 q 685 1274 632 1274 q 752 1255 729 1274 q 775 1200 775 1236 q 748 1121 775 1151 q 667 1092 722 1092 q 575 1166 575 1092 z "},"ӱ":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 205 937 q 234 1017 205 990 q 315 1044 262 1044 q 405 971 405 1044 q 378 892 405 922 q 296 863 352 863 q 205 937 205 863 m 477 937 q 506 1017 477 990 q 587 1044 534 1044 q 654 1025 631 1044 q 677 971 677 1006 q 651 892 677 922 q 569 863 624 863 q 477 937 477 863 z "},"Ӳ":{"ha":831,"x_min":21,"x_max":958,"o":"m 164 -14 q 21 8 80 -14 l 21 189 q 155 163 76 163 q 213 174 188 163 q 259 208 238 186 q 314 285 281 230 l 121 991 l 329 991 l 433 564 q 453 461 449 500 q 498 562 484 536 l 732 991 l 958 991 l 550 293 q 411 88 460 140 q 303 11 361 36 q 164 -14 245 -14 m 323 1088 q 479 1293 400 1175 l 686 1293 l 686 1282 q 583 1182 657 1246 q 444 1071 509 1118 l 323 1071 l 323 1088 m 592 1088 q 749 1293 669 1175 l 956 1293 l 956 1282 q 852 1182 926 1246 q 713 1071 778 1118 l 592 1071 l 592 1088 z "},"ӳ":{"ha":721,"x_min":-96,"x_max":839,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 206 859 q 363 1064 283 945 l 570 1064 l 570 1053 q 466 952 541 1017 q 327 842 392 888 l 206 842 l 206 859 m 475 859 q 632 1064 553 945 l 839 1064 l 839 1053 q 735 952 810 1017 q 596 842 661 888 l 475 842 l 475 859 z "},"Ӵ":{"ha":935,"x_min":125,"x_max":942,"o":"m 525 0 l 606 380 q 370 322 479 322 q 191 380 256 322 q 125 541 125 437 q 134 619 125 579 l 210 991 l 416 991 l 343 642 q 336 586 336 610 q 440 497 336 497 q 640 547 529 497 l 734 991 l 942 991 l 732 0 l 525 0 m 362 1166 q 391 1246 362 1219 q 472 1274 420 1274 q 562 1200 562 1274 q 536 1121 562 1151 q 454 1092 509 1092 q 362 1166 362 1092 m 635 1166 q 663 1246 635 1219 q 745 1274 692 1274 q 812 1255 789 1274 q 835 1200 835 1236 q 808 1121 835 1151 q 726 1092 781 1092 q 635 1166 635 1092 z "},"ӵ":{"ha":827,"x_min":111,"x_max":803,"o":"m 165 758 l 370 758 l 328 561 q 317 481 317 515 q 338 416 317 438 q 397 395 359 395 q 507 461 464 395 q 581 672 550 528 l 599 758 l 803 758 l 642 0 l 437 0 l 481 205 l 510 328 l 505 328 q 307 232 418 232 q 163 290 216 232 q 111 450 111 349 q 131 595 111 504 l 165 758 m 273 937 q 302 1017 273 990 q 383 1044 331 1044 q 473 971 473 1044 q 447 892 473 922 q 365 863 420 863 q 273 937 273 863 m 546 937 q 574 1017 546 990 q 656 1044 603 1044 q 723 1025 700 1044 q 746 971 746 1006 q 719 892 746 922 q 637 863 692 863 q 546 937 546 863 z "},"Ӷ":{"ha":699,"x_min":36,"x_max":798,"o":"m 36 0 l 245 991 l 798 991 l 761 819 l 414 819 l 275 167 l 468 167 l 371 -289 l 165 -289 l 228 0 l 36 0 z "},"ӷ":{"ha":643,"x_min":25,"x_max":686,"o":"m 25 0 l 186 758 l 686 758 l 652 590 l 354 590 l 265 170 l 418 170 l 325 -272 l 136 -272 l 201 0 l 25 0 z "},"Ӹ":{"ha":1187,"x_min":36,"x_max":1194,"o":"m 985 0 l 772 0 l 982 991 l 1194 991 l 985 0 m 729 334 q 622 86 729 173 q 313 0 515 0 l 36 0 l 245 991 l 453 991 l 372 611 l 397 611 q 645 540 560 611 q 729 334 729 469 m 279 172 l 326 172 q 470 212 420 172 q 519 323 519 252 q 389 439 519 439 l 336 439 l 279 172 m 498 1166 q 527 1246 498 1219 q 608 1274 556 1274 q 699 1200 699 1274 q 672 1121 699 1151 q 590 1092 646 1092 q 498 1166 498 1092 m 771 1166 q 800 1246 771 1219 q 881 1274 828 1274 q 948 1255 925 1274 q 971 1200 971 1236 q 944 1121 971 1151 q 863 1092 918 1092 q 771 1166 771 1092 z "},"ӹ":{"ha":1116,"x_min":72,"x_max":1092,"o":"m 383 758 l 317 450 q 454 465 383 465 q 608 410 549 465 q 667 264 667 354 q 628 119 667 182 q 514 22 589 57 q 336 -14 439 -14 q 72 207 72 -14 q 87 335 72 266 l 179 758 l 383 758 m 378 322 q 289 310 339 322 q 277 247 279 264 q 275 212 275 229 q 296 150 275 171 q 353 129 317 129 q 432 160 402 129 q 463 241 463 192 q 378 322 463 322 m 930 0 l 726 0 l 888 758 l 1092 758 l 930 0 m 410 937 q 438 1017 410 990 q 519 1044 467 1044 q 610 971 610 1044 q 583 892 610 922 q 501 863 557 863 q 410 937 410 863 m 682 937 q 711 1017 682 990 q 792 1044 739 1044 q 859 1025 836 1044 q 882 971 882 1006 q 856 892 882 922 q 774 863 829 863 q 682 937 682 863 z "},"Ӻ":{"ha":699,"x_min":20,"x_max":798,"o":"m 160 -336 q 40 -318 89 -336 l 40 -155 q 118 -170 77 -170 q 190 -141 163 -170 q 228 -54 216 -113 l 239 0 l 36 0 l 122 404 l 20 404 l 57 576 l 158 576 l 245 991 l 798 991 l 761 819 l 414 819 l 363 576 l 572 576 l 534 404 l 325 404 l 283 205 l 485 205 l 425 -85 q 335 -275 399 -214 q 160 -336 272 -336 z "},"ӻ":{"ha":643,"x_min":-8,"x_max":688,"o":"m 149 -336 q 29 -318 78 -336 l 29 -155 q 107 -170 66 -170 q 178 -141 153 -170 q 216 -54 204 -113 l 228 0 l 25 0 l 86 283 l -8 283 l 25 443 l 119 443 l 186 758 l 688 758 l 652 590 l 354 590 l 322 443 l 500 443 l 467 283 l 289 283 l 267 178 l 467 178 l 414 -85 q 323 -276 387 -216 q 149 -336 260 -336 z "},"Ӽ":{"ha":960,"x_min":-79,"x_max":950,"o":"m 564 -336 q 444 -318 493 -336 l 444 -155 q 522 -170 481 -170 q 594 -141 568 -170 q 632 -54 620 -113 l 643 0 l 538 0 l 421 368 l 153 0 l -79 0 l 311 518 l 150 991 l 367 991 l 471 640 l 717 991 l 950 991 l 581 500 l 688 205 l 889 205 l 829 -85 q 739 -275 803 -214 q 564 -336 675 -336 z "},"ӽ":{"ha":832,"x_min":-68,"x_max":806,"o":"m 458 -336 q 339 -318 388 -336 l 339 -155 q 416 -170 376 -170 q 488 -141 462 -170 q 526 -54 514 -113 l 538 0 l 433 0 l 349 232 l 170 0 l -68 0 l 257 389 l 104 758 l 322 758 l 400 532 l 566 758 l 806 758 l 489 378 l 576 178 l 777 178 l 724 -85 q 633 -276 697 -216 q 458 -336 570 -336 z "},"Ӿ":{"ha":842,"x_min":-79,"x_max":950,"o":"m 608 419 l 762 0 l 538 0 l 421 368 l 153 0 l -79 0 l 237 419 l 82 419 l 118 591 l 288 591 l 150 991 l 367 991 l 471 640 l 717 991 l 950 991 l 647 591 l 814 591 l 778 419 l 608 419 z "},"ӿ":{"ha":737,"x_min":-68,"x_max":806,"o":"m 189 306 l 60 306 l 93 461 l 228 461 l 104 758 l 322 758 l 400 532 l 566 758 l 806 758 l 557 461 l 692 461 l 659 306 l 519 306 l 654 0 l 433 0 l 349 232 l 170 0 l -68 0 l 189 306 z "},"Ԁ":{"ha":806,"x_min":41,"x_max":812,"o":"m 41 281 q 152 524 41 436 q 457 611 262 611 l 526 611 l 606 991 l 812 991 l 603 0 l 372 0 q 126 72 211 0 q 41 281 41 144 m 489 439 l 437 439 q 299 401 347 439 q 250 288 250 363 q 285 200 250 229 q 382 172 320 172 l 432 172 l 489 439 z "},"ԁ":{"ha":825,"x_min":61,"x_max":864,"o":"m 275 -14 q 118 59 176 -14 q 61 262 61 132 q 110 516 61 395 q 237 705 158 637 q 412 772 317 772 q 508 747 468 772 q 585 661 549 722 l 590 661 l 591 680 q 608 812 595 755 l 660 1055 l 864 1055 l 640 0 l 485 0 l 494 98 l 492 98 q 391 13 444 39 q 275 -14 338 -14 m 361 151 q 448 198 406 151 q 516 321 490 244 q 542 488 542 399 q 516 574 542 542 q 447 607 491 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 361 151 268 151 z "},"Ԃ":{"ha":1200,"x_min":41,"x_max":1124,"o":"m 1124 575 l 1057 258 q 947 52 1026 117 q 730 -14 867 -14 q 606 9 663 -14 q 522 74 549 32 q 411 5 460 23 q 302 -12 362 -12 q 111 55 180 -12 q 41 240 41 122 q 93 437 41 352 q 241 566 145 522 q 461 611 336 611 l 526 611 l 607 991 l 812 991 l 663 283 q 657 239 657 260 q 679 180 657 200 q 737 160 700 160 q 813 195 785 160 q 857 306 842 229 l 914 575 l 1124 575 m 489 439 l 453 439 q 303 392 357 439 q 249 260 249 345 q 274 184 249 209 q 340 160 300 160 q 453 267 429 160 l 489 439 z "},"ԃ":{"ha":1215,"x_min":61,"x_max":1137,"o":"m 549 102 q 314 -14 454 -14 q 124 61 188 -14 q 61 271 61 135 q 108 522 61 399 q 233 708 155 644 q 404 772 311 772 q 585 661 519 772 l 590 661 q 592 703 590 677 q 599 759 595 728 q 660 1055 604 790 l 864 1055 l 701 289 q 694 231 694 255 q 716 172 694 193 q 772 151 738 151 q 850 185 823 151 q 895 306 876 218 l 930 475 l 1137 475 l 1092 258 q 986 52 1061 117 q 782 -14 910 -14 q 645 16 704 -14 q 557 102 587 45 l 549 102 m 364 151 q 454 197 414 151 q 518 323 494 243 q 542 488 542 404 q 519 574 542 542 q 447 607 496 607 q 359 563 400 607 q 293 438 319 519 q 268 271 268 358 q 294 181 268 211 q 364 151 319 151 z "},"Ԅ":{"ha":1194,"x_min":134,"x_max":1118,"o":"m 741 772 q 679 605 741 675 q 503 507 616 535 l 503 504 q 616 441 577 484 q 656 323 656 398 l 653 239 q 736 160 653 160 q 808 193 781 160 q 851 306 835 225 l 908 575 l 1118 575 l 1051 258 q 942 52 1021 117 q 721 -14 863 -14 q 520 45 590 -14 q 450 214 450 104 q 454 266 450 239 q 457 322 457 292 q 420 405 457 376 q 310 433 383 433 l 154 433 l 186 582 l 293 582 q 465 622 404 582 q 525 741 525 663 q 497 810 525 783 q 416 836 470 836 q 211 765 321 836 l 134 908 q 461 1006 275 1006 q 664 941 588 1006 q 741 772 741 876 z "},"ԅ":{"ha":1133,"x_min":93,"x_max":1055,"o":"m 612 252 l 612 224 q 634 169 612 187 q 690 151 656 151 q 766 182 740 151 q 807 283 792 212 l 848 475 l 1055 475 l 1010 258 q 903 53 981 120 q 685 -14 825 -14 q 487 41 557 -14 q 416 196 416 96 l 416 224 q 385 300 416 277 q 269 323 354 323 l 171 323 l 201 467 l 290 467 q 426 486 388 467 q 464 553 464 506 q 439 604 464 589 q 359 619 414 619 q 252 604 312 619 q 142 566 192 588 l 93 714 q 387 772 243 772 q 589 724 518 772 q 660 585 660 676 q 618 467 660 513 q 488 396 576 420 l 488 392 q 612 252 612 369 z "},"Ԇ":{"ha":913,"x_min":89,"x_max":833,"o":"m 393 0 l 447 248 q 458 321 458 290 q 310 435 458 435 l 154 435 l 189 597 l 275 597 q 534 733 534 597 q 503 810 534 782 q 407 838 471 838 q 163 754 292 838 l 89 896 q 271 982 186 958 q 458 1006 356 1006 q 609 976 542 1006 q 713 893 676 946 q 750 775 750 840 q 676 594 750 661 q 468 519 602 528 l 468 517 q 613 458 560 507 q 667 328 667 408 q 663 280 667 307 q 642 167 660 254 l 833 167 l 736 -289 l 530 -289 l 593 0 l 393 0 z "},"ԇ":{"ha":838,"x_min":121,"x_max":781,"o":"m 399 0 l 436 170 q 446 235 446 216 q 414 303 446 283 q 318 323 382 323 l 199 323 l 229 467 l 314 467 q 448 487 409 467 q 488 553 488 507 q 465 602 488 584 q 383 619 441 619 q 279 604 336 619 q 170 566 222 589 l 121 714 q 419 772 273 772 q 621 724 550 772 q 692 585 692 676 q 648 465 692 511 q 515 396 605 418 l 515 392 q 640 254 640 357 q 628 170 640 229 l 781 170 l 688 -272 l 498 -272 l 564 0 l 399 0 z "},"Ԉ":{"ha":1360,"x_min":-41,"x_max":1283,"o":"m 972 991 l 827 301 q 817 237 817 260 q 837 181 817 203 q 897 160 857 160 q 972 195 944 160 q 1017 306 1001 229 l 1074 575 l 1283 575 l 1217 258 q 1108 53 1187 119 q 890 -14 1029 -14 q 683 46 757 -14 q 610 215 610 106 q 627 334 610 257 l 729 817 l 545 817 q 435 425 491 600 q 330 158 380 251 q 219 26 280 66 q 56 -14 157 -14 q -41 3 1 -14 l -41 175 q 26 161 -5 161 q 99 183 71 161 q 155 252 127 204 q 217 399 182 299 q 297 651 253 499 q 389 991 340 803 l 972 991 z "},"ԉ":{"ha":1244,"x_min":-40,"x_max":1166,"o":"m 724 231 q 745 172 724 193 q 802 151 767 151 q 879 185 852 151 q 924 306 905 218 l 960 475 l 1166 475 l 1121 258 q 1012 52 1090 118 q 794 -14 934 -14 q 590 46 661 -14 q 518 212 518 105 q 526 289 518 249 l 593 600 q 550 606 566 606 q 474 584 505 606 q 418 516 444 563 q 345 323 393 469 q 298 192 321 254 q 244 85 275 131 q 170 13 214 39 q 61 -14 126 -14 q -40 3 1 -14 l -40 171 q 17 160 -15 160 q 78 196 51 160 q 130 307 104 231 q 237 583 199 512 q 320 694 275 654 q 431 753 366 734 q 589 772 496 772 q 712 762 648 772 q 823 733 777 751 l 730 289 q 724 231 724 255 z "},"Ԋ":{"ha":1367,"x_min":36,"x_max":1291,"o":"m 979 991 l 833 301 q 823 237 823 260 q 844 181 823 203 q 904 160 864 160 q 979 195 951 160 q 1023 306 1008 229 l 1080 575 l 1291 575 l 1223 258 q 1115 53 1194 119 q 897 -14 1036 -14 q 693 47 767 -14 q 619 220 619 109 q 625 287 619 250 q 653 428 631 323 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 979 991 z "},"ԋ":{"ha":1247,"x_min":25,"x_max":1169,"o":"m 393 758 l 330 467 l 567 467 l 628 758 l 832 758 l 733 296 q 726 235 726 260 q 749 179 726 198 q 808 160 772 160 q 881 193 854 160 q 926 306 909 225 l 962 475 l 1169 475 l 1124 258 q 1015 52 1093 118 q 798 -14 937 -14 q 593 45 666 -14 q 521 212 521 104 q 529 289 521 249 l 533 313 l 297 313 l 231 0 l 25 0 l 187 758 l 393 758 z "},"Ԍ":{"ha":1022,"x_min":83,"x_max":978,"o":"m 511 557 l 978 557 l 954 433 q 794 91 908 196 q 473 -14 680 -14 q 186 90 288 -14 q 83 376 83 193 q 157 701 83 554 q 360 928 230 848 q 660 1007 490 1007 q 942 940 821 1007 l 864 770 q 747 818 795 806 q 648 829 699 829 q 468 772 548 829 q 341 610 387 715 q 294 380 294 505 q 486 161 294 161 q 639 217 579 161 q 721 382 699 273 l 473 382 l 511 557 z "},"ԍ":{"ha":876,"x_min":61,"x_max":818,"o":"m 433 449 l 818 449 l 796 342 q 659 74 758 161 q 385 -14 559 -14 q 146 65 232 -14 q 61 288 61 143 q 117 542 61 431 q 277 712 173 652 q 519 772 380 772 q 659 755 593 772 q 771 713 725 739 l 697 557 q 515 606 609 606 q 334 519 402 606 q 267 289 267 433 q 302 186 267 223 q 399 150 337 150 q 516 186 470 150 q 578 294 562 222 l 401 294 l 433 449 z "},"Ԏ":{"ha":983,"x_min":114,"x_max":907,"o":"m 114 817 l 151 991 l 844 991 l 807 817 l 558 817 l 450 301 q 440 237 440 260 q 460 181 440 203 q 521 160 481 160 q 596 195 568 160 q 640 306 625 229 l 697 575 l 907 575 l 840 258 q 732 53 811 119 q 514 -14 652 -14 q 307 46 380 -14 q 233 215 233 106 q 250 334 233 257 l 354 817 l 114 817 z "},"ԏ":{"ha":935,"x_min":64,"x_max":857,"o":"m 414 231 q 435 172 414 193 q 492 151 457 151 q 569 185 543 151 q 614 306 595 218 l 650 475 l 857 475 l 811 258 q 703 53 782 119 q 485 -14 623 -14 q 282 46 354 -14 q 210 216 210 106 q 228 342 210 263 l 285 603 l 64 603 l 96 758 l 745 758 l 711 603 l 486 603 l 421 289 q 414 231 414 252 z "},"Ԑ":{"ha":819,"x_min":46,"x_max":865,"o":"m 545 1006 q 705 985 631 1006 q 865 909 780 964 l 770 757 q 666 810 726 789 q 536 832 606 832 q 423 800 465 832 q 382 715 382 768 q 430 626 382 654 q 578 597 478 597 l 672 597 l 637 433 l 554 433 q 331 394 400 433 q 262 277 262 354 q 309 188 262 214 q 439 161 355 161 q 573 179 502 161 q 697 227 644 197 l 697 45 q 392 -14 571 -14 q 138 54 231 -14 q 46 243 46 122 q 119 431 46 362 q 342 521 193 499 l 342 524 q 178 726 178 572 q 279 931 178 857 q 545 1006 381 1006 z "},"ԑ":{"ha":713,"x_min":26,"x_max":726,"o":"m 517 323 l 416 323 q 288 297 335 323 q 241 225 241 271 q 272 166 241 187 q 361 146 302 146 q 480 160 423 146 q 600 207 536 174 l 600 40 q 328 -14 492 -14 q 107 39 188 -14 q 26 186 26 92 q 249 397 26 361 l 249 401 q 165 461 195 422 q 136 547 136 499 q 220 713 136 654 q 453 772 303 772 q 726 714 619 772 l 664 564 q 554 607 602 595 q 458 619 507 619 q 357 597 393 619 q 322 534 322 576 q 355 483 322 499 q 456 467 388 467 l 547 467 l 517 323 z "},"Ԓ":{"ha":1078,"x_min":-41,"x_max":1007,"o":"m 972 991 l 804 205 l 1007 205 l 947 -85 q 858 -275 921 -214 q 682 -336 794 -336 q 562 -318 611 -336 l 562 -155 q 640 -170 600 -170 q 712 -141 686 -170 q 750 -54 738 -113 l 761 0 l 555 0 l 729 817 l 545 817 q 435 425 491 600 q 330 158 380 251 q 219 26 280 66 q 56 -14 157 -14 q -41 3 1 -14 l -41 175 q 26 161 -5 161 q 99 183 71 161 q 155 252 127 204 q 217 399 182 299 q 297 651 253 499 q 389 991 340 803 l 972 991 z "},"ԓ":{"ha":962,"x_min":-40,"x_max":907,"o":"m 707 178 l 907 178 l 854 -85 q 764 -275 828 -214 q 589 -336 700 -336 q 469 -318 518 -336 l 469 -155 q 547 -170 507 -170 q 619 -141 593 -170 q 657 -54 645 -113 l 668 0 l 465 0 l 593 600 q 550 606 566 606 q 474 584 505 606 q 418 516 444 563 q 345 323 393 469 q 298 192 321 254 q 244 85 275 131 q 170 13 214 39 q 61 -14 126 -14 q -40 3 1 -14 l -40 171 q 17 160 -15 160 q 78 196 51 160 q 130 307 104 231 q 237 583 199 512 q 320 694 275 654 q 431 753 366 734 q 589 772 496 772 q 712 762 648 772 q 823 733 777 751 l 707 178 z "},"Ạ":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 224 -208 q 257 -119 224 -150 q 349 -89 290 -89 q 423 -110 396 -89 q 450 -171 450 -130 q 420 -258 450 -225 q 328 -292 390 -292 q 224 -208 224 -292 z "},"ạ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 214 -208 q 246 -119 214 -150 q 338 -89 279 -89 q 412 -110 385 -89 q 439 -171 439 -130 q 409 -258 439 -225 q 317 -292 379 -292 q 214 -208 214 -292 z "},"Ả":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 768 1257 q 635 1104 768 1145 l 621 1056 l 498 1056 l 507 1156 q 582 1184 560 1165 q 604 1232 604 1202 q 593 1258 604 1249 q 562 1268 583 1268 q 477 1254 527 1268 l 477 1365 q 595 1382 526 1382 q 723 1350 677 1382 q 768 1257 768 1318 z "},"ả":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 701 1028 q 568 875 701 916 l 554 827 l 431 827 l 440 926 q 515 955 493 936 q 537 1003 537 973 q 526 1029 537 1019 q 494 1039 515 1039 q 410 1025 460 1039 l 410 1136 q 528 1153 459 1153 q 656 1121 610 1153 q 701 1028 701 1088 z "},"Ấ":{"ha":872,"x_min":-83,"x_max":1061,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 694 1071 q 591 1178 644 1116 q 444 1071 530 1126 l 306 1071 l 306 1086 l 351 1129 q 493 1279 448 1221 l 709 1279 q 821 1086 749 1187 l 821 1071 l 694 1071 m 782 1203 l 782 1215 q 893 1357 814 1248 l 1061 1357 l 1061 1350 q 990 1283 1044 1330 q 888 1203 936 1236 l 782 1203 z "},"ấ":{"ha":825,"x_min":61,"x_max":975,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 608 842 q 505 949 557 886 q 357 842 444 897 l 220 842 l 220 857 l 264 900 q 407 1050 361 992 l 623 1050 q 735 857 663 958 l 735 842 l 608 842 m 696 974 l 696 986 q 807 1128 728 1019 l 975 1128 l 975 1121 q 904 1054 958 1101 q 802 974 850 1006 l 696 974 z "},"Ầ":{"ha":872,"x_min":-83,"x_max":821,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 694 1071 q 591 1178 644 1116 q 444 1071 530 1126 l 306 1071 l 306 1086 l 351 1129 q 493 1279 448 1221 l 709 1279 q 821 1086 749 1187 l 821 1071 l 694 1071 m 295 1204 q 221 1281 255 1241 q 174 1349 187 1322 l 174 1358 l 331 1358 q 388 1215 347 1294 l 388 1204 l 295 1204 z "},"ầ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 623 842 q 519 949 572 886 q 372 842 458 897 l 235 842 l 235 857 l 279 900 q 422 1050 376 992 l 637 1050 q 750 857 678 958 l 750 842 l 623 842 m 224 975 q 150 1052 184 1012 q 102 1120 116 1093 l 102 1129 l 260 1129 q 317 986 275 1065 l 317 975 l 224 975 z "},"Ẩ":{"ha":872,"x_min":-83,"x_max":994,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 994 1341 q 889 1236 994 1260 l 880 1200 l 796 1200 l 806 1279 q 892 1331 892 1283 q 854 1356 892 1356 q 798 1346 825 1356 l 798 1428 q 877 1439 829 1439 q 963 1412 932 1439 q 994 1341 994 1385 m 694 1071 q 591 1178 644 1116 q 444 1071 530 1126 l 306 1071 l 306 1086 l 351 1129 q 493 1279 448 1221 l 709 1279 q 821 1086 749 1187 l 821 1071 l 694 1071 z "},"ẩ":{"ha":825,"x_min":61,"x_max":920,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 920 1112 q 815 1007 920 1031 l 806 971 l 722 971 l 732 1050 q 818 1101 818 1054 q 781 1126 818 1126 q 724 1117 751 1126 l 724 1198 q 803 1210 755 1210 q 889 1183 858 1210 q 920 1112 920 1156 m 621 842 q 517 949 570 886 q 370 842 456 897 l 232 842 l 232 857 l 277 900 q 419 1050 374 992 l 635 1050 q 747 857 675 958 l 747 842 l 621 842 z "},"Ẫ":{"ha":872,"x_min":-83,"x_max":856,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 514 1346 q 477 1330 489 1346 q 458 1291 466 1314 l 367 1291 q 421 1413 380 1373 q 517 1454 462 1454 q 597 1437 559 1454 q 647 1415 635 1421 q 707 1398 677 1398 q 744 1412 731 1398 q 767 1455 756 1425 l 856 1455 q 705 1291 820 1291 q 657 1296 680 1291 q 599 1320 635 1301 q 544 1343 557 1339 q 514 1346 530 1346 m 694 1071 q 585 1164 613 1136 l 444 1071 l 306 1071 l 306 1086 l 350 1127 q 488 1265 447 1213 l 703 1265 q 791 1127 728 1210 l 821 1086 l 821 1071 l 694 1071 z "},"ẫ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 437 1117 q 401 1101 412 1117 q 382 1061 389 1085 l 290 1061 q 344 1184 303 1143 q 440 1225 385 1225 q 520 1208 482 1225 q 570 1185 559 1192 q 631 1169 600 1169 q 667 1182 654 1169 q 690 1226 680 1196 l 779 1226 q 628 1061 743 1061 q 581 1067 603 1061 q 522 1090 559 1072 q 467 1114 481 1110 q 437 1117 453 1117 m 618 842 q 509 935 536 907 l 367 842 l 229 842 l 229 857 l 273 898 q 411 1036 370 984 l 627 1036 q 715 898 651 981 l 745 857 l 745 842 l 618 842 z "},"Ậ":{"ha":872,"x_min":-83,"x_max":838,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 838 1071 l 703 1071 q 593 1185 661 1107 q 436 1071 522 1125 l 289 1071 l 289 1088 q 393 1187 332 1126 q 489 1293 454 1249 l 718 1293 q 768 1197 733 1257 q 838 1088 804 1137 l 838 1071 m 224 -208 q 257 -119 224 -150 q 349 -89 290 -89 q 423 -110 396 -89 q 450 -171 450 -130 q 420 -258 450 -225 q 328 -292 390 -292 q 224 -208 224 -292 z "},"ậ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 755 842 l 621 842 q 511 956 578 878 q 353 842 439 896 l 206 842 l 206 859 q 310 958 249 897 q 406 1064 371 1019 l 635 1064 q 686 967 650 1027 q 755 859 721 907 l 755 842 m 214 -208 q 246 -119 214 -150 q 338 -89 279 -89 q 412 -110 385 -89 q 439 -171 439 -130 q 409 -258 439 -225 q 317 -292 379 -292 q 214 -208 214 -292 z "},"Ắ":{"ha":872,"x_min":-83,"x_max":836,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 836 1300 q 742 1130 813 1189 q 564 1071 671 1071 q 411 1120 465 1071 q 358 1263 358 1170 q 361 1300 358 1284 l 458 1300 l 458 1288 q 574 1185 458 1185 q 734 1300 690 1185 l 836 1300 m 513 1247 l 513 1260 q 625 1402 556 1303 l 772 1402 l 772 1394 q 701 1327 755 1374 q 598 1247 646 1280 l 513 1247 z "},"ắ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 779 1071 q 685 901 756 960 q 507 842 614 842 q 354 891 408 842 q 301 1034 301 941 q 304 1071 301 1055 l 401 1071 l 401 1059 q 517 956 401 956 q 677 1071 633 956 l 779 1071 m 456 1018 l 456 1031 q 568 1173 499 1074 l 715 1173 l 715 1165 q 644 1098 698 1145 q 541 1018 589 1050 l 456 1018 z "},"Ằ":{"ha":872,"x_min":-83,"x_max":844,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 844 1300 q 750 1130 821 1189 q 571 1071 679 1071 q 419 1120 472 1071 q 366 1263 366 1170 q 368 1300 366 1284 l 466 1300 l 466 1288 q 581 1185 466 1185 q 742 1300 697 1185 l 844 1300 m 581 1247 q 460 1392 496 1325 l 460 1402 l 603 1402 q 660 1259 622 1330 l 660 1247 l 581 1247 z "},"ằ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 778 1071 q 684 901 755 960 q 505 842 613 842 q 353 891 406 842 q 300 1034 300 941 q 302 1071 300 1055 l 400 1071 l 400 1059 q 515 956 400 956 q 676 1071 631 956 l 778 1071 m 515 1018 q 394 1162 430 1096 l 394 1173 l 537 1173 q 594 1029 556 1101 l 594 1018 l 515 1018 z "},"Ẳ":{"ha":872,"x_min":-83,"x_max":836,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 836 1300 q 742 1130 813 1189 q 564 1071 671 1071 q 411 1120 465 1071 q 358 1263 358 1170 q 361 1300 358 1284 l 458 1300 l 458 1288 q 574 1185 458 1185 q 734 1300 690 1185 l 836 1300 m 699 1364 q 676 1302 699 1327 q 607 1267 653 1276 l 598 1238 l 528 1238 l 536 1312 q 590 1328 572 1318 q 607 1360 607 1339 q 576 1379 607 1379 q 526 1371 548 1379 l 526 1439 q 595 1449 555 1449 q 671 1425 644 1449 q 699 1364 699 1402 z "},"ẳ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 777 1071 q 683 901 753 960 q 504 842 612 842 q 352 891 405 842 q 298 1034 298 941 q 301 1071 298 1055 l 399 1071 l 399 1059 q 514 956 399 956 q 675 1071 630 956 l 777 1071 m 639 1135 q 616 1073 639 1098 q 547 1038 593 1047 l 538 1008 l 468 1008 l 476 1083 q 530 1099 513 1088 q 547 1131 547 1109 q 517 1150 547 1150 q 467 1141 488 1150 l 467 1210 q 536 1219 495 1219 q 612 1196 585 1219 q 639 1135 639 1173 z "},"Ẵ":{"ha":872,"x_min":-83,"x_max":851,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 830 1272 q 738 1123 807 1175 q 564 1071 669 1071 q 409 1115 465 1071 q 354 1239 354 1159 q 357 1272 354 1257 l 454 1272 l 453 1263 q 574 1185 453 1185 q 670 1204 633 1185 q 730 1272 707 1223 l 830 1272 m 513 1356 q 457 1304 471 1356 l 366 1304 q 421 1417 381 1380 q 515 1454 460 1454 q 580 1444 551 1454 q 642 1417 608 1435 q 705 1397 680 1397 q 742 1413 729 1397 q 764 1455 755 1428 l 851 1455 q 701 1304 815 1304 q 652 1310 673 1304 q 595 1333 631 1316 q 554 1351 570 1346 q 513 1356 538 1356 z "},"ẵ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 766 1043 q 674 893 743 945 q 500 842 605 842 q 346 886 401 842 q 290 1010 290 930 q 293 1043 290 1028 l 390 1043 l 389 1034 q 510 956 389 956 q 606 975 570 956 q 667 1043 643 994 l 766 1043 m 450 1126 q 393 1075 408 1126 l 302 1075 q 357 1188 317 1151 q 452 1225 397 1225 q 516 1215 488 1225 q 578 1188 545 1206 q 642 1168 616 1168 q 679 1183 665 1168 q 700 1226 692 1199 l 787 1226 q 637 1075 751 1075 q 589 1081 610 1075 q 532 1104 568 1086 q 490 1122 507 1117 q 450 1126 474 1126 z "},"Ặ":{"ha":872,"x_min":-83,"x_max":840,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 840 1300 q 574 1071 803 1071 q 412 1120 470 1071 q 354 1255 354 1170 q 358 1300 354 1281 l 476 1300 q 501 1236 476 1256 q 581 1215 526 1215 q 667 1234 633 1215 q 712 1300 701 1252 l 840 1300 m 224 -208 q 257 -119 224 -150 q 349 -89 290 -89 q 423 -110 396 -89 q 450 -171 450 -130 q 420 -258 450 -225 q 328 -292 390 -292 q 224 -208 224 -292 z "},"ặ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 782 1071 q 515 842 745 842 q 354 891 412 842 q 296 1026 296 941 q 300 1071 296 1052 l 418 1071 q 443 1006 418 1027 q 522 986 467 986 q 609 1004 575 986 q 654 1071 642 1023 l 782 1071 m 214 -208 q 246 -119 214 -150 q 338 -89 279 -89 q 412 -110 385 -89 q 439 -171 439 -130 q 409 -258 439 -225 q 317 -292 379 -292 q 214 -208 214 -292 z "},"Ẹ":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 175 -208 q 208 -119 175 -150 q 299 -89 240 -89 q 373 -110 347 -89 q 400 -171 400 -130 q 370 -258 400 -225 q 278 -292 340 -292 q 175 -208 175 -292 z "},"ẹ":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 191 -208 q 224 -119 191 -150 q 315 -89 256 -89 q 390 -110 363 -89 q 416 -171 416 -130 q 387 -258 416 -225 q 294 -292 357 -292 q 191 -208 191 -292 z "},"Ẻ":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 721 1257 q 587 1104 721 1145 l 574 1056 l 450 1056 l 460 1156 q 535 1184 513 1165 q 557 1232 557 1202 q 546 1258 557 1249 q 514 1268 535 1268 q 429 1254 479 1268 l 429 1365 q 547 1382 479 1382 q 675 1350 630 1382 q 721 1257 721 1318 z "},"ẻ":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 681 1028 q 547 875 681 916 l 534 827 l 410 827 l 420 926 q 495 955 473 936 q 517 1003 517 973 q 506 1029 517 1019 q 474 1039 495 1039 q 389 1025 439 1039 l 389 1136 q 507 1153 439 1153 q 635 1121 590 1153 q 681 1028 681 1088 z "},"Ẽ":{"ha":753,"x_min":36,"x_max":835,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 640 1071 q 582 1082 607 1071 q 534 1106 556 1093 q 493 1131 513 1120 q 450 1142 473 1142 q 413 1123 429 1142 q 387 1069 396 1104 l 267 1069 q 457 1279 307 1279 q 516 1268 490 1279 q 565 1243 543 1257 q 607 1219 587 1230 q 648 1208 627 1208 q 687 1226 671 1208 q 718 1280 703 1243 l 835 1280 q 640 1071 790 1071 z "},"ẽ":{"ha":774,"x_min":61,"x_max":787,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 593 842 q 534 853 559 842 q 487 877 509 864 q 445 902 465 890 q 403 913 425 913 q 365 894 382 913 q 339 840 349 875 l 219 840 q 410 1050 259 1050 q 469 1039 443 1050 q 517 1014 495 1027 q 559 990 540 1001 q 600 979 579 979 q 640 997 623 979 q 671 1051 656 1014 l 787 1051 q 593 842 743 842 z "},"Ế":{"ha":753,"x_min":36,"x_max":1025,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 658 1071 q 554 1178 607 1116 q 407 1071 493 1126 l 269 1071 l 269 1086 l 314 1129 q 456 1279 411 1221 l 672 1279 q 785 1086 713 1187 l 785 1071 l 658 1071 m 745 1203 l 745 1215 q 857 1357 778 1248 l 1025 1357 l 1025 1350 q 954 1283 1008 1330 q 851 1203 899 1236 l 745 1203 z "},"ế":{"ha":774,"x_min":61,"x_max":966,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 600 842 q 496 949 549 886 q 349 842 435 897 l 211 842 l 211 857 l 256 900 q 398 1050 353 992 l 614 1050 q 726 857 654 958 l 726 842 l 600 842 m 687 974 l 687 986 q 798 1128 720 1019 l 966 1128 l 966 1121 q 895 1054 949 1101 q 793 974 841 1006 l 687 974 z "},"Ề":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 658 1071 q 554 1178 607 1116 q 407 1071 493 1126 l 269 1071 l 269 1086 l 314 1129 q 456 1279 411 1221 l 672 1279 q 785 1086 713 1187 l 785 1071 l 658 1071 m 258 1204 q 184 1281 218 1241 q 137 1349 151 1322 l 137 1358 l 294 1358 q 351 1215 310 1294 l 351 1204 l 258 1204 z "},"ề":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 600 842 q 496 949 549 886 q 349 842 435 897 l 211 842 l 211 857 l 256 900 q 398 1050 353 992 l 614 1050 q 726 857 654 958 l 726 842 l 600 842 m 200 975 q 126 1052 160 1012 q 79 1120 92 1093 l 79 1129 l 236 1129 q 293 986 252 1065 l 293 975 l 200 975 z "},"Ể":{"ha":753,"x_min":36,"x_max":957,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 957 1341 q 852 1236 957 1260 l 843 1200 l 760 1200 l 769 1279 q 855 1331 855 1283 q 818 1356 855 1356 q 761 1346 788 1356 l 761 1428 q 840 1439 793 1439 q 926 1412 895 1439 q 957 1341 957 1385 m 658 1071 q 554 1178 607 1116 q 407 1071 493 1126 l 269 1071 l 269 1086 l 314 1129 q 456 1279 411 1221 l 672 1279 q 785 1086 713 1187 l 785 1071 l 658 1071 z "},"ể":{"ha":774,"x_min":61,"x_max":899,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 899 1112 q 794 1007 899 1031 l 785 971 l 701 971 l 711 1050 q 797 1101 797 1054 q 760 1126 797 1126 q 703 1117 730 1126 l 703 1198 q 782 1210 734 1210 q 868 1183 837 1210 q 899 1112 899 1156 m 600 842 q 496 949 549 886 q 349 842 435 897 l 211 842 l 211 857 l 256 900 q 398 1050 353 992 l 614 1050 q 726 857 654 958 l 726 842 l 600 842 z "},"Ễ":{"ha":753,"x_min":36,"x_max":819,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 477 1346 q 441 1330 452 1346 q 422 1291 429 1314 l 330 1291 q 384 1413 343 1373 q 480 1454 425 1454 q 561 1437 522 1454 q 610 1415 599 1421 q 671 1398 640 1398 q 707 1412 694 1398 q 730 1455 720 1425 l 819 1455 q 668 1291 783 1291 q 621 1296 643 1291 q 562 1320 599 1301 q 507 1343 521 1339 q 477 1346 493 1346 m 658 1071 q 549 1164 576 1136 l 407 1071 l 269 1071 l 269 1086 l 313 1127 q 451 1265 410 1213 l 667 1265 q 755 1127 691 1210 l 785 1086 l 785 1071 l 658 1071 z "},"ễ":{"ha":774,"x_min":61,"x_max":761,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 419 1117 q 382 1101 394 1117 q 363 1061 371 1085 l 272 1061 q 326 1184 285 1143 q 422 1225 367 1225 q 502 1208 464 1225 q 552 1185 541 1192 q 612 1169 582 1169 q 649 1182 636 1169 q 672 1226 661 1196 l 761 1226 q 610 1061 725 1061 q 563 1067 585 1061 q 504 1090 541 1072 q 449 1114 463 1110 q 419 1117 435 1117 m 600 842 q 490 935 518 907 l 349 842 l 211 842 l 211 857 l 255 898 q 393 1036 352 984 l 608 1036 q 696 898 633 981 l 726 857 l 726 842 l 600 842 z "},"Ệ":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 798 1071 l 664 1071 q 554 1185 621 1107 q 397 1071 483 1125 l 250 1071 l 250 1088 q 353 1187 292 1126 q 450 1293 414 1249 l 679 1293 q 729 1197 694 1257 q 798 1088 764 1137 l 798 1071 m 175 -208 q 208 -119 175 -150 q 299 -89 240 -89 q 373 -110 347 -89 q 400 -171 400 -130 q 370 -258 400 -225 q 278 -292 340 -292 q 175 -208 175 -292 z "},"ệ":{"ha":774,"x_min":61,"x_max":742,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 742 842 l 608 842 q 498 956 565 878 q 340 842 427 896 l 193 842 l 193 859 q 297 958 236 897 q 393 1064 358 1019 l 623 1064 q 673 967 637 1027 q 742 859 708 907 l 742 842 m 191 -208 q 224 -119 191 -150 q 315 -89 256 -89 q 390 -110 363 -89 q 416 -171 416 -130 q 387 -258 416 -225 q 294 -292 357 -292 q 191 -208 191 -292 z "},"ỉ":{"ha":412,"x_min":25,"x_max":505,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 505 1028 q 371 875 505 916 l 357 827 l 234 827 l 243 926 q 318 955 296 936 q 340 1003 340 973 q 330 1029 340 1019 q 298 1039 319 1039 q 213 1025 263 1039 l 213 1136 q 331 1153 262 1153 q 459 1121 414 1153 q 505 1028 505 1088 z "},"ị":{"ha":412,"x_min":-22,"x_max":443,"o":"m 218 936 q 251 1025 218 995 q 342 1055 283 1055 q 417 1034 391 1055 q 443 974 443 1013 q 413 886 443 920 q 321 852 383 852 q 218 936 218 852 m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m -22 -208 q 10 -119 -22 -150 q 102 -89 43 -89 q 176 -110 149 -89 q 203 -171 203 -130 q 173 -258 203 -225 q 81 -292 143 -292 q -22 -208 -22 -292 z "},"Ọ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 294 -208 q 327 -119 294 -150 q 418 -89 359 -89 q 493 -110 466 -89 q 519 -171 519 -130 q 490 -258 519 -225 q 397 -292 460 -292 q 294 -208 294 -292 z "},"ọ":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 208 -208 q 241 -119 208 -150 q 332 -89 273 -89 q 407 -110 380 -89 q 433 -171 433 -130 q 404 -258 433 -225 q 311 -292 374 -292 q 208 -208 208 -292 z "},"Ỏ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 836 1257 q 703 1104 836 1145 l 689 1056 l 566 1056 l 575 1156 q 650 1184 628 1165 q 672 1232 672 1202 q 661 1258 672 1249 q 629 1268 650 1268 q 545 1254 595 1268 l 545 1365 q 663 1382 594 1382 q 791 1350 745 1382 q 836 1257 836 1318 z "},"ỏ":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 678 1028 q 545 875 678 916 l 531 827 l 408 827 l 417 926 q 492 955 470 936 q 514 1003 514 973 q 503 1029 514 1019 q 471 1039 492 1039 q 387 1025 437 1039 l 387 1136 q 505 1153 436 1153 q 633 1121 587 1153 q 678 1028 678 1088 z "},"Ố":{"ha":1014,"x_min":83,"x_max":1114,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 747 1071 q 643 1178 696 1116 q 496 1071 582 1126 l 358 1071 l 358 1086 l 403 1129 q 545 1279 500 1221 l 761 1279 q 873 1086 802 1187 l 873 1071 l 747 1071 m 834 1203 l 834 1215 q 945 1357 867 1248 l 1114 1357 l 1114 1350 q 1042 1283 1097 1330 q 940 1203 988 1236 l 834 1203 z "},"ố":{"ha":812,"x_min":61,"x_max":977,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 610 842 q 506 949 559 886 q 359 842 445 897 l 221 842 l 221 857 l 266 900 q 408 1050 363 992 l 624 1050 q 736 857 665 958 l 736 842 l 610 842 m 697 974 l 697 986 q 808 1128 730 1019 l 977 1128 l 977 1121 q 905 1054 960 1101 q 803 974 851 1006 l 697 974 z "},"Ồ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 747 1071 q 643 1178 696 1116 q 496 1071 582 1126 l 358 1071 l 358 1086 l 403 1129 q 545 1279 500 1221 l 761 1279 q 873 1086 802 1187 l 873 1071 l 747 1071 m 347 1204 q 273 1281 307 1241 q 226 1349 239 1322 l 226 1358 l 383 1358 q 440 1215 399 1294 l 440 1204 l 347 1204 z "},"ồ":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 610 842 q 506 949 559 886 q 359 842 445 897 l 221 842 l 221 857 l 266 900 q 408 1050 363 992 l 624 1050 q 736 857 665 958 l 736 842 l 610 842 m 210 975 q 136 1052 170 1012 q 89 1120 102 1093 l 89 1129 l 246 1129 q 303 986 262 1065 l 303 975 l 210 975 z "},"Ổ":{"ha":1014,"x_min":83,"x_max":1046,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 1046 1341 q 941 1236 1046 1260 l 932 1200 l 848 1200 l 858 1279 q 944 1331 944 1283 q 907 1356 944 1356 q 850 1346 877 1356 l 850 1428 q 929 1439 882 1439 q 1015 1412 984 1439 q 1046 1341 1046 1385 m 747 1071 q 643 1178 696 1116 q 496 1071 582 1126 l 358 1071 l 358 1086 l 403 1129 q 545 1279 500 1221 l 761 1279 q 873 1086 802 1187 l 873 1071 l 747 1071 z "},"ổ":{"ha":812,"x_min":61,"x_max":909,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 909 1112 q 804 1007 909 1031 l 795 971 l 711 971 l 721 1050 q 807 1101 807 1054 q 770 1126 807 1126 q 713 1117 740 1126 l 713 1198 q 792 1210 745 1210 q 878 1183 847 1210 q 909 1112 909 1156 m 610 842 q 506 949 559 886 q 359 842 445 897 l 221 842 l 221 857 l 266 900 q 408 1050 363 992 l 624 1050 q 736 857 665 958 l 736 842 l 610 842 z "},"Ỗ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 566 1346 q 530 1330 541 1346 q 511 1291 518 1314 l 419 1291 q 473 1413 432 1373 q 569 1454 514 1454 q 649 1437 611 1454 q 699 1415 688 1421 q 760 1398 729 1398 q 796 1412 783 1398 q 819 1455 808 1425 l 908 1455 q 757 1291 872 1291 q 710 1296 732 1291 q 651 1320 688 1301 q 596 1343 610 1339 q 566 1346 582 1346 m 747 1071 q 637 1164 665 1136 l 496 1071 l 358 1071 l 358 1086 l 402 1127 q 540 1265 499 1213 l 755 1265 q 844 1127 780 1210 l 873 1086 l 873 1071 l 747 1071 z "},"ỗ":{"ha":812,"x_min":61,"x_max":771,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 429 1117 q 393 1101 404 1117 q 374 1061 381 1085 l 282 1061 q 336 1184 295 1143 q 432 1225 377 1225 q 512 1208 474 1225 q 562 1185 551 1192 q 623 1169 592 1169 q 659 1182 646 1169 q 682 1226 671 1196 l 771 1226 q 620 1061 735 1061 q 573 1067 595 1061 q 514 1090 551 1072 q 459 1114 473 1110 q 429 1117 445 1117 m 610 842 q 500 935 528 907 l 359 842 l 221 842 l 221 857 l 265 898 q 403 1036 362 984 l 618 1036 q 707 898 643 981 l 736 857 l 736 842 l 610 842 z "},"Ộ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 887 1071 l 753 1071 q 643 1185 710 1107 q 486 1071 572 1125 l 338 1071 l 338 1088 q 442 1187 381 1126 q 538 1293 503 1249 l 768 1293 q 818 1197 783 1257 q 887 1088 853 1137 l 887 1071 m 294 -208 q 327 -119 294 -150 q 418 -89 359 -89 q 493 -110 466 -89 q 519 -171 519 -130 q 490 -258 519 -225 q 397 -292 460 -292 q 294 -208 294 -292 z "},"ộ":{"ha":812,"x_min":61,"x_max":752,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 752 842 l 618 842 q 508 956 575 878 q 351 842 437 896 l 203 842 l 203 859 q 307 958 246 897 q 404 1064 368 1019 l 633 1064 q 683 967 648 1027 q 752 859 718 907 l 752 842 m 208 -208 q 241 -119 208 -150 q 332 -89 273 -89 q 407 -110 380 -89 q 433 -171 433 -130 q 404 -258 433 -225 q 311 -292 374 -292 q 208 -208 208 -292 z "},"Ớ":{"ha":1072,"x_min":83,"x_max":1219,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 909 867 816 1007 q 1007 1055 985 917 l 1213 1055 l 1219 1039 q 1124 860 1187 931 q 958 750 1061 789 q 971 636 971 693 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 511 1088 q 661 1293 564 1147 l 888 1293 l 888 1282 q 784 1178 857 1244 q 652 1071 711 1113 l 511 1071 l 511 1088 z "},"ớ":{"ha":893,"x_min":61,"x_max":1015,"o":"m 464 772 q 690 673 612 772 q 765 739 736 692 q 808 872 793 785 l 1008 872 l 1015 856 q 920 667 983 734 q 742 559 857 600 q 751 472 751 525 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 376 859 q 527 1064 430 918 l 754 1064 l 754 1053 q 650 949 723 1015 q 518 842 576 884 l 376 842 l 376 859 z "},"Ờ":{"ha":1072,"x_min":83,"x_max":1219,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 909 867 816 1007 q 1007 1055 985 917 l 1213 1055 l 1219 1039 q 1124 860 1187 931 q 958 750 1061 789 q 971 636 971 693 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 714 1071 l 589 1071 q 495 1175 541 1118 q 425 1279 450 1232 l 425 1293 l 636 1293 q 714 1088 661 1193 l 714 1071 z "},"ờ":{"ha":893,"x_min":61,"x_max":1015,"o":"m 464 772 q 690 673 612 772 q 765 739 736 692 q 808 872 793 785 l 1008 872 l 1015 856 q 920 667 983 734 q 742 559 857 600 q 751 472 751 525 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 568 842 l 443 842 q 349 946 395 888 q 279 1050 303 1003 l 279 1064 l 490 1064 q 568 859 514 964 l 568 842 z "},"Ở":{"ha":1072,"x_min":83,"x_max":1219,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 909 867 816 1007 q 1007 1055 985 917 l 1213 1055 l 1219 1039 q 1124 860 1187 931 q 958 750 1061 789 q 971 636 971 693 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 836 1257 q 703 1104 836 1145 l 689 1056 l 566 1056 l 575 1156 q 650 1184 628 1165 q 672 1232 672 1202 q 661 1258 672 1249 q 629 1268 650 1268 q 545 1254 595 1268 l 545 1365 q 663 1382 594 1382 q 791 1350 745 1382 q 836 1257 836 1318 z "},"ở":{"ha":893,"x_min":61,"x_max":1015,"o":"m 464 772 q 690 673 612 772 q 765 739 736 692 q 808 872 793 785 l 1008 872 l 1015 856 q 920 667 983 734 q 742 559 857 600 q 751 472 751 525 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 678 1028 q 545 875 678 916 l 531 827 l 408 827 l 417 926 q 492 955 470 936 q 514 1003 514 973 q 503 1029 514 1019 q 471 1039 492 1039 q 387 1025 437 1039 l 387 1136 q 505 1153 436 1153 q 633 1121 587 1153 q 678 1028 678 1088 z "},"Ỡ":{"ha":1072,"x_min":83,"x_max":1219,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 909 867 816 1007 q 1007 1055 985 917 l 1213 1055 l 1219 1039 q 1124 860 1187 931 q 958 750 1061 789 q 971 636 971 693 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 726 1071 q 668 1082 693 1071 q 621 1106 642 1093 q 579 1131 599 1120 q 536 1142 559 1142 q 499 1123 515 1142 q 473 1069 482 1104 l 353 1069 q 543 1279 393 1279 q 603 1268 576 1279 q 651 1243 629 1257 q 693 1219 673 1230 q 734 1208 713 1208 q 773 1226 757 1208 q 804 1280 789 1243 l 921 1280 q 726 1071 876 1071 z "},"ỡ":{"ha":893,"x_min":61,"x_max":1015,"o":"m 464 772 q 690 673 612 772 q 765 739 736 692 q 808 872 793 785 l 1008 872 l 1015 856 q 920 667 983 734 q 742 559 857 600 q 751 472 751 525 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 580 842 q 521 853 547 842 q 474 877 496 864 q 432 902 452 890 q 390 913 412 913 q 352 894 369 913 q 326 840 336 875 l 206 840 q 397 1050 246 1050 q 456 1039 430 1050 q 505 1014 482 1027 q 547 990 527 1001 q 587 979 566 979 q 627 997 610 979 q 658 1051 643 1014 l 774 1051 q 580 842 730 842 z "},"Ợ":{"ha":1072,"x_min":83,"x_max":1219,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 909 867 816 1007 q 1007 1055 985 917 l 1213 1055 l 1219 1039 q 1124 860 1187 931 q 958 750 1061 789 q 971 636 971 693 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 294 -208 q 327 -119 294 -150 q 418 -89 359 -89 q 493 -110 466 -89 q 519 -171 519 -130 q 490 -258 519 -225 q 397 -292 460 -292 q 294 -208 294 -292 z "},"ợ":{"ha":893,"x_min":61,"x_max":1015,"o":"m 464 772 q 690 673 612 772 q 765 739 736 692 q 808 872 793 785 l 1008 872 l 1015 856 q 920 667 983 734 q 742 559 857 600 q 751 472 751 525 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 208 -208 q 241 -119 208 -150 q 332 -89 273 -89 q 407 -110 380 -89 q 433 -171 433 -130 q 404 -258 433 -225 q 311 -292 374 -292 q 208 -208 208 -292 z "},"Ụ":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 273 -208 q 306 -119 273 -150 q 397 -89 338 -89 q 472 -110 445 -89 q 498 -171 498 -130 q 469 -258 498 -225 q 376 -292 439 -292 q 273 -208 273 -292 z "},"ụ":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 220 -208 q 253 -119 220 -150 q 345 -89 286 -89 q 419 -110 392 -89 q 446 -171 446 -130 q 416 -258 446 -225 q 323 -292 386 -292 q 220 -208 220 -292 z "},"Ủ":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 815 1257 q 682 1104 815 1145 l 668 1056 l 545 1056 l 554 1156 q 629 1184 607 1165 q 651 1232 651 1202 q 640 1258 651 1249 q 608 1268 629 1268 q 524 1254 574 1268 l 524 1365 q 642 1382 573 1382 q 770 1350 724 1382 q 815 1257 815 1318 z "},"ủ":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 704 1028 q 570 875 704 916 l 557 827 l 433 827 l 443 926 q 518 955 496 936 q 540 1003 540 973 q 529 1029 540 1019 q 497 1039 518 1039 q 412 1025 463 1039 l 412 1136 q 530 1153 462 1153 q 659 1121 613 1153 q 704 1028 704 1088 z "},"Ứ":{"ha":1076,"x_min":96,"x_max":1280,"o":"m 972 991 l 946 867 q 1026 925 998 883 q 1068 1055 1055 968 l 1274 1055 l 1280 1039 q 1147 824 1240 901 q 918 739 1054 748 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 513 1088 q 664 1293 567 1147 l 891 1293 l 891 1282 q 787 1178 860 1244 q 655 1071 713 1113 l 513 1071 l 513 1088 z "},"ứ":{"ha":987,"x_min":72,"x_max":1135,"o":"m 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 799 682 q 857 712 833 691 q 894 766 880 733 q 922 871 909 799 l 1128 871 l 1135 854 q 1003 642 1095 718 q 772 554 911 565 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 m 404 859 q 555 1064 458 918 l 782 1064 l 782 1053 q 677 949 751 1015 q 546 842 604 884 l 404 842 l 404 859 z "},"Ừ":{"ha":1076,"x_min":96,"x_max":1280,"o":"m 972 991 l 946 867 q 1026 925 998 883 q 1068 1055 1055 968 l 1274 1055 l 1280 1039 q 1147 824 1240 901 q 918 739 1054 748 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 680 1071 l 555 1071 q 461 1175 507 1118 q 391 1279 415 1232 l 391 1293 l 602 1293 q 680 1088 626 1193 l 680 1071 z "},"ừ":{"ha":987,"x_min":72,"x_max":1135,"o":"m 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 799 682 q 857 712 833 691 q 894 766 880 733 q 922 871 909 799 l 1128 871 l 1135 854 q 1003 642 1095 718 q 772 554 911 565 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 m 573 842 l 448 842 q 354 946 400 888 q 284 1050 309 1003 l 284 1064 l 495 1064 q 573 859 519 964 l 573 842 z "},"Ử":{"ha":1076,"x_min":96,"x_max":1280,"o":"m 972 991 l 946 867 q 1026 925 998 883 q 1068 1055 1055 968 l 1274 1055 l 1280 1039 q 1147 824 1240 901 q 918 739 1054 748 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 815 1257 q 682 1104 815 1145 l 668 1056 l 545 1056 l 554 1156 q 629 1184 607 1165 q 651 1232 651 1202 q 640 1258 651 1249 q 608 1268 629 1268 q 524 1254 574 1268 l 524 1365 q 642 1382 573 1382 q 770 1350 724 1382 q 815 1257 815 1318 z "},"ử":{"ha":987,"x_min":72,"x_max":1135,"o":"m 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 799 682 q 857 712 833 691 q 894 766 880 733 q 922 871 909 799 l 1128 871 l 1135 854 q 1003 642 1095 718 q 772 554 911 565 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 m 704 1028 q 570 875 704 916 l 557 827 l 433 827 l 443 926 q 518 955 496 936 q 540 1003 540 973 q 529 1029 540 1019 q 497 1039 518 1039 q 412 1025 463 1039 l 412 1136 q 530 1153 462 1153 q 659 1121 613 1153 q 704 1028 704 1088 z "},"Ữ":{"ha":1076,"x_min":96,"x_max":1280,"o":"m 972 991 l 946 867 q 1026 925 998 883 q 1068 1055 1055 968 l 1274 1055 l 1280 1039 q 1147 824 1240 901 q 918 739 1054 748 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 720 1071 q 661 1082 686 1071 q 614 1106 635 1093 q 572 1131 592 1120 q 530 1142 552 1142 q 492 1123 509 1142 q 466 1069 475 1104 l 346 1069 q 536 1279 386 1279 q 596 1268 570 1279 q 644 1243 622 1257 q 686 1219 667 1230 q 727 1208 706 1208 q 766 1226 750 1208 q 798 1280 783 1243 l 914 1280 q 720 1071 869 1071 z "},"ữ":{"ha":987,"x_min":72,"x_max":1135,"o":"m 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 799 682 q 857 712 833 691 q 894 766 880 733 q 922 871 909 799 l 1128 871 l 1135 854 q 1003 642 1095 718 q 772 554 911 565 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 m 621 842 q 562 853 587 842 q 515 877 536 864 q 473 902 493 890 q 431 913 453 913 q 393 894 410 913 q 367 840 376 875 l 247 840 q 437 1050 287 1050 q 497 1039 471 1050 q 545 1014 523 1027 q 587 990 568 1001 q 628 979 607 979 q 667 997 651 979 q 699 1051 684 1014 l 815 1051 q 621 842 770 842 z "},"Ự":{"ha":1076,"x_min":96,"x_max":1280,"o":"m 972 991 l 946 867 q 1026 925 998 883 q 1068 1055 1055 968 l 1274 1055 l 1280 1039 q 1147 824 1240 901 q 918 739 1054 748 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 273 -208 q 306 -119 273 -150 q 397 -89 338 -89 q 472 -110 445 -89 q 498 -171 498 -130 q 469 -258 498 -225 q 376 -292 439 -292 q 273 -208 273 -292 z "},"ự":{"ha":987,"x_min":72,"x_max":1135,"o":"m 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 799 682 q 857 712 833 691 q 894 766 880 733 q 922 871 909 799 l 1128 871 l 1135 854 q 1003 642 1095 718 q 772 554 911 565 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 m 220 -208 q 253 -119 220 -150 q 345 -89 286 -89 q 419 -110 392 -89 q 446 -171 446 -130 q 416 -258 446 -225 q 323 -292 386 -292 q 220 -208 220 -292 z "},"Ỵ":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 m 161 -208 q 193 -119 161 -150 q 285 -89 226 -89 q 359 -110 332 -89 q 386 -171 386 -130 q 356 -258 386 -225 q 264 -292 326 -292 q 161 -208 161 -292 z "},"ỵ":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 393 -208 q 425 -119 393 -150 q 517 -89 458 -89 q 591 -110 564 -89 q 618 -171 618 -130 q 588 -258 618 -225 q 496 -292 558 -292 q 393 -208 393 -292 z "},"Ỷ":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 m 694 1257 q 561 1104 694 1145 l 547 1056 l 424 1056 l 433 1156 q 508 1184 486 1165 q 530 1232 530 1202 q 519 1258 530 1249 q 488 1268 509 1268 q 403 1254 453 1268 l 403 1365 q 521 1382 452 1382 q 649 1350 604 1382 q 694 1257 694 1318 z "},"ỷ":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 625 1028 q 492 875 625 916 l 478 827 l 355 827 l 364 926 q 439 955 417 936 q 461 1003 461 973 q 450 1029 461 1019 q 418 1039 439 1039 q 334 1025 384 1039 l 334 1136 q 452 1153 383 1153 q 580 1121 534 1153 q 625 1028 625 1088 z "},"Ỹ":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 m 615 1071 q 556 1082 582 1071 q 509 1106 531 1093 q 468 1131 488 1120 q 425 1142 448 1142 q 388 1123 404 1142 q 361 1069 371 1104 l 241 1069 q 432 1279 281 1279 q 491 1268 465 1279 q 540 1243 517 1257 q 582 1219 562 1230 q 623 1208 602 1208 q 662 1226 646 1208 q 693 1280 678 1243 l 810 1280 q 615 1071 765 1071 z "},"ỹ":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 536 842 q 478 853 503 842 q 431 877 452 864 q 389 902 409 890 q 347 913 369 913 q 309 894 326 913 q 283 840 292 875 l 163 840 q 353 1050 203 1050 q 413 1039 387 1050 q 461 1014 439 1027 q 503 990 484 1001 q 544 979 523 979 q 583 997 567 979 q 614 1051 600 1014 l 731 1051 q 536 842 686 842 z "},"₫":{"ha":825,"x_min":37,"x_max":945,"o":"m 404 730 q 506 707 464 730 q 579 629 549 684 l 585 629 q 588 684 585 648 q 608 811 592 721 l 408 811 l 436 946 l 636 946 l 660 1055 l 864 1055 l 840 946 l 945 946 l 917 811 l 811 811 l 640 0 l 485 0 l 494 98 l 492 98 q 390 12 439 37 q 282 -14 340 -14 q 120 58 179 -14 q 61 262 61 130 q 109 498 61 385 q 233 671 156 612 q 404 730 309 730 m 364 151 q 450 192 410 151 q 515 308 489 232 q 541 457 541 384 q 518 536 541 506 q 447 566 496 566 q 357 524 399 566 q 292 414 316 483 q 268 271 268 346 q 294 181 268 211 q 364 151 319 151 m 593 -220 l 37 -220 l 57 -125 l 614 -125 l 593 -220 z "},"̏":{"ha":0,"x_min":-629,"x_max":-102,"o":"m -465 842 q -559 946 -513 888 q -629 1050 -605 1003 l -629 1064 l -437 1064 q -359 859 -412 958 l -359 842 l -465 842 m -207 842 q -301 946 -255 888 q -371 1050 -347 1003 l -371 1064 l -179 1064 q -102 859 -154 961 l -102 842 l -207 842 z "},"ﬀ":{"ha":990,"x_min":-149,"x_max":1141,"o":"m -31 -334 q -149 -317 -101 -334 l -149 -153 q -71 -167 -107 -167 q 2 -140 -29 -167 q 46 -52 33 -113 l 184 603 l 74 603 l 94 701 l 218 758 l 231 815 q 325 1003 258 944 q 510 1063 391 1063 q 669 1029 599 1063 l 615 878 q 525 899 568 899 q 463 871 486 899 q 431 800 439 844 l 422 758 l 690 758 l 703 815 q 797 1003 730 944 q 982 1063 863 1063 q 1141 1029 1071 1063 l 1088 878 q 997 899 1041 899 q 935 871 958 899 q 903 800 911 844 l 895 758 l 1043 758 l 1010 603 l 861 603 l 715 -82 q 441 -334 663 -334 q 323 -317 371 -334 l 323 -153 q 401 -167 365 -167 q 518 -52 494 -167 l 657 603 l 389 603 l 243 -82 q -31 -334 191 -334 z "},"℠":{"ha":1021,"x_min":107,"x_max":1010,"o":"m 415 642 q 368 535 415 574 q 241 497 321 497 q 107 526 167 497 l 107 624 q 244 587 185 587 q 291 601 275 587 q 307 637 307 614 q 295 669 307 656 q 258 694 283 682 l 224 711 q 134 779 157 745 q 110 859 110 813 q 153 960 110 922 q 273 999 197 999 q 414 964 338 999 l 379 879 q 321 903 341 897 q 273 908 300 908 q 218 863 218 908 q 234 825 218 841 q 297 787 250 810 q 391 722 367 753 q 415 642 415 690 m 681 503 l 568 861 l 564 861 l 567 786 l 567 503 l 456 503 l 456 991 l 624 991 l 732 646 l 847 991 l 1010 991 l 1010 503 l 896 503 l 896 779 l 899 861 l 895 861 l 777 503 l 681 503 z "},"Ţ":{"ha":737,"x_min":96,"x_max":836,"o":"m 387 0 l 180 0 l 353 817 l 114 817 l 151 991 l 836 991 l 799 817 l 559 817 l 387 0 m 414 -170 q 357 -291 414 -248 q 199 -334 301 -334 q 96 -318 140 -334 l 96 -204 q 180 -220 138 -220 q 250 -164 250 -220 q 229 -126 250 -141 q 154 -104 208 -111 l 219 0 l 345 0 l 318 -49 q 414 -170 414 -82 z "},"ţ":{"ha":570,"x_min":58,"x_max":596,"o":"m 349 151 q 458 175 393 151 l 458 22 q 278 -14 383 -14 q 129 29 176 -14 q 81 161 81 72 q 89 237 81 195 l 167 603 l 64 603 l 83 703 l 216 760 l 306 920 l 437 920 l 404 758 l 596 758 l 562 603 l 371 603 l 293 237 q 289 201 289 217 q 349 151 289 151 m 376 -170 q 320 -291 376 -248 q 161 -334 264 -334 q 58 -318 103 -334 l 58 -204 q 143 -220 101 -220 q 212 -164 212 -220 q 191 -126 212 -141 q 117 -104 170 -111 l 182 0 l 307 0 l 281 -49 q 376 -170 376 -82 z "},"I":{"ha":447,"x_min":36,"x_max":454,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 z "},"Ì":{"ha":447,"x_min":36,"x_max":454,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 452 1071 l 328 1071 q 234 1175 279 1118 q 163 1279 188 1232 l 163 1293 l 374 1293 q 452 1088 399 1193 l 452 1071 z "},"Í":{"ha":447,"x_min":36,"x_max":659,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 281 1088 q 431 1293 334 1147 l 659 1293 l 659 1282 q 554 1178 627 1244 q 422 1071 481 1113 l 281 1071 l 281 1088 z "},"Î":{"ha":447,"x_min":36,"x_max":635,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 635 1071 l 501 1071 q 391 1185 458 1107 q 234 1071 320 1125 l 87 1071 l 87 1088 q 191 1187 130 1126 q 287 1293 252 1249 l 516 1293 q 566 1197 531 1257 q 635 1088 602 1137 l 635 1071 z "},"Ï":{"ha":447,"x_min":36,"x_max":623,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 151 1166 q 179 1246 151 1219 q 260 1274 208 1274 q 351 1200 351 1274 q 324 1121 351 1151 q 242 1092 298 1092 q 151 1166 151 1092 m 423 1166 q 452 1246 423 1219 q 533 1274 480 1274 q 600 1255 577 1274 q 623 1200 623 1236 q 596 1121 623 1151 q 515 1092 570 1092 q 423 1166 423 1092 z "},"Ĩ":{"ha":447,"x_min":36,"x_max":662,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 467 1071 q 409 1082 434 1071 q 361 1106 383 1093 q 320 1131 340 1120 q 277 1142 300 1142 q 240 1123 256 1142 q 214 1069 223 1104 l 94 1069 q 284 1279 134 1279 q 343 1268 317 1279 q 392 1243 370 1257 q 434 1219 414 1230 q 475 1208 454 1208 q 514 1226 498 1208 q 545 1280 530 1243 l 662 1280 q 467 1071 617 1071 z "},"Ī":{"ha":447,"x_min":36,"x_max":606,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 186 1214 l 606 1214 l 576 1071 l 156 1071 l 186 1214 z "},"Ĭ":{"ha":447,"x_min":36,"x_max":640,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 640 1300 q 373 1071 602 1071 q 211 1120 269 1071 q 153 1255 153 1170 q 157 1300 153 1281 l 275 1300 q 300 1236 275 1256 q 380 1215 325 1215 q 466 1234 433 1215 q 511 1300 500 1252 l 640 1300 z "},"Į":{"ha":447,"x_min":-49,"x_max":454,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 232 0 q 127 -100 151 -65 q 102 -170 102 -136 q 113 -199 102 -189 q 143 -210 124 -210 q 212 -197 173 -210 l 212 -317 q 101 -334 155 -334 q -8 -297 32 -334 q -49 -201 -49 -261 q -17 -99 -49 -146 q 97 0 16 -52 l 232 0 z "},"İ":{"ha":447,"x_min":36,"x_max":503,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 278 1165 q 310 1254 278 1224 q 401 1284 342 1284 q 477 1263 451 1284 q 503 1203 503 1242 q 473 1115 503 1149 q 380 1082 443 1082 q 278 1165 278 1082 z "},"Ĳ":{"ha":907,"x_min":36,"x_max":915,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 355 -292 q 229 -273 292 -292 l 229 -102 q 340 -115 288 -115 q 449 -74 407 -115 q 509 56 490 -33 l 708 991 l 915 991 l 709 26 q 590 -216 674 -140 q 355 -292 507 -292 z "},"Ί":{"ha":546,"x_min":23,"x_max":553,"o":"m 134 0 l 346 991 l 553 991 l 341 0 l 134 0 m 23 791 q 125 1034 75 895 l 317 1034 l 317 1018 q 145 770 236 884 l 23 770 l 23 791 z "},"Ι":{"ha":447,"x_min":36,"x_max":454,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 z "},"Ϊ":{"ha":447,"x_min":36,"x_max":623,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 151 1166 q 179 1246 151 1219 q 260 1274 208 1274 q 351 1200 351 1274 q 324 1121 351 1151 q 242 1092 298 1092 q 151 1166 151 1092 m 423 1166 q 452 1246 423 1219 q 533 1274 480 1274 q 600 1255 577 1274 q 623 1200 623 1236 q 596 1121 623 1151 q 515 1092 570 1092 q 423 1166 423 1092 z "},"І":{"ha":447,"x_min":36,"x_max":454,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 z "},"Ї":{"ha":447,"x_min":36,"x_max":623,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 151 1166 q 179 1246 151 1219 q 260 1274 208 1274 q 351 1200 351 1274 q 324 1121 351 1151 q 242 1092 298 1092 q 151 1166 151 1092 m 423 1166 q 452 1246 423 1219 q 533 1274 480 1274 q 600 1255 577 1274 q 623 1200 623 1236 q 596 1121 623 1151 q 515 1092 570 1092 q 423 1166 423 1092 z "},"Ӏ":{"ha":447,"x_min":36,"x_max":454,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 z "},"ӏ":{"ha":447,"x_min":36,"x_max":454,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 z "},"Ỉ":{"ha":447,"x_min":36,"x_max":561,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 561 1257 q 427 1104 561 1145 l 414 1056 l 290 1056 l 300 1156 q 375 1184 353 1165 q 397 1232 397 1202 q 386 1258 397 1249 q 354 1268 375 1268 q 269 1254 319 1268 l 269 1365 q 387 1382 319 1382 q 515 1350 470 1382 q 561 1257 561 1318 z "},"Ị":{"ha":447,"x_min":-10,"x_max":454,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m -10 -208 q 22 -119 -10 -150 q 114 -89 55 -89 q 188 -110 161 -89 q 215 -171 215 -130 q 185 -258 215 -225 q 93 -292 155 -292 q -10 -208 -10 -292 z "}},"familyName":"Open Sans","ascender":1485,"descender":-407,"underlinePosition":-104,"underlineThickness":69,"boundingBox":{"yMin":-407,"xMin":-713,"yMax":1485,"xMax":1796},"resolution":1000,"original_font_information":{"format":0,"copyright":"Digitized data copyright © 2010-2011, Google Corporation.","fontFamily":"Open Sans","fontSubfamily":"Bold Italic","uniqueID":"1.10;1ASC;OpenSans-BoldItalic","fullName":"Open Sans Bold Italic","version":"Version 1.10","postScriptName":"OpenSans-BoldItalic","trademark":"Open Sans is a trademark of Google and may be registered in certain jurisdictions.","manufacturer":"Ascender Corporation","manufacturerURL":"http://www.ascendercorp.com/","designerURL":"http://www.ascendercorp.com/typedesigners.html","licence":"Licensed under the Apache License, Version 2.0","licenceURL":"http://www.apache.org/licenses/LICENSE-2.0"},"cssFontWeight":"bold","cssFontStyle":"italic"}')},function(t,e,n){t.exports=n(4)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(5);e.Core=i.Core},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),r=n(6),a=n(7),o=n(9),s=n(12),l=n(13),c=n(1),h=n(2),u=function(){function t(t){this.clock=new i.Clock,this.renderer=new i.WebGLRenderer({antialias:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.gammaInput=!0,this.renderer.gammaOutput=!0,this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=i.PCFSoftShadowMap,document.body.appendChild(this.renderer.domElement),this.scene=new i.Scene,this.scene.background=new i.Color(13421772),this.hemiLight=new i.HemisphereLight(16777215,16777215,.6),this.hemiLight.color.setHSL(.6,1,.6),this.hemiLight.groundColor.setHSL(.095,1,.75),this.hemiLight.position.set(0,50,0),this.scene.add(this.hemiLight),this.dirLight=new i.DirectionalLight(16777215,.6),this.dirLight.color.setHSL(.1,1,.95),this.dirLight.position.set(1,1.75,-1),this.dirLight.position.multiplyScalar(30),this.scene.add(this.dirLight);this.dirLight.castShadow=!0,this.dirLight.shadow.mapSize.width=1024,this.dirLight.shadow.mapSize.height=1024,this.dirLight.shadow.camera.left=-100,this.dirLight.shadow.camera.right=100,this.dirLight.shadow.camera.top=100,this.dirLight.shadow.camera.bottom=-100,this.dirLight.shadow.camera.far=3500,this.dirLight.shadow.bias=-1e-5,this.camera=new i.PerspectiveCamera(60,window.innerWidth/window.innerHeight,.5,1e3),this.camera.position.set(0,50,-50),this.camera.lookAt(0,0,0),this.control=new r.OrbitControls(this.camera,this.renderer.domElement),this.control.enableDamping=!0,this.control.dampingFactor=.05,this.control.enableKeys=!1,this.control.screenSpacePanning=!1,this.control.rotateSpeed=.5,this.control.enablePan=!1,this.control.minPolarAngle=.1*Math.PI,this.control.maxPolarAngle=.5*Math.PI,window.addEventListener("resize",this.onResize.bind(this),!1);var e=this;this.model=new o.ModelManager(this.scene,(function(){e.scoreMgr=new l.ScoreManager(e.scene,e.camera,e.control),e.board=new a.Board(e.scene,e.model,e.camera,e.control,e.scoreMgr),e.gameLogic=new s.GameLogic(e.scene,e.camera,e.board,e.model,e.scoreMgr),t&&t(),e.render()}))}return t.prototype.onResize=function(){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)},t.prototype.render=function(){requestAnimationFrame(this.render.bind(this));var t=this.clock.getDelta();c.default.update(),this.scoreMgr.update(t),this.control.update(),this.renderer.render(this.scene,this.camera)},t.prototype.dispose=function(){this.board.dispose(),this.gameLogic.disposeCursor()},t.prototype.createGame=function(t,e){this.dispose(),this.board.createMap(t,e),this.gameLogic.createCursor()},t.prototype.Test=function(){var t=(new i.FontLoader).parse(h),e=new i.TextBufferGeometry("Score: 1234567890",{font:t,size:10,height:5}),n=new i.MeshPhongMaterial({color:16711680}),r=new i.Mesh(e,n);this.scene.add(r)},t}();e.Core=u},function(t,e,n){"use strict";n.r(e),n.d(e,"OrbitControls",(function(){return r})),n.d(e,"MapControls",(function(){return a}));var i=n(0),r=function(t,e){var n,r,a,o,s;void 0===e&&console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.'),e===document&&console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'),this.object=t,this.domElement=e,this.enabled=!0,this.target=new i.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!1,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={LEFT:i.MOUSE.ROTATE,MIDDLE:i.MOUSE.DOLLY,RIGHT:i.MOUSE.PAN},this.touches={ONE:i.TOUCH.ROTATE,TWO:i.TOUCH.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.getPolarAngle=function(){return p.phi},this.getAzimuthalAngle=function(){return p.theta},this.saveState=function(){l.target0.copy(l.target),l.position0.copy(l.object.position),l.zoom0=l.object.zoom},this.reset=function(){l.target.copy(l.target0),l.object.position.copy(l.position0),l.object.zoom=l.zoom0,l.object.updateProjectionMatrix(),l.dispatchEvent(c),l.update(),m=q.NONE},this.update=(n=new i.Vector3,r=(new i.Quaternion).setFromUnitVectors(t.up,new i.Vector3(0,1,0)),a=r.clone().inverse(),o=new i.Vector3,s=new i.Quaternion,function(){var t=l.object.position;return n.copy(t).sub(l.target),n.applyQuaternion(r),p.setFromVector3(n),l.autoRotate&&m===q.NONE&&L(2*Math.PI/60/60*l.autoRotateSpeed),l.enableDamping?(p.theta+=f.theta*l.dampingFactor,p.phi+=f.phi*l.dampingFactor):(p.theta+=f.theta,p.phi+=f.phi),p.theta=Math.max(l.minAzimuthAngle,Math.min(l.maxAzimuthAngle,p.theta)),p.phi=Math.max(l.minPolarAngle,Math.min(l.maxPolarAngle,p.phi)),p.makeSafe(),p.radius*=v,p.radius=Math.max(l.minDistance,Math.min(l.maxDistance,p.radius)),!0===l.enableDamping?l.target.addScaledVector(x,l.dampingFactor):l.target.add(x),n.setFromSpherical(p),n.applyQuaternion(a),t.copy(l.target).add(n),l.object.lookAt(l.target),!0===l.enableDamping?(f.theta*=1-l.dampingFactor,f.phi*=1-l.dampingFactor,x.multiplyScalar(1-l.dampingFactor)):(f.set(0,0,0),x.set(0,0,0)),v=1,!!(g||o.distanceToSquared(l.object.position)>d||8*(1-s.dot(l.object.quaternion))>d)&&(l.dispatchEvent(c),o.copy(l.object.position),s.copy(l.object.quaternion),g=!1,!0)}),this.dispose=function(){l.domElement.removeEventListener("contextmenu",tt,!1),l.domElement.removeEventListener("mousedown",W,!1),l.domElement.removeEventListener("wheel",Z,!1),l.domElement.removeEventListener("touchstart",Q,!1),l.domElement.removeEventListener("touchend",$,!1),l.domElement.removeEventListener("touchmove",K,!1),document.removeEventListener("mousemove",X,!1),document.removeEventListener("mouseup",Y,!1),l.domElement.removeEventListener("keydown",J,!1)};var l=this,c={type:"change"},h={type:"start"},u={type:"end"},q={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},m=q.NONE,d=1e-6,p=new i.Spherical,f=new i.Spherical,v=1,x=new i.Vector3,g=!1,y=new i.Vector2,_=new i.Vector2,b=new i.Vector2,w=new i.Vector2,M=new i.Vector2,S=new i.Vector2,T=new i.Vector2,E=new i.Vector2,A=new i.Vector2;function z(){return Math.pow(.95,l.zoomSpeed)}function L(t){f.theta-=t}function P(t){f.phi-=t}var R,C=(R=new i.Vector3,function(t,e){R.setFromMatrixColumn(e,0),R.multiplyScalar(-t),x.add(R)}),O=function(){var t=new i.Vector3;return function(e,n){!0===l.screenSpacePanning?t.setFromMatrixColumn(n,1):(t.setFromMatrixColumn(n,0),t.crossVectors(l.object.up,t)),t.multiplyScalar(e),x.add(t)}}(),I=function(){var t=new i.Vector3;return function(e,n){var i=l.domElement;if(l.object.isPerspectiveCamera){var r=l.object.position;t.copy(r).sub(l.target);var a=t.length();a*=Math.tan(l.object.fov/2*Math.PI/180),C(2*e*a/i.clientHeight,l.object.matrix),O(2*n*a/i.clientHeight,l.object.matrix)}else l.object.isOrthographicCamera?(C(e*(l.object.right-l.object.left)/l.object.zoom/i.clientWidth,l.object.matrix),O(n*(l.object.top-l.object.bottom)/l.object.zoom/i.clientHeight,l.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),l.enablePan=!1)}}();function D(t){l.object.isPerspectiveCamera?v/=t:l.object.isOrthographicCamera?(l.object.zoom=Math.max(l.minZoom,Math.min(l.maxZoom,l.object.zoom*t)),l.object.updateProjectionMatrix(),g=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),l.enableZoom=!1)}function N(t){l.object.isPerspectiveCamera?v*=t:l.object.isOrthographicCamera?(l.object.zoom=Math.max(l.minZoom,Math.min(l.maxZoom,l.object.zoom/t)),l.object.updateProjectionMatrix(),g=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),l.enableZoom=!1)}function B(t){y.set(t.clientX,t.clientY)}function U(t){w.set(t.clientX,t.clientY)}function F(t){if(1==t.touches.length)y.set(t.touches[0].pageX,t.touches[0].pageY);else{var e=.5*(t.touches[0].pageX+t.touches[1].pageX),n=.5*(t.touches[0].pageY+t.touches[1].pageY);y.set(e,n)}}function H(t){if(1==t.touches.length)w.set(t.touches[0].pageX,t.touches[0].pageY);else{var e=.5*(t.touches[0].pageX+t.touches[1].pageX),n=.5*(t.touches[0].pageY+t.touches[1].pageY);w.set(e,n)}}function G(t){var e=t.touches[0].pageX-t.touches[1].pageX,n=t.touches[0].pageY-t.touches[1].pageY,i=Math.sqrt(e*e+n*n);T.set(0,i)}function V(t){if(1==t.touches.length)_.set(t.touches[0].pageX,t.touches[0].pageY);else{var e=.5*(t.touches[0].pageX+t.touches[1].pageX),n=.5*(t.touches[0].pageY+t.touches[1].pageY);_.set(e,n)}b.subVectors(_,y).multiplyScalar(l.rotateSpeed);var i=l.domElement;L(2*Math.PI*b.x/i.clientHeight),P(2*Math.PI*b.y/i.clientHeight),y.copy(_)}function j(t){if(1==t.touches.length)M.set(t.touches[0].pageX,t.touches[0].pageY);else{var e=.5*(t.touches[0].pageX+t.touches[1].pageX),n=.5*(t.touches[0].pageY+t.touches[1].pageY);M.set(e,n)}S.subVectors(M,w).multiplyScalar(l.panSpeed),I(S.x,S.y),w.copy(M)}function k(t){var e=t.touches[0].pageX-t.touches[1].pageX,n=t.touches[0].pageY-t.touches[1].pageY,i=Math.sqrt(e*e+n*n);E.set(0,i),A.set(0,Math.pow(E.y/T.y,l.zoomSpeed)),D(A.y),T.copy(E)}function W(t){if(!1!==l.enabled){switch(t.preventDefault(),l.domElement.focus?l.domElement.focus():window.focus(),t.button){case 0:switch(l.mouseButtons.LEFT){case i.MOUSE.ROTATE:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===l.enablePan)return;U(t),m=q.PAN}else{if(!1===l.enableRotate)return;B(t),m=q.ROTATE}break;case i.MOUSE.PAN:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===l.enableRotate)return;B(t),m=q.ROTATE}else{if(!1===l.enablePan)return;U(t),m=q.PAN}break;default:m=q.NONE}break;case 1:switch(l.mouseButtons.MIDDLE){case i.MOUSE.DOLLY:if(!1===l.enableZoom)return;!function(t){T.set(t.clientX,t.clientY)}(t),m=q.DOLLY;break;default:m=q.NONE}break;case 2:switch(l.mouseButtons.RIGHT){case i.MOUSE.ROTATE:if(!1===l.enableRotate)return;B(t),m=q.ROTATE;break;case i.MOUSE.PAN:if(!1===l.enablePan)return;U(t),m=q.PAN;break;default:m=q.NONE}}m!==q.NONE&&(document.addEventListener("mousemove",X,!1),document.addEventListener("mouseup",Y,!1),l.dispatchEvent(h))}}function X(t){if(!1!==l.enabled)switch(t.preventDefault(),m){case q.ROTATE:if(!1===l.enableRotate)return;!function(t){_.set(t.clientX,t.clientY),b.subVectors(_,y).multiplyScalar(l.rotateSpeed);var e=l.domElement;L(2*Math.PI*b.x/e.clientHeight),P(2*Math.PI*b.y/e.clientHeight),y.copy(_),l.update()}(t);break;case q.DOLLY:if(!1===l.enableZoom)return;!function(t){E.set(t.clientX,t.clientY),A.subVectors(E,T),A.y>0?D(z()):A.y<0&&N(z()),T.copy(E),l.update()}(t);break;case q.PAN:if(!1===l.enablePan)return;!function(t){M.set(t.clientX,t.clientY),S.subVectors(M,w).multiplyScalar(l.panSpeed),I(S.x,S.y),w.copy(M),l.update()}(t)}}function Y(t){!1!==l.enabled&&(document.removeEventListener("mousemove",X,!1),document.removeEventListener("mouseup",Y,!1),l.dispatchEvent(u),m=q.NONE)}function Z(t){!1===l.enabled||!1===l.enableZoom||m!==q.NONE&&m!==q.ROTATE||(t.preventDefault(),t.stopPropagation(),l.dispatchEvent(h),function(t){t.deltaY<0?N(z()):t.deltaY>0&&D(z()),l.update()}(t),l.dispatchEvent(u))}function J(t){!1!==l.enabled&&!1!==l.enableKeys&&!1!==l.enablePan&&function(t){var e=!1;switch(t.keyCode){case l.keys.UP:I(0,l.keyPanSpeed),e=!0;break;case l.keys.BOTTOM:I(0,-l.keyPanSpeed),e=!0;break;case l.keys.LEFT:I(l.keyPanSpeed,0),e=!0;break;case l.keys.RIGHT:I(-l.keyPanSpeed,0),e=!0}e&&(t.preventDefault(),l.update())}(t)}function Q(t){if(!1!==l.enabled){switch(t.preventDefault(),t.touches.length){case 1:switch(l.touches.ONE){case i.TOUCH.ROTATE:if(!1===l.enableRotate)return;F(t),m=q.TOUCH_ROTATE;break;case i.TOUCH.PAN:if(!1===l.enablePan)return;H(t),m=q.TOUCH_PAN;break;default:m=q.NONE}break;case 2:switch(l.touches.TWO){case i.TOUCH.DOLLY_PAN:if(!1===l.enableZoom&&!1===l.enablePan)return;!function(t){l.enableZoom&&G(t),l.enablePan&&H(t)}(t),m=q.TOUCH_DOLLY_PAN;break;case i.TOUCH.DOLLY_ROTATE:if(!1===l.enableZoom&&!1===l.enableRotate)return;!function(t){l.enableZoom&&G(t),l.enableRotate&&F(t)}(t),m=q.TOUCH_DOLLY_ROTATE;break;default:m=q.NONE}break;default:m=q.NONE}m!==q.NONE&&l.dispatchEvent(h)}}function K(t){if(!1!==l.enabled)switch(t.preventDefault(),t.stopPropagation(),m){case q.TOUCH_ROTATE:if(!1===l.enableRotate)return;V(t),l.update();break;case q.TOUCH_PAN:if(!1===l.enablePan)return;j(t),l.update();break;case q.TOUCH_DOLLY_PAN:if(!1===l.enableZoom&&!1===l.enablePan)return;!function(t){l.enableZoom&&k(t),l.enablePan&&j(t)}(t),l.update();break;case q.TOUCH_DOLLY_ROTATE:if(!1===l.enableZoom&&!1===l.enableRotate)return;!function(t){l.enableZoom&&k(t),l.enableRotate&&V(t)}(t),l.update();break;default:m=q.NONE}}function $(t){!1!==l.enabled&&(l.dispatchEvent(u),m=q.NONE)}function tt(t){!1!==l.enabled&&t.preventDefault()}l.domElement.addEventListener("contextmenu",tt,!1),l.domElement.addEventListener("mousedown",W,!1),l.domElement.addEventListener("wheel",Z,!1),l.domElement.addEventListener("touchstart",Q,!1),l.domElement.addEventListener("touchend",$,!1),l.domElement.addEventListener("touchmove",K,!1),l.domElement.addEventListener("keydown",J,!1),-1===l.domElement.tabIndex&&(l.domElement.tabIndex=0),this.update()};r.prototype=Object.create(i.EventDispatcher.prototype),r.prototype.constructor=r;var a=function(t,e){r.call(this,t,e),this.mouseButtons.LEFT=i.MOUSE.PAN,this.mouseButtons.RIGHT=i.MOUSE.ROTATE,this.touches.ONE=i.TOUCH.PAN,this.touches.TWO=i.TOUCH.DOLLY_ROTATE};a.prototype=Object.create(i.EventDispatcher.prototype),a.prototype.constructor=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),r=n(1),a=function(t,e,n){this.tileW=t,this.tileH=e,this.level=n};e.Tile=a;var o=function(){function t(t,e,n,r,a){this.scene=t,this.modelMgr=e,this.camera=n,this.camControl=r,this.scoreMgr=a,this.tileSize=10,this.pickPlates=[],this.floorPlates=[],this.mapWidth=-1,this.mapHeight=-1,this.prevPickPlate=null,this.matSelect=new i.MeshPhongMaterial({color:16776960}),this.matNormal=new i.MeshPhongMaterial({color:13421772});var o=new i.BoxBufferGeometry(this.tileSize,1,this.tileSize,1,1,1),s=new i.MeshBasicMaterial;this.plateBase=new i.Mesh(o,s)}return t.prototype.dispose=function(){for(var t=0;t<this.pickPlates.length;t++)this.pickPlates[t]=null;this.pickPlates=[];for(var e=0;e<this.mapWidth;e++)for(var n=0;n<this.mapHeight;n++){var i=this.map[e][n];if(i.object)if(this.scene.remove(i.object),i.object.geometry.dispose(),i.object.material instanceof Array)for(var r=0;r<i.object.material.length;r++)i.object.material[r].dispose();else i.object.material.dispose()}for(t=0;t<this.floorPlates.length;t++){var a=this.floorPlates[t];if(this.scene.remove(a),a.geometry.dispose(),a.material instanceof Array)for(r=0;r<a.material.length;r++)a.material[r].dispose();else a.material.dispose()}this.curtain&&(this.scene.remove(this.curtain),this.curtain.geometry.dispose(),this.curtain.material.dispose(),this.curtain=null)},t.prototype.createMap=function(t,e){this.dispose(),this.mapWidth=t,this.mapHeight=e,this.map=[];for(var n=0;n<t;n++){this.map[n]=[];for(var r=0;r<e;r++){this.map[n][r]=new a(n,r,0),(l=this.modelMgr.getModelByLevelNumber(0)).position.x=n*this.tileSize,l.position.z=r*this.tileSize,this.scene.add(l),this.floorPlates.push(l);var o=this.plateBase.clone();o.name=n+"_"+r+"/plate",o.position.copy(l.position),o.updateMatrixWorld(!0),o.userData.linkedTile=this.map[n][r],this.pickPlates.push(o)}}for(n=0;n<t;n++)for(r=0;r<e;r++)var s=this.map[n][r],l=this.modelMgr.getModelByLevelNumber(s.level);var c=new i.Box3;c.makeEmpty();for(var h=0;h<this.pickPlates.length;h++)c.expandByObject(this.pickPlates[h]);var u=new i.Sphere;c.getBoundingSphere(u),this.scoreMgr.sphere=u.clone(),this.camControl.target=u.center,this.camControl.object.position.set(u.center.x,u.center.y+u.radius,u.center.z+u.radius),this.camControl.object.lookAt(u.center),this.camControl.update(),this.camControl.minDistance=u.radius,this.camControl.maxDistance=2*u.radius;var q=new i.Vector3,m=new i.Vector3;c.getSize(q),c.getCenter(m);var d=new i.BoxBufferGeometry(q.x,50,q.z),p=new i.MeshPhongMaterial({color:13421772});this.curtain=new i.Mesh(d,p),this.curtain.position.x=m.x,this.curtain.position.y=-.25*q.y-25,this.curtain.position.z=m.z,this.scene.add(this.curtain)},t.prototype.checkTriple=function(t){var e=this;if(0!==t.level){var n=[t],i=t.tileH>0?this.map[t.tileW][t.tileH-1]:null;i&&i.level===t.level&&-1===n.indexOf(i)&&n.push(i);var a=t.tileH<this.mapHeight-1?this.map[t.tileW][t.tileH+1]:null;a&&a.level===t.level&&-1===n.indexOf(a)&&n.push(a);var o=t.tileW>0?this.map[t.tileW-1][t.tileH]:null;o&&o.level===t.level&&-1===n.indexOf(o)&&n.push(o);var s=t.tileW<this.mapWidth-1?this.map[t.tileW+1][t.tileH]:null;s&&s.level===t.level&&-1===n.indexOf(s)&&n.push(s);var l=t.tileW>0&&t.tileH>0?this.map[t.tileW-1][t.tileH-1]:null;l&&l.level===t.level&&(l.level!==i.level&&l.level!==o.level||-1===n.indexOf(l)&&n.push(l));var c=t.tileW<this.mapWidth-1&&t.tileH>0?this.map[t.tileW+1][t.tileH-1]:null;c&&c.level===t.level&&(c.level!==i.level&&c.level!==s.level||-1===n.indexOf(c)&&n.push(c));var h=t.tileW>0&&t.tileH<this.mapHeight-1?this.map[t.tileW-1][t.tileH+1]:null;h&&h.level===t.level&&(h.level!==o.level&&h.level!==a.level||-1===n.indexOf(h)&&n.push(h));var u=t.tileW<this.mapWidth-1&&t.tileH<this.mapHeight-1?this.map[t.tileW+1][t.tileH+1]:null;u&&u.level===t.level&&(u.level!==s.level&&u.level!==a.level||-1===n.indexOf(u)&&n.push(u));var q=t.tileH-1>0?this.map[t.tileW][t.tileH-2]:null;q&&q.level===t.level&&q.level===i.level&&-1===n.indexOf(q)&&n.push(q);var m=t.tileH+1<this.mapHeight-1?this.map[t.tileW][t.tileH+2]:null;m&&m.level===t.level&&m.level===a.level&&-1===n.indexOf(m)&&n.push(m);var d=t.tileW-1>0?this.map[t.tileW-2][t.tileH]:null;d&&d.level===t.level&&d.level===o.level&&-1===n.indexOf(d)&&n.push(d);var p=t.tileW+1<this.mapWidth-1?this.map[t.tileW+2][t.tileH]:null;if(p&&p.level===t.level&&p.level===s.level&&-1===n.indexOf(p)&&n.push(p),n.length>=3){var f=t.level;f++;var v=this.modelMgr.getModelByLevelNumber(0),x=this.modelMgr.getModelByLevelNumber(f);if(x)for(var g=function(i){if(n[i].tileW===t.tileW&&n[i].tileH===t.tileH)x.position.copy(n[i].object.position),y.deleteTileObject(n[i].object,t,(function(){x.position.y=-30,e.scene.add(x),new r.default.Tween(x.position).to({y:0},250).easing(r.default.Easing.Quadratic.Out).onComplete((function(){n[i].object=x,n[i].level=f,e.checkTriple(n[i])})).start()}));else{var a=v;a.position.copy(n[i].object.position),y.scene.add(a),y.deleteTileObject(n[i].object,t),n[i].object=a,n[i].level=0}},y=this,_=0;_<n.length;_++)g(_);else{for(_=0;_<n.length;_++){var b=v;b.position.copy(n[_].object.position),this.scene.add(b),this.deleteTileObject(n[_].object,t),n[_].object=b,n[_].level=0}console.warn("최대레벨 타일 매치됨.")}}}},t.prototype.deleteTileObject=function(t,e,n){var i=this;if(this.scoreMgr.addScore(e.level),t.material instanceof Array)for(var a=0;a<t.material.length;a++){t.material[a].transparent=!0}else t.material.transparent=!0;new r.default.Tween({opacity:1}).to({opacity:0},250).easing(r.default.Easing.Quadratic.Out).onUpdate((function(e){if(t.material instanceof Array)for(var n=0;n<t.material.length;n++){t.material[n].opacity=e.opacity}else t.material.opacity=e.opacity})).onComplete((function(e){if(i.scene.remove(t),t.material instanceof Array)for(var r=0;r<t.material.length;r++){t.material[r].dispose()}else t.material.dispose();n&&n()})).start()},t}();e.Board=o},function(t,e){var n,i,r=t.exports={};function a(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(t){n=a}try{i="function"==typeof clearTimeout?clearTimeout:o}catch(t){i=o}}();var l,c=[],h=!1,u=-1;function q(){h&&l&&(h=!1,l.length?c=l.concat(c):u=-1,c.length&&m())}function m(){if(!h){var t=s(q);h=!0;for(var e=c.length;e;){for(l=c,c=[];++u<e;)l&&l[u].run();u=-1,e=c.length}l=null,h=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===o||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function p(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||h||s(m)},d.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=p,r.addListener=p,r.once=p,r.off=p,r.removeListener=p,r.removeAllListeners=p,r.emit=p,r.prependListener=p,r.prependOnceListener=p,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),r=n(10),a=n(11),o=function(){function t(t,e){this.scene=t,this.models={};var n=this;(new r.MTLLoader).load("models/buildingtiles.mtl",(function(t){t.preload(),(new a.OBJLoader).setMaterials(t).load("models/buildingtiles.obj",(function(t){t.traverse((function(t){t instanceof i.Mesh&&(t.castShadow=!0,t.receiveShadow=!0)}));for(var r=0;r<t.children.length;r++){var a=t.children[r],o=a.name.toLowerCase();n.models[o]=a}e&&e()}))}))}return t.prototype.getModelByLevelNumber=function(t){var e="level"+t;if(this.models.hasOwnProperty(e)){if(this.models[e].material instanceof Array){for(var n=this.models[e].material,r=[],a=0;a<n.length;a++){(o=new i.MeshPhongMaterial).copy(n[a]),r.push(o)}return(s=new i.Mesh(this.models[e].geometry,r)).castShadow=!0,s.receiveShadow=!0,s}var o,s;return(o=new i.MeshPhongMaterial).copy(this.models[e].material),(s=new i.Mesh(this.models[e].geometry,o)).castShadow=!0,s.receiveShadow=!0,s}return null},t}();e.ModelManager=o},function(t,e,n){"use strict";n.r(e),n.d(e,"MTLLoader",(function(){return r}));var i=n(0),r=function(t){i.Loader.call(this,t)};r.prototype=Object.assign(Object.create(i.Loader.prototype),{constructor:r,load:function(t,e,n,r){var a=this,o=""===this.path?i.LoaderUtils.extractUrlBase(t):this.path,s=new i.FileLoader(this.manager);s.setPath(this.path),s.load(t,(function(t){e(a.parse(t,o))}),n,r)},setMaterialOptions:function(t){return this.materialOptions=t,this},parse:function(t,e){for(var n=t.split("\n"),i={},a=/\s+/,o={},s=0;s<n.length;s++){var l=n[s];if(0!==(l=l.trim()).length&&"#"!==l.charAt(0)){var c=l.indexOf(" "),h=c>=0?l.substring(0,c):l;h=h.toLowerCase();var u=c>=0?l.substring(c+1):"";if(u=u.trim(),"newmtl"===h)i={name:u},o[u]=i;else if("ka"===h||"kd"===h||"ks"===h||"ke"===h){var q=u.split(a,3);i[h]=[parseFloat(q[0]),parseFloat(q[1]),parseFloat(q[2])]}else i[h]=u}}var m=new r.MaterialCreator(this.resourcePath||e,this.materialOptions);return m.setCrossOrigin(this.crossOrigin),m.setManager(this.manager),m.setMaterials(o),m}}),r.MaterialCreator=function(t,e){this.baseUrl=t||"",this.options=e,this.materialsInfo={},this.materials={},this.materialsArray=[],this.nameLookup={},this.side=this.options&&this.options.side?this.options.side:i.FrontSide,this.wrap=this.options&&this.options.wrap?this.options.wrap:i.RepeatWrapping},r.MaterialCreator.prototype={constructor:r.MaterialCreator,crossOrigin:"anonymous",setCrossOrigin:function(t){return this.crossOrigin=t,this},setManager:function(t){this.manager=t},setMaterials:function(t){this.materialsInfo=this.convert(t),this.materials={},this.materialsArray=[],this.nameLookup={}},convert:function(t){if(!this.options)return t;var e={};for(var n in t){var i=t[n],r={};for(var a in e[n]=r,i){var o=!0,s=i[a],l=a.toLowerCase();switch(l){case"kd":case"ka":case"ks":this.options&&this.options.normalizeRGB&&(s=[s[0]/255,s[1]/255,s[2]/255]),this.options&&this.options.ignoreZeroRGBs&&0===s[0]&&0===s[1]&&0===s[2]&&(o=!1)}o&&(r[l]=s)}}return e},preload:function(){for(var t in this.materialsInfo)this.create(t)},getIndex:function(t){return this.nameLookup[t]},getAsArray:function(){var t=0;for(var e in this.materialsInfo)this.materialsArray[t]=this.create(e),this.nameLookup[e]=t,t++;return this.materialsArray},create:function(t){return void 0===this.materials[t]&&this.createMaterial_(t),this.materials[t]},createMaterial_:function(t){var e=this,n=this.materialsInfo[t],r={name:t,side:this.side};function a(t,n){if(!r[t]){var i,a,o=e.getTextureParams(n,r),s=e.loadTexture((i=e.baseUrl,"string"!=typeof(a=o.url)||""===a?"":/^https?:\/\//i.test(a)?a:i+a));s.repeat.copy(o.scale),s.offset.copy(o.offset),s.wrapS=e.wrap,s.wrapT=e.wrap,r[t]=s}}for(var o in n){var s,l=n[o];if(""!==l)switch(o.toLowerCase()){case"kd":r.color=(new i.Color).fromArray(l);break;case"ks":r.specular=(new i.Color).fromArray(l);break;case"ke":r.emissive=(new i.Color).fromArray(l);break;case"map_kd":a("map",l);break;case"map_ks":a("specularMap",l);break;case"map_ke":a("emissiveMap",l);break;case"norm":a("normalMap",l);break;case"map_bump":case"bump":a("bumpMap",l);break;case"map_d":a("alphaMap",l),r.transparent=!0;break;case"ns":r.shininess=parseFloat(l);break;case"d":(s=parseFloat(l))<1&&(r.opacity=s,r.transparent=!0);break;case"tr":s=parseFloat(l),this.options&&this.options.invertTrProperty&&(s=1-s),s>0&&(r.opacity=1-s,r.transparent=!0)}}return this.materials[t]=new i.MeshPhongMaterial(r),this.materials[t]},getTextureParams:function(t,e){var n,r={scale:new i.Vector2(1,1),offset:new i.Vector2(0,0)},a=t.split(/\s+/);return(n=a.indexOf("-bm"))>=0&&(e.bumpScale=parseFloat(a[n+1]),a.splice(n,2)),(n=a.indexOf("-s"))>=0&&(r.scale.set(parseFloat(a[n+1]),parseFloat(a[n+2])),a.splice(n,4)),(n=a.indexOf("-o"))>=0&&(r.offset.set(parseFloat(a[n+1]),parseFloat(a[n+2])),a.splice(n,4)),r.url=a.join(" ").trim(),r},loadTexture:function(t,e,n,r,a){var o,s=void 0!==this.manager?this.manager:i.DefaultLoadingManager,l=s.getHandler(t);return null===l&&(l=new i.TextureLoader(s)),l.setCrossOrigin&&l.setCrossOrigin(this.crossOrigin),o=l.load(t,n,r,a),void 0!==e&&(o.mapping=e),o}}},function(t,e,n){"use strict";n.r(e),n.d(e,"OBJLoader",(function(){return r}));var i=n(0),r=function(){var t=/^[og]\s*(.+)?/,e=/^mtllib /,n=/^usemtl /;function r(){var t={objects:[],object:{},vertices:[],normals:[],colors:[],uvs:[],materialLibraries:[],startObject:function(t,e){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=t,void(this.object.fromDeclaration=!1!==e);var n=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:t||"",fromDeclaration:!1!==e,geometry:{vertices:[],normals:[],colors:[],uvs:[]},materials:[],smooth:!0,startMaterial:function(t,e){var n=this._finalize(!1);n&&(n.inherited||n.groupCount<=0)&&this.materials.splice(n.index,1);var i={index:this.materials.length,name:t||"",mtllib:Array.isArray(e)&&e.length>0?e[e.length-1]:"",smooth:void 0!==n?n.smooth:this.smooth,groupStart:void 0!==n?n.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(t){var e={index:"number"==typeof t?t:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return e.clone=this.clone.bind(e),e}};return this.materials.push(i),i},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(t){var e=this.currentMaterial();if(e&&-1===e.groupEnd&&(e.groupEnd=this.geometry.vertices.length/3,e.groupCount=e.groupEnd-e.groupStart,e.inherited=!1),t&&this.materials.length>1)for(var n=this.materials.length-1;n>=0;n--)this.materials[n].groupCount<=0&&this.materials.splice(n,1);return t&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),e}},n&&n.name&&"function"==typeof n.clone){var i=n.clone(0);i.inherited=!0,this.object.materials.push(i)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(t,e){var n=parseInt(t,10);return 3*(n>=0?n-1:n+e/3)},parseNormalIndex:function(t,e){var n=parseInt(t,10);return 3*(n>=0?n-1:n+e/3)},parseUVIndex:function(t,e){var n=parseInt(t,10);return 2*(n>=0?n-1:n+e/2)},addVertex:function(t,e,n){var i=this.vertices,r=this.object.geometry.vertices;r.push(i[t+0],i[t+1],i[t+2]),r.push(i[e+0],i[e+1],i[e+2]),r.push(i[n+0],i[n+1],i[n+2])},addVertexPoint:function(t){var e=this.vertices;this.object.geometry.vertices.push(e[t+0],e[t+1],e[t+2])},addVertexLine:function(t){var e=this.vertices;this.object.geometry.vertices.push(e[t+0],e[t+1],e[t+2])},addNormal:function(t,e,n){var i=this.normals,r=this.object.geometry.normals;r.push(i[t+0],i[t+1],i[t+2]),r.push(i[e+0],i[e+1],i[e+2]),r.push(i[n+0],i[n+1],i[n+2])},addColor:function(t,e,n){var i=this.colors,r=this.object.geometry.colors;r.push(i[t+0],i[t+1],i[t+2]),r.push(i[e+0],i[e+1],i[e+2]),r.push(i[n+0],i[n+1],i[n+2])},addUV:function(t,e,n){var i=this.uvs,r=this.object.geometry.uvs;r.push(i[t+0],i[t+1]),r.push(i[e+0],i[e+1]),r.push(i[n+0],i[n+1])},addUVLine:function(t){var e=this.uvs;this.object.geometry.uvs.push(e[t+0],e[t+1])},addFace:function(t,e,n,i,r,a,o,s,l){var c=this.vertices.length,h=this.parseVertexIndex(t,c),u=this.parseVertexIndex(e,c),q=this.parseVertexIndex(n,c);if(this.addVertex(h,u,q),this.colors.length>0&&this.addColor(h,u,q),void 0!==i&&""!==i){var m=this.uvs.length;h=this.parseUVIndex(i,m),u=this.parseUVIndex(r,m),q=this.parseUVIndex(a,m),this.addUV(h,u,q)}if(void 0!==o&&""!==o){var d=this.normals.length;h=this.parseNormalIndex(o,d),u=o===s?h:this.parseNormalIndex(s,d),q=o===l?h:this.parseNormalIndex(l,d),this.addNormal(h,u,q)}},addPointGeometry:function(t){this.object.geometry.type="Points";for(var e=this.vertices.length,n=0,i=t.length;n<i;n++)this.addVertexPoint(this.parseVertexIndex(t[n],e))},addLineGeometry:function(t,e){this.object.geometry.type="Line";for(var n=this.vertices.length,i=this.uvs.length,r=0,a=t.length;r<a;r++)this.addVertexLine(this.parseVertexIndex(t[r],n));var o=0;for(a=e.length;o<a;o++)this.addUVLine(this.parseUVIndex(e[o],i))}};return t.startObject("",!1),t}function a(t){i.Loader.call(this,t),this.materials=null}return a.prototype=Object.assign(Object.create(i.Loader.prototype),{constructor:a,load:function(t,e,n,r){var a=this,o=new i.FileLoader(a.manager);o.setPath(this.path),o.load(t,(function(t){e(a.parse(t))}),n,r)},setMaterials:function(t){return this.materials=t,this},parse:function(a){console.time("OBJLoader");var o=new r;-1!==a.indexOf("\r\n")&&(a=a.replace(/\r\n/g,"\n")),-1!==a.indexOf("\\\n")&&(a=a.replace(/\\\n/g,""));for(var s=a.split("\n"),l="",c="",h=[],u="function"==typeof"".trimLeft,q=0,m=s.length;q<m;q++)if(l=s[q],0!==(l=u?l.trimLeft():l.trim()).length&&"#"!==(c=l.charAt(0)))if("v"===c){var d=l.split(/\s+/);switch(d[0]){case"v":o.vertices.push(parseFloat(d[1]),parseFloat(d[2]),parseFloat(d[3])),d.length>=7&&o.colors.push(parseFloat(d[4]),parseFloat(d[5]),parseFloat(d[6]));break;case"vn":o.normals.push(parseFloat(d[1]),parseFloat(d[2]),parseFloat(d[3]));break;case"vt":o.uvs.push(parseFloat(d[1]),parseFloat(d[2]))}}else if("f"===c){for(var p=l.substr(1).trim().split(/\s+/),f=[],v=0,x=p.length;v<x;v++){var g=p[v];if(g.length>0){var y=g.split("/");f.push(y)}}var _=f[0];for(v=1,x=f.length-1;v<x;v++){var b=f[v],w=f[v+1];o.addFace(_[0],b[0],w[0],_[1],b[1],w[1],_[2],b[2],w[2])}}else if("l"===c){var M=l.substring(1).trim().split(" "),S=[],T=[];if(-1===l.indexOf("/"))S=M;else for(var E=0,A=M.length;E<A;E++){var z=M[E].split("/");""!==z[0]&&S.push(z[0]),""!==z[1]&&T.push(z[1])}o.addLineGeometry(S,T)}else if("p"===c){var L=l.substr(1).trim().split(" ");o.addPointGeometry(L)}else if(null!==(h=t.exec(l))){var P=(" "+h[0].substr(1).trim()).substr(1);o.startObject(P)}else if(n.test(l))o.object.startMaterial(l.substring(7).trim(),o.materialLibraries);else if(e.test(l))o.materialLibraries.push(l.substring(7).trim());else{if("s"!==c){if("\0"===l)continue;throw new Error('THREE.OBJLoader: Unexpected line: "'+l+'"')}if((h=l.split(" ")).length>1){var R=h[1].trim().toLowerCase();o.object.smooth="0"!==R&&"off"!==R}else o.object.smooth=!0;(W=o.object.currentMaterial())&&(W.smooth=o.object.smooth)}o.finalize();var C=new i.Group;C.materialLibraries=[].concat(o.materialLibraries);for(q=0,m=o.objects.length;q<m;q++){var O=o.objects[q],I=O.geometry,D=O.materials,N="Line"===I.type,B="Points"===I.type,U=!1;if(0!==I.vertices.length){var F=new i.BufferGeometry;F.setAttribute("position",new i.Float32BufferAttribute(I.vertices,3)),I.normals.length>0?F.setAttribute("normal",new i.Float32BufferAttribute(I.normals,3)):F.computeVertexNormals(),I.colors.length>0&&(U=!0,F.setAttribute("color",new i.Float32BufferAttribute(I.colors,3))),I.uvs.length>0&&F.setAttribute("uv",new i.Float32BufferAttribute(I.uvs,2));for(var H,G=[],V=0,j=D.length;V<j;V++){var k=D[V],W=void 0;if(null!==this.materials)if(W=this.materials.create(k.name),!N||!W||W instanceof i.LineBasicMaterial){if(B&&W&&!(W instanceof i.PointsMaterial)){var X=new i.PointsMaterial({size:10,sizeAttenuation:!1});i.Material.prototype.copy.call(X,W),X.color.copy(W.color),X.map=W.map,W=X}}else{var Y=new i.LineBasicMaterial;i.Material.prototype.copy.call(Y,W),Y.color.copy(W.color),W=Y}W||((W=N?new i.LineBasicMaterial:B?new i.PointsMaterial({size:1,sizeAttenuation:!1}):new i.MeshPhongMaterial).name=k.name),W.flatShading=!k.smooth,W.vertexColors=U?i.VertexColors:i.NoColors,G.push(W)}if(G.length>1){for(V=0,j=D.length;V<j;V++){k=D[V];F.addGroup(k.groupStart,k.groupCount,V)}H=N?new i.LineSegments(F,G):B?new i.Points(F,G):new i.Mesh(F,G)}else H=N?new i.LineSegments(F,G[0]):B?new i.Points(F,G[0]):new i.Mesh(F,G[0]);H.name=O.name,C.add(H)}}return console.timeEnd("OBJLoader"),C}}),a}()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),r=n(1),a=function(){function t(t,e,n,r,a){this.scene=t,this.camera=e,this.board=n,this.modelMgr=r,this.scoreMgr=a,this.rayCast=new i.Raycaster,this.mousePos=new i.Vector2,this.mouseDownPos=new i.Vector2,window.addEventListener("pointerdown",this.onPointerDown.bind(this),!1),window.addEventListener("pointermove",this.onPointerMove.bind(this),!1),window.addEventListener("pointerup",this.onPointerUp.bind(this),!1)}return t.prototype.onPointerDown=function(t){0===t.button&&(this.mouseDownPos.x=t.screenX,this.mouseDownPos.y=t.screenY)},t.prototype.onPointerMove=function(t){this.mousePos.x=t.clientX/window.innerWidth*2-1,this.mousePos.y=-t.clientY/window.innerHeight*2+1,this.rayCast.setFromCamera(this.mousePos,this.camera);var e=this.rayCast.intersectObjects(this.board.pickPlates);if(e&&e.length>0){var n=e[0].object,i=n.userData.linkedTile;0===i.level?this.cursor&&(this.cursor.position.copy(n.position),this.cursor.userData.pickedTile=i,this.scene.add(this.cursor)):this.cursor&&(this.cursor.userData.pickedTile=null,this.cursor.position.copy(n.position),this.scene.add(this.cursor),this.scene.remove(this.cursor))}else this.cursor&&(this.cursor.userData.pickedTile=null,this.scene.remove(this.cursor))},t.prototype.onPointerUp=function(t){var e=this;if(0===t.button&&(new i.Vector2(t.screenX,t.screenY).distanceTo(this.mouseDownPos)<5&&this.cursor&&this.cursor.userData.pickedTile&&0===this.cursor.userData.pickedTile.level)){var n=this.cursor.userData.pickedTile;n.level=this.cursor.userData.level;var a=this.cursor.userData.sourceObject;a.position.copy(this.cursor.position),this.scene.add(a),this.disposeCursor(),this.scene.remove(n.object),n.object=a,n.object.position.y=-30,new r.default.Tween(n.object.position).to({y:0},500).easing(r.default.Easing.Quadratic.Out).onComplete((function(){e.board.checkTriple(n),e.createCursor(),e.onPointerMove(t)})).start()}},t.prototype.createCursor=function(t){var e=this;t||(t=this.getRandomTileNumber([40,30,20,10])+1);var n=this.modelMgr.getModelByLevelNumber(t);n&&(this.disposeCursor(),this.cursor=new i.Object3D,this.cursor.name="Cursor",n.traverse((function(t){if(t instanceof i.Mesh){var n=null;if(t.material instanceof Array){n=[];for(var r=0;r<t.material.length;r++){var a=t.material[r].clone();a.transparent=!0,a.opacity=.5,n.push(a)}}else(n=t.material.clone()).transparent=!0,n.opacity=.5;var o=new i.Mesh(t.geometry,n);e.cursor.add(o)}})),this.scene.add(this.cursor),this.cursor.userData.sourceObject=n,this.cursor.userData.level=t)},t.prototype.getRandomTileNumber=function(t){for(var e=0,n=0;n<t.length;n++)e+=t[n];var i=this.getRandomRange(0,1)*e;for(n=0;n<t.length;n++){if(i<t[n])return n;i-=t[n]}return t.length-1},t.prototype.getRandomRange=function(t,e){return Math.random()*(e-t)+t},t.prototype.disposeCursor=function(){this.cursor&&(this.scene.remove(this.cursor),this.cursor.traverse((function(t){if(t instanceof i.Mesh)if(t.geometry.dispose(),t.material instanceof Array)for(var e=0;e<t.material.length;e++)t.material[e].dispose();else t.material.dispose()})))},t}();e.GameLogic=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),r=n(0),a=function(){function t(t,e,n){var a=this;this.scene=t,this.camera=e,this.control=n,this.score=0,this.scoreTable=[],this.scoreTable.push(5),this.scoreTable.push(10),this.scoreTable.push(20),this.scoreTable.push(35),this.scoreTable.push(55),this.scoreTable.push(80),this.scoreTable.push(110),this.scoreTable.push(145),this.scoreTable.push(200);var o=new r.FontLoader;this.fontData=o.parse(i);this.geometries={},["Score:","0","1","2","3","4","5","6","7","8","9"].forEach((function(t){var e=new r.TextBufferGeometry(t,{font:a.fontData,size:10,height:5});e.computeBoundingBox();var n=new r.Vector3;e.boundingBox.getSize(n),e.translate(-.5*n.x,-.5*n.y,-.5*n.z),a.geometries[t]=e}));var s=new r.MeshPhongMaterial({color:255}),l=new r.Mesh(this.geometries["Score:"],s);this.scene.add(l),this.test=l}return t.prototype.reset=function(){this.score=0},t.prototype.addScore=function(t){1<=t&&t<=9&&(this.score+=this.scoreTable[t-1]),console.log(this.score)},t.prototype.update=function(t){if(this.sphere){var e=new r.Vector3;this.camera.getWorldDirection(e);var n=this.control.target.clone();n.addScaledVector(e,this.sphere.radius);var i=(new r.Plane).setFromNormalAndCoplanarPoint(new r.Vector3(0,1,0),this.sphere.center),a=new r.Vector3;i.projectPoint(n,a);var o=(new r.Vector3).subVectors(a,this.control.target);o.normalize();var s=this.control.target.clone();s.addScaledVector(o,this.sphere.radius+10),this.test.position.copy(s),this.test.lookAt(this.control.target)}},t}();e.ScoreManager=a}]);