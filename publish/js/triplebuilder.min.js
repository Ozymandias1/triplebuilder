var TripleBuilder=function(e){var t={};function n(i){if(t[i])return t[i].exports;var l=t[i]={i:i,l:!1,exports:{}};return e[i].call(l.exports,l,l.exports,n),l.l=!0,l.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)n.d(i,l,function(t){return e[t]}.bind(null,l));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){"use strict";n.r(t),n.d(t,"ACESFilmicToneMapping",(function(){return qe})),n.d(t,"AddEquation",(function(){return L})),n.d(t,"AddOperation",(function(){return ne})),n.d(t,"AdditiveBlending",(function(){return S})),n.d(t,"AlphaFormat",(function(){return He})),n.d(t,"AlwaysDepth",(function(){return X})),n.d(t,"AlwaysStencilFunc",(function(){return an})),n.d(t,"AmbientLight",(function(){return Ym})),n.d(t,"AmbientLightProbe",(function(){return xh})),n.d(t,"AnimationClip",(function(){return tm})),n.d(t,"AnimationLoader",(function(){return sm})),n.d(t,"AnimationMixer",(function(){return Xh})),n.d(t,"AnimationObjectGroup",(function(){return kh})),n.d(t,"AnimationUtils",(function(){return Hs})),n.d(t,"ArcCurve",(function(){return xm})),n.d(t,"ArrayCamera",(function(){return uo})),n.d(t,"ArrowHelper",(function(){return Xc})),n.d(t,"Audio",(function(){return Th})),n.d(t,"AudioAnalyser",(function(){return Ch})),n.d(t,"AudioContext",(function(){return ch})),n.d(t,"AudioListener",(function(){return Sh})),n.d(t,"AudioLoader",(function(){return uh})),n.d(t,"AxesHelper",(function(){return Yc})),n.d(t,"AxisHelper",(function(){return _u})),n.d(t,"BackSide",(function(){return x})),n.d(t,"BasicDepthPacking",(function(){return Ut})),n.d(t,"BasicShadowMap",(function(){return c})),n.d(t,"BinaryTextureLoader",(function(){return zu})),n.d(t,"Bone",(function(){return Yo})),n.d(t,"BooleanKeyframeTrack",(function(){return Ys})),n.d(t,"BoundingBoxHelper",(function(){return yu})),n.d(t,"Box2",(function(){return nc})),n.d(t,"Box3",(function(){return gi})),n.d(t,"Box3Helper",(function(){return Hc})),n.d(t,"BoxBufferGeometry",(function(){return Zl})),n.d(t,"BoxGeometry",(function(){return Yl})),n.d(t,"BoxHelper",(function(){return Gc})),n.d(t,"BufferAttribute",(function(){return il})),n.d(t,"BufferGeometry",(function(){return bl})),n.d(t,"BufferGeometryLoader",(function(){return eh})),n.d(t,"ByteType",(function(){return Pe})),n.d(t,"Cache",(function(){return im})),n.d(t,"Camera",(function(){return nr})),n.d(t,"CameraHelper",(function(){return Bc})),n.d(t,"CanvasRenderer",(function(){return Tu})),n.d(t,"CanvasTexture",(function(){return fq})),n.d(t,"CatmullRomCurve3",(function(){return wm})),n.d(t,"CineonToneMapping",(function(){return oe})),n.d(t,"CircleBufferGeometry",(function(){return As})),n.d(t,"CircleGeometry",(function(){return Es})),n.d(t,"ClampToEdgeWrapping",(function(){return ve})),n.d(t,"Clock",(function(){return yh})),n.d(t,"ClosedSplineCurve3",(function(){return xu})),n.d(t,"Color",(function(){return Zi})),n.d(t,"ColorKeyframeTrack",(function(){return Zs})),n.d(t,"CompressedTexture",(function(){return pq})),n.d(t,"CompressedTextureLoader",(function(){return mm})),n.d(t,"ConeBufferGeometry",(function(){return Ts})),n.d(t,"ConeGeometry",(function(){return Ss})),n.d(t,"CubeCamera",(function(){return ar})),n.d(t,"CubeGeometry",(function(){return Yl})),n.d(t,"CubeReflectionMapping",(function(){return me})),n.d(t,"CubeRefractionMapping",(function(){return he})),n.d(t,"CubeTexture",(function(){return Lr})),n.d(t,"CubeTextureLoader",(function(){return um})),n.d(t,"CubeUVReflectionMapping",(function(){return pe})),n.d(t,"CubeUVRefractionMapping",(function(){return fe})),n.d(t,"CubicBezierCurve",(function(){return Tm})),n.d(t,"CubicBezierCurve3",(function(){return Em})),n.d(t,"CubicInterpolant",(function(){return js})),n.d(t,"CullFaceBack",(function(){return o})),n.d(t,"CullFaceFront",(function(){return q})),n.d(t,"CullFaceFrontBack",(function(){return s})),n.d(t,"CullFaceNone",(function(){return a})),n.d(t,"Curve",(function(){return pm})),n.d(t,"CurvePath",(function(){return Im})),n.d(t,"CustomBlending",(function(){return A})),n.d(t,"CylinderBufferGeometry",(function(){return zs})),n.d(t,"CylinderGeometry",(function(){return Ms})),n.d(t,"Cylindrical",(function(){return ec})),n.d(t,"DataTexture",(function(){return qr})),n.d(t,"DataTexture2DArray",(function(){return Pr})),n.d(t,"DataTexture3D",(function(){return Rr})),n.d(t,"DataTextureLoader",(function(){return hm})),n.d(t,"DecrementStencilOp",(function(){return Yt})),n.d(t,"DecrementWrapStencilOp",(function(){return Jt})),n.d(t,"DefaultLoadingManager",(function(){return rm})),n.d(t,"DepthFormat",(function(){return Ye})),n.d(t,"DepthStencilFormat",(function(){return Ze})),n.d(t,"DepthTexture",(function(){return xq})),n.d(t,"DirectionalLight",(function(){return Xm})),n.d(t,"DirectionalLightHelper",(function(){return Ic})),n.d(t,"DirectionalLightShadow",(function(){return Wm})),n.d(t,"DiscreteInterpolant",(function(){return Ws})),n.d(t,"DodecahedronBufferGeometry",(function(){return Lq})),n.d(t,"DodecahedronGeometry",(function(){return Aq})),n.d(t,"DoubleSide",(function(){return v})),n.d(t,"DstAlphaFactor",(function(){return G})),n.d(t,"DstColorFactor",(function(){return V})),n.d(t,"DynamicBufferAttribute",(function(){return ou})),n.d(t,"DynamicCopyUsage",(function(){return dn})),n.d(t,"DynamicDrawUsage",(function(){return qn})),n.d(t,"DynamicReadUsage",(function(){return hn})),n.d(t,"EdgesGeometry",(function(){return ws})),n.d(t,"EdgesHelper",(function(){return bu})),n.d(t,"EllipseCurve",(function(){return fm})),n.d(t,"EqualDepth",(function(){return J})),n.d(t,"EqualStencilFunc",(function(){return en})),n.d(t,"EquirectangularReflectionMapping",(function(){return ce})),n.d(t,"EquirectangularRefractionMapping",(function(){return ue})),n.d(t,"Euler",(function(){return jn})),n.d(t,"EventDispatcher",(function(){return fn})),n.d(t,"ExtrudeBufferGeometry",(function(){return ss})),n.d(t,"ExtrudeGeometry",(function(){return qs})),n.d(t,"Face3",(function(){return $i})),n.d(t,"Face4",(function(){return Zc})),n.d(t,"FaceColors",(function(){return b})),n.d(t,"FaceNormalsHelper",(function(){return Pc})),n.d(t,"FileLoader",(function(){return qm})),n.d(t,"FlatShading",(function(){return g})),n.d(t,"Float32Attribute",(function(){return pu})),n.d(t,"Float32BufferAttribute",(function(){return hl})),n.d(t,"Float64Attribute",(function(){return fu})),n.d(t,"Float64BufferAttribute",(function(){return cl})),n.d(t,"FloatType",(function(){return De})),n.d(t,"Fog",(function(){return wo})),n.d(t,"FogExp2",(function(){return bo})),n.d(t,"Font",(function(){return sh})),n.d(t,"FontLoader",(function(){return hh})),n.d(t,"FrontFaceDirectionCCW",(function(){return h})),n.d(t,"FrontFaceDirectionCW",(function(){return m})),n.d(t,"FrontSide",(function(){return f})),n.d(t,"Frustum",(function(){return hr})),n.d(t,"GammaEncoding",(function(){return Ot})),n.d(t,"Geometry",(function(){return Xl})),n.d(t,"GeometryUtils",(function(){return Su})),n.d(t,"GreaterDepth",(function(){return K})),n.d(t,"GreaterEqualDepth",(function(){return Q})),n.d(t,"GreaterEqualStencilFunc",(function(){return rn})),n.d(t,"GreaterStencilFunc",(function(){return nn})),n.d(t,"GridHelper",(function(){return zc})),n.d(t,"Group",(function(){return co})),n.d(t,"HalfFloatType",(function(){return Ne})),n.d(t,"HemisphereLight",(function(){return Fm})),n.d(t,"HemisphereLightHelper",(function(){return wc})),n.d(t,"HemisphereLightProbe",(function(){return fh})),n.d(t,"IcosahedronBufferGeometry",(function(){return Eq})),n.d(t,"IcosahedronGeometry",(function(){return Tq})),n.d(t,"ImageBitmapLoader",(function(){return oh})),n.d(t,"ImageLoader",(function(){return cm})),n.d(t,"ImageUtils",(function(){return En})),n.d(t,"ImmediateRenderObject",(function(){return ac})),n.d(t,"IncrementStencilOp",(function(){return Xt})),n.d(t,"IncrementWrapStencilOp",(function(){return Zt})),n.d(t,"InstancedBufferAttribute",(function(){return $m})),n.d(t,"InstancedBufferGeometry",(function(){return Km})),n.d(t,"InstancedInterleavedBuffer",(function(){return Zh})),n.d(t,"InstancedMesh",(function(){return Zo})),n.d(t,"Int16Attribute",(function(){return hu})),n.d(t,"Int16BufferAttribute",(function(){return ol})),n.d(t,"Int32Attribute",(function(){return uu})),n.d(t,"Int32BufferAttribute",(function(){return sl})),n.d(t,"Int8Attribute",(function(){return qu})),n.d(t,"Int8BufferAttribute",(function(){return ll})),n.d(t,"IntType",(function(){return Oe})),n.d(t,"InterleavedBuffer",(function(){return Mo})),n.d(t,"InterleavedBufferAttribute",(function(){return zo})),n.d(t,"Interpolant",(function(){return Vs})),n.d(t,"InterpolateDiscrete",(function(){return wt})),n.d(t,"InterpolateLinear",(function(){return Mt})),n.d(t,"InterpolateSmooth",(function(){return zt})),n.d(t,"InvertStencilOp",(function(){return Qt})),n.d(t,"JSONLoader",(function(){return Eu})),n.d(t,"KeepStencilOp",(function(){return kt})),n.d(t,"KeyframeTrack",(function(){return Xs})),n.d(t,"LOD",(function(){return Vo})),n.d(t,"LatheBufferGeometry",(function(){return gs})),n.d(t,"LatheGeometry",(function(){return vs})),n.d(t,"Layers",(function(){return kn})),n.d(t,"LensFlare",(function(){return Lu})),n.d(t,"LessDepth",(function(){return Y})),n.d(t,"LessEqualDepth",(function(){return Z})),n.d(t,"LessEqualStencilFunc",(function(){return tn})),n.d(t,"LessStencilFunc",(function(){return $t})),n.d(t,"Light",(function(){return Bm})),n.d(t,"LightProbe",(function(){return ph})),n.d(t,"LightProbeHelper",(function(){return Mc})),n.d(t,"LightShadow",(function(){return Um})),n.d(t,"Line",(function(){return nq})),n.d(t,"Line3",(function(){return rc})),n.d(t,"LineBasicMaterial",(function(){return Jo})),n.d(t,"LineCurve",(function(){return Am})),n.d(t,"LineCurve3",(function(){return Lm})),n.d(t,"LineDashedMaterial",(function(){return Us})),n.d(t,"LineLoop",(function(){return aq})),n.d(t,"LinePieces",(function(){return Qc})),n.d(t,"LineSegments",(function(){return rq})),n.d(t,"LineStrip",(function(){return Jc})),n.d(t,"LinearEncoding",(function(){return Rt})),n.d(t,"LinearFilter",(function(){return ze})),n.d(t,"LinearInterpolant",(function(){return ks})),n.d(t,"LinearMipMapLinearFilter",(function(){return Ae})),n.d(t,"LinearMipMapNearestFilter",(function(){return Te})),n.d(t,"LinearMipmapLinearFilter",(function(){return Ee})),n.d(t,"LinearMipmapNearestFilter",(function(){return Se})),n.d(t,"LinearToneMapping",(function(){return le})),n.d(t,"Loader",(function(){return am})),n.d(t,"LoaderUtils",(function(){return Qm})),n.d(t,"LoadingManager",(function(){return lm})),n.d(t,"LogLuvEncoding",(function(){return Dt})),n.d(t,"LoopOnce",(function(){return _t})),n.d(t,"LoopPingPong",(function(){return bt})),n.d(t,"LoopRepeat",(function(){return yt})),n.d(t,"LuminanceAlphaFormat",(function(){return We})),n.d(t,"LuminanceFormat",(function(){return ke})),n.d(t,"MOUSE",(function(){return l})),n.d(t,"Material",(function(){return tl})),n.d(t,"MaterialLoader",(function(){return Jm})),n.d(t,"Math",(function(){return gn})),n.d(t,"Matrix3",(function(){return Tn})),n.d(t,"Matrix4",(function(){return Gn})),n.d(t,"MaxEquation",(function(){return O})),n.d(t,"Mesh",(function(){return Ul})),n.d(t,"MeshBasicMaterial",(function(){return nl})),n.d(t,"MeshDepthMaterial",(function(){return no})),n.d(t,"MeshDistanceMaterial",(function(){return io})),n.d(t,"MeshFaceMaterial",(function(){return Kc})),n.d(t,"MeshLambertMaterial",(function(){return Bs})),n.d(t,"MeshMatcapMaterial",(function(){return Fs})),n.d(t,"MeshNormalMaterial",(function(){return Ns})),n.d(t,"MeshPhongMaterial",(function(){return Is})),n.d(t,"MeshPhysicalMaterial",(function(){return Os})),n.d(t,"MeshStandardMaterial",(function(){return Cs})),n.d(t,"MeshToonMaterial",(function(){return Ds})),n.d(t,"MinEquation",(function(){return C})),n.d(t,"MirroredRepeatWrapping",(function(){return ge})),n.d(t,"MixOperation",(function(){return te})),n.d(t,"MultiMaterial",(function(){return $c})),n.d(t,"MultiplyBlending",(function(){return E})),n.d(t,"MultiplyOperation",(function(){return ee})),n.d(t,"NearestFilter",(function(){return _e})),n.d(t,"NearestMipMapLinearFilter",(function(){return Me})),n.d(t,"NearestMipMapNearestFilter",(function(){return be})),n.d(t,"NearestMipmapLinearFilter",(function(){return we})),n.d(t,"NearestMipmapNearestFilter",(function(){return ye})),n.d(t,"NeverDepth",(function(){return W})),n.d(t,"NeverStencilFunc",(function(){return Kt})),n.d(t,"NoBlending",(function(){return M})),n.d(t,"NoColors",(function(){return y})),n.d(t,"NoToneMapping",(function(){return ie})),n.d(t,"NormalBlending",(function(){return z})),n.d(t,"NotEqualDepth",(function(){return $})),n.d(t,"NotEqualStencilFunc",(function(){return ln})),n.d(t,"NumberKeyframeTrack",(function(){return Js})),n.d(t,"Object3D",(function(){return ri})),n.d(t,"ObjectLoader",(function(){return nh})),n.d(t,"ObjectSpaceNormalMap",(function(){return Vt})),n.d(t,"OctahedronBufferGeometry",(function(){return Sq})),n.d(t,"OctahedronGeometry",(function(){return zq})),n.d(t,"OneFactor",(function(){return D})),n.d(t,"OneMinusDstAlphaFactor",(function(){return H})),n.d(t,"OneMinusDstColorFactor",(function(){return j})),n.d(t,"OneMinusSrcAlphaFactor",(function(){return U})),n.d(t,"OneMinusSrcColorFactor",(function(){return B})),n.d(t,"OrthographicCamera",(function(){return km})),n.d(t,"PCFShadowMap",(function(){return u})),n.d(t,"PCFSoftShadowMap",(function(){return d})),n.d(t,"ParametricBufferGeometry",(function(){return _q})),n.d(t,"ParametricGeometry",(function(){return gq})),n.d(t,"Particle",(function(){return tu})),n.d(t,"ParticleBasicMaterial",(function(){return lu})),n.d(t,"ParticleSystem",(function(){return nu})),n.d(t,"ParticleSystemMaterial",(function(){return ru})),n.d(t,"Path",(function(){return Dm})),n.d(t,"PerspectiveCamera",(function(){return ir})),n.d(t,"Plane",(function(){return Oi})),n.d(t,"PlaneBufferGeometry",(function(){return vr})),n.d(t,"PlaneGeometry",(function(){return xr})),n.d(t,"PlaneHelper",(function(){return Vc})),n.d(t,"PointCloud",(function(){return eu})),n.d(t,"PointCloudMaterial",(function(){return iu})),n.d(t,"PointLight",(function(){return jm})),n.d(t,"PointLightHelper",(function(){return vc})),n.d(t,"Points",(function(){return cq})),n.d(t,"PointsMaterial",(function(){return oq})),n.d(t,"PolarGridHelper",(function(){return Sc})),n.d(t,"PolyhedronBufferGeometry",(function(){return bq})),n.d(t,"PolyhedronGeometry",(function(){return yq})),n.d(t,"PositionalAudio",(function(){return Rh})),n.d(t,"PositionalAudioHelper",(function(){return Tc})),n.d(t,"PropertyBinding",(function(){return jh})),n.d(t,"PropertyMixer",(function(){return Oh})),n.d(t,"QuadraticBezierCurve",(function(){return Pm})),n.d(t,"QuadraticBezierCurve3",(function(){return Rm})),n.d(t,"Quaternion",(function(){return yn})),n.d(t,"QuaternionKeyframeTrack",(function(){return Ks})),n.d(t,"QuaternionLinearInterpolant",(function(){return Qs})),n.d(t,"REVISION",(function(){return i})),n.d(t,"RGBADepthPacking",(function(){return Gt})),n.d(t,"RGBAFormat",(function(){return je})),n.d(t,"RGBA_ASTC_10x10_Format",(function(){return xt})),n.d(t,"RGBA_ASTC_10x5_Format",(function(){return dt})),n.d(t,"RGBA_ASTC_10x6_Format",(function(){return pt})),n.d(t,"RGBA_ASTC_10x8_Format",(function(){return ft})),n.d(t,"RGBA_ASTC_12x10_Format",(function(){return vt})),n.d(t,"RGBA_ASTC_12x12_Format",(function(){return gt})),n.d(t,"RGBA_ASTC_4x4_Format",(function(){return at})),n.d(t,"RGBA_ASTC_5x4_Format",(function(){return ot})),n.d(t,"RGBA_ASTC_5x5_Format",(function(){return qt})),n.d(t,"RGBA_ASTC_6x5_Format",(function(){return st})),n.d(t,"RGBA_ASTC_6x6_Format",(function(){return mt})),n.d(t,"RGBA_ASTC_8x5_Format",(function(){return ht})),n.d(t,"RGBA_ASTC_8x6_Format",(function(){return ct})),n.d(t,"RGBA_ASTC_8x8_Format",(function(){return ut})),n.d(t,"RGBA_PVRTC_2BPPV1_Format",(function(){return lt})),n.d(t,"RGBA_PVRTC_4BPPV1_Format",(function(){return it})),n.d(t,"RGBA_S3TC_DXT1_Format",(function(){return Ke})),n.d(t,"RGBA_S3TC_DXT3_Format",(function(){return $e})),n.d(t,"RGBA_S3TC_DXT5_Format",(function(){return et})),n.d(t,"RGBDEncoding",(function(){return Ft})),n.d(t,"RGBEEncoding",(function(){return It})),n.d(t,"RGBEFormat",(function(){return Xe})),n.d(t,"RGBFormat",(function(){return Ve})),n.d(t,"RGBM16Encoding",(function(){return Bt})),n.d(t,"RGBM7Encoding",(function(){return Nt})),n.d(t,"RGB_ETC1_Format",(function(){return rt})),n.d(t,"RGB_PVRTC_2BPPV1_Format",(function(){return nt})),n.d(t,"RGB_PVRTC_4BPPV1_Format",(function(){return tt})),n.d(t,"RGB_S3TC_DXT1_Format",(function(){return Qe})),n.d(t,"RawShaderMaterial",(function(){return Rs})),n.d(t,"Ray",(function(){return Li})),n.d(t,"Raycaster",(function(){return Jh})),n.d(t,"RectAreaLight",(function(){return Zm})),n.d(t,"RectAreaLightHelper",(function(){return gc})),n.d(t,"RedFormat",(function(){return Je})),n.d(t,"ReinhardToneMapping",(function(){return re})),n.d(t,"RepeatWrapping",(function(){return xe})),n.d(t,"ReplaceStencilOp",(function(){return Wt})),n.d(t,"ReverseSubtractEquation",(function(){return R})),n.d(t,"RingBufferGeometry",(function(){return xs})),n.d(t,"RingGeometry",(function(){return fs})),n.d(t,"Scene",(function(){return ai})),n.d(t,"SceneUtils",(function(){return Au})),n.d(t,"ShaderChunk",(function(){return cr})),n.d(t,"ShaderLib",(function(){return dr})),n.d(t,"ShaderMaterial",(function(){return tr})),n.d(t,"ShadowMaterial",(function(){return Ps})),n.d(t,"Shape",(function(){return Nm})),n.d(t,"ShapeBufferGeometry",(function(){return ys})),n.d(t,"ShapeGeometry",(function(){return _s})),n.d(t,"ShapePath",(function(){return qh})),n.d(t,"ShapeUtils",(function(){return rs})),n.d(t,"ShortType",(function(){return Re})),n.d(t,"Skeleton",(function(){return Xo})),n.d(t,"SkeletonHelper",(function(){return xc})),n.d(t,"SkinnedMesh",(function(){return jo})),n.d(t,"SmoothShading",(function(){return _})),n.d(t,"Sphere",(function(){return bi})),n.d(t,"SphereBufferGeometry",(function(){return ps})),n.d(t,"SphereGeometry",(function(){return ds})),n.d(t,"Spherical",(function(){return $h})),n.d(t,"SphericalHarmonics3",(function(){return dh})),n.d(t,"SphericalReflectionMapping",(function(){return de})),n.d(t,"Spline",(function(){return gu})),n.d(t,"SplineCurve",(function(){return Cm})),n.d(t,"SplineCurve3",(function(){return vu})),n.d(t,"SpotLight",(function(){return Hm})),n.d(t,"SpotLightHelper",(function(){return uc})),n.d(t,"SpotLightShadow",(function(){return Gm})),n.d(t,"Sprite",(function(){return Fo})),n.d(t,"SpriteMaterial",(function(){return So})),n.d(t,"SrcAlphaFactor",(function(){return F})),n.d(t,"SrcAlphaSaturateFactor",(function(){return k})),n.d(t,"SrcColorFactor",(function(){return N})),n.d(t,"StaticCopyUsage",(function(){return un})),n.d(t,"StaticDrawUsage",(function(){return on})),n.d(t,"StaticReadUsage",(function(){return mn})),n.d(t,"StereoCamera",(function(){return _h})),n.d(t,"StreamCopyUsage",(function(){return pn})),n.d(t,"StreamDrawUsage",(function(){return sn})),n.d(t,"StreamReadUsage",(function(){return cn})),n.d(t,"StringKeyframeTrack",(function(){return $s})),n.d(t,"SubtractEquation",(function(){return P})),n.d(t,"SubtractiveBlending",(function(){return T})),n.d(t,"TOUCH",(function(){return r})),n.d(t,"TangentSpaceNormalMap",(function(){return Ht})),n.d(t,"TetrahedronBufferGeometry",(function(){return Mq})),n.d(t,"TetrahedronGeometry",(function(){return wq})),n.d(t,"TextBufferGeometry",(function(){return us})),n.d(t,"TextGeometry",(function(){return cs})),n.d(t,"Texture",(function(){return Ln})),n.d(t,"TextureLoader",(function(){return dm})),n.d(t,"TorusBufferGeometry",(function(){return Dq})),n.d(t,"TorusGeometry",(function(){return Iq})),n.d(t,"TorusKnotBufferGeometry",(function(){return Oq})),n.d(t,"TorusKnotGeometry",(function(){return Cq})),n.d(t,"Triangle",(function(){return ki})),n.d(t,"TriangleFanDrawMode",(function(){return Pt})),n.d(t,"TriangleStripDrawMode",(function(){return Lt})),n.d(t,"TrianglesDrawMode",(function(){return At})),n.d(t,"TubeBufferGeometry",(function(){return Rq})),n.d(t,"TubeGeometry",(function(){return Pq})),n.d(t,"UVMapping",(function(){return se})),n.d(t,"Uint16Attribute",(function(){return cu})),n.d(t,"Uint16BufferAttribute",(function(){return ql})),n.d(t,"Uint32Attribute",(function(){return du})),n.d(t,"Uint32BufferAttribute",(function(){return ml})),n.d(t,"Uint8Attribute",(function(){return su})),n.d(t,"Uint8BufferAttribute",(function(){return rl})),n.d(t,"Uint8ClampedAttribute",(function(){return mu})),n.d(t,"Uint8ClampedBufferAttribute",(function(){return al})),n.d(t,"Uncharted2ToneMapping",(function(){return ae})),n.d(t,"Uniform",(function(){return Yh})),n.d(t,"UniformsLib",(function(){return ur})),n.d(t,"UniformsUtils",(function(){return Kl})),n.d(t,"UnsignedByteType",(function(){return Le})),n.d(t,"UnsignedInt248Type",(function(){return Ge})),n.d(t,"UnsignedIntType",(function(){return Ie})),n.d(t,"UnsignedShort4444Type",(function(){return Be})),n.d(t,"UnsignedShort5551Type",(function(){return Fe})),n.d(t,"UnsignedShort565Type",(function(){return Ue})),n.d(t,"UnsignedShortType",(function(){return Ce})),n.d(t,"VSMShadowMap",(function(){return p})),n.d(t,"Vector2",(function(){return _n})),n.d(t,"Vector3",(function(){return Mn})),n.d(t,"Vector4",(function(){return Pn})),n.d(t,"VectorKeyframeTrack",(function(){return em})),n.d(t,"Vertex",(function(){return au})),n.d(t,"VertexColors",(function(){return w})),n.d(t,"VertexNormalsHelper",(function(){return hc})),n.d(t,"VideoTexture",(function(){return dq})),n.d(t,"WebGLMultisampleRenderTarget",(function(){return Cn})),n.d(t,"WebGLRenderTarget",(function(){return Rn})),n.d(t,"WebGLRenderTargetCube",(function(){return or})),n.d(t,"WebGLRenderer",(function(){return yo})),n.d(t,"WebGLUtils",(function(){return so})),n.d(t,"WireframeGeometry",(function(){return vq})),n.d(t,"WireframeHelper",(function(){return wu})),n.d(t,"WrapAroundEnding",(function(){return Et})),n.d(t,"XHRLoader",(function(){return Mu})),n.d(t,"ZeroCurvatureEnding",(function(){return St})),n.d(t,"ZeroFactor",(function(){return I})),n.d(t,"ZeroSlopeEnding",(function(){return Tt})),n.d(t,"ZeroStencilOp",(function(){return jt})),n.d(t,"sRGBEncoding",(function(){return Ct})),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e}),void 0===Math.sign&&(Math.sign=function(e){return e<0?-1:e>0?1:+e}),"name"in Function.prototype==!1&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}}),void 0===Object.assign&&(Object.assign=function(e){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i)for(var l in i)Object.prototype.hasOwnProperty.call(i,l)&&(t[l]=i[l])}return t});var i="110",l={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},r={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},a=0,o=1,q=2,s=3,m=0,h=1,c=0,u=1,d=2,p=3,f=0,x=1,v=2,g=1,_=2,y=0,b=1,w=2,M=0,z=1,S=2,T=3,E=4,A=5,L=100,P=101,R=102,C=103,O=104,I=200,D=201,N=202,B=203,F=204,U=205,G=206,H=207,V=208,j=209,k=210,W=0,X=1,Y=2,Z=3,J=4,Q=5,K=6,$=7,ee=0,te=1,ne=2,ie=0,le=1,re=2,ae=3,oe=4,qe=5,se=300,me=301,he=302,ce=303,ue=304,de=305,pe=306,fe=307,xe=1e3,ve=1001,ge=1002,_e=1003,ye=1004,be=1004,we=1005,Me=1005,ze=1006,Se=1007,Te=1007,Ee=1008,Ae=1008,Le=1009,Pe=1010,Re=1011,Ce=1012,Oe=1013,Ie=1014,De=1015,Ne=1016,Be=1017,Fe=1018,Ue=1019,Ge=1020,He=1021,Ve=1022,je=1023,ke=1024,We=1025,Xe=je,Ye=1026,Ze=1027,Je=1028,Qe=33776,Ke=33777,$e=33778,et=33779,tt=35840,nt=35841,it=35842,lt=35843,rt=36196,at=37808,ot=37809,qt=37810,st=37811,mt=37812,ht=37813,ct=37814,ut=37815,dt=37816,pt=37817,ft=37818,xt=37819,vt=37820,gt=37821,_t=2200,yt=2201,bt=2202,wt=2300,Mt=2301,zt=2302,St=2400,Tt=2401,Et=2402,At=0,Lt=1,Pt=2,Rt=3e3,Ct=3001,Ot=3007,It=3002,Dt=3003,Nt=3004,Bt=3005,Ft=3006,Ut=3200,Gt=3201,Ht=0,Vt=1,jt=0,kt=7680,Wt=7681,Xt=7682,Yt=7683,Zt=34055,Jt=34056,Qt=5386,Kt=512,$t=513,en=514,tn=515,nn=516,ln=517,rn=518,an=519,on=35044,qn=35048,sn=35040,mn=35045,hn=35049,cn=35041,un=35046,dn=35050,pn=35042;function fn(){}Object.assign(fn.prototype,{addEventListener:function(e,t){void 0===this._listeners&&(this._listeners={});var n=this._listeners;void 0===n[e]&&(n[e]=[]),-1===n[e].indexOf(t)&&n[e].push(t)},hasEventListener:function(e,t){if(void 0===this._listeners)return!1;var n=this._listeners;return void 0!==n[e]&&-1!==n[e].indexOf(t)},removeEventListener:function(e,t){if(void 0!==this._listeners){var n=this._listeners[e];if(void 0!==n){var i=n.indexOf(t);-1!==i&&n.splice(i,1)}}},dispatchEvent:function(e){if(void 0!==this._listeners){var t=this._listeners[e.type];if(void 0!==t){e.target=this;for(var n=t.slice(0),i=0,l=n.length;i<l;i++)n[i].call(this,e)}}}});for(var xn=[],vn=0;vn<256;vn++)xn[vn]=(vn<16?"0":"")+vn.toString(16);var gn={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var e=4294967295*Math.random()|0,t=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(xn[255&e]+xn[e>>8&255]+xn[e>>16&255]+xn[e>>24&255]+"-"+xn[255&t]+xn[t>>8&255]+"-"+xn[t>>16&15|64]+xn[t>>24&255]+"-"+xn[63&n|128]+xn[n>>8&255]+"-"+xn[n>>16&255]+xn[n>>24&255]+xn[255&i]+xn[i>>8&255]+xn[i>>16&255]+xn[i>>24&255]).toUpperCase()},clamp:function(e,t,n){return Math.max(t,Math.min(n,e))},euclideanModulo:function(e,t){return(e%t+t)%t},mapLinear:function(e,t,n,i,l){return i+(e-t)*(l-i)/(n-t)},lerp:function(e,t,n){return(1-n)*e+n*t},smoothstep:function(e,t,n){return e<=t?0:e>=n?1:(e=(e-t)/(n-t))*e*(3-2*e)},smootherstep:function(e,t,n){return e<=t?0:e>=n?1:(e=(e-t)/(n-t))*e*e*(e*(6*e-15)+10)},randInt:function(e,t){return e+Math.floor(Math.random()*(t-e+1))},randFloat:function(e,t){return e+Math.random()*(t-e)},randFloatSpread:function(e){return e*(.5-Math.random())},degToRad:function(e){return e*gn.DEG2RAD},radToDeg:function(e){return e*gn.RAD2DEG},isPowerOfTwo:function(e){return 0==(e&e-1)&&0!==e},ceilPowerOfTwo:function(e){return Math.pow(2,Math.ceil(Math.log(e)/Math.LN2))},floorPowerOfTwo:function(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))}};function _n(e,t){this.x=e||0,this.y=t||0}function yn(e,t,n,i){this._x=e||0,this._y=t||0,this._z=n||0,this._w=void 0!==i?i:1}Object.defineProperties(_n.prototype,{width:{get:function(){return this.x},set:function(e){this.x=e}},height:{get:function(){return this.y},set:function(e){this.y=e}}}),Object.assign(_n.prototype,{isVector2:!0,set:function(e,t){return this.x=e,this.y=t,this},setScalar:function(e){return this.x=e,this.y=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(e){return this.x=e.x,this.y=e.y,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)},addScalar:function(e){return this.x+=e,this.y+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)},subScalar:function(e){return this.x-=e,this.y-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this},multiply:function(e){return this.x*=e.x,this.y*=e.y,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this},divide:function(e){return this.x/=e.x,this.y/=e.y,this},divideScalar:function(e){return this.multiplyScalar(1/e)},applyMatrix3:function(e){var t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this},clampScalar:function(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this},clampLength:function(e,t){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(e){return this.x*e.x+this.y*e.y},cross:function(e){return this.x*e.y-this.y*e.x},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var e=Math.atan2(this.y,this.x);return e<0&&(e+=2*Math.PI),e},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,n=this.y-e.y;return t*t+n*n},manhattanDistanceTo:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this},lerpVectors:function(e,t,n){return this.subVectors(t,e).multiplyScalar(n).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e},fromBufferAttribute:function(e,t,n){return void 0!==n&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this},rotateAround:function(e,t){var n=Math.cos(t),i=Math.sin(t),l=this.x-e.x,r=this.y-e.y;return this.x=l*n-r*i+e.x,this.y=l*i+r*n+e.y,this}}),Object.assign(yn,{slerp:function(e,t,n,i){return n.copy(e).slerp(t,i)},slerpFlat:function(e,t,n,i,l,r,a){var o=n[i+0],q=n[i+1],s=n[i+2],m=n[i+3],h=l[r+0],c=l[r+1],u=l[r+2],d=l[r+3];if(m!==d||o!==h||q!==c||s!==u){var p=1-a,f=o*h+q*c+s*u+m*d,x=f>=0?1:-1,v=1-f*f;if(v>Number.EPSILON){var g=Math.sqrt(v),_=Math.atan2(g,f*x);p=Math.sin(p*_)/g,a=Math.sin(a*_)/g}var y=a*x;if(o=o*p+h*y,q=q*p+c*y,s=s*p+u*y,m=m*p+d*y,p===1-a){var b=1/Math.sqrt(o*o+q*q+s*s+m*m);o*=b,q*=b,s*=b,m*=b}}e[t]=o,e[t+1]=q,e[t+2]=s,e[t+3]=m}}),Object.defineProperties(yn.prototype,{x:{get:function(){return this._x},set:function(e){this._x=e,this._onChangeCallback()}},y:{get:function(){return this._y},set:function(e){this._y=e,this._onChangeCallback()}},z:{get:function(){return this._z},set:function(e){this._z=e,this._onChangeCallback()}},w:{get:function(){return this._w},set:function(e){this._w=e,this._onChangeCallback()}}}),Object.assign(yn.prototype,{isQuaternion:!0,set:function(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this},setFromEuler:function(e,t){if(!e||!e.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var n=e._x,i=e._y,l=e._z,r=e.order,a=Math.cos,o=Math.sin,q=a(n/2),s=a(i/2),m=a(l/2),h=o(n/2),c=o(i/2),u=o(l/2);return"XYZ"===r?(this._x=h*s*m+q*c*u,this._y=q*c*m-h*s*u,this._z=q*s*u+h*c*m,this._w=q*s*m-h*c*u):"YXZ"===r?(this._x=h*s*m+q*c*u,this._y=q*c*m-h*s*u,this._z=q*s*u-h*c*m,this._w=q*s*m+h*c*u):"ZXY"===r?(this._x=h*s*m-q*c*u,this._y=q*c*m+h*s*u,this._z=q*s*u+h*c*m,this._w=q*s*m-h*c*u):"ZYX"===r?(this._x=h*s*m-q*c*u,this._y=q*c*m+h*s*u,this._z=q*s*u-h*c*m,this._w=q*s*m+h*c*u):"YZX"===r?(this._x=h*s*m+q*c*u,this._y=q*c*m+h*s*u,this._z=q*s*u-h*c*m,this._w=q*s*m-h*c*u):"XZY"===r&&(this._x=h*s*m-q*c*u,this._y=q*c*m-h*s*u,this._z=q*s*u+h*c*m,this._w=q*s*m+h*c*u),!1!==t&&this._onChangeCallback(),this},setFromAxisAngle:function(e,t){var n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this},setFromRotationMatrix:function(e){var t,n=e.elements,i=n[0],l=n[4],r=n[8],a=n[1],o=n[5],q=n[9],s=n[2],m=n[6],h=n[10],c=i+o+h;return c>0?(t=.5/Math.sqrt(c+1),this._w=.25/t,this._x=(m-q)*t,this._y=(r-s)*t,this._z=(a-l)*t):i>o&&i>h?(t=2*Math.sqrt(1+i-o-h),this._w=(m-q)/t,this._x=.25*t,this._y=(l+a)/t,this._z=(r+s)/t):o>h?(t=2*Math.sqrt(1+o-i-h),this._w=(r-s)/t,this._x=(l+a)/t,this._y=.25*t,this._z=(q+m)/t):(t=2*Math.sqrt(1+h-i-o),this._w=(a-l)/t,this._x=(r+s)/t,this._y=(q+m)/t,this._z=.25*t),this._onChangeCallback(),this},setFromUnitVectors:function(e,t){var n=e.dot(t)+1;return n<1e-6?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()},angleTo:function(e){return 2*Math.acos(Math.abs(gn.clamp(this.dot(e),-1,1)))},rotateTowards:function(e,t){var n=this.angleTo(e);if(0===n)return this;var i=Math.min(1,t/n);return this.slerp(e,i),this},inverse:function(){return this.conjugate()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this},dot:function(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)},premultiply:function(e){return this.multiplyQuaternions(e,this)},multiplyQuaternions:function(e,t){var n=e._x,i=e._y,l=e._z,r=e._w,a=t._x,o=t._y,q=t._z,s=t._w;return this._x=n*s+r*a+i*q-l*o,this._y=i*s+r*o+l*a-n*q,this._z=l*s+r*q+n*o-i*a,this._w=r*s-n*a-i*o-l*q,this._onChangeCallback(),this},slerp:function(e,t){if(0===t)return this;if(1===t)return this.copy(e);var n=this._x,i=this._y,l=this._z,r=this._w,a=r*e._w+n*e._x+i*e._y+l*e._z;if(a<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,a=-a):this.copy(e),a>=1)return this._w=r,this._x=n,this._y=i,this._z=l,this;var o=1-a*a;if(o<=Number.EPSILON){var q=1-t;return this._w=q*r+t*this._w,this._x=q*n+t*this._x,this._y=q*i+t*this._y,this._z=q*l+t*this._z,this.normalize(),this._onChangeCallback(),this}var s=Math.sqrt(o),m=Math.atan2(s,a),h=Math.sin((1-t)*m)/s,c=Math.sin(t*m)/s;return this._w=r*h+this._w*c,this._x=n*h+this._x*c,this._y=i*h+this._y*c,this._z=l*h+this._z*c,this._onChangeCallback(),this},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w},fromArray:function(e,t){return void 0===t&&(t=0),this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e},_onChange:function(e){return this._onChangeCallback=e,this},_onChangeCallback:function(){}});var bn=new Mn,wn=new yn;function Mn(e,t,n){this.x=e||0,this.y=t||0,this.z=n||0}Object.assign(Mn.prototype,{isVector3:!0,set:function(e,t,n){return this.x=e,this.y=t,this.z=n,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this},multiplyVectors:function(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this},applyEuler:function(e){return e&&e.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(wn.setFromEuler(e))},applyAxisAngle:function(e,t){return this.applyQuaternion(wn.setFromAxisAngle(e,t))},applyMatrix3:function(e){var t=this.x,n=this.y,i=this.z,l=e.elements;return this.x=l[0]*t+l[3]*n+l[6]*i,this.y=l[1]*t+l[4]*n+l[7]*i,this.z=l[2]*t+l[5]*n+l[8]*i,this},applyMatrix4:function(e){var t=this.x,n=this.y,i=this.z,l=e.elements,r=1/(l[3]*t+l[7]*n+l[11]*i+l[15]);return this.x=(l[0]*t+l[4]*n+l[8]*i+l[12])*r,this.y=(l[1]*t+l[5]*n+l[9]*i+l[13])*r,this.z=(l[2]*t+l[6]*n+l[10]*i+l[14])*r,this},applyQuaternion:function(e){var t=this.x,n=this.y,i=this.z,l=e.x,r=e.y,a=e.z,o=e.w,q=o*t+r*i-a*n,s=o*n+a*t-l*i,m=o*i+l*n-r*t,h=-l*t-r*n-a*i;return this.x=q*o+h*-l+s*-a-m*-r,this.y=s*o+h*-r+m*-l-q*-a,this.z=m*o+h*-a+q*-r-s*-l,this},project:function(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)},unproject:function(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)},transformDirection:function(e){var t=this.x,n=this.y,i=this.z,l=e.elements;return this.x=l[0]*t+l[4]*n+l[8]*i,this.y=l[1]*t+l[5]*n+l[9]*i,this.z=l[2]*t+l[6]*n+l[10]*i,this.normalize()},divide:function(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this},divideScalar:function(e){return this.multiplyScalar(1/e)},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this},clampScalar:function(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this},clampLength:function(e,t){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this},lerpVectors:function(e,t,n){return this.subVectors(t,e).multiplyScalar(n).add(e)},cross:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(e,t)):this.crossVectors(this,e)},crossVectors:function(e,t){var n=e.x,i=e.y,l=e.z,r=t.x,a=t.y,o=t.z;return this.x=i*o-l*a,this.y=l*r-n*o,this.z=n*a-i*r,this},projectOnVector:function(e){var t=e.dot(this)/e.lengthSq();return this.copy(e).multiplyScalar(t)},projectOnPlane:function(e){return bn.copy(this).projectOnVector(e),this.sub(bn)},reflect:function(e){return this.sub(bn.copy(e).multiplyScalar(2*this.dot(e)))},angleTo:function(e){var t=Math.sqrt(this.lengthSq()*e.lengthSq());0===t&&console.error("THREE.Vector3: angleTo() can't handle zero length vectors.");var n=this.dot(e)/t;return Math.acos(gn.clamp(n,-1,1))},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i},manhattanDistanceTo:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)},setFromSpherical:function(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)},setFromSphericalCoords:function(e,t,n){var i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this},setFromCylindrical:function(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)},setFromCylindricalCoords:function(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this},setFromMatrixPosition:function(e){var t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this},setFromMatrixScale:function(e){var t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this},setFromMatrixColumn:function(e,t){return this.fromArray(e.elements,4*t)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e},fromBufferAttribute:function(e,t,n){return void 0!==n&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}});var zn,Sn=new Mn;function Tn(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}Object.assign(Tn.prototype,{isMatrix3:!0,set:function(e,t,n,i,l,r,a,o,q){var s=this.elements;return s[0]=e,s[1]=i,s[2]=a,s[3]=t,s[4]=l,s[5]=o,s[6]=n,s[7]=r,s[8]=q,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(e){var t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this},setFromMatrix4:function(e){var t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this},applyToBufferAttribute:function(e){for(var t=0,n=e.count;t<n;t++)Sn.x=e.getX(t),Sn.y=e.getY(t),Sn.z=e.getZ(t),Sn.applyMatrix3(this),e.setXYZ(t,Sn.x,Sn.y,Sn.z);return e},multiply:function(e){return this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var n=e.elements,i=t.elements,l=this.elements,r=n[0],a=n[3],o=n[6],q=n[1],s=n[4],m=n[7],h=n[2],c=n[5],u=n[8],d=i[0],p=i[3],f=i[6],x=i[1],v=i[4],g=i[7],_=i[2],y=i[5],b=i[8];return l[0]=r*d+a*x+o*_,l[3]=r*p+a*v+o*y,l[6]=r*f+a*g+o*b,l[1]=q*d+s*x+m*_,l[4]=q*p+s*v+m*y,l[7]=q*f+s*g+m*b,l[2]=h*d+c*x+u*_,l[5]=h*p+c*v+u*y,l[8]=h*f+c*g+u*b,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this},determinant:function(){var e=this.elements,t=e[0],n=e[1],i=e[2],l=e[3],r=e[4],a=e[5],o=e[6],q=e[7],s=e[8];return t*r*s-t*a*q-n*l*s+n*a*o+i*l*q-i*r*o},getInverse:function(e,t){e&&e.isMatrix4&&console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");var n=e.elements,i=this.elements,l=n[0],r=n[1],a=n[2],o=n[3],q=n[4],s=n[5],m=n[6],h=n[7],c=n[8],u=c*q-s*h,d=s*m-c*o,p=h*o-q*m,f=l*u+r*d+a*p;if(0===f){var x="THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";if(!0===t)throw new Error(x);return console.warn(x),this.identity()}var v=1/f;return i[0]=u*v,i[1]=(a*h-c*r)*v,i[2]=(s*r-a*q)*v,i[3]=d*v,i[4]=(c*l-a*m)*v,i[5]=(a*o-s*l)*v,i[6]=p*v,i[7]=(r*m-h*l)*v,i[8]=(q*l-r*o)*v,this},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this},getNormalMatrix:function(e){return this.setFromMatrix4(e).getInverse(this).transpose()},transposeIntoArray:function(e){var t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this},setUvTransform:function(e,t,n,i,l,r,a){var o=Math.cos(l),q=Math.sin(l);this.set(n*o,n*q,-n*(o*r+q*a)+r+e,-i*q,i*o,-i*(-q*r+o*a)+a+t,0,0,1)},scale:function(e,t){var n=this.elements;return n[0]*=e,n[3]*=e,n[6]*=e,n[1]*=t,n[4]*=t,n[7]*=t,this},rotate:function(e){var t=Math.cos(e),n=Math.sin(e),i=this.elements,l=i[0],r=i[3],a=i[6],o=i[1],q=i[4],s=i[7];return i[0]=t*l+n*o,i[3]=t*r+n*q,i[6]=t*a+n*s,i[1]=-n*l+t*o,i[4]=-n*r+t*q,i[7]=-n*a+t*s,this},translate:function(e,t){var n=this.elements;return n[0]+=e*n[2],n[3]+=e*n[5],n[6]+=e*n[8],n[1]+=t*n[2],n[4]+=t*n[5],n[7]+=t*n[8],this},equals:function(e){for(var t=this.elements,n=e.elements,i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0},fromArray:function(e,t){void 0===t&&(t=0);for(var n=0;n<9;n++)this.elements[n]=e[n+t];return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}});var En={getDataURL:function(e){var t;if("undefined"==typeof HTMLCanvasElement)return e.src;if(e instanceof HTMLCanvasElement)t=e;else{void 0===zn&&(zn=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),zn.width=e.width,zn.height=e.height;var n=zn.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=zn}return t.width>2048||t.height>2048?t.toDataURL("image/jpeg",.6):t.toDataURL("image/png")}},An=0;function Ln(e,t,n,i,l,r,a,o,q,s){Object.defineProperty(this,"id",{value:An++}),this.uuid=gn.generateUUID(),this.name="",this.image=void 0!==e?e:Ln.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==t?t:Ln.DEFAULT_MAPPING,this.wrapS=void 0!==n?n:ve,this.wrapT=void 0!==i?i:ve,this.magFilter=void 0!==l?l:ze,this.minFilter=void 0!==r?r:Ee,this.anisotropy=void 0!==q?q:1,this.format=void 0!==a?a:je,this.type=void 0!==o?o:Le,this.offset=new _n(0,0),this.repeat=new _n(1,1),this.center=new _n(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Tn,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==s?s:Rt,this.version=0,this.onUpdate=null}function Pn(e,t,n,i){this.x=e||0,this.y=t||0,this.z=n||0,this.w=void 0!==i?i:1}function Rn(e,t,n){this.width=e,this.height=t,this.scissor=new Pn(0,0,e,t),this.scissorTest=!1,this.viewport=new Pn(0,0,e,t),n=n||{},this.texture=new Ln(void 0,void 0,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.image={},this.texture.image.width=e,this.texture.image.height=t,this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:ze,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0===n.stencilBuffer||n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null}function Cn(e,t,n){Rn.call(this,e,t,n),this.samples=4}Ln.DEFAULT_IMAGE=void 0,Ln.DEFAULT_MAPPING=se,Ln.prototype=Object.assign(Object.create(fn.prototype),{constructor:Ln,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.name=e.name,this.image=e.image,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this},toJSON:function(e){var t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.textures[this.uuid])return e.textures[this.uuid];var n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){var i=this.image;if(void 0===i.uuid&&(i.uuid=gn.generateUUID()),!t&&void 0===e.images[i.uuid]){var l;if(Array.isArray(i)){l=[];for(var r=0,a=i.length;r<a;r++)l.push(En.getDataURL(i[r]))}else l=En.getDataURL(i);e.images[i.uuid]={uuid:i.uuid,url:l}}n.image=i.uuid}return t||(e.textures[this.uuid]=n),n},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(e){if(this.mapping!==se)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case xe:e.x=e.x-Math.floor(e.x);break;case ve:e.x=e.x<0?0:1;break;case ge:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case xe:e.y=e.y-Math.floor(e.y);break;case ve:e.y=e.y<0?0:1;break;case ge:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}return this.flipY&&(e.y=1-e.y),e}}),Object.defineProperty(Ln.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.defineProperties(Pn.prototype,{width:{get:function(){return this.z},set:function(e){this.z=e}},height:{get:function(){return this.w},set:function(e){this.w=e}}}),Object.assign(Pn.prototype,{isVector4:!0,set:function(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this.w=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setW:function(e){return this.w=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this},applyMatrix4:function(e){var t=this.x,n=this.y,i=this.z,l=this.w,r=e.elements;return this.x=r[0]*t+r[4]*n+r[8]*i+r[12]*l,this.y=r[1]*t+r[5]*n+r[9]*i+r[13]*l,this.z=r[2]*t+r[6]*n+r[10]*i+r[14]*l,this.w=r[3]*t+r[7]*n+r[11]*i+r[15]*l,this},divideScalar:function(e){return this.multiplyScalar(1/e)},setAxisAngleFromQuaternion:function(e){this.w=2*Math.acos(e.w);var t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this},setAxisAngleFromRotationMatrix:function(e){var t,n,i,l,r=e.elements,a=r[0],o=r[4],q=r[8],s=r[1],m=r[5],h=r[9],c=r[2],u=r[6],d=r[10];if(Math.abs(o-s)<.01&&Math.abs(q-c)<.01&&Math.abs(h-u)<.01){if(Math.abs(o+s)<.1&&Math.abs(q+c)<.1&&Math.abs(h+u)<.1&&Math.abs(a+m+d-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;var p=(a+1)/2,f=(m+1)/2,x=(d+1)/2,v=(o+s)/4,g=(q+c)/4,_=(h+u)/4;return p>f&&p>x?p<.01?(n=0,i=.707106781,l=.707106781):(i=v/(n=Math.sqrt(p)),l=g/n):f>x?f<.01?(n=.707106781,i=0,l=.707106781):(n=v/(i=Math.sqrt(f)),l=_/i):x<.01?(n=.707106781,i=.707106781,l=0):(n=g/(l=Math.sqrt(x)),i=_/l),this.set(n,i,l,t),this}var y=Math.sqrt((u-h)*(u-h)+(q-c)*(q-c)+(s-o)*(s-o));return Math.abs(y)<.001&&(y=1),this.x=(u-h)/y,this.y=(q-c)/y,this.z=(s-o)/y,this.w=Math.acos((a+m+d-1)/2),this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this},clampScalar:function(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this},clampLength:function(e,t){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this},lerpVectors:function(e,t,n){return this.subVectors(t,e).multiplyScalar(n).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e},fromBufferAttribute:function(e,t,n){return void 0!==n&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}}),Rn.prototype=Object.assign(Object.create(fn.prototype),{constructor:Rn,isWebGLRenderTarget:!0,setSize:function(e,t){this.width===e&&this.height===t||(this.width=e,this.height=t,this.texture.image.width=e,this.texture.image.height=t,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.width=e.width,this.height=e.height,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Cn.prototype=Object.assign(Object.create(Rn.prototype),{constructor:Cn,isWebGLMultisampleRenderTarget:!0,copy:function(e){return Rn.prototype.copy.call(this,e),this.samples=e.samples,this}});var On=new Mn,In=new Gn,Dn=new Mn(0,0,0),Nn=new Mn(1,1,1),Bn=new Mn,Fn=new Mn,Un=new Mn;function Gn(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}Object.assign(Gn.prototype,{isMatrix4:!0,set:function(e,t,n,i,l,r,a,o,q,s,m,h,c,u,d,p){var f=this.elements;return f[0]=e,f[4]=t,f[8]=n,f[12]=i,f[1]=l,f[5]=r,f[9]=a,f[13]=o,f[2]=q,f[6]=s,f[10]=m,f[14]=h,f[3]=c,f[7]=u,f[11]=d,f[15]=p,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new Gn).fromArray(this.elements)},copy:function(e){var t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this},copyPosition:function(e){var t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this},extractBasis:function(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this},makeBasis:function(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this},extractRotation:function(e){var t=this.elements,n=e.elements,i=1/On.setFromMatrixColumn(e,0).length(),l=1/On.setFromMatrixColumn(e,1).length(),r=1/On.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*l,t[5]=n[5]*l,t[6]=n[6]*l,t[7]=0,t[8]=n[8]*r,t[9]=n[9]*r,t[10]=n[10]*r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},makeRotationFromEuler:function(e){e&&e.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var t=this.elements,n=e.x,i=e.y,l=e.z,r=Math.cos(n),a=Math.sin(n),o=Math.cos(i),q=Math.sin(i),s=Math.cos(l),m=Math.sin(l);if("XYZ"===e.order){var h=r*s,c=r*m,u=a*s,d=a*m;t[0]=o*s,t[4]=-o*m,t[8]=q,t[1]=c+u*q,t[5]=h-d*q,t[9]=-a*o,t[2]=d-h*q,t[6]=u+c*q,t[10]=r*o}else if("YXZ"===e.order){var p=o*s,f=o*m,x=q*s,v=q*m;t[0]=p+v*a,t[4]=x*a-f,t[8]=r*q,t[1]=r*m,t[5]=r*s,t[9]=-a,t[2]=f*a-x,t[6]=v+p*a,t[10]=r*o}else if("ZXY"===e.order){p=o*s,f=o*m,x=q*s,v=q*m;t[0]=p-v*a,t[4]=-r*m,t[8]=x+f*a,t[1]=f+x*a,t[5]=r*s,t[9]=v-p*a,t[2]=-r*q,t[6]=a,t[10]=r*o}else if("ZYX"===e.order){h=r*s,c=r*m,u=a*s,d=a*m;t[0]=o*s,t[4]=u*q-c,t[8]=h*q+d,t[1]=o*m,t[5]=d*q+h,t[9]=c*q-u,t[2]=-q,t[6]=a*o,t[10]=r*o}else if("YZX"===e.order){var g=r*o,_=r*q,y=a*o,b=a*q;t[0]=o*s,t[4]=b-g*m,t[8]=y*m+_,t[1]=m,t[5]=r*s,t[9]=-a*s,t[2]=-q*s,t[6]=_*m+y,t[10]=g-b*m}else if("XZY"===e.order){g=r*o,_=r*q,y=a*o,b=a*q;t[0]=o*s,t[4]=-m,t[8]=q*s,t[1]=g*m+b,t[5]=r*s,t[9]=_*m-y,t[2]=y*m-_,t[6]=a*s,t[10]=b*m+g}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},makeRotationFromQuaternion:function(e){return this.compose(Dn,e,Nn)},lookAt:function(e,t,n){var i=this.elements;return Un.subVectors(e,t),0===Un.lengthSq()&&(Un.z=1),Un.normalize(),Bn.crossVectors(n,Un),0===Bn.lengthSq()&&(1===Math.abs(n.z)?Un.x+=1e-4:Un.z+=1e-4,Un.normalize(),Bn.crossVectors(n,Un)),Bn.normalize(),Fn.crossVectors(Un,Bn),i[0]=Bn.x,i[4]=Fn.x,i[8]=Un.x,i[1]=Bn.y,i[5]=Fn.y,i[9]=Un.y,i[2]=Bn.z,i[6]=Fn.z,i[10]=Un.z,this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var n=e.elements,i=t.elements,l=this.elements,r=n[0],a=n[4],o=n[8],q=n[12],s=n[1],m=n[5],h=n[9],c=n[13],u=n[2],d=n[6],p=n[10],f=n[14],x=n[3],v=n[7],g=n[11],_=n[15],y=i[0],b=i[4],w=i[8],M=i[12],z=i[1],S=i[5],T=i[9],E=i[13],A=i[2],L=i[6],P=i[10],R=i[14],C=i[3],O=i[7],I=i[11],D=i[15];return l[0]=r*y+a*z+o*A+q*C,l[4]=r*b+a*S+o*L+q*O,l[8]=r*w+a*T+o*P+q*I,l[12]=r*M+a*E+o*R+q*D,l[1]=s*y+m*z+h*A+c*C,l[5]=s*b+m*S+h*L+c*O,l[9]=s*w+m*T+h*P+c*I,l[13]=s*M+m*E+h*R+c*D,l[2]=u*y+d*z+p*A+f*C,l[6]=u*b+d*S+p*L+f*O,l[10]=u*w+d*T+p*P+f*I,l[14]=u*M+d*E+p*R+f*D,l[3]=x*y+v*z+g*A+_*C,l[7]=x*b+v*S+g*L+_*O,l[11]=x*w+v*T+g*P+_*I,l[15]=x*M+v*E+g*R+_*D,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this},applyToBufferAttribute:function(e){for(var t=0,n=e.count;t<n;t++)On.x=e.getX(t),On.y=e.getY(t),On.z=e.getZ(t),On.applyMatrix4(this),e.setXYZ(t,On.x,On.y,On.z);return e},determinant:function(){var e=this.elements,t=e[0],n=e[4],i=e[8],l=e[12],r=e[1],a=e[5],o=e[9],q=e[13],s=e[2],m=e[6],h=e[10],c=e[14];return e[3]*(+l*o*m-i*q*m-l*a*h+n*q*h+i*a*c-n*o*c)+e[7]*(+t*o*c-t*q*h+l*r*h-i*r*c+i*q*s-l*o*s)+e[11]*(+t*q*m-t*a*c-l*r*m+n*r*c+l*a*s-n*q*s)+e[15]*(-i*a*s-t*o*m+t*a*h+i*r*m-n*r*h+n*o*s)},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this},setPosition:function(e,t,n){var i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this},getInverse:function(e,t){var n=this.elements,i=e.elements,l=i[0],r=i[1],a=i[2],o=i[3],q=i[4],s=i[5],m=i[6],h=i[7],c=i[8],u=i[9],d=i[10],p=i[11],f=i[12],x=i[13],v=i[14],g=i[15],_=u*v*h-x*d*h+x*m*p-s*v*p-u*m*g+s*d*g,y=f*d*h-c*v*h-f*m*p+q*v*p+c*m*g-q*d*g,b=c*x*h-f*u*h+f*s*p-q*x*p-c*s*g+q*u*g,w=f*u*m-c*x*m-f*s*d+q*x*d+c*s*v-q*u*v,M=l*_+r*y+a*b+o*w;if(0===M){var z="THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";if(!0===t)throw new Error(z);return console.warn(z),this.identity()}var S=1/M;return n[0]=_*S,n[1]=(x*d*o-u*v*o-x*a*p+r*v*p+u*a*g-r*d*g)*S,n[2]=(s*v*o-x*m*o+x*a*h-r*v*h-s*a*g+r*m*g)*S,n[3]=(u*m*o-s*d*o-u*a*h+r*d*h+s*a*p-r*m*p)*S,n[4]=y*S,n[5]=(c*v*o-f*d*o+f*a*p-l*v*p-c*a*g+l*d*g)*S,n[6]=(f*m*o-q*v*o-f*a*h+l*v*h+q*a*g-l*m*g)*S,n[7]=(q*d*o-c*m*o+c*a*h-l*d*h-q*a*p+l*m*p)*S,n[8]=b*S,n[9]=(f*u*o-c*x*o-f*r*p+l*x*p+c*r*g-l*u*g)*S,n[10]=(q*x*o-f*s*o+f*r*h-l*x*h-q*r*g+l*s*g)*S,n[11]=(c*s*o-q*u*o-c*r*h+l*u*h+q*r*p-l*s*p)*S,n[12]=w*S,n[13]=(c*x*a-f*u*a+f*r*d-l*x*d-c*r*v+l*u*v)*S,n[14]=(f*s*a-q*x*a-f*r*m+l*x*m+q*r*v-l*s*v)*S,n[15]=(q*u*a-c*s*a+c*r*m-l*u*m-q*r*d+l*s*d)*S,this},scale:function(e){var t=this.elements,n=e.x,i=e.y,l=e.z;return t[0]*=n,t[4]*=i,t[8]*=l,t[1]*=n,t[5]*=i,t[9]*=l,t[2]*=n,t[6]*=i,t[10]*=l,t[3]*=n,t[7]*=i,t[11]*=l,this},getMaxScaleOnAxis:function(){var e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))},makeTranslation:function(e,t,n){return this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this},makeRotationX:function(e){var t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this},makeRotationY:function(e){var t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this},makeRotationZ:function(e){var t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(e,t){var n=Math.cos(t),i=Math.sin(t),l=1-n,r=e.x,a=e.y,o=e.z,q=l*r,s=l*a;return this.set(q*r+n,q*a-i*o,q*o+i*a,0,q*a+i*o,s*a+n,s*o-i*r,0,q*o-i*a,s*o+i*r,l*o*o+n,0,0,0,0,1),this},makeScale:function(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this},makeShear:function(e,t,n){return this.set(1,t,n,0,e,1,n,0,e,t,1,0,0,0,0,1),this},compose:function(e,t,n){var i=this.elements,l=t._x,r=t._y,a=t._z,o=t._w,q=l+l,s=r+r,m=a+a,h=l*q,c=l*s,u=l*m,d=r*s,p=r*m,f=a*m,x=o*q,v=o*s,g=o*m,_=n.x,y=n.y,b=n.z;return i[0]=(1-(d+f))*_,i[1]=(c+g)*_,i[2]=(u-v)*_,i[3]=0,i[4]=(c-g)*y,i[5]=(1-(h+f))*y,i[6]=(p+x)*y,i[7]=0,i[8]=(u+v)*b,i[9]=(p-x)*b,i[10]=(1-(h+d))*b,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this},decompose:function(e,t,n){var i=this.elements,l=On.set(i[0],i[1],i[2]).length(),r=On.set(i[4],i[5],i[6]).length(),a=On.set(i[8],i[9],i[10]).length();this.determinant()<0&&(l=-l),e.x=i[12],e.y=i[13],e.z=i[14],In.copy(this);var o=1/l,q=1/r,s=1/a;return In.elements[0]*=o,In.elements[1]*=o,In.elements[2]*=o,In.elements[4]*=q,In.elements[5]*=q,In.elements[6]*=q,In.elements[8]*=s,In.elements[9]*=s,In.elements[10]*=s,t.setFromRotationMatrix(In),n.x=l,n.y=r,n.z=a,this},makePerspective:function(e,t,n,i,l,r){void 0===r&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var a=this.elements,o=2*l/(t-e),q=2*l/(n-i),s=(t+e)/(t-e),m=(n+i)/(n-i),h=-(r+l)/(r-l),c=-2*r*l/(r-l);return a[0]=o,a[4]=0,a[8]=s,a[12]=0,a[1]=0,a[5]=q,a[9]=m,a[13]=0,a[2]=0,a[6]=0,a[10]=h,a[14]=c,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this},makeOrthographic:function(e,t,n,i,l,r){var a=this.elements,o=1/(t-e),q=1/(n-i),s=1/(r-l),m=(t+e)*o,h=(n+i)*q,c=(r+l)*s;return a[0]=2*o,a[4]=0,a[8]=0,a[12]=-m,a[1]=0,a[5]=2*q,a[9]=0,a[13]=-h,a[2]=0,a[6]=0,a[10]=-2*s,a[14]=-c,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this},equals:function(e){for(var t=this.elements,n=e.elements,i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0},fromArray:function(e,t){void 0===t&&(t=0);for(var n=0;n<16;n++)this.elements[n]=e[n+t];return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}});var Hn=new Gn,Vn=new yn;function jn(e,t,n,i){this._x=e||0,this._y=t||0,this._z=n||0,this._order=i||jn.DefaultOrder}function kn(){this.mask=1}jn.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],jn.DefaultOrder="XYZ",Object.defineProperties(jn.prototype,{x:{get:function(){return this._x},set:function(e){this._x=e,this._onChangeCallback()}},y:{get:function(){return this._y},set:function(e){this._y=e,this._onChangeCallback()}},z:{get:function(){return this._z},set:function(e){this._z=e,this._onChangeCallback()}},order:{get:function(){return this._order},set:function(e){this._order=e,this._onChangeCallback()}}}),Object.assign(jn.prototype,{isEuler:!0,set:function(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._order=i||this._order,this._onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this},setFromRotationMatrix:function(e,t,n){var i=gn.clamp,l=e.elements,r=l[0],a=l[4],o=l[8],q=l[1],s=l[5],m=l[9],h=l[2],c=l[6],u=l[10];return"XYZ"===(t=t||this._order)?(this._y=Math.asin(i(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-m,u),this._z=Math.atan2(-a,r)):(this._x=Math.atan2(c,s),this._z=0)):"YXZ"===t?(this._x=Math.asin(-i(m,-1,1)),Math.abs(m)<.9999999?(this._y=Math.atan2(o,u),this._z=Math.atan2(q,s)):(this._y=Math.atan2(-h,r),this._z=0)):"ZXY"===t?(this._x=Math.asin(i(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(-h,u),this._z=Math.atan2(-a,s)):(this._y=0,this._z=Math.atan2(q,r))):"ZYX"===t?(this._y=Math.asin(-i(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(c,u),this._z=Math.atan2(q,r)):(this._x=0,this._z=Math.atan2(-a,s))):"YZX"===t?(this._z=Math.asin(i(q,-1,1)),Math.abs(q)<.9999999?(this._x=Math.atan2(-m,s),this._y=Math.atan2(-h,r)):(this._x=0,this._y=Math.atan2(o,u))):"XZY"===t?(this._z=Math.asin(-i(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(c,s),this._y=Math.atan2(o,r)):(this._x=Math.atan2(-m,u),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+t),this._order=t,!1!==n&&this._onChangeCallback(),this},setFromQuaternion:function(e,t,n){return Hn.makeRotationFromQuaternion(e),this.setFromRotationMatrix(Hn,t,n)},setFromVector3:function(e,t){return this.set(e.x,e.y,e.z,t||this._order)},reorder:function(e){return Vn.setFromEuler(this),this.setFromQuaternion(Vn,e)},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order},fromArray:function(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this._onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e},toVector3:function(e){return e?e.set(this._x,this._y,this._z):new Mn(this._x,this._y,this._z)},_onChange:function(e){return this._onChangeCallback=e,this},_onChangeCallback:function(){}}),Object.assign(kn.prototype,{set:function(e){this.mask=1<<e|0},enable:function(e){this.mask|=1<<e|0},enableAll:function(){this.mask=-1},toggle:function(e){this.mask^=1<<e|0},disable:function(e){this.mask&=~(1<<e|0)},disableAll:function(){this.mask=0},test:function(e){return 0!=(this.mask&e.mask)}});var Wn=0,Xn=new Mn,Yn=new yn,Zn=new Gn,Jn=new Mn,Qn=new Mn,Kn=new Mn,$n=new yn,ei=new Mn(1,0,0),ti=new Mn(0,1,0),ni=new Mn(0,0,1),ii={type:"added"},li={type:"removed"};function ri(){Object.defineProperty(this,"id",{value:Wn++}),this.uuid=gn.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=ri.DefaultUp.clone();var e=new Mn,t=new jn,n=new yn,i=new Mn(1,1,1);t._onChange((function(){n.setFromEuler(t,!1)})),n._onChange((function(){t.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new Gn},normalMatrix:{value:new Tn}}),this.matrix=new Gn,this.matrixWorld=new Gn,this.matrixAutoUpdate=ri.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new kn,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}function ai(){ri.call(this),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}ri.DefaultUp=new Mn(0,1,0),ri.DefaultMatrixAutoUpdate=!0,ri.prototype=Object.assign(Object.create(fn.prototype),{constructor:ri,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(e){return this.quaternion.premultiply(e),this},setRotationFromAxisAngle:function(e,t){this.quaternion.setFromAxisAngle(e,t)},setRotationFromEuler:function(e){this.quaternion.setFromEuler(e,!0)},setRotationFromMatrix:function(e){this.quaternion.setFromRotationMatrix(e)},setRotationFromQuaternion:function(e){this.quaternion.copy(e)},rotateOnAxis:function(e,t){return Yn.setFromAxisAngle(e,t),this.quaternion.multiply(Yn),this},rotateOnWorldAxis:function(e,t){return Yn.setFromAxisAngle(e,t),this.quaternion.premultiply(Yn),this},rotateX:function(e){return this.rotateOnAxis(ei,e)},rotateY:function(e){return this.rotateOnAxis(ti,e)},rotateZ:function(e){return this.rotateOnAxis(ni,e)},translateOnAxis:function(e,t){return Xn.copy(e).applyQuaternion(this.quaternion),this.position.add(Xn.multiplyScalar(t)),this},translateX:function(e){return this.translateOnAxis(ei,e)},translateY:function(e){return this.translateOnAxis(ti,e)},translateZ:function(e){return this.translateOnAxis(ni,e)},localToWorld:function(e){return e.applyMatrix4(this.matrixWorld)},worldToLocal:function(e){return e.applyMatrix4(Zn.getInverse(this.matrixWorld))},lookAt:function(e,t,n){e.isVector3?Jn.copy(e):Jn.set(e,t,n);var i=this.parent;this.updateWorldMatrix(!0,!1),Qn.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Zn.lookAt(Qn,Jn,this.up):Zn.lookAt(Jn,Qn,this.up),this.quaternion.setFromRotationMatrix(Zn),i&&(Zn.extractRotation(i.matrixWorld),Yn.setFromRotationMatrix(Zn),this.quaternion.premultiply(Yn.inverse()))},add:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(null!==e.parent&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(ii)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)},remove:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}var n=this.children.indexOf(e);return-1!==n&&(e.parent=null,this.children.splice(n,1),e.dispatchEvent(li)),this},attach:function(e){return this.updateWorldMatrix(!0,!1),Zn.getInverse(this.matrixWorld),null!==e.parent&&(e.parent.updateWorldMatrix(!0,!1),Zn.multiply(e.parent.matrixWorld)),e.applyMatrix(Zn),e.updateWorldMatrix(!1,!1),this.add(e),this},getObjectById:function(e){return this.getObjectByProperty("id",e)},getObjectByName:function(e){return this.getObjectByProperty("name",e)},getObjectByProperty:function(e,t){if(this[e]===t)return this;for(var n=0,i=this.children.length;n<i;n++){var l=this.children[n].getObjectByProperty(e,t);if(void 0!==l)return l}},getWorldPosition:function(e){return void 0===e&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),e=new Mn),this.updateMatrixWorld(!0),e.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(e){return void 0===e&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),e=new yn),this.updateMatrixWorld(!0),this.matrixWorld.decompose(Qn,e,Kn),e},getWorldScale:function(e){return void 0===e&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),e=new Mn),this.updateMatrixWorld(!0),this.matrixWorld.decompose(Qn,$n,e),e},getWorldDirection:function(e){void 0===e&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),e=new Mn),this.updateMatrixWorld(!0);var t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()},raycast:function(){},traverse:function(e){e(this);for(var t=this.children,n=0,i=t.length;n<i;n++)t[n].traverse(e)},traverseVisible:function(e){if(!1!==this.visible){e(this);for(var t=this.children,n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)}},traverseAncestors:function(e){var t=this.parent;null!==t&&(e(t),t.traverseAncestors(e))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);for(var t=this.children,n=0,i=t.length;n<i;n++)t[n].updateMatrixWorld(e)},updateWorldMatrix:function(e,t){var n=this.parent;if(!0===e&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===t)for(var i=this.children,l=0,r=i.length;l<r;l++)i[l].updateWorldMatrix(!1,!0)},toJSON:function(e){var t=void 0===e||"string"==typeof e,n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var i={};function l(t,n){return void 0===t[n.uuid]&&(t[n.uuid]=n.toJSON(e)),n.uuid}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),this.isMesh&&this.drawMode!==At&&(i.drawMode=this.drawMode),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON()),this.isMesh||this.isLine||this.isPoints){i.geometry=l(e.geometries,this.geometry);var r=this.geometry.parameters;if(void 0!==r&&void 0!==r.shapes){var a=r.shapes;if(Array.isArray(a))for(var o=0,q=a.length;o<q;o++){var s=a[o];l(e.shapes,s)}else l(e.shapes,a)}}if(void 0!==this.material)if(Array.isArray(this.material)){var m=[];for(o=0,q=this.material.length;o<q;o++)m.push(l(e.materials,this.material[o]));i.material=m}else i.material=l(e.materials,this.material);if(this.children.length>0){i.children=[];for(o=0;o<this.children.length;o++)i.children.push(this.children[o].toJSON(e).object)}if(t){var h=p(e.geometries),c=p(e.materials),u=p(e.textures),d=p(e.images);a=p(e.shapes);h.length>0&&(n.geometries=h),c.length>0&&(n.materials=c),u.length>0&&(n.textures=u),d.length>0&&(n.images=d),a.length>0&&(n.shapes=a)}return n.object=i,n;function p(e){var t=[];for(var n in e){var i=e[n];delete i.metadata,t.push(i)}return t}},clone:function(e){return(new this.constructor).copy(this,e)},copy:function(e,t){if(void 0===t&&(t=!0),this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),!0===t)for(var n=0;n<e.children.length;n++){var i=e.children[n];this.add(i.clone())}return this}}),ai.prototype=Object.assign(Object.create(ri.prototype),{constructor:ai,isScene:!0,copy:function(e,t){return ri.prototype.copy.call(this,e,t),null!==e.background&&(this.background=e.background.clone()),null!==e.fog&&(this.fog=e.fog.clone()),null!==e.overrideMaterial&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this},toJSON:function(e){var t=ri.prototype.toJSON.call(this,e);return null!==this.background&&(t.object.background=this.background.toJSON(e)),null!==this.fog&&(t.object.fog=this.fog.toJSON()),t},dispose:function(){this.dispatchEvent({type:"dispose"})}});var oi=[new Mn,new Mn,new Mn,new Mn,new Mn,new Mn,new Mn,new Mn],qi=new Mn,si=new Mn,mi=new Mn,hi=new Mn,ci=new Mn,ui=new Mn,di=new Mn,pi=new Mn,fi=new Mn,xi=new Mn,vi=new Mn;function gi(e,t){this.min=void 0!==e?e:new Mn(1/0,1/0,1/0),this.max=void 0!==t?t:new Mn(-1/0,-1/0,-1/0)}function _i(e,t,n,i,l){var r,a;for(r=0,a=e.length-3;r<=a;r+=3){vi.fromArray(e,r);var o=l.x*Math.abs(vi.x)+l.y*Math.abs(vi.y)+l.z*Math.abs(vi.z),q=t.dot(vi),s=n.dot(vi),m=i.dot(vi);if(Math.max(-Math.max(q,s,m),Math.min(q,s,m))>o)return!1}return!0}Object.assign(gi.prototype,{isBox3:!0,set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromArray:function(e){for(var t=1/0,n=1/0,i=1/0,l=-1/0,r=-1/0,a=-1/0,o=0,q=e.length;o<q;o+=3){var s=e[o],m=e[o+1],h=e[o+2];s<t&&(t=s),m<n&&(n=m),h<i&&(i=h),s>l&&(l=s),m>r&&(r=m),h>a&&(a=h)}return this.min.set(t,n,i),this.max.set(l,r,a),this},setFromBufferAttribute:function(e){for(var t=1/0,n=1/0,i=1/0,l=-1/0,r=-1/0,a=-1/0,o=0,q=e.count;o<q;o++){var s=e.getX(o),m=e.getY(o),h=e.getZ(o);s<t&&(t=s),m<n&&(n=m),h<i&&(i=h),s>l&&(l=s),m>r&&(r=m),h>a&&(a=h)}return this.min.set(t,n,i),this.max.set(l,r,a),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(e,t){var n=qi.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this},setFromObject:function(e){return this.makeEmpty(),this.expandByObject(e)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(e){return void 0===e&&(console.warn("THREE.Box3: .getCenter() target is now required"),e=new Mn),this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(e){return void 0===e&&(console.warn("THREE.Box3: .getSize() target is now required"),e=new Mn),this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},expandByObject:function(e){var t,n;e.updateWorldMatrix(!1,!1);var i=e.geometry;if(void 0!==i)if(i.isGeometry){var l=i.vertices;for(t=0,n=l.length;t<n;t++)qi.copy(l[t]),qi.applyMatrix4(e.matrixWorld),this.expandByPoint(qi)}else if(i.isBufferGeometry){var r=i.attributes.position;if(void 0!==r)for(t=0,n=r.count;t<n;t++)qi.fromBufferAttribute(r,t).applyMatrix4(e.matrixWorld),this.expandByPoint(qi)}var a=e.children;for(t=0,n=a.length;t<n;t++)this.expandByObject(a[t]);return this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z},getParameter:function(e,t){return void 0===t&&(console.warn("THREE.Box3: .getParameter() target is now required"),t=new Mn),t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)},intersectsSphere:function(e){return this.clampPoint(e.center,qi),qi.distanceToSquared(e.center)<=e.radius*e.radius},intersectsPlane:function(e){var t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant},intersectsTriangle:function(e){if(this.isEmpty())return!1;this.getCenter(pi),fi.subVectors(this.max,pi),si.subVectors(e.a,pi),mi.subVectors(e.b,pi),hi.subVectors(e.c,pi),ci.subVectors(mi,si),ui.subVectors(hi,mi),di.subVectors(si,hi);var t=[0,-ci.z,ci.y,0,-ui.z,ui.y,0,-di.z,di.y,ci.z,0,-ci.x,ui.z,0,-ui.x,di.z,0,-di.x,-ci.y,ci.x,0,-ui.y,ui.x,0,-di.y,di.x,0];return!!_i(t,si,mi,hi,fi)&&(!!_i(t=[1,0,0,0,1,0,0,0,1],si,mi,hi,fi)&&(xi.crossVectors(ci,ui),_i(t=[xi.x,xi.y,xi.z],si,mi,hi,fi)))},clampPoint:function(e,t){return void 0===t&&(console.warn("THREE.Box3: .clampPoint() target is now required"),t=new Mn),t.copy(e).clamp(this.min,this.max)},distanceToPoint:function(e){return qi.copy(e).clamp(this.min,this.max).sub(e).length()},getBoundingSphere:function(e){return void 0===e&&console.error("THREE.Box3: .getBoundingSphere() target is now required"),this.getCenter(e.center),e.radius=.5*this.getSize(qi).length(),e},intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},applyMatrix4:function(e){return this.isEmpty()?this:(oi[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),oi[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),oi[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),oi[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),oi[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),oi[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),oi[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),oi[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(oi),this)},translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}});var yi=new gi;function bi(e,t){this.center=void 0!==e?e:new Mn,this.radius=void 0!==t?t:0}Object.assign(bi.prototype,{set:function(e,t){return this.center.copy(e),this.radius=t,this},setFromPoints:function(e,t){var n=this.center;void 0!==t?n.copy(t):yi.setFromPoints(e).getCenter(n);for(var i=0,l=0,r=e.length;l<r;l++)i=Math.max(i,n.distanceToSquared(e[l]));return this.radius=Math.sqrt(i),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.center.copy(e.center),this.radius=e.radius,this},empty:function(){return this.radius<=0},containsPoint:function(e){return e.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(e){return e.distanceTo(this.center)-this.radius},intersectsSphere:function(e){var t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t},intersectsBox:function(e){return e.intersectsSphere(this)},intersectsPlane:function(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius},clampPoint:function(e,t){var n=this.center.distanceToSquared(e);return void 0===t&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),t=new Mn),t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t},getBoundingBox:function(e){return void 0===e&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),e=new gi),e.set(this.center,this.center),e.expandByScalar(this.radius),e},applyMatrix4:function(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this},translate:function(e){return this.center.add(e),this},equals:function(e){return e.center.equals(this.center)&&e.radius===this.radius}});var wi=new Mn,Mi=new Mn,zi=new Mn,Si=new Mn,Ti=new Mn,Ei=new Mn,Ai=new Mn;function Li(e,t){this.origin=void 0!==e?e:new Mn,this.direction=void 0!==t?t:new Mn}Object.assign(Li.prototype,{set:function(e,t){return this.origin.copy(e),this.direction.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this},at:function(e,t){return void 0===t&&(console.warn("THREE.Ray: .at() target is now required"),t=new Mn),t.copy(this.direction).multiplyScalar(e).add(this.origin)},lookAt:function(e){return this.direction.copy(e).sub(this.origin).normalize(),this},recast:function(e){return this.origin.copy(this.at(e,wi)),this},closestPointToPoint:function(e,t){void 0===t&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),t=new Mn),t.subVectors(e,this.origin);var n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(n).add(this.origin)},distanceToPoint:function(e){return Math.sqrt(this.distanceSqToPoint(e))},distanceSqToPoint:function(e){var t=wi.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(wi.copy(this.direction).multiplyScalar(t).add(this.origin),wi.distanceToSquared(e))},distanceSqToSegment:function(e,t,n,i){Mi.copy(e).add(t).multiplyScalar(.5),zi.copy(t).sub(e).normalize(),Si.copy(this.origin).sub(Mi);var l,r,a,o,q=.5*e.distanceTo(t),s=-this.direction.dot(zi),m=Si.dot(this.direction),h=-Si.dot(zi),c=Si.lengthSq(),u=Math.abs(1-s*s);if(u>0)if(r=s*m-h,o=q*u,(l=s*h-m)>=0)if(r>=-o)if(r<=o){var d=1/u;a=(l*=d)*(l+s*(r*=d)+2*m)+r*(s*l+r+2*h)+c}else r=q,a=-(l=Math.max(0,-(s*r+m)))*l+r*(r+2*h)+c;else r=-q,a=-(l=Math.max(0,-(s*r+m)))*l+r*(r+2*h)+c;else r<=-o?a=-(l=Math.max(0,-(-s*q+m)))*l+(r=l>0?-q:Math.min(Math.max(-q,-h),q))*(r+2*h)+c:r<=o?(l=0,a=(r=Math.min(Math.max(-q,-h),q))*(r+2*h)+c):a=-(l=Math.max(0,-(s*q+m)))*l+(r=l>0?q:Math.min(Math.max(-q,-h),q))*(r+2*h)+c;else r=s>0?-q:q,a=-(l=Math.max(0,-(s*r+m)))*l+r*(r+2*h)+c;return n&&n.copy(this.direction).multiplyScalar(l).add(this.origin),i&&i.copy(zi).multiplyScalar(r).add(Mi),a},intersectSphere:function(e,t){wi.subVectors(e.center,this.origin);var n=wi.dot(this.direction),i=wi.dot(wi)-n*n,l=e.radius*e.radius;if(i>l)return null;var r=Math.sqrt(l-i),a=n-r,o=n+r;return a<0&&o<0?null:a<0?this.at(o,t):this.at(a,t)},intersectsSphere:function(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius},distanceToPlane:function(e){var t=e.normal.dot(this.direction);if(0===t)return 0===e.distanceToPoint(this.origin)?0:null;var n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null},intersectPlane:function(e,t){var n=this.distanceToPlane(e);return null===n?null:this.at(n,t)},intersectsPlane:function(e){var t=e.distanceToPoint(this.origin);return 0===t||e.normal.dot(this.direction)*t<0},intersectBox:function(e,t){var n,i,l,r,a,o,q=1/this.direction.x,s=1/this.direction.y,m=1/this.direction.z,h=this.origin;return q>=0?(n=(e.min.x-h.x)*q,i=(e.max.x-h.x)*q):(n=(e.max.x-h.x)*q,i=(e.min.x-h.x)*q),s>=0?(l=(e.min.y-h.y)*s,r=(e.max.y-h.y)*s):(l=(e.max.y-h.y)*s,r=(e.min.y-h.y)*s),n>r||l>i?null:((l>n||n!=n)&&(n=l),(r<i||i!=i)&&(i=r),m>=0?(a=(e.min.z-h.z)*m,o=(e.max.z-h.z)*m):(a=(e.max.z-h.z)*m,o=(e.min.z-h.z)*m),n>o||a>i?null:((a>n||n!=n)&&(n=a),(o<i||i!=i)&&(i=o),i<0?null:this.at(n>=0?n:i,t)))},intersectsBox:function(e){return null!==this.intersectBox(e,wi)},intersectTriangle:function(e,t,n,i,l){Ti.subVectors(t,e),Ei.subVectors(n,e),Ai.crossVectors(Ti,Ei);var r,a=this.direction.dot(Ai);if(a>0){if(i)return null;r=1}else{if(!(a<0))return null;r=-1,a=-a}Si.subVectors(this.origin,e);var o=r*this.direction.dot(Ei.crossVectors(Si,Ei));if(o<0)return null;var q=r*this.direction.dot(Ti.cross(Si));if(q<0)return null;if(o+q>a)return null;var s=-r*Si.dot(Ai);return s<0?null:this.at(s/a,l)},applyMatrix4:function(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this},equals:function(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}});var Pi=new Mn,Ri=new Mn,Ci=new Tn;function Oi(e,t){this.normal=void 0!==e?e:new Mn(1,0,0),this.constant=void 0!==t?t:0}Object.assign(Oi.prototype,{isPlane:!0,set:function(e,t){return this.normal.copy(e),this.constant=t,this},setComponents:function(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this},setFromNormalAndCoplanarPoint:function(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this},setFromCoplanarPoints:function(e,t,n){var i=Pi.subVectors(n,t).cross(Ri.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.normal.copy(e.normal),this.constant=e.constant,this},normalize:function(){var e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(e){return this.normal.dot(e)+this.constant},distanceToSphere:function(e){return this.distanceToPoint(e.center)-e.radius},projectPoint:function(e,t){return void 0===t&&(console.warn("THREE.Plane: .projectPoint() target is now required"),t=new Mn),t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)},intersectLine:function(e,t){void 0===t&&(console.warn("THREE.Plane: .intersectLine() target is now required"),t=new Mn);var n=e.delta(Pi),i=this.normal.dot(n);if(0===i)return 0===this.distanceToPoint(e.start)?t.copy(e.start):void 0;var l=-(e.start.dot(this.normal)+this.constant)/i;return l<0||l>1?void 0:t.copy(n).multiplyScalar(l).add(e.start)},intersectsLine:function(e){var t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0},intersectsBox:function(e){return e.intersectsPlane(this)},intersectsSphere:function(e){return e.intersectsPlane(this)},coplanarPoint:function(e){return void 0===e&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),e=new Mn),e.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(e,t){var n=t||Ci.getNormalMatrix(e),i=this.coplanarPoint(Pi).applyMatrix4(e),l=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(l),this},translate:function(e){return this.constant-=e.dot(this.normal),this},equals:function(e){return e.normal.equals(this.normal)&&e.constant===this.constant}});var Ii=new Mn,Di=new Mn,Ni=new Mn,Bi=new Mn,Fi=new Mn,Ui=new Mn,Gi=new Mn,Hi=new Mn,Vi=new Mn,ji=new Mn;function ki(e,t,n){this.a=void 0!==e?e:new Mn,this.b=void 0!==t?t:new Mn,this.c=void 0!==n?n:new Mn}Object.assign(ki,{getNormal:function(e,t,n,i){void 0===i&&(console.warn("THREE.Triangle: .getNormal() target is now required"),i=new Mn),i.subVectors(n,t),Ii.subVectors(e,t),i.cross(Ii);var l=i.lengthSq();return l>0?i.multiplyScalar(1/Math.sqrt(l)):i.set(0,0,0)},getBarycoord:function(e,t,n,i,l){Ii.subVectors(i,t),Di.subVectors(n,t),Ni.subVectors(e,t);var r=Ii.dot(Ii),a=Ii.dot(Di),o=Ii.dot(Ni),q=Di.dot(Di),s=Di.dot(Ni),m=r*q-a*a;if(void 0===l&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),l=new Mn),0===m)return l.set(-2,-1,-1);var h=1/m,c=(q*o-a*s)*h,u=(r*s-a*o)*h;return l.set(1-c-u,u,c)},containsPoint:function(e,t,n,i){return ki.getBarycoord(e,t,n,i,Bi),Bi.x>=0&&Bi.y>=0&&Bi.x+Bi.y<=1},getUV:function(e,t,n,i,l,r,a,o){return this.getBarycoord(e,t,n,i,Bi),o.set(0,0),o.addScaledVector(l,Bi.x),o.addScaledVector(r,Bi.y),o.addScaledVector(a,Bi.z),o},isFrontFacing:function(e,t,n,i){return Ii.subVectors(n,t),Di.subVectors(e,t),Ii.cross(Di).dot(i)<0}}),Object.assign(ki.prototype,{set:function(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this},setFromPointsAndIndices:function(e,t,n,i){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[i]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this},getArea:function(){return Ii.subVectors(this.c,this.b),Di.subVectors(this.a,this.b),.5*Ii.cross(Di).length()},getMidpoint:function(e){return void 0===e&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),e=new Mn),e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(e){return ki.getNormal(this.a,this.b,this.c,e)},getPlane:function(e){return void 0===e&&(console.warn("THREE.Triangle: .getPlane() target is now required"),e=new Oi),e.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(e,t){return ki.getBarycoord(e,this.a,this.b,this.c,t)},getUV:function(e,t,n,i,l){return ki.getUV(e,this.a,this.b,this.c,t,n,i,l)},containsPoint:function(e){return ki.containsPoint(e,this.a,this.b,this.c)},isFrontFacing:function(e){return ki.isFrontFacing(this.a,this.b,this.c,e)},intersectsBox:function(e){return e.intersectsTriangle(this)},closestPointToPoint:function(e,t){void 0===t&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),t=new Mn);var n,i,l=this.a,r=this.b,a=this.c;Fi.subVectors(r,l),Ui.subVectors(a,l),Hi.subVectors(e,l);var o=Fi.dot(Hi),q=Ui.dot(Hi);if(o<=0&&q<=0)return t.copy(l);Vi.subVectors(e,r);var s=Fi.dot(Vi),m=Ui.dot(Vi);if(s>=0&&m<=s)return t.copy(r);var h=o*m-s*q;if(h<=0&&o>=0&&s<=0)return n=o/(o-s),t.copy(l).addScaledVector(Fi,n);ji.subVectors(e,a);var c=Fi.dot(ji),u=Ui.dot(ji);if(u>=0&&c<=u)return t.copy(a);var d=c*q-o*u;if(d<=0&&q>=0&&u<=0)return i=q/(q-u),t.copy(l).addScaledVector(Ui,i);var p=s*u-c*m;if(p<=0&&m-s>=0&&c-u>=0)return Gi.subVectors(a,r),i=(m-s)/(m-s+(c-u)),t.copy(r).addScaledVector(Gi,i);var f=1/(p+d+h);return n=d*f,i=h*f,t.copy(l).addScaledVector(Fi,n).addScaledVector(Ui,i)},equals:function(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}});var Wi={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Xi={h:0,s:0,l:0},Yi={h:0,s:0,l:0};function Zi(e,t,n){return void 0===t&&void 0===n?this.set(e):this.setRGB(e,t,n)}function Ji(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+6*(t-e)*(2/3-n):e}function Qi(e){return e<.04045?.0773993808*e:Math.pow(.9478672986*e+.0521327014,2.4)}function Ki(e){return e<.0031308?12.92*e:1.055*Math.pow(e,.41666)-.055}function $i(e,t,n,i,l,r){this.a=e,this.b=t,this.c=n,this.normal=i&&i.isVector3?i:new Mn,this.vertexNormals=Array.isArray(i)?i:[],this.color=l&&l.isColor?l:new Zi,this.vertexColors=Array.isArray(l)?l:[],this.materialIndex=void 0!==r?r:0}Object.assign(Zi.prototype,{isColor:!0,r:1,g:1,b:1,set:function(e){return e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e),this},setScalar:function(e){return this.r=e,this.g=e,this.b=e,this},setHex:function(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,this},setRGB:function(e,t,n){return this.r=e,this.g=t,this.b=n,this},setHSL:function(e,t,n){if(e=gn.euclideanModulo(e,1),t=gn.clamp(t,0,1),n=gn.clamp(n,0,1),0===t)this.r=this.g=this.b=n;else{var i=n<=.5?n*(1+t):n+t-n*t,l=2*n-i;this.r=Ji(l,i,e+1/3),this.g=Ji(l,i,e),this.b=Ji(l,i,e-1/3)}return this},setStyle:function(e){function t(t){void 0!==t&&parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}var n;if(n=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(e)){var i,l=n[1],r=n[2];switch(l){case"rgb":case"rgba":if(i=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(r))return this.r=Math.min(255,parseInt(i[1],10))/255,this.g=Math.min(255,parseInt(i[2],10))/255,this.b=Math.min(255,parseInt(i[3],10))/255,t(i[5]),this;if(i=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(r))return this.r=Math.min(100,parseInt(i[1],10))/100,this.g=Math.min(100,parseInt(i[2],10))/100,this.b=Math.min(100,parseInt(i[3],10))/100,t(i[5]),this;break;case"hsl":case"hsla":if(i=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(r)){var a=parseFloat(i[1])/360,o=parseInt(i[2],10)/100,q=parseInt(i[3],10)/100;return t(i[5]),this.setHSL(a,o,q)}}}else if(n=/^\#([A-Fa-f0-9]+)$/.exec(e)){var s=n[1],m=s.length;if(3===m)return this.r=parseInt(s.charAt(0)+s.charAt(0),16)/255,this.g=parseInt(s.charAt(1)+s.charAt(1),16)/255,this.b=parseInt(s.charAt(2)+s.charAt(2),16)/255,this;if(6===m)return this.r=parseInt(s.charAt(0)+s.charAt(1),16)/255,this.g=parseInt(s.charAt(2)+s.charAt(3),16)/255,this.b=parseInt(s.charAt(4)+s.charAt(5),16)/255,this}return e&&e.length>0?this.setColorName(e):this},setColorName:function(e){var t=Wi[e];return void 0!==t?this.setHex(t):console.warn("THREE.Color: Unknown color "+e),this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(e){return this.r=e.r,this.g=e.g,this.b=e.b,this},copyGammaToLinear:function(e,t){return void 0===t&&(t=2),this.r=Math.pow(e.r,t),this.g=Math.pow(e.g,t),this.b=Math.pow(e.b,t),this},copyLinearToGamma:function(e,t){void 0===t&&(t=2);var n=t>0?1/t:1;return this.r=Math.pow(e.r,n),this.g=Math.pow(e.g,n),this.b=Math.pow(e.b,n),this},convertGammaToLinear:function(e){return this.copyGammaToLinear(this,e),this},convertLinearToGamma:function(e){return this.copyLinearToGamma(this,e),this},copySRGBToLinear:function(e){return this.r=Qi(e.r),this.g=Qi(e.g),this.b=Qi(e.b),this},copyLinearToSRGB:function(e){return this.r=Ki(e.r),this.g=Ki(e.g),this.b=Ki(e.b),this},convertSRGBToLinear:function(){return this.copySRGBToLinear(this),this},convertLinearToSRGB:function(){return this.copyLinearToSRGB(this),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(e){void 0===e&&(console.warn("THREE.Color: .getHSL() target is now required"),e={h:0,s:0,l:0});var t,n,i=this.r,l=this.g,r=this.b,a=Math.max(i,l,r),o=Math.min(i,l,r),q=(o+a)/2;if(o===a)t=0,n=0;else{var s=a-o;switch(n=q<=.5?s/(a+o):s/(2-a-o),a){case i:t=(l-r)/s+(l<r?6:0);break;case l:t=(r-i)/s+2;break;case r:t=(i-l)/s+4}t/=6}return e.h=t,e.s=n,e.l=q,e},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(e,t,n){return this.getHSL(Xi),Xi.h+=e,Xi.s+=t,Xi.l+=n,this.setHSL(Xi.h,Xi.s,Xi.l),this},add:function(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this},addColors:function(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this},addScalar:function(e){return this.r+=e,this.g+=e,this.b+=e,this},sub:function(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this},multiply:function(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this},multiplyScalar:function(e){return this.r*=e,this.g*=e,this.b*=e,this},lerp:function(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this},lerpHSL:function(e,t){this.getHSL(Xi),e.getHSL(Yi);var n=gn.lerp(Xi.h,Yi.h,t),i=gn.lerp(Xi.s,Yi.s,t),l=gn.lerp(Xi.l,Yi.l,t);return this.setHSL(n,i,l),this},equals:function(e){return e.r===this.r&&e.g===this.g&&e.b===this.b},fromArray:function(e,t){return void 0===t&&(t=0),this.r=e[t],this.g=e[t+1],this.b=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e},toJSON:function(){return this.getHex()}}),Zi.NAMES=Wi,Object.assign($i.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.a=e.a,this.b=e.b,this.c=e.c,this.normal.copy(e.normal),this.color.copy(e.color),this.materialIndex=e.materialIndex;for(var t=0,n=e.vertexNormals.length;t<n;t++)this.vertexNormals[t]=e.vertexNormals[t].clone();for(t=0,n=e.vertexColors.length;t<n;t++)this.vertexColors[t]=e.vertexColors[t].clone();return this}});var el=0;function tl(){Object.defineProperty(this,"id",{value:el++}),this.uuid=gn.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.blending=z,this.side=f,this.flatShading=!1,this.vertexTangents=!1,this.vertexColors=y,this.opacity=1,this.transparent=!1,this.blendSrc=F,this.blendDst=U,this.blendEquation=L,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=Z,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=an,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=kt,this.stencilZFail=kt,this.stencilZPass=kt,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.needsUpdate=!0}function nl(e){tl.call(this),this.type="MeshBasicMaterial",this.color=new Zi(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ee,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.setValues(e)}function il(e,t,n){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=e,this.itemSize=t,this.count=void 0!==e?e.length/t:0,this.normalized=!0===n,this.usage=on,this.updateRange={offset:0,count:-1},this.version=0}function ll(e,t,n){il.call(this,new Int8Array(e),t,n)}function rl(e,t,n){il.call(this,new Uint8Array(e),t,n)}function al(e,t,n){il.call(this,new Uint8ClampedArray(e),t,n)}function ol(e,t,n){il.call(this,new Int16Array(e),t,n)}function ql(e,t,n){il.call(this,new Uint16Array(e),t,n)}function sl(e,t,n){il.call(this,new Int32Array(e),t,n)}function ml(e,t,n){il.call(this,new Uint32Array(e),t,n)}function hl(e,t,n){il.call(this,new Float32Array(e),t,n)}function cl(e,t,n){il.call(this,new Float64Array(e),t,n)}function ul(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function dl(e){if(0===e.length)return-1/0;for(var t=e[0],n=1,i=e.length;n<i;++n)e[n]>t&&(t=e[n]);return t}tl.prototype=Object.assign(Object.create(fn.prototype),{constructor:tl,isMaterial:!0,onBeforeCompile:function(){},setValues:function(e){if(void 0!==e)for(var t in e){var n=e[t];if(void 0!==n)if("shading"!==t){var i=this[t];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n:console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.")}else console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=n===g;else console.warn("THREE.Material: '"+t+"' parameter is undefined.")}},toJSON:function(e){var t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{}});var n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function i(e){var t=[];for(var n in e){var i=e[n];delete i.metadata,t.push(i)}return t}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(n.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,n.reflectivity=this.reflectivity,n.refractionRatio=this.refractionRatio,void 0!==this.combine&&(n.combine=this.combine),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity)),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),void 0!==this.size&&(n.size=this.size),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==z&&(n.blending=this.blending),!0===this.flatShading&&(n.flatShading=this.flatShading),this.side!==f&&(n.side=this.side),this.vertexColors!==y&&(n.vertexColors=this.vertexColors),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(n.morphTargets=!0),!0===this.morphNormals&&(n.morphNormals=!0),!0===this.skinning&&(n.skinning=!0),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),t){var l=i(e.textures),r=i(e.images);l.length>0&&(n.textures=l),r.length>0&&(n.images=r)}return n},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.name=e.name,this.fog=e.fog,this.blending=e.blending,this.side=e.side,this.flatShading=e.flatShading,this.vertexTangents=e.vertexTangents,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;var t=e.clippingPlanes,n=null;if(null!==t){var i=t.length;n=new Array(i);for(var l=0;l!==i;++l)n[l]=t[l].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.premultipliedAlpha=e.premultipliedAlpha,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),nl.prototype=Object.create(tl.prototype),nl.prototype.constructor=nl,nl.prototype.isMeshBasicMaterial=!0,nl.prototype.copy=function(e){return tl.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this},Object.defineProperty(il.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.assign(il.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setUsage:function(e){return this.usage=e,this},copy:function(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this},copyAt:function(e,t,n){e*=this.itemSize,n*=t.itemSize;for(var i=0,l=this.itemSize;i<l;i++)this.array[e+i]=t.array[n+i];return this},copyArray:function(e){return this.array.set(e),this},copyColorsArray:function(e){for(var t=this.array,n=0,i=0,l=e.length;i<l;i++){var r=e[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),r=new Zi),t[n++]=r.r,t[n++]=r.g,t[n++]=r.b}return this},copyVector2sArray:function(e){for(var t=this.array,n=0,i=0,l=e.length;i<l;i++){var r=e[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),r=new _n),t[n++]=r.x,t[n++]=r.y}return this},copyVector3sArray:function(e){for(var t=this.array,n=0,i=0,l=e.length;i<l;i++){var r=e[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),r=new Mn),t[n++]=r.x,t[n++]=r.y,t[n++]=r.z}return this},copyVector4sArray:function(e){for(var t=this.array,n=0,i=0,l=e.length;i<l;i++){var r=e[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),r=new Pn),t[n++]=r.x,t[n++]=r.y,t[n++]=r.z,t[n++]=r.w}return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},getX:function(e){return this.array[e*this.itemSize]},setX:function(e,t){return this.array[e*this.itemSize]=t,this},getY:function(e){return this.array[e*this.itemSize+1]},setY:function(e,t){return this.array[e*this.itemSize+1]=t,this},getZ:function(e){return this.array[e*this.itemSize+2]},setZ:function(e,t){return this.array[e*this.itemSize+2]=t,this},getW:function(e){return this.array[e*this.itemSize+3]},setW:function(e,t){return this.array[e*this.itemSize+3]=t,this},setXY:function(e,t,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this},setXYZ:function(e,t,n,i){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this},setXYZW:function(e,t,n,i,l){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=l,this},onUpload:function(e){return this.onUploadCallback=e,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)},toJSON:function(){return{itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized}}}),ll.prototype=Object.create(il.prototype),ll.prototype.constructor=ll,rl.prototype=Object.create(il.prototype),rl.prototype.constructor=rl,al.prototype=Object.create(il.prototype),al.prototype.constructor=al,ol.prototype=Object.create(il.prototype),ol.prototype.constructor=ol,ql.prototype=Object.create(il.prototype),ql.prototype.constructor=ql,sl.prototype=Object.create(il.prototype),sl.prototype.constructor=sl,ml.prototype=Object.create(il.prototype),ml.prototype.constructor=ml,hl.prototype=Object.create(il.prototype),hl.prototype.constructor=hl,cl.prototype=Object.create(il.prototype),cl.prototype.constructor=cl,Object.assign(ul.prototype,{computeGroups:function(e){for(var t,n=[],i=void 0,l=e.faces,r=0;r<l.length;r++){var a=l[r];a.materialIndex!==i&&(i=a.materialIndex,void 0!==t&&(t.count=3*r-t.start,n.push(t)),t={start:3*r,materialIndex:i})}void 0!==t&&(t.count=3*r-t.start,n.push(t)),this.groups=n},fromGeometry:function(e){var t,n=e.faces,i=e.vertices,l=e.faceVertexUvs,r=l[0]&&l[0].length>0,a=l[1]&&l[1].length>0,o=e.morphTargets,q=o.length;if(q>0){t=[];for(var s=0;s<q;s++)t[s]={name:o[s].name,data:[]};this.morphTargets.position=t}var m,h=e.morphNormals,c=h.length;if(c>0){m=[];for(s=0;s<c;s++)m[s]={name:h[s].name,data:[]};this.morphTargets.normal=m}var u=e.skinIndices,d=e.skinWeights,p=u.length===i.length,f=d.length===i.length;i.length>0&&0===n.length&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(s=0;s<n.length;s++){var x=n[s];this.vertices.push(i[x.a],i[x.b],i[x.c]);var v=x.vertexNormals;if(3===v.length)this.normals.push(v[0],v[1],v[2]);else{var g=x.normal;this.normals.push(g,g,g)}var _,y=x.vertexColors;if(3===y.length)this.colors.push(y[0],y[1],y[2]);else{var b=x.color;this.colors.push(b,b,b)}if(!0===r)void 0!==(_=l[0][s])?this.uvs.push(_[0],_[1],_[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",s),this.uvs.push(new _n,new _n,new _n));if(!0===a)void 0!==(_=l[1][s])?this.uvs2.push(_[0],_[1],_[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",s),this.uvs2.push(new _n,new _n,new _n));for(var w=0;w<q;w++){var M=o[w].vertices;t[w].data.push(M[x.a],M[x.b],M[x.c])}for(w=0;w<c;w++){var z=h[w].vertexNormals[s];m[w].data.push(z.a,z.b,z.c)}p&&this.skinIndices.push(u[x.a],u[x.b],u[x.c]),f&&this.skinWeights.push(d[x.a],d[x.b],d[x.c])}return this.computeGroups(e),this.verticesNeedUpdate=e.verticesNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this}});var pl=1,fl=new Gn,xl=new ri,vl=new Mn,gl=new gi,_l=new gi,yl=new Mn;function bl(){Object.defineProperty(this,"id",{value:pl+=2}),this.uuid=gn.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}bl.prototype=Object.assign(Object.create(fn.prototype),{constructor:bl,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(e){Array.isArray(e)?this.index=new(dl(e)>65535?ml:ql)(e,1):this.index=e},getAttribute:function(e){return this.attributes[e]},setAttribute:function(e,t){return this.attributes[e]=t,this},deleteAttribute:function(e){return delete this.attributes[e],this},addGroup:function(e,t,n){this.groups.push({start:e,count:t,materialIndex:void 0!==n?n:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(e,t){this.drawRange.start=e,this.drawRange.count=t},applyMatrix:function(e){var t=this.attributes.position;void 0!==t&&(e.applyToBufferAttribute(t),t.needsUpdate=!0);var n=this.attributes.normal;void 0!==n&&((new Tn).getNormalMatrix(e).applyToBufferAttribute(n),n.needsUpdate=!0);var i=this.attributes.tangent;void 0!==i&&((new Tn).getNormalMatrix(e).applyToBufferAttribute(i),i.needsUpdate=!0);return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(e){return fl.makeRotationX(e),this.applyMatrix(fl),this},rotateY:function(e){return fl.makeRotationY(e),this.applyMatrix(fl),this},rotateZ:function(e){return fl.makeRotationZ(e),this.applyMatrix(fl),this},translate:function(e,t,n){return fl.makeTranslation(e,t,n),this.applyMatrix(fl),this},scale:function(e,t,n){return fl.makeScale(e,t,n),this.applyMatrix(fl),this},lookAt:function(e){return xl.lookAt(e),xl.updateMatrix(),this.applyMatrix(xl.matrix),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(vl).negate(),this.translate(vl.x,vl.y,vl.z),this},setFromObject:function(e){var t=e.geometry;if(e.isPoints||e.isLine){var n=new hl(3*t.vertices.length,3),i=new hl(3*t.colors.length,3);if(this.setAttribute("position",n.copyVector3sArray(t.vertices)),this.setAttribute("color",i.copyColorsArray(t.colors)),t.lineDistances&&t.lineDistances.length===t.vertices.length){var l=new hl(t.lineDistances.length,1);this.setAttribute("lineDistance",l.copyArray(t.lineDistances))}null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone())}else e.isMesh&&t&&t.isGeometry&&this.fromGeometry(t);return this},setFromPoints:function(e){for(var t=[],n=0,i=e.length;n<i;n++){var l=e[n];t.push(l.x,l.y,l.z||0)}return this.setAttribute("position",new hl(t,3)),this},updateFromObject:function(e){var t,n=e.geometry;if(e.isMesh){var i=n.__directGeometry;if(!0===n.elementsNeedUpdate&&(i=void 0,n.elementsNeedUpdate=!1),void 0===i)return this.fromGeometry(n);i.verticesNeedUpdate=n.verticesNeedUpdate,i.normalsNeedUpdate=n.normalsNeedUpdate,i.colorsNeedUpdate=n.colorsNeedUpdate,i.uvsNeedUpdate=n.uvsNeedUpdate,i.groupsNeedUpdate=n.groupsNeedUpdate,n.verticesNeedUpdate=!1,n.normalsNeedUpdate=!1,n.colorsNeedUpdate=!1,n.uvsNeedUpdate=!1,n.groupsNeedUpdate=!1,n=i}return!0===n.verticesNeedUpdate&&(void 0!==(t=this.attributes.position)&&(t.copyVector3sArray(n.vertices),t.needsUpdate=!0),n.verticesNeedUpdate=!1),!0===n.normalsNeedUpdate&&(void 0!==(t=this.attributes.normal)&&(t.copyVector3sArray(n.normals),t.needsUpdate=!0),n.normalsNeedUpdate=!1),!0===n.colorsNeedUpdate&&(void 0!==(t=this.attributes.color)&&(t.copyColorsArray(n.colors),t.needsUpdate=!0),n.colorsNeedUpdate=!1),n.uvsNeedUpdate&&(void 0!==(t=this.attributes.uv)&&(t.copyVector2sArray(n.uvs),t.needsUpdate=!0),n.uvsNeedUpdate=!1),n.lineDistancesNeedUpdate&&(void 0!==(t=this.attributes.lineDistance)&&(t.copyArray(n.lineDistances),t.needsUpdate=!0),n.lineDistancesNeedUpdate=!1),n.groupsNeedUpdate&&(n.computeGroups(e.geometry),this.groups=n.groups,n.groupsNeedUpdate=!1),this},fromGeometry:function(e){return e.__directGeometry=(new ul).fromGeometry(e),this.fromDirectGeometry(e.__directGeometry)},fromDirectGeometry:function(e){var t=new Float32Array(3*e.vertices.length);if(this.setAttribute("position",new il(t,3).copyVector3sArray(e.vertices)),e.normals.length>0){var n=new Float32Array(3*e.normals.length);this.setAttribute("normal",new il(n,3).copyVector3sArray(e.normals))}if(e.colors.length>0){var i=new Float32Array(3*e.colors.length);this.setAttribute("color",new il(i,3).copyColorsArray(e.colors))}if(e.uvs.length>0){var l=new Float32Array(2*e.uvs.length);this.setAttribute("uv",new il(l,2).copyVector2sArray(e.uvs))}if(e.uvs2.length>0){var r=new Float32Array(2*e.uvs2.length);this.setAttribute("uv2",new il(r,2).copyVector2sArray(e.uvs2))}for(var a in this.groups=e.groups,e.morphTargets){for(var o=[],q=e.morphTargets[a],s=0,m=q.length;s<m;s++){var h=q[s],c=new hl(3*h.data.length,3);c.name=h.name,o.push(c.copyVector3sArray(h.data))}this.morphAttributes[a]=o}if(e.skinIndices.length>0){var u=new hl(4*e.skinIndices.length,4);this.setAttribute("skinIndex",u.copyVector4sArray(e.skinIndices))}if(e.skinWeights.length>0){var d=new hl(4*e.skinWeights.length,4);this.setAttribute("skinWeight",d.copyVector4sArray(e.skinWeights))}return null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new gi);var e=this.attributes.position,t=this.morphAttributes.position;if(void 0!==e){if(this.boundingBox.setFromBufferAttribute(e),t)for(var n=0,i=t.length;n<i;n++){var l=t[n];gl.setFromBufferAttribute(l),this.boundingBox.expandByPoint(gl.min),this.boundingBox.expandByPoint(gl.max)}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new bi);var e=this.attributes.position,t=this.morphAttributes.position;if(e){var n=this.boundingSphere.center;if(gl.setFromBufferAttribute(e),t)for(var i=0,l=t.length;i<l;i++){var r=t[i];_l.setFromBufferAttribute(r),gl.expandByPoint(_l.min),gl.expandByPoint(_l.max)}gl.getCenter(n);var a=0;for(i=0,l=e.count;i<l;i++)yl.fromBufferAttribute(e,i),a=Math.max(a,n.distanceToSquared(yl));if(t)for(i=0,l=t.length;i<l;i++)for(var o=0,q=(r=t[i]).count;o<q;o++)yl.fromBufferAttribute(r,o),a=Math.max(a,n.distanceToSquared(yl));this.boundingSphere.radius=Math.sqrt(a),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}},computeFaceNormals:function(){},computeVertexNormals:function(){var e=this.index,t=this.attributes;if(t.position){var n=t.position.array;if(void 0===t.normal)this.setAttribute("normal",new il(new Float32Array(n.length),3));else for(var i=t.normal.array,l=0,r=i.length;l<r;l++)i[l]=0;var a,o,q,s=t.normal.array,m=new Mn,h=new Mn,c=new Mn,u=new Mn,d=new Mn;if(e){var p=e.array;for(l=0,r=e.count;l<r;l+=3)a=3*p[l+0],o=3*p[l+1],q=3*p[l+2],m.fromArray(n,a),h.fromArray(n,o),c.fromArray(n,q),u.subVectors(c,h),d.subVectors(m,h),u.cross(d),s[a]+=u.x,s[a+1]+=u.y,s[a+2]+=u.z,s[o]+=u.x,s[o+1]+=u.y,s[o+2]+=u.z,s[q]+=u.x,s[q+1]+=u.y,s[q+2]+=u.z}else for(l=0,r=n.length;l<r;l+=9)m.fromArray(n,l),h.fromArray(n,l+3),c.fromArray(n,l+6),u.subVectors(c,h),d.subVectors(m,h),u.cross(d),s[l]=u.x,s[l+1]=u.y,s[l+2]=u.z,s[l+3]=u.x,s[l+4]=u.y,s[l+5]=u.z,s[l+6]=u.x,s[l+7]=u.y,s[l+8]=u.z;this.normalizeNormals(),t.normal.needsUpdate=!0}},merge:function(e,t){if(e&&e.isBufferGeometry){void 0===t&&(t=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var n=this.attributes;for(var i in n)if(void 0!==e.attributes[i])for(var l=n[i].array,r=e.attributes[i],a=r.array,o=r.itemSize*t,q=Math.min(a.length,l.length-o),s=0,m=o;s<q;s++,m++)l[m]=a[s];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e)},normalizeNormals:function(){for(var e=this.attributes.normal,t=0,n=e.count;t<n;t++)yl.x=e.getX(t),yl.y=e.getY(t),yl.z=e.getZ(t),yl.normalize(),e.setXYZ(t,yl.x,yl.y,yl.z)},toNonIndexed:function(){function e(e,t){for(var n=e.array,i=e.itemSize,l=new n.constructor(t.length*i),r=0,a=0,o=0,q=t.length;o<q;o++){r=t[o]*i;for(var s=0;s<i;s++)l[a++]=n[r++]}return new il(l,i)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var t=new bl,n=this.index.array,i=this.attributes;for(var l in i){var r=e(i[l],n);t.setAttribute(l,r)}var a=this.morphAttributes;for(l in a){for(var o=[],q=a[l],s=0,m=q.length;s<m;s++){r=e(q[s],n);o.push(r)}t.morphAttributes[l]=o}for(var h=this.groups,c=(s=0,h.length);s<c;s++){var u=h[s];t.addGroup(u.start,u.count,u.materialIndex)}return t},toJSON:function(){var e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),void 0!==this.parameters){var t=this.parameters;for(var n in t)void 0!==t[n]&&(e[n]=t[n]);return e}e.data={attributes:{}};var i=this.index;null!==i&&(e.data.index={type:i.array.constructor.name,array:Array.prototype.slice.call(i.array)});var l=this.attributes;for(var n in l){var r=(c=l[n]).toJSON();""!==c.name&&(r.name=c.name),e.data.attributes[n]=r}var a={},o=!1;for(var n in this.morphAttributes){for(var q=this.morphAttributes[n],s=[],m=0,h=q.length;m<h;m++){var c;r=(c=q[m]).toJSON();""!==c.name&&(r.name=c.name),s.push(r)}s.length>0&&(a[n]=s,o=!0)}o&&(e.data.morphAttributes=a);var u=this.groups;u.length>0&&(e.data.groups=JSON.parse(JSON.stringify(u)));var d=this.boundingSphere;return null!==d&&(e.data.boundingSphere={center:d.center.toArray(),radius:d.radius}),e},clone:function(){return(new bl).copy(this)},copy:function(e){var t,n,i;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;var l=e.index;null!==l&&this.setIndex(l.clone());var r=e.attributes;for(t in r){var a=r[t];this.setAttribute(t,a.clone())}var o=e.morphAttributes;for(t in o){var q=[],s=o[t];for(n=0,i=s.length;n<i;n++)q.push(s[n].clone());this.morphAttributes[t]=q}var m=e.groups;for(n=0,i=m.length;n<i;n++){var h=m[n];this.addGroup(h.start,h.count,h.materialIndex)}var c=e.boundingBox;null!==c&&(this.boundingBox=c.clone());var u=e.boundingSphere;return null!==u&&(this.boundingSphere=u.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});var wl=new Gn,Ml=new Li,zl=new bi,Sl=new Mn,Tl=new Mn,El=new Mn,Al=new Mn,Ll=new Mn,Pl=new Mn,Rl=new Mn,Cl=new Mn,Ol=new Mn,Il=new _n,Dl=new _n,Nl=new _n,Bl=new Mn,Fl=new Mn;function Ul(e,t){ri.call(this),this.type="Mesh",this.geometry=void 0!==e?e:new bl,this.material=void 0!==t?t:new nl({color:16777215*Math.random()}),this.drawMode=At,this.updateMorphTargets()}function Gl(e,t,n,i,l,r,a,o){if(null===(t.side===x?i.intersectTriangle(a,r,l,!0,o):i.intersectTriangle(l,r,a,t.side!==v,o)))return null;Fl.copy(o),Fl.applyMatrix4(e.matrixWorld);var q=n.ray.origin.distanceTo(Fl);return q<n.near||q>n.far?null:{distance:q,point:Fl.clone(),object:e}}function Hl(e,t,n,i,l,r,a,o,q,s,m){Sl.fromBufferAttribute(l,q),Tl.fromBufferAttribute(l,s),El.fromBufferAttribute(l,m);var h=e.morphTargetInfluences;if(t.morphTargets&&r&&h){Rl.set(0,0,0),Cl.set(0,0,0),Ol.set(0,0,0);for(var c=0,u=r.length;c<u;c++){var d=h[c],p=r[c];0!==d&&(Al.fromBufferAttribute(p,q),Ll.fromBufferAttribute(p,s),Pl.fromBufferAttribute(p,m),Rl.addScaledVector(Al.sub(Sl),d),Cl.addScaledVector(Ll.sub(Tl),d),Ol.addScaledVector(Pl.sub(El),d))}Sl.add(Rl),Tl.add(Cl),El.add(Ol)}var f=Gl(e,t,n,i,Sl,Tl,El,Bl);if(f){a&&(Il.fromBufferAttribute(a,q),Dl.fromBufferAttribute(a,s),Nl.fromBufferAttribute(a,m),f.uv=ki.getUV(Bl,Sl,Tl,El,Il,Dl,Nl,new _n)),o&&(Il.fromBufferAttribute(o,q),Dl.fromBufferAttribute(o,s),Nl.fromBufferAttribute(o,m),f.uv2=ki.getUV(Bl,Sl,Tl,El,Il,Dl,Nl,new _n));var x=new $i(q,s,m);ki.getNormal(Sl,Tl,El,x.normal),f.face=x}return f}Ul.prototype=Object.assign(Object.create(ri.prototype),{constructor:Ul,isMesh:!0,setDrawMode:function(e){this.drawMode=e},copy:function(e){return ri.prototype.copy.call(this,e),this.drawMode=e.drawMode,void 0!==e.morphTargetInfluences&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),void 0!==e.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this},updateMorphTargets:function(){var e,t,n,i=this.geometry;if(i.isBufferGeometry){var l=i.morphAttributes,r=Object.keys(l);if(r.length>0){var a=l[r[0]];if(void 0!==a)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},e=0,t=a.length;e<t;e++)n=a[e].name||String(e),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}else{var o=i.morphTargets;void 0!==o&&o.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}},raycast:function(e,t){var n,i=this.geometry,l=this.material,r=this.matrixWorld;if(void 0!==l&&(null===i.boundingSphere&&i.computeBoundingSphere(),zl.copy(i.boundingSphere),zl.applyMatrix4(r),!1!==e.ray.intersectsSphere(zl)&&(wl.getInverse(r),Ml.copy(e.ray).applyMatrix4(wl),null===i.boundingBox||!1!==Ml.intersectsBox(i.boundingBox))))if(this.drawMode===At){if(i.isBufferGeometry){var a,o,q,s,m,h,c,u,d,p=i.index,f=i.attributes.position,x=i.morphAttributes.position,v=i.attributes.uv,g=i.attributes.uv2,_=i.groups,y=i.drawRange;if(null!==p)if(Array.isArray(l))for(s=0,h=_.length;s<h;s++)for(d=l[(u=_[s]).materialIndex],m=Math.max(u.start,y.start),c=Math.min(u.start+u.count,y.start+y.count);m<c;m+=3)a=p.getX(m),o=p.getX(m+1),q=p.getX(m+2),(n=Hl(this,d,e,Ml,f,x,v,g,a,o,q))&&(n.faceIndex=Math.floor(m/3),n.face.materialIndex=u.materialIndex,t.push(n));else for(s=Math.max(0,y.start),h=Math.min(p.count,y.start+y.count);s<h;s+=3)a=p.getX(s),o=p.getX(s+1),q=p.getX(s+2),(n=Hl(this,l,e,Ml,f,x,v,g,a,o,q))&&(n.faceIndex=Math.floor(s/3),t.push(n));else if(void 0!==f)if(Array.isArray(l))for(s=0,h=_.length;s<h;s++)for(d=l[(u=_[s]).materialIndex],m=Math.max(u.start,y.start),c=Math.min(u.start+u.count,y.start+y.count);m<c;m+=3)(n=Hl(this,d,e,Ml,f,x,v,g,a=m,o=m+1,q=m+2))&&(n.faceIndex=Math.floor(m/3),n.face.materialIndex=u.materialIndex,t.push(n));else for(s=Math.max(0,y.start),h=Math.min(f.count,y.start+y.count);s<h;s+=3)(n=Hl(this,l,e,Ml,f,x,v,g,a=s,o=s+1,q=s+2))&&(n.faceIndex=Math.floor(s/3),t.push(n))}else if(i.isGeometry){var b,w,M,z,S=Array.isArray(l),T=i.vertices,E=i.faces,A=i.faceVertexUvs[0];A.length>0&&(z=A);for(var L=0,P=E.length;L<P;L++){var R=E[L],C=S?l[R.materialIndex]:l;if(void 0!==C&&(b=T[R.a],w=T[R.b],M=T[R.c],n=Gl(this,C,e,Ml,b,w,M,Bl))){if(z&&z[L]){var O=z[L];Il.copy(O[0]),Dl.copy(O[1]),Nl.copy(O[2]),n.uv=ki.getUV(Bl,b,w,M,Il,Dl,Nl,new _n)}n.face=R,n.faceIndex=L,t.push(n)}}}}else console.warn("THREE.Mesh: TriangleStripDrawMode and TriangleFanDrawMode are not supported by .raycast().")},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var Vl=0,jl=new Gn,kl=new ri,Wl=new Mn;function Xl(){Object.defineProperty(this,"id",{value:Vl+=2}),this.uuid=gn.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}Xl.prototype=Object.assign(Object.create(fn.prototype),{constructor:Xl,isGeometry:!0,applyMatrix:function(e){for(var t=(new Tn).getNormalMatrix(e),n=0,i=this.vertices.length;n<i;n++){this.vertices[n].applyMatrix4(e)}for(n=0,i=this.faces.length;n<i;n++){var l=this.faces[n];l.normal.applyMatrix3(t).normalize();for(var r=0,a=l.vertexNormals.length;r<a;r++)l.vertexNormals[r].applyMatrix3(t).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(e){return jl.makeRotationX(e),this.applyMatrix(jl),this},rotateY:function(e){return jl.makeRotationY(e),this.applyMatrix(jl),this},rotateZ:function(e){return jl.makeRotationZ(e),this.applyMatrix(jl),this},translate:function(e,t,n){return jl.makeTranslation(e,t,n),this.applyMatrix(jl),this},scale:function(e,t,n){return jl.makeScale(e,t,n),this.applyMatrix(jl),this},lookAt:function(e){return kl.lookAt(e),kl.updateMatrix(),this.applyMatrix(kl.matrix),this},fromBufferGeometry:function(e){var t=this,n=null!==e.index?e.index.array:void 0,i=e.attributes;if(void 0===i.position)return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."),this;var l=i.position.array,r=void 0!==i.normal?i.normal.array:void 0,a=void 0!==i.color?i.color.array:void 0,o=void 0!==i.uv?i.uv.array:void 0,q=void 0!==i.uv2?i.uv2.array:void 0;void 0!==q&&(this.faceVertexUvs[1]=[]);for(var s=0;s<l.length;s+=3)t.vertices.push((new Mn).fromArray(l,s)),void 0!==a&&t.colors.push((new Zi).fromArray(a,s));function m(e,n,i,l){var s=void 0===a?[]:[t.colors[e].clone(),t.colors[n].clone(),t.colors[i].clone()],m=new $i(e,n,i,void 0===r?[]:[(new Mn).fromArray(r,3*e),(new Mn).fromArray(r,3*n),(new Mn).fromArray(r,3*i)],s,l);t.faces.push(m),void 0!==o&&t.faceVertexUvs[0].push([(new _n).fromArray(o,2*e),(new _n).fromArray(o,2*n),(new _n).fromArray(o,2*i)]),void 0!==q&&t.faceVertexUvs[1].push([(new _n).fromArray(q,2*e),(new _n).fromArray(q,2*n),(new _n).fromArray(q,2*i)])}var h=e.groups;if(h.length>0)for(s=0;s<h.length;s++)for(var c=h[s],u=c.start,d=u,p=u+c.count;d<p;d+=3)void 0!==n?m(n[d],n[d+1],n[d+2],c.materialIndex):m(d,d+1,d+2,c.materialIndex);else if(void 0!==n)for(s=0;s<n.length;s+=3)m(n[s],n[s+1],n[s+2]);else for(s=0;s<l.length/3;s+=3)m(s,s+1,s+2);return this.computeFaceNormals(),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(Wl).negate(),this.translate(Wl.x,Wl.y,Wl.z),this},normalize:function(){this.computeBoundingSphere();var e=this.boundingSphere.center,t=this.boundingSphere.radius,n=0===t?1:1/t,i=new Gn;return i.set(n,0,0,-n*e.x,0,n,0,-n*e.y,0,0,n,-n*e.z,0,0,0,1),this.applyMatrix(i),this},computeFaceNormals:function(){for(var e=new Mn,t=new Mn,n=0,i=this.faces.length;n<i;n++){var l=this.faces[n],r=this.vertices[l.a],a=this.vertices[l.b],o=this.vertices[l.c];e.subVectors(o,a),t.subVectors(r,a),e.cross(t),e.normalize(),l.normal.copy(e)}},computeVertexNormals:function(e){var t,n,i,l,r,a;for(void 0===e&&(e=!0),a=new Array(this.vertices.length),t=0,n=this.vertices.length;t<n;t++)a[t]=new Mn;if(e){var o,q,s,m=new Mn,h=new Mn;for(i=0,l=this.faces.length;i<l;i++)r=this.faces[i],o=this.vertices[r.a],q=this.vertices[r.b],s=this.vertices[r.c],m.subVectors(s,q),h.subVectors(o,q),m.cross(h),a[r.a].add(m),a[r.b].add(m),a[r.c].add(m)}else for(this.computeFaceNormals(),i=0,l=this.faces.length;i<l;i++)a[(r=this.faces[i]).a].add(r.normal),a[r.b].add(r.normal),a[r.c].add(r.normal);for(t=0,n=this.vertices.length;t<n;t++)a[t].normalize();for(i=0,l=this.faces.length;i<l;i++){var c=(r=this.faces[i]).vertexNormals;3===c.length?(c[0].copy(a[r.a]),c[1].copy(a[r.b]),c[2].copy(a[r.c])):(c[0]=a[r.a].clone(),c[1]=a[r.b].clone(),c[2]=a[r.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var e,t,n;for(this.computeFaceNormals(),e=0,t=this.faces.length;e<t;e++){var i=(n=this.faces[e]).vertexNormals;3===i.length?(i[0].copy(n.normal),i[1].copy(n.normal),i[2].copy(n.normal)):(i[0]=n.normal.clone(),i[1]=n.normal.clone(),i[2]=n.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var e,t,n,i,l;for(n=0,i=this.faces.length;n<i;n++)for((l=this.faces[n]).__originalFaceNormal?l.__originalFaceNormal.copy(l.normal):l.__originalFaceNormal=l.normal.clone(),l.__originalVertexNormals||(l.__originalVertexNormals=[]),e=0,t=l.vertexNormals.length;e<t;e++)l.__originalVertexNormals[e]?l.__originalVertexNormals[e].copy(l.vertexNormals[e]):l.__originalVertexNormals[e]=l.vertexNormals[e].clone();var r=new Xl;for(r.faces=this.faces,e=0,t=this.morphTargets.length;e<t;e++){if(!this.morphNormals[e]){this.morphNormals[e]={},this.morphNormals[e].faceNormals=[],this.morphNormals[e].vertexNormals=[];var a=this.morphNormals[e].faceNormals,o=this.morphNormals[e].vertexNormals;for(n=0,i=this.faces.length;n<i;n++)q=new Mn,s={a:new Mn,b:new Mn,c:new Mn},a.push(q),o.push(s)}var q,s,m=this.morphNormals[e];for(r.vertices=this.morphTargets[e].vertices,r.computeFaceNormals(),r.computeVertexNormals(),n=0,i=this.faces.length;n<i;n++)l=this.faces[n],q=m.faceNormals[n],s=m.vertexNormals[n],q.copy(l.normal),s.a.copy(l.vertexNormals[0]),s.b.copy(l.vertexNormals[1]),s.c.copy(l.vertexNormals[2])}for(n=0,i=this.faces.length;n<i;n++)(l=this.faces[n]).normal=l.__originalFaceNormal,l.vertexNormals=l.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new gi),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new bi),this.boundingSphere.setFromPoints(this.vertices)},merge:function(e,t,n){if(e&&e.isGeometry){var i,l=this.vertices.length,r=this.vertices,a=e.vertices,o=this.faces,q=e.faces,s=this.colors,m=e.colors;void 0===n&&(n=0),void 0!==t&&(i=(new Tn).getNormalMatrix(t));for(var h=0,c=a.length;h<c;h++){var u=a[h].clone();void 0!==t&&u.applyMatrix4(t),r.push(u)}for(h=0,c=m.length;h<c;h++)s.push(m[h].clone());for(h=0,c=q.length;h<c;h++){var d,p,f,x=q[h],v=x.vertexNormals,g=x.vertexColors;(d=new $i(x.a+l,x.b+l,x.c+l)).normal.copy(x.normal),void 0!==i&&d.normal.applyMatrix3(i).normalize();for(var _=0,y=v.length;_<y;_++)p=v[_].clone(),void 0!==i&&p.applyMatrix3(i).normalize(),d.vertexNormals.push(p);d.color.copy(x.color);for(_=0,y=g.length;_<y;_++)f=g[_],d.vertexColors.push(f.clone());d.materialIndex=x.materialIndex+n,o.push(d)}for(h=0,c=e.faceVertexUvs.length;h<c;h++){var b=e.faceVertexUvs[h];void 0===this.faceVertexUvs[h]&&(this.faceVertexUvs[h]=[]);for(_=0,y=b.length;_<y;_++){for(var w=b[_],M=[],z=0,S=w.length;z<S;z++)M.push(w[z].clone());this.faceVertexUvs[h].push(M)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",e)},mergeMesh:function(e){e&&e.isMesh?(e.matrixAutoUpdate&&e.updateMatrix(),this.merge(e.geometry,e.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",e)},mergeVertices:function(){var e,t,n,i,l,r,a,o,q={},s=[],m=[],h=Math.pow(10,4);for(n=0,i=this.vertices.length;n<i;n++)e=this.vertices[n],void 0===q[t=Math.round(e.x*h)+"_"+Math.round(e.y*h)+"_"+Math.round(e.z*h)]?(q[t]=n,s.push(this.vertices[n]),m[n]=s.length-1):m[n]=m[q[t]];var c=[];for(n=0,i=this.faces.length;n<i;n++){(l=this.faces[n]).a=m[l.a],l.b=m[l.b],l.c=m[l.c],r=[l.a,l.b,l.c];for(var u=0;u<3;u++)if(r[u]===r[(u+1)%3]){c.push(n);break}}for(n=c.length-1;n>=0;n--){var d=c[n];for(this.faces.splice(d,1),a=0,o=this.faceVertexUvs.length;a<o;a++)this.faceVertexUvs[a].splice(d,1)}var p=this.vertices.length-s.length;return this.vertices=s,p},setFromPoints:function(e){this.vertices=[];for(var t=0,n=e.length;t<n;t++){var i=e[t];this.vertices.push(new Mn(i.x,i.y,i.z||0))}return this},sortFacesByMaterialIndex:function(){for(var e=this.faces,t=e.length,n=0;n<t;n++)e[n]._id=n;e.sort((function(e,t){return e.materialIndex-t.materialIndex}));var i,l,r=this.faceVertexUvs[0],a=this.faceVertexUvs[1];r&&r.length===t&&(i=[]),a&&a.length===t&&(l=[]);for(n=0;n<t;n++){var o=e[n]._id;i&&i.push(r[o]),l&&l.push(a[o])}i&&(this.faceVertexUvs[0]=i),l&&(this.faceVertexUvs[1]=l)},toJSON:function(){var e={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),void 0!==this.parameters){var t=this.parameters;for(var n in t)void 0!==t[n]&&(e[n]=t[n]);return e}for(var i=[],l=0;l<this.vertices.length;l++){var r=this.vertices[l];i.push(r.x,r.y,r.z)}var a=[],o=[],q={},s=[],m={},h=[],c={};for(l=0;l<this.faces.length;l++){var u=this.faces[l],d=void 0!==this.faceVertexUvs[0][l],p=u.normal.length()>0,f=u.vertexNormals.length>0,x=1!==u.color.r||1!==u.color.g||1!==u.color.b,v=u.vertexColors.length>0,g=0;if(g=w(g,0,0),g=w(g,1,!0),g=w(g,2,!1),g=w(g,3,d),g=w(g,4,p),g=w(g,5,f),g=w(g,6,x),g=w(g,7,v),a.push(g),a.push(u.a,u.b,u.c),a.push(u.materialIndex),d){var _=this.faceVertexUvs[0][l];a.push(S(_[0]),S(_[1]),S(_[2]))}if(p&&a.push(M(u.normal)),f){var y=u.vertexNormals;a.push(M(y[0]),M(y[1]),M(y[2]))}if(x&&a.push(z(u.color)),v){var b=u.vertexColors;a.push(z(b[0]),z(b[1]),z(b[2]))}}function w(e,t,n){return n?e|1<<t:e&~(1<<t)}function M(e){var t=e.x.toString()+e.y.toString()+e.z.toString();return void 0!==q[t]?q[t]:(q[t]=o.length/3,o.push(e.x,e.y,e.z),q[t])}function z(e){var t=e.r.toString()+e.g.toString()+e.b.toString();return void 0!==m[t]?m[t]:(m[t]=s.length,s.push(e.getHex()),m[t])}function S(e){var t=e.x.toString()+e.y.toString();return void 0!==c[t]?c[t]:(c[t]=h.length/2,h.push(e.x,e.y),c[t])}return e.data={},e.data.vertices=i,e.data.normals=o,s.length>0&&(e.data.colors=s),h.length>0&&(e.data.uvs=[h]),e.data.faces=a,e},clone:function(){return(new Xl).copy(this)},copy:function(e){var t,n,i,l,r,a;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;var o=e.vertices;for(t=0,n=o.length;t<n;t++)this.vertices.push(o[t].clone());var q=e.colors;for(t=0,n=q.length;t<n;t++)this.colors.push(q[t].clone());var s=e.faces;for(t=0,n=s.length;t<n;t++)this.faces.push(s[t].clone());for(t=0,n=e.faceVertexUvs.length;t<n;t++){var m=e.faceVertexUvs[t];for(void 0===this.faceVertexUvs[t]&&(this.faceVertexUvs[t]=[]),i=0,l=m.length;i<l;i++){var h=m[i],c=[];for(r=0,a=h.length;r<a;r++){var u=h[r];c.push(u.clone())}this.faceVertexUvs[t].push(c)}}var d=e.morphTargets;for(t=0,n=d.length;t<n;t++){var p={};if(p.name=d[t].name,void 0!==d[t].vertices)for(p.vertices=[],i=0,l=d[t].vertices.length;i<l;i++)p.vertices.push(d[t].vertices[i].clone());if(void 0!==d[t].normals)for(p.normals=[],i=0,l=d[t].normals.length;i<l;i++)p.normals.push(d[t].normals[i].clone());this.morphTargets.push(p)}var f=e.morphNormals;for(t=0,n=f.length;t<n;t++){var x={};if(void 0!==f[t].vertexNormals)for(x.vertexNormals=[],i=0,l=f[t].vertexNormals.length;i<l;i++){var v=f[t].vertexNormals[i],g={};g.a=v.a.clone(),g.b=v.b.clone(),g.c=v.c.clone(),x.vertexNormals.push(g)}if(void 0!==f[t].faceNormals)for(x.faceNormals=[],i=0,l=f[t].faceNormals.length;i<l;i++)x.faceNormals.push(f[t].faceNormals[i].clone());this.morphNormals.push(x)}var _=e.skinWeights;for(t=0,n=_.length;t<n;t++)this.skinWeights.push(_[t].clone());var y=e.skinIndices;for(t=0,n=y.length;t<n;t++)this.skinIndices.push(y[t].clone());var b=e.lineDistances;for(t=0,n=b.length;t<n;t++)this.lineDistances.push(b[t]);var w=e.boundingBox;null!==w&&(this.boundingBox=w.clone());var M=e.boundingSphere;return null!==M&&(this.boundingSphere=M.clone()),this.elementsNeedUpdate=e.elementsNeedUpdate,this.verticesNeedUpdate=e.verticesNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.lineDistancesNeedUpdate=e.lineDistancesNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});class Yl extends Xl{constructor(e,t,n,i,l,r){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:l,depthSegments:r},this.fromBufferGeometry(new Zl(e,t,n,i,l,r)),this.mergeVertices()}}class Zl extends bl{constructor(e,t,n,i,l,r){super(),this.type="BoxBufferGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:l,depthSegments:r};var a=this;e=e||1,t=t||1,n=n||1,i=Math.floor(i)||1,l=Math.floor(l)||1,r=Math.floor(r)||1;var o=[],q=[],s=[],m=[],h=0,c=0;function u(e,t,n,i,l,r,u,d,p,f,x){var v,g,_=r/p,y=u/f,b=r/2,w=u/2,M=d/2,z=p+1,S=f+1,T=0,E=0,A=new Mn;for(g=0;g<S;g++){var L=g*y-w;for(v=0;v<z;v++){var P=v*_-b;A[e]=P*i,A[t]=L*l,A[n]=M,q.push(A.x,A.y,A.z),A[e]=0,A[t]=0,A[n]=d>0?1:-1,s.push(A.x,A.y,A.z),m.push(v/p),m.push(1-g/f),T+=1}}for(g=0;g<f;g++)for(v=0;v<p;v++){var R=h+v+z*g,C=h+v+z*(g+1),O=h+(v+1)+z*(g+1),I=h+(v+1)+z*g;o.push(R,C,I),o.push(C,O,I),E+=6}a.addGroup(c,E,x),c+=E,h+=T}u("z","y","x",-1,-1,n,t,e,r,l,0),u("z","y","x",1,-1,n,t,-e,r,l,1),u("x","z","y",1,1,e,n,t,i,r,2),u("x","z","y",1,-1,e,n,-t,i,r,3),u("x","y","z",1,-1,e,t,n,i,l,4),u("x","y","z",-1,-1,e,t,-n,i,l,5),this.setIndex(o),this.setAttribute("position",new hl(q,3)),this.setAttribute("normal",new hl(s,3)),this.setAttribute("uv",new hl(m,2))}}function Jl(e){var t={};for(var n in e)for(var i in t[n]={},e[n]){var l=e[n][i];l&&(l.isColor||l.isMatrix3||l.isMatrix4||l.isVector2||l.isVector3||l.isVector4||l.isTexture)?t[n][i]=l.clone():Array.isArray(l)?t[n][i]=l.slice():t[n][i]=l}return t}function Ql(e){for(var t={},n=0;n<e.length;n++){var i=Jl(e[n]);for(var l in i)t[l]=i[l]}return t}var Kl={clone:Jl,merge:Ql},$l="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",er="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";function tr(e){tl.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader=$l,this.fragmentShader=er,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,void 0!==e&&(void 0!==e.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(e))}function nr(){ri.call(this),this.type="Camera",this.matrixWorldInverse=new Gn,this.projectionMatrix=new Gn,this.projectionMatrixInverse=new Gn}function ir(e,t,n,i){nr.call(this),this.type="PerspectiveCamera",this.fov=void 0!==e?e:50,this.zoom=1,this.near=void 0!==n?n:.1,this.far=void 0!==i?i:2e3,this.focus=10,this.aspect=void 0!==t?t:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}tr.prototype=Object.create(tl.prototype),tr.prototype.constructor=tr,tr.prototype.isShaderMaterial=!0,tr.prototype.copy=function(e){return tl.prototype.copy.call(this,e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Jl(e.uniforms),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.lights=e.lights,this.clipping=e.clipping,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.extensions=e.extensions,this},tr.prototype.toJSON=function(e){var t=tl.prototype.toJSON.call(this,e);for(var n in t.uniforms={},this.uniforms){var i=this.uniforms[n].value;i&&i.isTexture?t.uniforms[n]={type:"t",value:i.toJSON(e).uuid}:i&&i.isColor?t.uniforms[n]={type:"c",value:i.getHex()}:i&&i.isVector2?t.uniforms[n]={type:"v2",value:i.toArray()}:i&&i.isVector3?t.uniforms[n]={type:"v3",value:i.toArray()}:i&&i.isVector4?t.uniforms[n]={type:"v4",value:i.toArray()}:i&&i.isMatrix3?t.uniforms[n]={type:"m3",value:i.toArray()}:i&&i.isMatrix4?t.uniforms[n]={type:"m4",value:i.toArray()}:t.uniforms[n]={value:i}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;var l={};for(var r in this.extensions)!0===this.extensions[r]&&(l[r]=!0);return Object.keys(l).length>0&&(t.extensions=l),t},nr.prototype=Object.assign(Object.create(ri.prototype),{constructor:nr,isCamera:!0,copy:function(e,t){return ri.prototype.copy.call(this,e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this},getWorldDirection:function(e){void 0===e&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),e=new Mn),this.updateMatrixWorld(!0);var t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()},updateMatrixWorld:function(e){ri.prototype.updateMatrixWorld.call(this,e),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),ir.prototype=Object.assign(Object.create(nr.prototype),{constructor:ir,isPerspectiveCamera:!0,copy:function(e,t){return nr.prototype.copy.call(this,e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=null===e.view?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this},setFocalLength:function(e){var t=.5*this.getFilmHeight()/e;this.fov=2*gn.RAD2DEG*Math.atan(t),this.updateProjectionMatrix()},getFocalLength:function(){var e=Math.tan(.5*gn.DEG2RAD*this.fov);return.5*this.getFilmHeight()/e},getEffectiveFOV:function(){return 2*gn.RAD2DEG*Math.atan(Math.tan(.5*gn.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(e,t,n,i,l,r){this.aspect=e/t,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=l,this.view.height=r,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=this.near,t=e*Math.tan(.5*gn.DEG2RAD*this.fov)/this.zoom,n=2*t,i=this.aspect*n,l=-.5*i,r=this.view;if(null!==this.view&&this.view.enabled){var a=r.fullWidth,o=r.fullHeight;l+=r.offsetX*i/a,t-=r.offsetY*n/o,i*=r.width/a,n*=r.height/o}var q=this.filmOffset;0!==q&&(l+=e*q/this.getFilmWidth()),this.projectionMatrix.makePerspective(l,l+i,t,t-n,e,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(e){var t=ri.prototype.toJSON.call(this,e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}});var lr=90,rr=1;function ar(e,t,n,i){ri.call(this),this.type="CubeCamera";var l=new ir(lr,rr,e,t);l.up.set(0,-1,0),l.lookAt(new Mn(1,0,0)),this.add(l);var r=new ir(lr,rr,e,t);r.up.set(0,-1,0),r.lookAt(new Mn(-1,0,0)),this.add(r);var a=new ir(lr,rr,e,t);a.up.set(0,0,1),a.lookAt(new Mn(0,1,0)),this.add(a);var o=new ir(lr,rr,e,t);o.up.set(0,0,-1),o.lookAt(new Mn(0,-1,0)),this.add(o);var q=new ir(lr,rr,e,t);q.up.set(0,-1,0),q.lookAt(new Mn(0,0,1)),this.add(q);var s=new ir(lr,rr,e,t);s.up.set(0,-1,0),s.lookAt(new Mn(0,0,-1)),this.add(s),i=i||{format:Ve,magFilter:ze,minFilter:ze},this.renderTarget=new or(n,n,i),this.renderTarget.texture.name="CubeCamera",this.update=function(e,t){null===this.parent&&this.updateMatrixWorld();var n=e.getRenderTarget(),i=this.renderTarget,m=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,e.setRenderTarget(i,0),e.render(t,l),e.setRenderTarget(i,1),e.render(t,r),e.setRenderTarget(i,2),e.render(t,a),e.setRenderTarget(i,3),e.render(t,o),e.setRenderTarget(i,4),e.render(t,q),i.texture.generateMipmaps=m,e.setRenderTarget(i,5),e.render(t,s),e.setRenderTarget(n)},this.clear=function(e,t,n,i){for(var l=e.getRenderTarget(),r=this.renderTarget,a=0;a<6;a++)e.setRenderTarget(r,a),e.clear(t,n,i);e.setRenderTarget(l)}}function or(e,t,n){Rn.call(this,e,t,n)}function qr(e,t,n,i,l,r,a,o,q,s,m,h){Ln.call(this,null,r,a,o,q,s,i,l,m,h),this.image={data:e||null,width:t||1,height:n||1},this.magFilter=void 0!==q?q:_e,this.minFilter=void 0!==s?s:_e,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}ar.prototype=Object.create(ri.prototype),ar.prototype.constructor=ar,or.prototype=Object.create(Rn.prototype),or.prototype.constructor=or,or.prototype.isWebGLRenderTargetCube=!0,or.prototype.fromEquirectangularTexture=function(e,t){this.texture.type=t.type,this.texture.format=t.format,this.texture.encoding=t.encoding;var n=new ai,i={uniforms:{tEquirect:{value:null}},vertexShader:["varying vec3 vWorldDirection;","vec3 transformDirection( in vec3 dir, in mat4 matrix ) {","\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );","}","void main() {","\tvWorldDirection = transformDirection( position, modelMatrix );","\t#include <begin_vertex>","\t#include <project_vertex>","}"].join("\n"),fragmentShader:["uniform sampler2D tEquirect;","varying vec3 vWorldDirection;","#define RECIPROCAL_PI 0.31830988618","#define RECIPROCAL_PI2 0.15915494","void main() {","\tvec3 direction = normalize( vWorldDirection );","\tvec2 sampleUV;","\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;","\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;","\tgl_FragColor = texture2D( tEquirect, sampleUV );","}"].join("\n")},l=new tr({type:"CubemapFromEquirect",uniforms:Jl(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,side:x,blending:M});l.uniforms.tEquirect.value=t;var r=new Ul(new Zl(5,5,5),l);n.add(r);var a=new ar(1,10,1);return a.renderTarget=this,a.renderTarget.texture.name="CubeCameraTexture",a.update(e,n),r.geometry.dispose(),r.material.dispose(),this},qr.prototype=Object.create(Ln.prototype),qr.prototype.constructor=qr,qr.prototype.isDataTexture=!0;var sr=new bi,mr=new Mn;function hr(e,t,n,i,l,r){this.planes=[void 0!==e?e:new Oi,void 0!==t?t:new Oi,void 0!==n?n:new Oi,void 0!==i?i:new Oi,void 0!==l?l:new Oi,void 0!==r?r:new Oi]}Object.assign(hr.prototype,{set:function(e,t,n,i,l,r){var a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(n),a[3].copy(i),a[4].copy(l),a[5].copy(r),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){for(var t=this.planes,n=0;n<6;n++)t[n].copy(e.planes[n]);return this},setFromMatrix:function(e){var t=this.planes,n=e.elements,i=n[0],l=n[1],r=n[2],a=n[3],o=n[4],q=n[5],s=n[6],m=n[7],h=n[8],c=n[9],u=n[10],d=n[11],p=n[12],f=n[13],x=n[14],v=n[15];return t[0].setComponents(a-i,m-o,d-h,v-p).normalize(),t[1].setComponents(a+i,m+o,d+h,v+p).normalize(),t[2].setComponents(a+l,m+q,d+c,v+f).normalize(),t[3].setComponents(a-l,m-q,d-c,v-f).normalize(),t[4].setComponents(a-r,m-s,d-u,v-x).normalize(),t[5].setComponents(a+r,m+s,d+u,v+x).normalize(),this},intersectsObject:function(e){var t=e.geometry;return null===t.boundingSphere&&t.computeBoundingSphere(),sr.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere(sr)},intersectsSprite:function(e){return sr.center.set(0,0,0),sr.radius=.7071067811865476,sr.applyMatrix4(e.matrixWorld),this.intersectsSphere(sr)},intersectsSphere:function(e){for(var t=this.planes,n=e.center,i=-e.radius,l=0;l<6;l++){if(t[l].distanceToPoint(n)<i)return!1}return!0},intersectsBox:function(e){for(var t=this.planes,n=0;n<6;n++){var i=t[n];if(mr.x=i.normal.x>0?e.max.x:e.min.x,mr.y=i.normal.y>0?e.max.y:e.min.y,mr.z=i.normal.z>0?e.max.z:e.min.z,i.distanceToPoint(mr)<0)return!1}return!0},containsPoint:function(e){for(var t=this.planes,n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}});var cr={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif",color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\t\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t}  else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) { \n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = saturate( clearcoat );\tmaterial.clearcoatRoughness = clamp( clearcoatRoughness, 0.04, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\t#ifdef USE_TANGENT\n\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, normalScale, normalMap );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec2 normalScale, in sampler2D normalMap ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy *= normalScale;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tbool frontFacing = dot( cross( S, T ), N ) > 0.0;\n\t\t\tmapN.xy *= ( float( frontFacing ) * 2.0 - 1.0 );\n\t\t#else\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 vTBN = mat3( tangent, bitangent, clearcoatNormal );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = clearcoatNormalScale * mapN.xy;\n\t\tclearcoatNormal = normalize( vTBN * mapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatNormalScale, clearcoatNormalMap );\n\t#endif\n#endif",clearcoat_normalmap_pars_fragment:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 encodeHalfRGBA ( vec2 v ) {\n\tvec4 encoded = vec4( 0.0 );\n\tconst vec2 offset = vec2( 1.0 / 255.0, 0.0 );\n\tencoded.xy = vec2( v.x, fract( v.x * 255.0 ) );\n\tencoded.xy = encoded.xy - ( encoded.yy * offset );\n\tencoded.zw = vec2( v.y, fract( v.y * 255.0 ) );\n\tencoded.zw = encoded.zw - ( encoded.ww * offset );\n\treturn encoded;\n}\nvec2 decodeHalfRGBA( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn decodeHalfRGBA( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = ( floor( uv * size - 0.5 ) + 0.5 ) * texelSize;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"},ur={common:{diffuse:{value:new Zi(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new Tn},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new _n(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Zi(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new Zi(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Tn}},sprite:{diffuse:{value:new Zi(15658734)},opacity:{value:1},center:{value:new _n(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Tn}}},dr={basic:{uniforms:Ql([ur.common,ur.specularmap,ur.envmap,ur.aomap,ur.lightmap,ur.fog]),vertexShader:cr.meshbasic_vert,fragmentShader:cr.meshbasic_frag},lambert:{uniforms:Ql([ur.common,ur.specularmap,ur.envmap,ur.aomap,ur.lightmap,ur.emissivemap,ur.fog,ur.lights,{emissive:{value:new Zi(0)}}]),vertexShader:cr.meshlambert_vert,fragmentShader:cr.meshlambert_frag},phong:{uniforms:Ql([ur.common,ur.specularmap,ur.envmap,ur.aomap,ur.lightmap,ur.emissivemap,ur.bumpmap,ur.normalmap,ur.displacementmap,ur.gradientmap,ur.fog,ur.lights,{emissive:{value:new Zi(0)},specular:{value:new Zi(1118481)},shininess:{value:30}}]),vertexShader:cr.meshphong_vert,fragmentShader:cr.meshphong_frag},standard:{uniforms:Ql([ur.common,ur.envmap,ur.aomap,ur.lightmap,ur.emissivemap,ur.bumpmap,ur.normalmap,ur.displacementmap,ur.roughnessmap,ur.metalnessmap,ur.fog,ur.lights,{emissive:{value:new Zi(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:cr.meshphysical_vert,fragmentShader:cr.meshphysical_frag},matcap:{uniforms:Ql([ur.common,ur.bumpmap,ur.normalmap,ur.displacementmap,ur.fog,{matcap:{value:null}}]),vertexShader:cr.meshmatcap_vert,fragmentShader:cr.meshmatcap_frag},points:{uniforms:Ql([ur.points,ur.fog]),vertexShader:cr.points_vert,fragmentShader:cr.points_frag},dashed:{uniforms:Ql([ur.common,ur.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:cr.linedashed_vert,fragmentShader:cr.linedashed_frag},depth:{uniforms:Ql([ur.common,ur.displacementmap]),vertexShader:cr.depth_vert,fragmentShader:cr.depth_frag},normal:{uniforms:Ql([ur.common,ur.bumpmap,ur.normalmap,ur.displacementmap,{opacity:{value:1}}]),vertexShader:cr.normal_vert,fragmentShader:cr.normal_frag},sprite:{uniforms:Ql([ur.sprite,ur.fog]),vertexShader:cr.sprite_vert,fragmentShader:cr.sprite_frag},background:{uniforms:{uvTransform:{value:new Tn},t2D:{value:null}},vertexShader:cr.background_vert,fragmentShader:cr.background_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:cr.cube_vert,fragmentShader:cr.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:cr.equirect_vert,fragmentShader:cr.equirect_frag},distanceRGBA:{uniforms:Ql([ur.common,ur.displacementmap,{referencePosition:{value:new Mn},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:cr.distanceRGBA_vert,fragmentShader:cr.distanceRGBA_frag},shadow:{uniforms:Ql([ur.lights,ur.fog,{color:{value:new Zi(0)},opacity:{value:1}}]),vertexShader:cr.shadow_vert,fragmentShader:cr.shadow_frag}};function pr(){var e=null,t=!1,n=null;function i(l,r){!1!==t&&(n(l,r),e.requestAnimationFrame(i))}return{start:function(){!0!==t&&null!==n&&(e.requestAnimationFrame(i),t=!0)},stop:function(){t=!1},setAnimationLoop:function(e){n=e},setContext:function(t){e=t}}}function fr(e){var t=new WeakMap;return{get:function(e){return e.isInterleavedBufferAttribute&&(e=e.data),t.get(e)},remove:function(n){n.isInterleavedBufferAttribute&&(n=n.data);var i=t.get(n);i&&(e.deleteBuffer(i.buffer),t.delete(n))},update:function(n,i){n.isInterleavedBufferAttribute&&(n=n.data);var l=t.get(n);void 0===l?t.set(n,function(t,n){var i=t.array,l=t.usage,r=e.createBuffer();e.bindBuffer(n,r),e.bufferData(n,i,l),t.onUploadCallback();var a=5126;return i instanceof Float32Array?a=5126:i instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):i instanceof Uint16Array?a=5123:i instanceof Int16Array?a=5122:i instanceof Uint32Array?a=5125:i instanceof Int32Array?a=5124:i instanceof Int8Array?a=5120:i instanceof Uint8Array&&(a=5121),{buffer:r,type:a,bytesPerElement:i.BYTES_PER_ELEMENT,version:t.version}}(n,i)):l.version<n.version&&(!function(t,n,i){var l=n.array,r=n.updateRange;e.bindBuffer(i,t),-1===r.count?e.bufferSubData(i,0,l):(e.bufferSubData(i,r.offset*l.BYTES_PER_ELEMENT,l.subarray(r.offset,r.offset+r.count)),r.count=-1)}(l.buffer,n,i),l.version=n.version)}}}function xr(e,t,n,i){Xl.call(this),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i},this.fromBufferGeometry(new vr(e,t,n,i)),this.mergeVertices()}function vr(e,t,n,i){bl.call(this),this.type="PlaneBufferGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};var l,r,a=(e=e||1)/2,o=(t=t||1)/2,q=Math.floor(n)||1,s=Math.floor(i)||1,m=q+1,h=s+1,c=e/q,u=t/s,d=[],p=[],f=[],x=[];for(r=0;r<h;r++){var v=r*u-o;for(l=0;l<m;l++){var g=l*c-a;p.push(g,-v,0),f.push(0,0,1),x.push(l/q),x.push(1-r/s)}}for(r=0;r<s;r++)for(l=0;l<q;l++){var _=l+m*r,y=l+m*(r+1),b=l+1+m*(r+1),w=l+1+m*r;d.push(_,y,w),d.push(y,b,w)}this.setIndex(d),this.setAttribute("position",new hl(p,3)),this.setAttribute("normal",new hl(f,3)),this.setAttribute("uv",new hl(x,2))}function gr(e,t,n,i){var l,r,a=new Zi(0),o=0,q=null,s=0;function m(e,n){t.buffers.color.setClear(e.r,e.g,e.b,n,i)}return{getClearColor:function(){return a},setClearColor:function(e,t){a.set(e),m(a,o=void 0!==t?t:1)},getClearAlpha:function(){return o},setClearAlpha:function(e){m(a,o=e)},render:function(t,i,h,c){var u=i.background,d=e.vr,p=d.getSession&&d.getSession();if(p&&"additive"===p.environmentBlendMode&&(u=null),null===u?(m(a,o),q=null,s=0):u&&u.isColor&&(m(u,1),c=!0,q=null,s=0),(e.autoClear||c)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),u&&(u.isCubeTexture||u.isWebGLRenderTargetCube)){void 0===r&&((r=new Ul(new Zl(1,1,1),new tr({type:"BackgroundCubeMaterial",uniforms:Jl(dr.cube.uniforms),vertexShader:dr.cube.vertexShader,fragmentShader:dr.cube.fragmentShader,side:x,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),r.geometry.deleteAttribute("uv"),r.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(r.material,"map",{get:function(){return this.uniforms.tCube.value}}),n.update(r));var v=u.isWebGLRenderTargetCube?u.texture:u;r.material.uniforms.tCube.value=v,r.material.uniforms.tFlip.value=u.isWebGLRenderTargetCube?1:-1,q===u&&s===v.version||(r.material.needsUpdate=!0,q=u,s=v.version),t.unshift(r,r.geometry,r.material,0,0,null)}else u&&u.isTexture&&(void 0===l&&((l=new Ul(new vr(2,2),new tr({type:"BackgroundMaterial",uniforms:Jl(dr.background.uniforms),vertexShader:dr.background.vertexShader,fragmentShader:dr.background.fragmentShader,side:f,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(l)),l.material.uniforms.t2D.value=u,!0===u.matrixAutoUpdate&&u.updateMatrix(),l.material.uniforms.uvTransform.value.copy(u.matrix),q===u&&s===u.version||(l.material.needsUpdate=!0,q=u,s=u.version),t.unshift(l,l.geometry,l.material,0,0,null))}}}function _r(e,t,n,i){var l,r=i.isWebGL2;this.setMode=function(e){l=e},this.render=function(t,i){e.drawArrays(l,t,i),n.update(i,l)},this.renderInstances=function(i,a,o,q){if(0!==q){var s,m;if(r)s=e,m="drawArraysInstanced";else if(m="drawArraysInstancedANGLE",null===(s=t.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");s[m](l,a,o,q),n.update(o,l,q)}}}function yr(e,t,n){var i;function l(t){if("highp"===t){if(e.getShaderPrecisionFormat(35633,36338).precision>0&&e.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(35633,36337).precision>0&&e.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}var r="undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&e instanceof WebGL2ComputeRenderingContext,a=void 0!==n.precision?n.precision:"highp",o=l(a);o!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",o,"instead."),a=o);var q=!0===n.logarithmicDepthBuffer,s=e.getParameter(34930),m=e.getParameter(35660),h=e.getParameter(3379),c=e.getParameter(34076),u=e.getParameter(34921),d=e.getParameter(36347),p=e.getParameter(36348),f=e.getParameter(36349),x=m>0,v=r||!!t.get("OES_texture_float");return{isWebGL2:r,getMaxAnisotropy:function(){if(void 0!==i)return i;var n=t.get("EXT_texture_filter_anisotropic");return i=null!==n?e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:l,precision:a,logarithmicDepthBuffer:q,maxTextures:s,maxVertexTextures:m,maxTextureSize:h,maxCubemapSize:c,maxAttributes:u,maxVertexUniforms:d,maxVaryings:p,maxFragmentUniforms:f,vertexTextures:x,floatFragmentTextures:v,floatVertexTextures:x&&v,maxSamples:r?e.getParameter(36183):0}}function br(){var e=this,t=null,n=0,i=!1,l=!1,r=new Oi,a=new Tn,o={value:null,needsUpdate:!1};function q(){o.value!==t&&(o.value=t,o.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function s(t,n,i,l){var q=null!==t?t.length:0,s=null;if(0!==q){if(s=o.value,!0!==l||null===s){var m=i+4*q,h=n.matrixWorldInverse;a.getNormalMatrix(h),(null===s||s.length<m)&&(s=new Float32Array(m));for(var c=0,u=i;c!==q;++c,u+=4)r.copy(t[c]).applyMatrix4(h,a),r.normal.toArray(s,u),s[u+3]=r.constant}o.value=s,o.needsUpdate=!0}return e.numPlanes=q,s}this.uniform=o,this.numPlanes=0,this.numIntersection=0,this.init=function(e,l,r){var a=0!==e.length||l||0!==n||i;return i=l,t=s(e,r,0),n=e.length,a},this.beginShadows=function(){l=!0,s(null)},this.endShadows=function(){l=!1,q()},this.setState=function(e,r,a,m,h,c){if(!i||null===e||0===e.length||l&&!a)l?s(null):q();else{var u=l?0:n,d=4*u,p=h.clippingState||null;o.value=p,p=s(e,m,d,c);for(var f=0;f!==d;++f)p[f]=t[f];h.clippingState=p,this.numIntersection=r?this.numPlanes:0,this.numPlanes+=u}}}function wr(e){var t={};return{get:function(n){if(void 0!==t[n])return t[n];var i;switch(n){case"WEBGL_depth_texture":i=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=e.getExtension(n)}return null===i&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),t[n]=i,i}}}function Mr(e,t,n){var i=new WeakMap,l=new WeakMap;function r(e){var a=e.target,o=i.get(a);for(var q in null!==o.index&&t.remove(o.index),o.attributes)t.remove(o.attributes[q]);a.removeEventListener("dispose",r),i.delete(a);var s=l.get(o);s&&(t.remove(s),l.delete(o)),n.memory.geometries--}function a(e){var n=[],i=e.index,r=e.attributes.position,a=0;if(null!==i){var o=i.array;a=i.version;for(var q=0,s=o.length;q<s;q+=3){var m=o[q+0],h=o[q+1],c=o[q+2];n.push(m,h,h,c,c,m)}}else{o=r.array;a=r.version;for(q=0,s=o.length/3-1;q<s;q+=3){m=q+0,h=q+1,c=q+2;n.push(m,h,h,c,c,m)}}var u=new(dl(n)>65535?ml:ql)(n,1);u.version=a,t.update(u,34963);var d=l.get(e);d&&t.remove(d),l.set(e,u)}return{get:function(e,t){var l=i.get(t);return l||(t.addEventListener("dispose",r),t.isBufferGeometry?l=t:t.isGeometry&&(void 0===t._bufferGeometry&&(t._bufferGeometry=(new bl).setFromObject(e)),l=t._bufferGeometry),i.set(t,l),n.memory.geometries++,l)},update:function(e){var n=e.index,i=e.attributes;for(var l in null!==n&&t.update(n,34963),i)t.update(i[l],34962);var r=e.morphAttributes;for(var l in r)for(var a=r[l],o=0,q=a.length;o<q;o++)t.update(a[o],34962)},getWireframeAttribute:function(e){var t=l.get(e);if(t){var n=e.index;null!==n&&t.version<n.version&&a(e)}else a(e);return l.get(e)}}}function zr(e,t,n,i){var l,r,a,o=i.isWebGL2;this.setMode=function(e){l=e},this.setIndex=function(e){r=e.type,a=e.bytesPerElement},this.render=function(t,i){e.drawElements(l,i,r,t*a),n.update(i,l)},this.renderInstances=function(i,q,s,m){if(0!==m){var h,c;if(o)h=e,c="drawElementsInstanced";else if(c="drawElementsInstancedANGLE",null===(h=t.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");h[c](l,s,r,q*a,m),n.update(s,l,m)}}}function Sr(e){var t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(e,n,i){switch(i=i||1,t.calls++,n){case 4:t.triangles+=i*(e/3);break;case 5:case 6:t.triangles+=i*(e-2);break;case 1:t.lines+=i*(e/2);break;case 3:t.lines+=i*(e-1);break;case 2:t.lines+=i*e;break;case 0:t.points+=i*e;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",n)}}}}function Tr(e,t){return Math.abs(t[1])-Math.abs(e[1])}function Er(e){var t={},n=new Float32Array(8);return{update:function(i,l,r,a){var o=i.morphTargetInfluences,q=o.length,s=t[l.id];if(void 0===s){s=[];for(var m=0;m<q;m++)s[m]=[m,0];t[l.id]=s}var h=r.morphTargets&&l.morphAttributes.position,c=r.morphNormals&&l.morphAttributes.normal;for(m=0;m<q;m++){0!==(u=s[m])[1]&&(h&&l.deleteAttribute("morphTarget"+m),c&&l.deleteAttribute("morphNormal"+m))}for(m=0;m<q;m++){(u=s[m])[0]=m,u[1]=o[m]}for(s.sort(Tr),m=0;m<8;m++){var u;if(u=s[m]){var d=u[0],p=u[1];if(p){h&&l.setAttribute("morphTarget"+m,h[d]),c&&l.setAttribute("morphNormal"+m,c[d]),n[m]=p;continue}}n[m]=0}a.getUniforms().setValue(e,"morphTargetInfluences",n)}}}function Ar(e,t,n,i){var l={};return{update:function(e){var r=i.render.frame,a=e.geometry,o=t.get(e,a);return l[o.id]!==r&&(a.isGeometry&&o.updateFromObject(e),t.update(o),l[o.id]=r),e.isInstancedMesh&&n.update(e.instanceMatrix,34962),o},dispose:function(){l={}}}}function Lr(e,t,n,i,l,r,a,o,q,s){e=void 0!==e?e:[],t=void 0!==t?t:me,a=void 0!==a?a:Ve,Ln.call(this,e,t,n,i,l,r,a,o,q,s),this.flipY=!1}function Pr(e,t,n,i){Ln.call(this,null),this.image={data:e||null,width:t||1,height:n||1,depth:i||1},this.magFilter=_e,this.minFilter=_e,this.wrapR=ve,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}function Rr(e,t,n,i){Ln.call(this,null),this.image={data:e||null,width:t||1,height:n||1,depth:i||1},this.magFilter=_e,this.minFilter=_e,this.wrapR=ve,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}dr.physical={uniforms:Ql([dr.standard.uniforms,{transparency:{value:0},clearcoat:{value:0},clearcoatRoughness:{value:0},sheen:{value:new Zi(0)},clearcoatNormalScale:{value:new _n(1,1)},clearcoatNormalMap:{value:null}}]),vertexShader:cr.meshphysical_vert,fragmentShader:cr.meshphysical_frag},xr.prototype=Object.create(Xl.prototype),xr.prototype.constructor=xr,vr.prototype=Object.create(bl.prototype),vr.prototype.constructor=vr,Lr.prototype=Object.create(Ln.prototype),Lr.prototype.constructor=Lr,Lr.prototype.isCubeTexture=!0,Object.defineProperty(Lr.prototype,"images",{get:function(){return this.image},set:function(e){this.image=e}}),Pr.prototype=Object.create(Ln.prototype),Pr.prototype.constructor=Pr,Pr.prototype.isDataTexture2DArray=!0,Rr.prototype=Object.create(Ln.prototype),Rr.prototype.constructor=Rr,Rr.prototype.isDataTexture3D=!0;var Cr=new Ln,Or=new Pr,Ir=new Rr,Dr=new Lr,Nr=[],Br=[],Fr=new Float32Array(16),Ur=new Float32Array(9),Gr=new Float32Array(4);function Hr(e,t,n){var i=e[0];if(i<=0||i>0)return e;var l=t*n,r=Nr[l];if(void 0===r&&(r=new Float32Array(l),Nr[l]=r),0!==t){i.toArray(r,0);for(var a=1,o=0;a!==t;++a)o+=n,e[a].toArray(r,o)}return r}function Vr(e,t){if(e.length!==t.length)return!1;for(var n=0,i=e.length;n<i;n++)if(e[n]!==t[n])return!1;return!0}function jr(e,t){for(var n=0,i=t.length;n<i;n++)e[n]=t[n]}function kr(e,t){var n=Br[t];void 0===n&&(n=new Int32Array(t),Br[t]=n);for(var i=0;i!==t;++i)n[i]=e.allocateTextureUnit();return n}function Wr(e,t){var n=this.cache;n[0]!==t&&(e.uniform1f(this.addr,t),n[0]=t)}function Xr(e,t){var n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2f(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(Vr(n,t))return;e.uniform2fv(this.addr,t),jr(n,t)}}function Yr(e,t){var n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3f(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else if(void 0!==t.r)n[0]===t.r&&n[1]===t.g&&n[2]===t.b||(e.uniform3f(this.addr,t.r,t.g,t.b),n[0]=t.r,n[1]=t.g,n[2]=t.b);else{if(Vr(n,t))return;e.uniform3fv(this.addr,t),jr(n,t)}}function Zr(e,t){var n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(Vr(n,t))return;e.uniform4fv(this.addr,t),jr(n,t)}}function Jr(e,t){var n=this.cache,i=t.elements;if(void 0===i){if(Vr(n,t))return;e.uniformMatrix2fv(this.addr,!1,t),jr(n,t)}else{if(Vr(n,i))return;Gr.set(i),e.uniformMatrix2fv(this.addr,!1,Gr),jr(n,i)}}function Qr(e,t){var n=this.cache,i=t.elements;if(void 0===i){if(Vr(n,t))return;e.uniformMatrix3fv(this.addr,!1,t),jr(n,t)}else{if(Vr(n,i))return;Ur.set(i),e.uniformMatrix3fv(this.addr,!1,Ur),jr(n,i)}}function Kr(e,t){var n=this.cache,i=t.elements;if(void 0===i){if(Vr(n,t))return;e.uniformMatrix4fv(this.addr,!1,t),jr(n,t)}else{if(Vr(n,i))return;Fr.set(i),e.uniformMatrix4fv(this.addr,!1,Fr),jr(n,i)}}function $r(e,t,n){var i=this.cache,l=n.allocateTextureUnit();i[0]!==l&&(e.uniform1i(this.addr,l),i[0]=l),n.safeSetTexture2D(t||Cr,l)}function ea(e,t,n){var i=this.cache,l=n.allocateTextureUnit();i[0]!==l&&(e.uniform1i(this.addr,l),i[0]=l),n.setTexture2DArray(t||Or,l)}function ta(e,t,n){var i=this.cache,l=n.allocateTextureUnit();i[0]!==l&&(e.uniform1i(this.addr,l),i[0]=l),n.setTexture3D(t||Ir,l)}function na(e,t,n){var i=this.cache,l=n.allocateTextureUnit();i[0]!==l&&(e.uniform1i(this.addr,l),i[0]=l),n.safeSetTextureCube(t||Dr,l)}function ia(e,t){var n=this.cache;n[0]!==t&&(e.uniform1i(this.addr,t),n[0]=t)}function la(e,t){var n=this.cache;Vr(n,t)||(e.uniform2iv(this.addr,t),jr(n,t))}function ra(e,t){var n=this.cache;Vr(n,t)||(e.uniform3iv(this.addr,t),jr(n,t))}function aa(e,t){var n=this.cache;Vr(n,t)||(e.uniform4iv(this.addr,t),jr(n,t))}function oa(e,t){e.uniform1fv(this.addr,t)}function qa(e,t){e.uniform1iv(this.addr,t)}function sa(e,t){e.uniform2iv(this.addr,t)}function ma(e,t){e.uniform3iv(this.addr,t)}function ha(e,t){e.uniform4iv(this.addr,t)}function ca(e,t){var n=Hr(t,this.size,2);e.uniform2fv(this.addr,n)}function ua(e,t){var n=Hr(t,this.size,3);e.uniform3fv(this.addr,n)}function da(e,t){var n=Hr(t,this.size,4);e.uniform4fv(this.addr,n)}function pa(e,t){var n=Hr(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,n)}function fa(e,t){var n=Hr(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,n)}function xa(e,t){var n=Hr(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,n)}function va(e,t,n){var i=t.length,l=kr(n,i);e.uniform1iv(this.addr,l);for(var r=0;r!==i;++r)n.safeSetTexture2D(t[r]||Cr,l[r])}function ga(e,t,n){var i=t.length,l=kr(n,i);e.uniform1iv(this.addr,l);for(var r=0;r!==i;++r)n.safeSetTextureCube(t[r]||Dr,l[r])}function _a(e,t,n){this.id=e,this.addr=n,this.cache=[],this.setValue=function(e){switch(e){case 5126:return Wr;case 35664:return Xr;case 35665:return Yr;case 35666:return Zr;case 35674:return Jr;case 35675:return Qr;case 35676:return Kr;case 35678:case 36198:return $r;case 35679:return ta;case 35680:return na;case 36289:return ea;case 5124:case 35670:return ia;case 35667:case 35671:return la;case 35668:case 35672:return ra;case 35669:case 35673:return aa}}(t.type)}function ya(e,t,n){this.id=e,this.addr=n,this.cache=[],this.size=t.size,this.setValue=function(e){switch(e){case 5126:return oa;case 35664:return ca;case 35665:return ua;case 35666:return da;case 35674:return pa;case 35675:return fa;case 35676:return xa;case 35678:return va;case 35680:return ga;case 5124:case 35670:return qa;case 35667:case 35671:return sa;case 35668:case 35672:return ma;case 35669:case 35673:return ha}}(t.type)}function ba(e){this.id=e,this.seq=[],this.map={}}ya.prototype.updateCache=function(e){var t=this.cache;e instanceof Float32Array&&t.length!==e.length&&(this.cache=new Float32Array(e.length)),jr(t,e)},ba.prototype.setValue=function(e,t,n){for(var i=this.seq,l=0,r=i.length;l!==r;++l){var a=i[l];a.setValue(e,t[a.id],n)}};var wa=/([\w\d_]+)(\])?(\[|\.)?/g;function Ma(e,t){e.seq.push(t),e.map[t.id]=t}function za(e,t,n){var i=e.name,l=i.length;for(wa.lastIndex=0;;){var r=wa.exec(i),a=wa.lastIndex,o=r[1],q="]"===r[2],s=r[3];if(q&&(o|=0),void 0===s||"["===s&&a+2===l){Ma(n,void 0===s?new _a(o,e,t):new ya(o,e,t));break}var m=n.map[o];void 0===m&&Ma(n,m=new ba(o)),n=m}}function Sa(e,t){this.seq=[],this.map={};for(var n=e.getProgramParameter(t,35718),i=0;i<n;++i){var l=e.getActiveUniform(t,i);za(l,e.getUniformLocation(t,l.name),this)}}function Ta(e,t,n){var i=e.createShader(t);return e.shaderSource(i,n),e.compileShader(i),i}Sa.prototype.setValue=function(e,t,n,i){var l=this.map[t];void 0!==l&&l.setValue(e,n,i)},Sa.prototype.setOptional=function(e,t,n){var i=t[n];void 0!==i&&this.setValue(e,n,i)},Sa.upload=function(e,t,n,i){for(var l=0,r=t.length;l!==r;++l){var a=t[l],o=n[a.id];!1!==o.needsUpdate&&a.setValue(e,o.value,i)}},Sa.seqWithValue=function(e,t){for(var n=[],i=0,l=e.length;i!==l;++i){var r=e[i];r.id in t&&n.push(r)}return n};var Ea=0;function Aa(e){switch(e){case Rt:return["Linear","( value )"];case Ct:return["sRGB","( value )"];case It:return["RGBE","( value )"];case Nt:return["RGBM","( value, 7.0 )"];case Bt:return["RGBM","( value, 16.0 )"];case Ft:return["RGBD","( value, 256.0 )"];case Ot:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case Dt:return["LogLuv","( value )"];default:throw new Error("unsupported encoding: "+e)}}function La(e,t,n){var i=e.getShaderParameter(t,35713),l=e.getShaderInfoLog(t).trim();return i&&""===l?"":"THREE.WebGLShader: gl.getShaderInfoLog() "+n+"\n"+l+function(e){for(var t=e.split("\n"),n=0;n<t.length;n++)t[n]=n+1+": "+t[n];return t.join("\n")}(e.getShaderSource(t))}function Pa(e,t){var n=Aa(t);return"vec4 "+e+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function Ra(e,t){var n;switch(t){case le:n="Linear";break;case re:n="Reinhard";break;case ae:n="Uncharted2";break;case oe:n="OptimizedCineon";break;case qe:n="ACESFilmic";break;default:throw new Error("unsupported toneMapping: "+t)}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function Ca(e){return""!==e}function Oa(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function Ia(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}var Da=/^[ \t]*#include +<([\w\d./]+)>/gm;function Na(e){return e.replace(Da,Ba)}function Ba(e,t){var n=cr[t];if(void 0===n)throw new Error("Can not resolve #include <"+t+">");return Na(n)}var Fa=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;function Ua(e){return e.replace(Fa,Ga)}function Ga(e,t,n,i){for(var l="",r=parseInt(t);r<parseInt(n);r++)l+=i.replace(/\[ i \]/g,"[ "+r+" ]").replace(/UNROLLED_LOOP_INDEX/g,r);return l}function Ha(e){var t="precision "+e.precision+" float;\nprecision "+e.precision+" int;";return"highp"===e.precision?t+="\n#define HIGH_PRECISION":"mediump"===e.precision?t+="\n#define MEDIUM_PRECISION":"lowp"===e.precision&&(t+="\n#define LOW_PRECISION"),t}function Va(e,t,n,i,l,r){var a,o,q,s,m,h=e.getContext(),c=i.defines,f=l.vertexShader,x=l.fragmentShader,v=function(e){var t="SHADOWMAP_TYPE_BASIC";return e.shadowMapType===u?t="SHADOWMAP_TYPE_PCF":e.shadowMapType===d?t="SHADOWMAP_TYPE_PCF_SOFT":e.shadowMapType===p&&(t="SHADOWMAP_TYPE_VSM"),t}(r),g=function(e){var t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case me:case he:t="ENVMAP_TYPE_CUBE";break;case pe:case fe:t="ENVMAP_TYPE_CUBE_UV";break;case ce:case ue:t="ENVMAP_TYPE_EQUIREC";break;case de:t="ENVMAP_TYPE_SPHERE"}return t}(r),_=function(e){var t="ENVMAP_MODE_REFLECTION";if(e.envMap)switch(e.envMapMode){case he:case ue:t="ENVMAP_MODE_REFRACTION"}return t}(r),y=function(e){var t="ENVMAP_BLENDING_MULTIPLY";if(e.envMap)switch(e.combine){case ee:t="ENVMAP_BLENDING_MULTIPLY";break;case te:t="ENVMAP_BLENDING_MIX";break;case ne:t="ENVMAP_BLENDING_ADD"}return t}(r),b=e.gammaFactor>0?e.gammaFactor:1,w=r.isWebGL2?"":function(e,t,n){return[(e=e||{}).derivatives||t.envMapCubeUV||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(e.fragDepth||t.logarithmicDepthBuffer)&&n.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",e.drawBuffers&&n.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(e.shaderTextureLOD||t.envMap)&&n.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Ca).join("\n")}(i.extensions,r,t),M=function(e){var t=[];for(var n in e){var i=e[n];!1!==i&&t.push("#define "+n+" "+i)}return t.join("\n")}(c),z=h.createProgram(),S=r.numMultiviewViews;if(i.isRawShaderMaterial?((a=[M].filter(Ca).join("\n")).length>0&&(a+="\n"),(o=[w,M].filter(Ca).join("\n")).length>0&&(o+="\n")):(a=[Ha(r),"#define SHADER_NAME "+l.name,M,r.instancing?"#define USE_INSTANCING":"",r.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+b,"#define MAX_BONES "+r.maxBones,r.useFog&&r.fog?"#define USE_FOG":"",r.useFog&&r.fogExp2?"#define FOG_EXP2":"",r.map?"#define USE_MAP":"",r.envMap?"#define USE_ENVMAP":"",r.envMap?"#define "+_:"",r.lightMap?"#define USE_LIGHTMAP":"",r.aoMap?"#define USE_AOMAP":"",r.emissiveMap?"#define USE_EMISSIVEMAP":"",r.bumpMap?"#define USE_BUMPMAP":"",r.normalMap?"#define USE_NORMALMAP":"",r.normalMap&&r.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",r.normalMap&&r.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",r.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",r.displacementMap&&r.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",r.specularMap?"#define USE_SPECULARMAP":"",r.roughnessMap?"#define USE_ROUGHNESSMAP":"",r.metalnessMap?"#define USE_METALNESSMAP":"",r.alphaMap?"#define USE_ALPHAMAP":"",r.vertexTangents?"#define USE_TANGENT":"",r.vertexColors?"#define USE_COLOR":"",r.vertexUvs?"#define USE_UV":"",r.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",r.flatShading?"#define FLAT_SHADED":"",r.skinning?"#define USE_SKINNING":"",r.useVertexTexture?"#define BONE_TEXTURE":"",r.morphTargets?"#define USE_MORPHTARGETS":"",r.morphNormals&&!1===r.flatShading?"#define USE_MORPHNORMALS":"",r.doubleSided?"#define DOUBLE_SIDED":"",r.flipSided?"#define FLIP_SIDED":"",r.shadowMapEnabled?"#define USE_SHADOWMAP":"",r.shadowMapEnabled?"#define "+v:"",r.sizeAttenuation?"#define USE_SIZEATTENUATION":"",r.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",r.logarithmicDepthBuffer&&(r.isWebGL2||t.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING"," attribute mat4 instanceMatrix;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Ca).join("\n"),o=[w,Ha(r),"#define SHADER_NAME "+l.name,M,r.alphaTest?"#define ALPHATEST "+r.alphaTest+(r.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+b,r.useFog&&r.fog?"#define USE_FOG":"",r.useFog&&r.fogExp2?"#define FOG_EXP2":"",r.map?"#define USE_MAP":"",r.matcap?"#define USE_MATCAP":"",r.envMap?"#define USE_ENVMAP":"",r.envMap?"#define "+g:"",r.envMap?"#define "+_:"",r.envMap?"#define "+y:"",r.lightMap?"#define USE_LIGHTMAP":"",r.aoMap?"#define USE_AOMAP":"",r.emissiveMap?"#define USE_EMISSIVEMAP":"",r.bumpMap?"#define USE_BUMPMAP":"",r.normalMap?"#define USE_NORMALMAP":"",r.normalMap&&r.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",r.normalMap&&r.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",r.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",r.specularMap?"#define USE_SPECULARMAP":"",r.roughnessMap?"#define USE_ROUGHNESSMAP":"",r.metalnessMap?"#define USE_METALNESSMAP":"",r.alphaMap?"#define USE_ALPHAMAP":"",r.sheen?"#define USE_SHEEN":"",r.vertexTangents?"#define USE_TANGENT":"",r.vertexColors?"#define USE_COLOR":"",r.vertexUvs?"#define USE_UV":"",r.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",r.gradientMap?"#define USE_GRADIENTMAP":"",r.flatShading?"#define FLAT_SHADED":"",r.doubleSided?"#define DOUBLE_SIDED":"",r.flipSided?"#define FLIP_SIDED":"",r.shadowMapEnabled?"#define USE_SHADOWMAP":"",r.shadowMapEnabled?"#define "+v:"",r.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",r.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",r.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",r.logarithmicDepthBuffer&&(r.isWebGL2||t.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"",(i.extensions&&i.extensions.shaderTextureLOD||r.envMap)&&(r.isWebGL2||t.get("EXT_shader_texture_lod"))?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",r.toneMapping!==ie?"#define TONE_MAPPING":"",r.toneMapping!==ie?cr.tonemapping_pars_fragment:"",r.toneMapping!==ie?Ra("toneMapping",r.toneMapping):"",r.dithering?"#define DITHERING":"",r.outputEncoding||r.mapEncoding||r.matcapEncoding||r.envMapEncoding||r.emissiveMapEncoding?cr.encodings_pars_fragment:"",r.mapEncoding?Pa("mapTexelToLinear",r.mapEncoding):"",r.matcapEncoding?Pa("matcapTexelToLinear",r.matcapEncoding):"",r.envMapEncoding?Pa("envMapTexelToLinear",r.envMapEncoding):"",r.emissiveMapEncoding?Pa("emissiveMapTexelToLinear",r.emissiveMapEncoding):"",r.outputEncoding?(q="linearToOutputTexel",s=r.outputEncoding,m=Aa(s),"vec4 "+q+"( vec4 value ) { return LinearTo"+m[0]+m[1]+"; }"):"",r.depthPacking?"#define DEPTH_PACKING "+i.depthPacking:"","\n"].filter(Ca).join("\n")),f=Ia(f=Oa(f=Na(f),r),r),x=Ia(x=Oa(x=Na(x),r),r),f=Ua(f),x=Ua(x),r.isWebGL2&&!i.isRawShaderMaterial){var T=!1,E=/^\s*#version\s+300\s+es\s*\n/;i.isShaderMaterial&&null!==f.match(E)&&null!==x.match(E)&&(T=!0,f=f.replace(E,""),x=x.replace(E,"")),a=["#version 300 es\n","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+a,o=["#version 300 es\n","#define varying in",T?"":"out highp vec4 pc_fragColor;",T?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+o,S>0&&(a=(a=a.replace("#version 300 es\n",["#version 300 es\n","#extension GL_OVR_multiview2 : require","layout(num_views = "+S+") in;","#define VIEW_ID gl_ViewID_OVR"].join("\n"))).replace(["uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;"].join("\n"),["uniform mat4 modelViewMatrices["+S+"];","uniform mat4 projectionMatrices["+S+"];","uniform mat4 viewMatrices["+S+"];","uniform mat3 normalMatrices["+S+"];","#define modelViewMatrix modelViewMatrices[VIEW_ID]","#define projectionMatrix projectionMatrices[VIEW_ID]","#define viewMatrix viewMatrices[VIEW_ID]","#define normalMatrix normalMatrices[VIEW_ID]"].join("\n")),o=(o=o.replace("#version 300 es\n",["#version 300 es\n","#extension GL_OVR_multiview2 : require","#define VIEW_ID gl_ViewID_OVR"].join("\n"))).replace("uniform mat4 viewMatrix;",["uniform mat4 viewMatrices["+S+"];","#define viewMatrix viewMatrices[VIEW_ID]"].join("\n")))}var A,L,P=o+x,R=Ta(h,35633,a+f),C=Ta(h,35632,P);if(h.attachShader(z,R),h.attachShader(z,C),void 0!==i.index0AttributeName?h.bindAttribLocation(z,0,i.index0AttributeName):!0===r.morphTargets&&h.bindAttribLocation(z,0,"position"),h.linkProgram(z),e.debug.checkShaderErrors){var O=h.getProgramInfoLog(z).trim(),I=h.getShaderInfoLog(R).trim(),D=h.getShaderInfoLog(C).trim(),N=!0,B=!0;if(!1===h.getProgramParameter(z,35714)){N=!1;var F=La(h,R,"vertex"),U=La(h,C,"fragment");console.error("THREE.WebGLProgram: shader error: ",h.getError(),"35715",h.getProgramParameter(z,35715),"gl.getProgramInfoLog",O,F,U)}else""!==O?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",O):""!==I&&""!==D||(B=!1);B&&(this.diagnostics={runnable:N,material:i,programLog:O,vertexShader:{log:I,prefix:a},fragmentShader:{log:D,prefix:o}})}return h.deleteShader(R),h.deleteShader(C),this.getUniforms=function(){return void 0===A&&(A=new Sa(h,z)),A},this.getAttributes=function(){return void 0===L&&(L=function(e,t){for(var n={},i=e.getProgramParameter(t,35721),l=0;l<i;l++){var r=e.getActiveAttrib(t,l).name;n[r]=e.getAttribLocation(t,r)}return n}(h,z)),L},this.destroy=function(){h.deleteProgram(z),this.program=void 0},this.name=l.name,this.id=Ea++,this.cacheKey=n,this.usedTimes=1,this.program=z,this.vertexShader=R,this.fragmentShader=C,this.numMultiviewViews=S,this}function ja(e,t,n){var i=[],l=n.isWebGL2,r=n.logarithmicDepthBuffer,a=n.floatVertexTextures,o=n.precision,q=n.maxVertexUniforms,s=n.vertexTextures,m={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},h=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","numMultiviewViews","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen"];function c(e,t){var n;return e?e.isTexture?n=e.encoding:e.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),n=e.texture.encoding):n=Rt,n===Rt&&t&&(n=Ot),n}this.getParameters=function(t,i,h,u,d,p,f){var g=m[t.type],_=f.isSkinnedMesh?function(e){var t=e.skeleton.bones;if(a)return 1024;var n=q,i=Math.floor((n-20)/4),l=Math.min(i,t.length);return l<t.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+t.length+" bones. This GPU supports "+l+"."),0):l}(f):0;null!==t.precision&&(o=n.getMaxPrecision(t.precision))!==t.precision&&console.warn("THREE.WebGLProgram.getParameters:",t.precision,"not supported, using",o,"instead.");var y=e.getRenderTarget(),b=y&&y.isWebGLMultiviewRenderTarget?y.numViews:0;return{isWebGL2:l,shaderID:g,precision:o,instancing:!0===f.isInstancedMesh,supportsVertexTextures:s,numMultiviewViews:b,outputEncoding:c(y?y.texture:null,e.gammaOutput),map:!!t.map,mapEncoding:c(t.map,e.gammaInput),matcap:!!t.matcap,matcapEncoding:c(t.matcap,e.gammaInput),envMap:!!t.envMap,envMapMode:t.envMap&&t.envMap.mapping,envMapEncoding:c(t.envMap,e.gammaInput),envMapCubeUV:!!t.envMap&&(t.envMap.mapping===pe||t.envMap.mapping===fe),lightMap:!!t.lightMap,aoMap:!!t.aoMap,emissiveMap:!!t.emissiveMap,emissiveMapEncoding:c(t.emissiveMap,e.gammaInput),bumpMap:!!t.bumpMap,normalMap:!!t.normalMap,objectSpaceNormalMap:t.normalMapType===Vt,tangentSpaceNormalMap:t.normalMapType===Ht,clearcoatNormalMap:!!t.clearcoatNormalMap,displacementMap:!!t.displacementMap,roughnessMap:!!t.roughnessMap,metalnessMap:!!t.metalnessMap,specularMap:!!t.specularMap,alphaMap:!!t.alphaMap,gradientMap:!!t.gradientMap,sheen:!!t.sheen,combine:t.combine,vertexTangents:t.normalMap&&t.vertexTangents,vertexColors:t.vertexColors,vertexUvs:!!(t.map||t.bumpMap||t.normalMap||t.specularMap||t.alphaMap||t.emissiveMap||t.roughnessMap||t.metalnessMap||t.clearcoatNormalMap||t.displacementMap),uvsVertexOnly:!(t.map||t.bumpMap||t.normalMap||t.specularMap||t.alphaMap||t.emissiveMap||t.roughnessMap||t.metalnessMap||t.clearcoatNormalMap||!t.displacementMap),fog:!!u,useFog:t.fog,fogExp2:u&&u.isFogExp2,flatShading:t.flatShading,sizeAttenuation:t.sizeAttenuation,logarithmicDepthBuffer:r,skinning:t.skinning&&_>0,maxBones:_,useVertexTexture:a,morphTargets:t.morphTargets,morphNormals:t.morphNormals,maxMorphTargets:e.maxMorphTargets,maxMorphNormals:e.maxMorphNormals,numDirLights:i.directional.length,numPointLights:i.point.length,numSpotLights:i.spot.length,numRectAreaLights:i.rectArea.length,numHemiLights:i.hemi.length,numDirLightShadows:i.directionalShadowMap.length,numPointLightShadows:i.pointShadowMap.length,numSpotLightShadows:i.spotShadowMap.length,numClippingPlanes:d,numClipIntersection:p,dithering:t.dithering,shadowMapEnabled:e.shadowMap.enabled&&h.length>0,shadowMapType:e.shadowMap.type,toneMapping:t.toneMapped?e.toneMapping:ie,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:t.premultipliedAlpha,alphaTest:t.alphaTest,doubleSided:t.side===v,flipSided:t.side===x,depthPacking:void 0!==t.depthPacking&&t.depthPacking}},this.getProgramCacheKey=function(t,n){var i=[];if(n.shaderID?i.push(n.shaderID):(i.push(t.fragmentShader),i.push(t.vertexShader)),void 0!==t.defines)for(var l in t.defines)i.push(l),i.push(t.defines[l]);for(var r=0;r<h.length;r++)i.push(n[h[r]]);return i.push(t.onBeforeCompile.toString()),i.push(e.gammaOutput),i.push(e.gammaFactor),i.join()},this.acquireProgram=function(n,l,r,a){for(var o,q=0,s=i.length;q<s;q++){var m=i[q];if(m.cacheKey===a){++(o=m).usedTimes;break}}return void 0===o&&(o=new Va(e,t,a,n,l,r),i.push(o)),o},this.releaseProgram=function(e){if(0==--e.usedTimes){var t=i.indexOf(e);i[t]=i[i.length-1],i.pop(),e.destroy()}},this.programs=i}function ka(){var e=new WeakMap;return{get:function(t){var n=e.get(t);return void 0===n&&(n={},e.set(t,n)),n},remove:function(t){e.delete(t)},update:function(t,n,i){e.get(t)[n]=i},dispose:function(){e=new WeakMap}}}function Wa(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program!==t.program?e.program.id-t.program.id:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function Xa(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function Ya(){var e=[],t=0,n=[],i=[],l={id:-1};function r(n,i,r,a,o,q){var s=e[t];return void 0===s?(s={id:n.id,object:n,geometry:i,material:r,program:r.program||l,groupOrder:a,renderOrder:n.renderOrder,z:o,group:q},e[t]=s):(s.id=n.id,s.object=n,s.geometry=i,s.material=r,s.program=r.program||l,s.groupOrder=a,s.renderOrder=n.renderOrder,s.z=o,s.group=q),t++,s}return{opaque:n,transparent:i,init:function(){t=0,n.length=0,i.length=0},push:function(e,t,l,a,o,q){var s=r(e,t,l,a,o,q);(!0===l.transparent?i:n).push(s)},unshift:function(e,t,l,a,o,q){var s=r(e,t,l,a,o,q);(!0===l.transparent?i:n).unshift(s)},sort:function(){n.length>1&&n.sort(Wa),i.length>1&&i.sort(Xa)}}}function Za(){var e=new WeakMap;function t(n){var i=n.target;i.removeEventListener("dispose",t),e.delete(i)}return{get:function(n,i){var l,r=e.get(n);return void 0===r?(l=new Ya,e.set(n,new WeakMap),e.get(n).set(i,l),n.addEventListener("dispose",t)):void 0===(l=r.get(i))&&(l=new Ya,r.set(i,l)),l},dispose:function(){e=new WeakMap}}}function Ja(){var e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];var n;switch(t.type){case"DirectionalLight":n={direction:new Mn,color:new Zi,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new _n};break;case"SpotLight":n={position:new Mn,direction:new Mn,color:new Zi,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new _n};break;case"PointLight":n={position:new Mn,color:new Zi,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new _n,shadowCameraNear:1,shadowCameraFar:1e3};break;case"HemisphereLight":n={direction:new Mn,skyColor:new Zi,groundColor:new Zi};break;case"RectAreaLight":n={color:new Zi,position:new Mn,halfWidth:new Mn,halfHeight:new Mn}}return e[t.id]=n,n}}}var Qa=0;function Ka(e,t){return(t.castShadow?1:0)-(e.castShadow?1:0)}function $a(){for(var e=new Ja,t={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},n=0;n<9;n++)t.probe.push(new Mn);var i=new Mn,l=new Gn,r=new Gn;return{setup:function(n,a,o){for(var q=0,s=0,m=0,h=0;h<9;h++)t.probe[h].set(0,0,0);var c=0,u=0,d=0,p=0,f=0,x=0,v=0,g=0,_=o.matrixWorldInverse;n.sort(Ka),h=0;for(var y=n.length;h<y;h++){var b=n[h],w=b.color,M=b.intensity,z=b.distance,S=b.shadow&&b.shadow.map?b.shadow.map.texture:null;if(b.isAmbientLight)q+=w.r*M,s+=w.g*M,m+=w.b*M;else if(b.isLightProbe)for(var T=0;T<9;T++)t.probe[T].addScaledVector(b.sh.coefficients[T],M);else if(b.isDirectionalLight){if((A=e.get(b)).color.copy(b.color).multiplyScalar(b.intensity),A.direction.setFromMatrixPosition(b.matrixWorld),i.setFromMatrixPosition(b.target.matrixWorld),A.direction.sub(i),A.direction.transformDirection(_),A.shadow=b.castShadow,b.castShadow){var E=b.shadow;A.shadowBias=E.bias,A.shadowRadius=E.radius,A.shadowMapSize=E.mapSize,t.directionalShadowMap[c]=S,t.directionalShadowMatrix[c]=b.shadow.matrix,x++}t.directional[c]=A,c++}else if(b.isSpotLight){if((A=e.get(b)).position.setFromMatrixPosition(b.matrixWorld),A.position.applyMatrix4(_),A.color.copy(w).multiplyScalar(M),A.distance=z,A.direction.setFromMatrixPosition(b.matrixWorld),i.setFromMatrixPosition(b.target.matrixWorld),A.direction.sub(i),A.direction.transformDirection(_),A.coneCos=Math.cos(b.angle),A.penumbraCos=Math.cos(b.angle*(1-b.penumbra)),A.decay=b.decay,A.shadow=b.castShadow,b.castShadow){E=b.shadow;A.shadowBias=E.bias,A.shadowRadius=E.radius,A.shadowMapSize=E.mapSize,t.spotShadowMap[d]=S,t.spotShadowMatrix[d]=b.shadow.matrix,g++}t.spot[d]=A,d++}else if(b.isRectAreaLight){(A=e.get(b)).color.copy(w).multiplyScalar(M),A.position.setFromMatrixPosition(b.matrixWorld),A.position.applyMatrix4(_),r.identity(),l.copy(b.matrixWorld),l.premultiply(_),r.extractRotation(l),A.halfWidth.set(.5*b.width,0,0),A.halfHeight.set(0,.5*b.height,0),A.halfWidth.applyMatrix4(r),A.halfHeight.applyMatrix4(r),t.rectArea[p]=A,p++}else if(b.isPointLight){if((A=e.get(b)).position.setFromMatrixPosition(b.matrixWorld),A.position.applyMatrix4(_),A.color.copy(b.color).multiplyScalar(b.intensity),A.distance=b.distance,A.decay=b.decay,A.shadow=b.castShadow,b.castShadow){E=b.shadow;A.shadowBias=E.bias,A.shadowRadius=E.radius,A.shadowMapSize=E.mapSize,A.shadowCameraNear=E.camera.near,A.shadowCameraFar=E.camera.far,t.pointShadowMap[u]=S,t.pointShadowMatrix[u]=b.shadow.matrix,v++}t.point[u]=A,u++}else if(b.isHemisphereLight){var A;(A=e.get(b)).direction.setFromMatrixPosition(b.matrixWorld),A.direction.transformDirection(_),A.direction.normalize(),A.skyColor.copy(b.color).multiplyScalar(M),A.groundColor.copy(b.groundColor).multiplyScalar(M),t.hemi[f]=A,f++}}t.ambient[0]=q,t.ambient[1]=s,t.ambient[2]=m;var L=t.hash;L.directionalLength===c&&L.pointLength===u&&L.spotLength===d&&L.rectAreaLength===p&&L.hemiLength===f&&L.numDirectionalShadows===x&&L.numPointShadows===v&&L.numSpotShadows===g||(t.directional.length=c,t.spot.length=d,t.rectArea.length=p,t.point.length=u,t.hemi.length=f,t.directionalShadowMap.length=x,t.pointShadowMap.length=v,t.spotShadowMap.length=g,t.directionalShadowMatrix.length=x,t.pointShadowMatrix.length=v,t.spotShadowMatrix.length=g,L.directionalLength=c,L.pointLength=u,L.spotLength=d,L.rectAreaLength=p,L.hemiLength=f,L.numDirectionalShadows=x,L.numPointShadows=v,L.numSpotShadows=g,t.version=Qa++)},state:t}}function eo(){var e=new $a,t=[],n=[];return{init:function(){t.length=0,n.length=0},state:{lightsArray:t,shadowsArray:n,lights:e},setupLights:function(i){e.setup(t,n,i)},pushLight:function(e){t.push(e)},pushShadow:function(e){n.push(e)}}}function to(){var e=new WeakMap;function t(n){var i=n.target;i.removeEventListener("dispose",t),e.delete(i)}return{get:function(n,i){var l;return!1===e.has(n)?(l=new eo,e.set(n,new WeakMap),e.get(n).set(i,l),n.addEventListener("dispose",t)):!1===e.get(n).has(i)?(l=new eo,e.get(n).set(i,l)):l=e.get(n).get(i),l},dispose:function(){e=new WeakMap}}}function no(e){tl.call(this),this.type="MeshDepthMaterial",this.depthPacking=Ut,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(e)}function io(e){tl.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new Mn,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(e)}no.prototype=Object.create(tl.prototype),no.prototype.constructor=no,no.prototype.isMeshDepthMaterial=!0,no.prototype.copy=function(e){return tl.prototype.copy.call(this,e),this.depthPacking=e.depthPacking,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this},io.prototype=Object.create(tl.prototype),io.prototype.constructor=io,io.prototype.isMeshDistanceMaterial=!0,io.prototype.copy=function(e){return tl.prototype.copy.call(this,e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this};var lo="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n  \n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = decodeHalfRGBA ( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = pow( squared_mean - mean * mean, 0.5 );\n  gl_FragColor = encodeHalfRGBA( vec2( mean, std_dev ) );\n}",ro="void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";function ao(e,t,n){var i=new hr,l=new _n,r=new _n,a=new Pn,o=[],q=[],s={},m={0:x,1:f,2:v},h=new tr({defines:{SAMPLE_RATE:.25,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new _n},radius:{value:4}},vertexShader:ro,fragmentShader:lo}),c=h.clone();c.defines.HORIZONAL_PASS=1;var d=new bl;d.setAttribute("position",new il(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));var g=new Ul(d,h),_=this;function y(n,i){var l=t.update(g);h.uniforms.shadow_pass.value=n.map.texture,h.uniforms.resolution.value=n.mapSize,h.uniforms.radius.value=n.radius,e.setRenderTarget(n.mapPass),e.clear(),e.renderBufferDirect(i,null,l,h,g,null),c.uniforms.shadow_pass.value=n.mapPass.texture,c.uniforms.resolution.value=n.mapSize,c.uniforms.radius.value=n.radius,e.setRenderTarget(n.map),e.clear(),e.renderBufferDirect(i,null,l,c,g,null)}function b(e,t,n){var i=e<<0|t<<1|n<<2,l=o[i];return void 0===l&&(l=new no({depthPacking:Gt,morphTargets:e,skinning:t}),o[i]=l),l}function w(e,t,n){var i=e<<0|t<<1|n<<2,l=q[i];return void 0===l&&(l=new io({morphTargets:e,skinning:t}),q[i]=l),l}function z(t,n,i,l,r,a){var o=t.geometry,q=null,h=b,c=t.customDepthMaterial;if(!0===i.isPointLight&&(h=w,c=t.customDistanceMaterial),void 0===c){var u=!1;!0===n.morphTargets&&(!0===o.isBufferGeometry?u=o.morphAttributes&&o.morphAttributes.position&&o.morphAttributes.position.length>0:!0===o.isGeometry&&(u=o.morphTargets&&o.morphTargets.length>0));var d=!1;!0===t.isSkinnedMesh&&(!0===n.skinning?d=!0:console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",t)),q=h(u,d,!0===t.isInstancedMesh)}else q=c;if(e.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length){var f=q.uuid,x=n.uuid,v=s[f];void 0===v&&(v={},s[f]=v);var g=v[x];void 0===g&&(g=q.clone(),v[x]=g),q=g}return q.visible=n.visible,q.wireframe=n.wireframe,q.side=a===p?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:m[n.side],q.clipShadows=n.clipShadows,q.clippingPlanes=n.clippingPlanes,q.clipIntersection=n.clipIntersection,q.wireframeLinewidth=n.wireframeLinewidth,q.linewidth=n.linewidth,!0===i.isPointLight&&!0===q.isMeshDistanceMaterial&&(q.referencePosition.setFromMatrixPosition(i.matrixWorld),q.nearDistance=l,q.farDistance=r),q}function S(n,l,r,a,o){if(!1!==n.visible){if(n.layers.test(l.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&o===p)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,n.matrixWorld);var q=t.update(n),s=n.material;if(Array.isArray(s))for(var m=q.groups,h=0,c=m.length;h<c;h++){var u=m[h],d=s[u.materialIndex];if(d&&d.visible){var f=z(n,d,a,r.near,r.far,o);e.renderBufferDirect(r,null,q,f,n,u)}}else if(s.visible){f=z(n,s,a,r.near,r.far,o);e.renderBufferDirect(r,null,q,f,n,null)}}for(var x=n.children,v=0,g=x.length;v<g;v++)S(x[v],l,r,a,o)}}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=u,this.render=function(t,o,q){if(!1!==_.enabled&&(!1!==_.autoUpdate||!1!==_.needsUpdate)&&0!==t.length){var s=e.getRenderTarget(),m=e.getActiveCubeFace(),h=e.getActiveMipmapLevel(),c=e.state;c.setBlending(M),c.buffers.color.setClear(1,1,1,1),c.buffers.depth.setTest(!0),c.setScissorTest(!1);for(var u=0,d=t.length;u<d;u++){var f=t[u],x=f.shadow;if(void 0!==x){l.copy(x.mapSize);var v=x.getFrameExtents();if(l.multiply(v),r.copy(x.mapSize),(l.x>n||l.y>n)&&(console.warn("THREE.WebGLShadowMap:",f,"has shadow exceeding max texture size, reducing"),l.x>n&&(r.x=Math.floor(n/v.x),l.x=r.x*v.x,x.mapSize.x=r.x),l.y>n&&(r.y=Math.floor(n/v.y),l.y=r.y*v.y,x.mapSize.y=r.y)),null===x.map&&!x.isPointLightShadow&&this.type===p){var g={minFilter:ze,magFilter:ze,format:je};x.map=new Rn(l.x,l.y,g),x.map.texture.name=f.name+".shadowMap",x.mapPass=new Rn(l.x,l.y,g),x.camera.updateProjectionMatrix()}if(null===x.map){g={minFilter:_e,magFilter:_e,format:je};x.map=new Rn(l.x,l.y,g),x.map.texture.name=f.name+".shadowMap",x.camera.updateProjectionMatrix()}e.setRenderTarget(x.map),e.clear();for(var b=x.getViewportCount(),w=0;w<b;w++){var z=x.getViewport(w);a.set(r.x*z.x,r.y*z.y,r.x*z.z,r.y*z.w),c.viewport(a),x.updateMatrices(f,w),i=x.getFrustum(),S(o,q,x.camera,f,this.type)}x.isPointLightShadow||this.type!==p||y(x,q)}else console.warn("THREE.WebGLShadowMap:",f,"has no shadow.")}_.needsUpdate=!1,e.setRenderTarget(s,m,h)}}}function oo(e,t,n){var i=n.isWebGL2;var l=new function(){var t=!1,n=new Pn,i=null,l=new Pn(0,0,0,0);return{setMask:function(n){i===n||t||(e.colorMask(n,n,n,n),i=n)},setLocked:function(e){t=e},setClear:function(t,i,r,a,o){!0===o&&(t*=a,i*=a,r*=a),n.set(t,i,r,a),!1===l.equals(n)&&(e.clearColor(t,i,r,a),l.copy(n))},reset:function(){t=!1,i=null,l.set(-1,0,0,0)}}},r=new function(){var t=!1,n=null,i=null,l=null;return{setTest:function(e){e?ge(2929):_e(2929)},setMask:function(i){n===i||t||(e.depthMask(i),n=i)},setFunc:function(t){if(i!==t){if(t)switch(t){case W:e.depthFunc(512);break;case X:e.depthFunc(519);break;case Y:e.depthFunc(513);break;case Z:e.depthFunc(515);break;case J:e.depthFunc(514);break;case Q:e.depthFunc(518);break;case K:e.depthFunc(516);break;case $:e.depthFunc(517);break;default:e.depthFunc(515)}else e.depthFunc(515);i=t}},setLocked:function(e){t=e},setClear:function(t){l!==t&&(e.clearDepth(t),l=t)},reset:function(){t=!1,n=null,i=null,l=null}}},s=new function(){var t=!1,n=null,i=null,l=null,r=null,a=null,o=null,q=null,s=null;return{setTest:function(e){t||(e?ge(2960):_e(2960))},setMask:function(i){n===i||t||(e.stencilMask(i),n=i)},setFunc:function(t,n,a){i===t&&l===n&&r===a||(e.stencilFunc(t,n,a),i=t,l=n,r=a)},setOp:function(t,n,i){a===t&&o===n&&q===i||(e.stencilOp(t,n,i),a=t,o=n,q=i)},setLocked:function(e){t=e},setClear:function(t){s!==t&&(e.clearStencil(t),s=t)},reset:function(){t=!1,n=null,i=null,l=null,r=null,a=null,o=null,q=null,s=null}}},m=e.getParameter(34921),h=new Uint8Array(m),c=new Uint8Array(m),u=new Uint8Array(m),d={},p=null,f=null,g=null,_=null,y=null,b=null,w=null,ee=null,te=null,ne=!1,ie=null,le=null,re=null,ae=null,oe=null,qe=e.getParameter(35661),se=!1,me=0,he=e.getParameter(7938);-1!==he.indexOf("WebGL")?(me=parseFloat(/^WebGL\ ([0-9])/.exec(he)[1]),se=me>=1):-1!==he.indexOf("OpenGL ES")&&(me=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(he)[1]),se=me>=2);var ce=null,ue={},de=new Pn,pe=new Pn;function fe(t,n,i){var l=new Uint8Array(4),r=e.createTexture();e.bindTexture(t,r),e.texParameteri(t,10241,9728),e.texParameteri(t,10240,9728);for(var a=0;a<i;a++)e.texImage2D(n+a,0,6408,1,1,0,6408,5121,l);return r}var xe={};function ve(n,l){(h[n]=1,0===c[n]&&(e.enableVertexAttribArray(n),c[n]=1),u[n]!==l)&&((i?e:t.get("ANGLE_instanced_arrays"))[i?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,l),u[n]=l)}function ge(t){!0!==d[t]&&(e.enable(t),d[t]=!0)}function _e(t){!1!==d[t]&&(e.disable(t),d[t]=!1)}xe[3553]=fe(3553,3553,1),xe[34067]=fe(34067,34069,6),l.setClear(0,0,0,1),r.setClear(1),s.setClear(0),ge(2929),r.setFunc(Z),ze(!1),Se(o),ge(2884),Me(M);var ye={[L]:32774,[P]:32778,[R]:32779};if(i)ye[C]=32775,ye[O]=32776;else{var be=t.get("EXT_blend_minmax");null!==be&&(ye[C]=be.MIN_EXT,ye[O]=be.MIN_EXT)}var we={[I]:0,[D]:1,[N]:768,[F]:770,[k]:776,[V]:774,[G]:772,[B]:769,[U]:771,[j]:775,[H]:773};function Me(t,n,i,l,r,a,o,q){if(t!==M){if(f||(ge(3042),f=!0),t===A)r=r||n,a=a||i,o=o||l,n===_&&r===w||(e.blendEquationSeparate(ye[n],ye[r]),_=n,w=r),i===y&&l===b&&a===ee&&o===te||(e.blendFuncSeparate(we[i],we[l],we[a],we[o]),y=i,b=l,ee=a,te=o),g=t,ne=null;else if(t!==g||q!==ne){if(_===L&&w===L||(e.blendEquation(32774),_=L,w=L),q)switch(t){case z:e.blendFuncSeparate(1,771,1,771);break;case S:e.blendFunc(1,1);break;case T:e.blendFuncSeparate(0,0,769,771);break;case E:e.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case z:e.blendFuncSeparate(770,771,1,771);break;case S:e.blendFunc(770,1);break;case T:e.blendFunc(0,769);break;case E:e.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}y=null,b=null,ee=null,te=null,g=t,ne=q}}else f&&(_e(3042),f=!1)}function ze(t){ie!==t&&(t?e.frontFace(2304):e.frontFace(2305),ie=t)}function Se(t){t!==a?(ge(2884),t!==le&&(t===o?e.cullFace(1029):t===q?e.cullFace(1028):e.cullFace(1032))):_e(2884),le=t}function Te(t,n,i){t?(ge(32823),ae===n&&oe===i||(e.polygonOffset(n,i),ae=n,oe=i)):_e(32823)}function Ee(t){void 0===t&&(t=33984+qe-1),ce!==t&&(e.activeTexture(t),ce=t)}return{buffers:{color:l,depth:r,stencil:s},initAttributes:function(){for(var e=0,t=h.length;e<t;e++)h[e]=0},enableAttribute:function(e){ve(e,0)},enableAttributeAndDivisor:ve,disableUnusedAttributes:function(){for(var t=0,n=c.length;t!==n;++t)c[t]!==h[t]&&(e.disableVertexAttribArray(t),c[t]=0)},enable:ge,disable:_e,useProgram:function(t){return p!==t&&(e.useProgram(t),p=t,!0)},setBlending:Me,setMaterial:function(e,t){e.side===v?_e(2884):ge(2884);var n=e.side===x;t&&(n=!n),ze(n),e.blending===z&&!1===e.transparent?Me(M):Me(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),r.setFunc(e.depthFunc),r.setTest(e.depthTest),r.setMask(e.depthWrite),l.setMask(e.colorWrite);var i=e.stencilWrite;s.setTest(i),i&&(s.setMask(e.stencilWriteMask),s.setFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),s.setOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),Te(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits)},setFlipSided:ze,setCullFace:Se,setLineWidth:function(t){t!==re&&(se&&e.lineWidth(t),re=t)},setPolygonOffset:Te,setScissorTest:function(e){e?ge(3089):_e(3089)},activeTexture:Ee,bindTexture:function(t,n){null===ce&&Ee();var i=ue[ce];void 0===i&&(i={type:void 0,texture:void 0},ue[ce]=i),i.type===t&&i.texture===n||(e.bindTexture(t,n||xe[t]),i.type=t,i.texture=n)},unbindTexture:function(){var t=ue[ce];void 0!==t&&void 0!==t.type&&(e.bindTexture(t.type,null),t.type=void 0,t.texture=void 0)},compressedTexImage2D:function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage2D:function(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage3D:function(){try{e.texImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},scissor:function(t){!1===de.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),de.copy(t))},viewport:function(t){!1===pe.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),pe.copy(t))},reset:function(){for(var t=0;t<c.length;t++)1===c[t]&&(e.disableVertexAttribArray(t),c[t]=0);d={},ce=null,ue={},p=null,g=null,ie=null,le=null,l.reset(),r.reset(),s.reset()}}}function qo(e,t,n,i,l,r,a){var o,q=l.isWebGL2,s=l.maxTextures,m=l.maxCubemapSize,h=l.maxTextureSize,c=l.maxSamples,u=new WeakMap,d="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d");function p(e,t){return d?new OffscreenCanvas(e,t):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function f(e,t,n,i){var l=1;if((e.width>i||e.height>i)&&(l=i/Math.max(e.width,e.height)),l<1||!0===t){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){var r=t?gn.floorPowerOfTwo:Math.floor,a=r(l*e.width),q=r(l*e.height);void 0===o&&(o=p(a,q));var s=n?p(a,q):o;return s.width=a,s.height=q,s.getContext("2d").drawImage(e,0,0,a,q),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+e.width+"x"+e.height+") to ("+a+"x"+q+")."),s}return"data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+e.width+"x"+e.height+")."),e}return e}function x(e){return gn.isPowerOfTwo(e.width)&&gn.isPowerOfTwo(e.height)}function v(e,t){return e.generateMipmaps&&t&&e.minFilter!==_e&&e.minFilter!==ze}function g(t,n,l,r){e.generateMipmap(t),i.get(n).__maxMipLevel=Math.log(Math.max(l,r))*Math.LOG2E}function _(e,n){if(!1===q)return e;var i=e;return 6403===e&&(5126===n&&(i=33326),5131===n&&(i=33325),5121===n&&(i=33321)),6407===e&&(5126===n&&(i=34837),5131===n&&(i=34843),5121===n&&(i=32849)),6408===e&&(5126===n&&(i=34836),5131===n&&(i=34842),5121===n&&(i=32856)),33325===i||33326===i||34842===i||34836===i?t.get("EXT_color_buffer_float"):34843!==i&&34837!==i||console.warn("THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead."),i}function y(e){return e===_e||e===ye||e===we?9728:9729}function b(t){var n=t.target;n.removeEventListener("dispose",b),function(t){var n=i.get(t);if(void 0===n.__webglInit)return;e.deleteTexture(n.__webglTexture),i.remove(t)}(n),n.isVideoTexture&&u.delete(n),a.memory.textures--}function w(t){var n=t.target;n.removeEventListener("dispose",w),function(t){var n=i.get(t),l=i.get(t.texture);if(!t)return;void 0!==l.__webglTexture&&e.deleteTexture(l.__webglTexture);t.depthTexture&&t.depthTexture.dispose();if(t.isWebGLRenderTargetCube)for(var r=0;r<6;r++)e.deleteFramebuffer(n.__webglFramebuffer[r]),n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer[r]);else e.deleteFramebuffer(n.__webglFramebuffer),n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer);if(t.isWebGLMultiviewRenderTarget){e.deleteTexture(n.__webglColorTexture),e.deleteTexture(n.__webglDepthStencilTexture),a.memory.textures-=2;r=0;for(var o=n.__webglViewFramebuffers.length;r<o;r++)e.deleteFramebuffer(n.__webglViewFramebuffers[r])}i.remove(t.texture),i.remove(t)}(n),a.memory.textures--}var M=0;function z(e,t){var l=i.get(e);if(e.isVideoTexture&&function(e){var t=a.render.frame;u.get(e)!==t&&(u.set(e,t),e.update())}(e),e.version>0&&l.__version!==e.version){var r=e.image;if(void 0===r)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==r.complete)return void R(l,e,t);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.activeTexture(33984+t),n.bindTexture(3553,l.__webglTexture)}function S(t,l){if(6===t.image.length){var a=i.get(t);if(t.version>0&&a.__version!==t.version){P(a,t),n.activeTexture(33984+l),n.bindTexture(34067,a.__webglTexture),e.pixelStorei(37440,t.flipY);for(var o=t&&t.isCompressedTexture,s=t.image[0]&&t.image[0].isDataTexture,h=[],c=0;c<6;c++)h[c]=o||s?s?t.image[c].image:t.image[c]:f(t.image[c],!1,!0,m);var u,d=h[0],p=x(d)||q,y=r.convert(t.format),b=r.convert(t.type),w=_(y,b);if(L(34067,t,p),o){for(c=0;c<6;c++){u=h[c].mipmaps;for(var M=0;M<u.length;M++){var z=u[M];t.format!==je&&t.format!==Ve?null!==y?n.compressedTexImage2D(34069+c,M,w,z.width,z.height,0,z.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):n.texImage2D(34069+c,M,w,z.width,z.height,0,y,b,z.data)}}a.__maxMipLevel=u.length-1}else{u=t.mipmaps;for(c=0;c<6;c++)if(s){n.texImage2D(34069+c,0,w,h[c].width,h[c].height,0,y,b,h[c].data);for(M=0;M<u.length;M++){var S=(z=u[M]).image[c].image;n.texImage2D(34069+c,M+1,w,S.width,S.height,0,y,b,S.data)}}else{n.texImage2D(34069+c,0,w,y,b,h[c]);for(M=0;M<u.length;M++){z=u[M];n.texImage2D(34069+c,M+1,w,y,b,z.image[c])}}a.__maxMipLevel=u.length}v(t,p)&&g(34067,t,d.width,d.height),a.__version=t.version,t.onUpdate&&t.onUpdate(t)}else n.activeTexture(33984+l),n.bindTexture(34067,a.__webglTexture)}}function T(e,t){n.activeTexture(33984+t),n.bindTexture(34067,i.get(e).__webglTexture)}var E={[xe]:10497,[ve]:33071,[ge]:33648},A={[_e]:9728,[ye]:9984,[we]:9986,[ze]:9729,[Se]:9985,[Ee]:9987};function L(n,r,a){a?(e.texParameteri(n,10242,E[r.wrapS]),e.texParameteri(n,10243,E[r.wrapT]),32879!==n&&35866!==n||e.texParameteri(n,32882,E[r.wrapR]),e.texParameteri(n,10240,A[r.magFilter]),e.texParameteri(n,10241,A[r.minFilter])):(e.texParameteri(n,10242,33071),e.texParameteri(n,10243,33071),32879!==n&&35866!==n||e.texParameteri(n,32882,33071),r.wrapS===ve&&r.wrapT===ve||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),e.texParameteri(n,10240,y(r.magFilter)),e.texParameteri(n,10241,y(r.minFilter)),r.minFilter!==_e&&r.minFilter!==ze&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));var o=t.get("EXT_texture_filter_anisotropic");if(o){if(r.type===De&&null===t.get("OES_texture_float_linear"))return;if(r.type===Ne&&null===(q||t.get("OES_texture_half_float_linear")))return;(r.anisotropy>1||i.get(r).__currentAnisotropy)&&(e.texParameterf(n,o.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(r.anisotropy,l.getMaxAnisotropy())),i.get(r).__currentAnisotropy=r.anisotropy)}}function P(t,n){void 0===t.__webglInit&&(t.__webglInit=!0,n.addEventListener("dispose",b),t.__webglTexture=e.createTexture(),a.memory.textures++)}function R(t,i,l){var a=3553;i.isDataTexture2DArray&&(a=35866),i.isDataTexture3D&&(a=32879),P(t,i),n.activeTexture(33984+l),n.bindTexture(a,t.__webglTexture),e.pixelStorei(37440,i.flipY),e.pixelStorei(37441,i.premultiplyAlpha),e.pixelStorei(3317,i.unpackAlignment);var o=function(e){return!q&&(e.wrapS!==ve||e.wrapT!==ve||e.minFilter!==_e&&e.minFilter!==ze)}(i)&&!1===x(i.image),s=f(i.image,o,!1,h),m=x(s)||q,c=r.convert(i.format),u=r.convert(i.type),d=_(c,u);L(a,i,m);var p,y=i.mipmaps;if(i.isDepthTexture){if(d=6402,i.type===De){if(!1===q)throw new Error("Float Depth Texture only supported in WebGL2.0");d=36012}else q&&(d=33189);i.format===Ye&&6402===d&&i.type!==Ce&&i.type!==Ie&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),i.type=Ce,u=r.convert(i.type)),i.format===Ze&&(d=34041,i.type!==Ge&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),i.type=Ge,u=r.convert(i.type))),n.texImage2D(3553,0,d,s.width,s.height,0,c,u,null)}else if(i.isDataTexture)if(y.length>0&&m){for(var b=0,w=y.length;b<w;b++)p=y[b],n.texImage2D(3553,b,d,p.width,p.height,0,c,u,p.data);i.generateMipmaps=!1,t.__maxMipLevel=y.length-1}else n.texImage2D(3553,0,d,s.width,s.height,0,c,u,s.data),t.__maxMipLevel=0;else if(i.isCompressedTexture){for(b=0,w=y.length;b<w;b++)p=y[b],i.format!==je&&i.format!==Ve?null!==c?n.compressedTexImage2D(3553,b,d,p.width,p.height,0,p.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texImage2D(3553,b,d,p.width,p.height,0,c,u,p.data);t.__maxMipLevel=y.length-1}else if(i.isDataTexture2DArray)n.texImage3D(35866,0,d,s.width,s.height,s.depth,0,c,u,s.data),t.__maxMipLevel=0;else if(i.isDataTexture3D)n.texImage3D(32879,0,d,s.width,s.height,s.depth,0,c,u,s.data),t.__maxMipLevel=0;else if(y.length>0&&m){for(b=0,w=y.length;b<w;b++)p=y[b],n.texImage2D(3553,b,d,c,u,p);i.generateMipmaps=!1,t.__maxMipLevel=y.length-1}else n.texImage2D(3553,0,d,c,u,s),t.__maxMipLevel=0;v(i,m)&&g(3553,i,s.width,s.height),t.__version=i.version,i.onUpdate&&i.onUpdate(i)}function C(t,l,a,o){var q=r.convert(l.texture.format),s=r.convert(l.texture.type),m=_(q,s);n.texImage2D(o,0,m,l.width,l.height,0,q,s,null),e.bindFramebuffer(36160,t),e.framebufferTexture2D(36160,a,o,i.get(l.texture).__webglTexture,0),e.bindFramebuffer(36160,null)}function O(t,n,i){if(e.bindRenderbuffer(36161,t),n.depthBuffer&&!n.stencilBuffer){if(i){var l=D(n);e.renderbufferStorageMultisample(36161,l,33189,n.width,n.height)}else e.renderbufferStorage(36161,33189,n.width,n.height);e.framebufferRenderbuffer(36160,36096,36161,t)}else if(n.depthBuffer&&n.stencilBuffer){if(i){l=D(n);e.renderbufferStorageMultisample(36161,l,35056,n.width,n.height)}else e.renderbufferStorage(36161,34041,n.width,n.height);e.framebufferRenderbuffer(36160,33306,36161,t)}else{var a=_(r.convert(n.texture.format),r.convert(n.texture.type));if(i){l=D(n);e.renderbufferStorageMultisample(36161,l,a,n.width,n.height)}else e.renderbufferStorage(36161,a,n.width,n.height)}e.bindRenderbuffer(36161,null)}function I(t){var n=i.get(t),l=!0===t.isWebGLRenderTargetCube;if(t.depthTexture){if(l)throw new Error("target.depthTexture not supported in Cube render targets");!function(t,n){if(n&&n.isWebGLRenderTargetCube)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(36160,t),!n.depthTexture||!n.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");i.get(n.depthTexture).__webglTexture&&n.depthTexture.image.width===n.width&&n.depthTexture.image.height===n.height||(n.depthTexture.image.width=n.width,n.depthTexture.image.height=n.height,n.depthTexture.needsUpdate=!0),z(n.depthTexture,0);var l=i.get(n.depthTexture).__webglTexture;if(n.depthTexture.format===Ye)e.framebufferTexture2D(36160,36096,3553,l,0);else{if(n.depthTexture.format!==Ze)throw new Error("Unknown depthTexture format");e.framebufferTexture2D(36160,33306,3553,l,0)}}(n.__webglFramebuffer,t)}else if(l){n.__webglDepthbuffer=[];for(var r=0;r<6;r++)e.bindFramebuffer(36160,n.__webglFramebuffer[r]),n.__webglDepthbuffer[r]=e.createRenderbuffer(),O(n.__webglDepthbuffer[r],t)}else e.bindFramebuffer(36160,n.__webglFramebuffer),n.__webglDepthbuffer=e.createRenderbuffer(),O(n.__webglDepthbuffer,t);e.bindFramebuffer(36160,null)}function D(e){return q&&e.isWebGLMultisampleRenderTarget?Math.min(c,e.samples):0}var N=!1,B=!1;this.allocateTextureUnit=function(){var e=M;return e>=s&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+s),M+=1,e},this.resetTextureUnits=function(){M=0},this.setTexture2D=z,this.setTexture2DArray=function(e,t){var l=i.get(e);e.version>0&&l.__version!==e.version?R(l,e,t):(n.activeTexture(33984+t),n.bindTexture(35866,l.__webglTexture))},this.setTexture3D=function(e,t){var l=i.get(e);e.version>0&&l.__version!==e.version?R(l,e,t):(n.activeTexture(33984+t),n.bindTexture(32879,l.__webglTexture))},this.setTextureCube=S,this.setTextureCubeDynamic=T,this.setupRenderTarget=function(l){var o=i.get(l),s=i.get(l.texture);l.addEventListener("dispose",w),s.__webglTexture=e.createTexture(),a.memory.textures++;var m=!0===l.isWebGLRenderTargetCube,h=!0===l.isWebGLMultisampleRenderTarget,c=!0===l.isWebGLMultiviewRenderTarget,u=x(l)||q;if(m){o.__webglFramebuffer=[];for(var d=0;d<6;d++)o.__webglFramebuffer[d]=e.createFramebuffer()}else if(o.__webglFramebuffer=e.createFramebuffer(),h)if(q){o.__webglMultisampledFramebuffer=e.createFramebuffer(),o.__webglColorRenderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(36161,o.__webglColorRenderbuffer);var p=_(r.convert(l.texture.format),r.convert(l.texture.type)),f=D(l);e.renderbufferStorageMultisample(36161,f,p,l.width,l.height),e.bindFramebuffer(36160,o.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(36160,36064,36161,o.__webglColorRenderbuffer),e.bindRenderbuffer(36161,null),l.depthBuffer&&(o.__webglDepthRenderbuffer=e.createRenderbuffer(),O(o.__webglDepthRenderbuffer,l,!0)),e.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");else if(c){var y=l.width,b=l.height,M=l.numViews;e.bindFramebuffer(36160,o.__webglFramebuffer);var z=t.get("OVR_multiview2");a.memory.textures+=2;var S=e.createTexture();e.bindTexture(35866,S),e.texParameteri(35866,10240,9728),e.texParameteri(35866,10241,9728),e.texImage3D(35866,0,32856,y,b,M,0,6408,5121,null),z.framebufferTextureMultiviewOVR(36160,36064,S,0,0,M);var T=e.createTexture();e.bindTexture(35866,T),e.texParameteri(35866,10240,9728),e.texParameteri(35866,10241,9728),e.texImage3D(35866,0,35056,y,b,M,0,34041,34042,null),z.framebufferTextureMultiviewOVR(36160,33306,T,0,0,M);var E=new Array(M);for(d=0;d<M;++d)E[d]=e.createFramebuffer(),e.bindFramebuffer(36160,E[d]),e.framebufferTextureLayer(36160,36064,S,0,d);o.__webglColorTexture=S,o.__webglDepthStencilTexture=T,o.__webglViewFramebuffers=E,e.bindFramebuffer(36160,null),e.bindTexture(35866,null)}if(m){n.bindTexture(34067,s.__webglTexture),L(34067,l.texture,u);for(d=0;d<6;d++)C(o.__webglFramebuffer[d],l,36064,34069+d);v(l.texture,u)&&g(34067,l.texture,l.width,l.height),n.bindTexture(34067,null)}else c||(n.bindTexture(3553,s.__webglTexture),L(3553,l.texture,u),C(o.__webglFramebuffer,l,36064,3553),v(l.texture,u)&&g(3553,l.texture,l.width,l.height),n.bindTexture(3553,null));l.depthBuffer&&I(l)},this.updateRenderTargetMipmap=function(e){var t=e.texture;if(v(t,x(e)||q)){var l=e.isWebGLRenderTargetCube?34067:3553,r=i.get(t).__webglTexture;n.bindTexture(l,r),g(l,t,e.width,e.height),n.bindTexture(l,null)}},this.updateMultisampleRenderTarget=function(t){if(t.isWebGLMultisampleRenderTarget)if(q){var n=i.get(t);e.bindFramebuffer(36008,n.__webglMultisampledFramebuffer),e.bindFramebuffer(36009,n.__webglFramebuffer);var l=t.width,r=t.height,a=16384;t.depthBuffer&&(a|=256),t.stencilBuffer&&(a|=1024),e.blitFramebuffer(0,0,l,r,0,0,l,r,a,9728)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(e,t){e&&e.isWebGLRenderTarget&&(!1===N&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),N=!0),e=e.texture),z(e,t)},this.safeSetTextureCube=function(e,t){e&&e.isWebGLRenderTargetCube&&(!1===B&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),B=!0),e=e.texture),e&&e.isCubeTexture||Array.isArray(e.image)&&6===e.image.length?S(e,t):T(e,t)}}function so(e,t,n){var i=n.isWebGL2;return{convert:function(e){var n;if(e===Le)return 5121;if(e===Be)return 32819;if(e===Fe)return 32820;if(e===Ue)return 33635;if(e===Pe)return 5120;if(e===Re)return 5122;if(e===Ce)return 5123;if(e===Oe)return 5124;if(e===Ie)return 5125;if(e===De)return 5126;if(e===Ne)return i?5131:null!==(n=t.get("OES_texture_half_float"))?n.HALF_FLOAT_OES:null;if(e===He)return 6406;if(e===Ve)return 6407;if(e===je)return 6408;if(e===ke)return 6409;if(e===We)return 6410;if(e===Ye)return 6402;if(e===Ze)return 34041;if(e===Je)return 6403;if(e===Qe||e===Ke||e===$e||e===et){if(null===(n=t.get("WEBGL_compressed_texture_s3tc")))return null;if(e===Qe)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===Ke)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===$e)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===et)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(e===tt||e===nt||e===it||e===lt){if(null===(n=t.get("WEBGL_compressed_texture_pvrtc")))return null;if(e===tt)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===nt)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===it)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===lt)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}return e===rt?null!==(n=t.get("WEBGL_compressed_texture_etc1"))?n.COMPRESSED_RGB_ETC1_WEBGL:null:e===at||e===ot||e===qt||e===st||e===mt||e===ht||e===ct||e===ut||e===dt||e===pt||e===ft||e===xt||e===vt||e===gt?null!==(n=t.get("WEBGL_compressed_texture_astc"))?e:null:e===Ge?i?34042:null!==(n=t.get("WEBGL_depth_texture"))?n.UNSIGNED_INT_24_8_WEBGL:null:void 0}}}function mo(e,t,n,i){Rn.call(this,e,t,i),this.depthBuffer=!1,this.stencilBuffer=!1,this.numViews=n}function ho(e,t){var n,i,l,r,a,o,q,s=2,m=e.extensions,h=e.properties,c=0;function u(e){return e.isArrayCamera?e.cameras:(a[0]=e,a)}this.isAvailable=function(){if(void 0===q){var e=m.get("OVR_multiview2");if(q=null!==e&&!1===t.getContextAttributes().antialias){c=t.getParameter(e.MAX_VIEWS_OVR),n=new mo(0,0,s),o=new _n,r=[],l=[],a=[];for(var i=0;i<c;i++)r[i]=new Gn,l[i]=new Tn}}return q},this.attachCamera=function(t){!1!==function(e){if(void 0===e.isArrayCamera)return!0;var t=e.cameras;if(t.length>c)return!1;for(var n=1,i=t.length;n<i;n++)if(t[0].viewport.z!==t[n].viewport.z||t[0].viewport.w!==t[n].viewport.w)return!1;return!0}(t)&&(i=e.getRenderTarget(),function(t){if(i?o.set(i.width,i.height):e.getDrawingBufferSize(o),t.isArrayCamera){var l=t.cameras[0].viewport;n.setSize(l.z,l.w),n.setNumViews(t.cameras.length)}else n.setSize(o.x,o.y),n.setNumViews(s)}(t),e.setRenderTarget(n))},this.detachCamera=function(l){n===e.getRenderTarget()&&(e.setRenderTarget(i),function(e){var i=n,l=i.numViews,r=h.get(i).__webglViewFramebuffers,a=i.width,q=i.height;if(e.isArrayCamera)for(var s=0;s<l;s++){var m=e.cameras[s].viewport,c=m.x,u=m.y,d=c+m.z,p=u+m.w;t.bindFramebuffer(36008,r[s]),t.blitFramebuffer(0,0,a,q,c,u,d,p,16384,9728)}else t.bindFramebuffer(36008,r[0]),t.blitFramebuffer(0,0,a,q,0,0,o.x,o.y,16384,9728)}(l))},this.updateCameraProjectionMatricesUniform=function(e,n){for(var i=u(e),l=0;l<i.length;l++)r[l].copy(i[l].projectionMatrix);n.setValue(t,"projectionMatrices",r)},this.updateCameraViewMatricesUniform=function(e,n){for(var i=u(e),l=0;l<i.length;l++)r[l].copy(i[l].matrixWorldInverse);n.setValue(t,"viewMatrices",r)},this.updateObjectMatricesUniforms=function(e,n,i){for(var a=u(n),o=0;o<a.length;o++)r[o].multiplyMatrices(a[o].matrixWorldInverse,e.matrixWorld),l[o].getNormalMatrix(r[o]);i.setValue(t,"modelViewMatrices",r),i.setValue(t,"normalMatrices",l)}}function co(){ri.call(this),this.type="Group"}function uo(e){ir.call(this),this.cameras=e||[]}mo.prototype=Object.assign(Object.create(Rn.prototype),{constructor:mo,isWebGLMultiviewRenderTarget:!0,copy:function(e){return Rn.prototype.copy.call(this,e),this.numViews=e.numViews,this},setNumViews:function(e){return this.numViews!==e&&(this.numViews=e,this.dispose()),this}}),co.prototype=Object.assign(Object.create(ri.prototype),{constructor:co,isGroup:!0}),uo.prototype=Object.assign(Object.create(ir.prototype),{constructor:uo,isArrayCamera:!0});var po,fo=new Mn,xo=new Mn;function vo(e,t,n){fo.setFromMatrixPosition(t.matrixWorld),xo.setFromMatrixPosition(n.matrixWorld);var i=fo.distanceTo(xo),l=t.projectionMatrix.elements,r=n.projectionMatrix.elements,a=l[14]/(l[10]-1),o=l[14]/(l[10]+1),q=(l[9]+1)/l[5],s=(l[9]-1)/l[5],m=(l[8]-1)/l[0],h=(r[8]+1)/r[0],c=a*m,u=a*h,d=i/(-m+h),p=d*-m;t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(p),e.translateZ(d),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.getInverse(e.matrixWorld);var f=a+d,x=o+d,v=c-p,g=u+(i-p),_=q*o/x*f,y=s*o/x*f;e.projectionMatrix.makePerspective(v,g,_,y,f,x)}function go(e){var t,n,i=this,l=null,r=null,a=null,o=[],q=new Gn,s=new Gn,m=1,h="local-floor";"undefined"!=typeof window&&"VRFrameData"in window&&(r=new window.VRFrameData,window.addEventListener("vrdisplaypresentchange",y,!1));var c=new Gn,u=new yn,d=new Mn,p=new ir;p.viewport=new Pn,p.layers.enable(1);var f=new ir;f.viewport=new Pn,f.layers.enable(2);var x=new uo([p,f]);function v(){return null!==l&&!0===l.isPresenting}x.layers.enable(1),x.layers.enable(2);var g,_=new _n;function y(){if(v()){var r=l.getEyeParameters("left");t=2*r.renderWidth*m,n=r.renderHeight*m,g=e.getPixelRatio(),e.getSize(_),e.setDrawingBufferSize(t,n,1),p.viewport.set(0,0,t/2,n),f.viewport.set(t/2,0,t/2,n),z.start(),i.dispatchEvent({type:"sessionstart"})}else i.enabled&&e.setDrawingBufferSize(_.width,_.height,g),z.stop(),i.dispatchEvent({type:"sessionend"})}var b=[];function w(e){for(var t=navigator.getGamepads&&navigator.getGamepads(),n=0,i=t.length;n<i;n++){var l=t[n];if(l&&("Daydream Controller"===l.id||"Gear VR Controller"===l.id||"Oculus Go Controller"===l.id||"OpenVR Gamepad"===l.id||l.id.startsWith("Oculus Touch")||l.id.startsWith("HTC Vive Focus")||l.id.startsWith("Spatial Controller"))){var r=l.hand;if(0===e&&(""===r||"right"===r))return l;if(1===e&&"left"===r)return l}}}function M(e,i){null!==i&&4===i.length&&e.set(i[0]*t,i[1]*n,i[2]*t,i[3]*n)}this.enabled=!1,this.getController=function(e){var t=o[e];return void 0===t&&((t=new co).matrixAutoUpdate=!1,t.visible=!1,o[e]=t),t},this.getDevice=function(){return l},this.setDevice=function(e){void 0!==e&&(l=e),z.setContext(e)},this.setFramebufferScaleFactor=function(e){m=e},this.setReferenceSpaceType=function(e){h=e},this.setPoseTarget=function(e){void 0!==e&&(a=e)},this.getCamera=function(e){var t="local-floor"===h?1.6:0;if(!1===v())return e.position.set(0,t,0),e.rotation.set(0,0,0),e;if(l.depthNear=e.near,l.depthFar=e.far,l.getFrameData(r),"local-floor"===h){var n=l.stageParameters;n?q.fromArray(n.sittingToStandingTransform):q.makeTranslation(0,t,0)}var i=r.pose,m=null!==a?a:e;m.matrix.copy(q),m.matrix.decompose(m.position,m.quaternion,m.scale),null!==i.orientation&&(u.fromArray(i.orientation),m.quaternion.multiply(u)),null!==i.position&&(u.setFromRotationMatrix(q),d.fromArray(i.position),d.applyQuaternion(u),m.position.add(d)),m.updateMatrixWorld(),p.near=e.near,f.near=e.near,p.far=e.far,f.far=e.far,p.matrixWorldInverse.fromArray(r.leftViewMatrix),f.matrixWorldInverse.fromArray(r.rightViewMatrix),s.getInverse(q),"local-floor"===h&&(p.matrixWorldInverse.multiply(s),f.matrixWorldInverse.multiply(s));var g=m.parent;null!==g&&(c.getInverse(g.matrixWorld),p.matrixWorldInverse.multiply(c),f.matrixWorldInverse.multiply(c)),p.matrixWorld.getInverse(p.matrixWorldInverse),f.matrixWorld.getInverse(f.matrixWorldInverse),p.projectionMatrix.fromArray(r.leftProjectionMatrix),f.projectionMatrix.fromArray(r.rightProjectionMatrix),vo(x,p,f);var _=l.getLayers();if(_.length){var y=_[0];M(p.viewport,y.leftBounds),M(f.viewport,y.rightBounds)}return function(){for(var e=0;e<o.length;e++){var t=o[e],n=w(e);if(void 0!==n&&void 0!==n.pose){if(null===n.pose)return;var i=n.pose;!1===i.hasPosition&&t.position.set(.2,-.6,-.05),null!==i.position&&t.position.fromArray(i.position),null!==i.orientation&&t.quaternion.fromArray(i.orientation),t.matrix.compose(t.position,t.quaternion,t.scale),t.matrix.premultiply(q),t.matrix.decompose(t.position,t.quaternion,t.scale),t.matrixWorldNeedsUpdate=!0,t.visible=!0;var l="Daydream Controller"===n.id?0:1;void 0===b[e]&&(b[e]=!1),b[e]!==n.buttons[l].pressed&&(b[e]=n.buttons[l].pressed,!0===b[e]?t.dispatchEvent({type:"selectstart"}):(t.dispatchEvent({type:"selectend"}),t.dispatchEvent({type:"select"})))}else t.visible=!1}}(),x},this.getStandingMatrix=function(){return q},this.isPresenting=v;var z=new pr;this.setAnimationLoop=function(e){z.setAnimationLoop(e),v()&&z.start()},this.submitFrame=function(){v()&&l.submitFrame()},this.dispose=function(){"undefined"!=typeof window&&window.removeEventListener("vrdisplaypresentchange",y)},this.setFrameOfReferenceType=function(){console.warn("THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.")}}function _o(e,t){var n=this,i=null,l=null,r="local-floor",a=null,o=[],q=[];function s(){return null!==i&&null!==l}var m=new ir;m.layers.enable(1),m.viewport=new Pn;var h=new ir;h.layers.enable(2),h.viewport=new Pn;var c=new uo([m,h]);function u(e){for(var t=0;t<o.length;t++)q[t]===e.inputSource&&o[t].dispatchEvent({type:e.type})}function d(){e.setFramebuffer(null),e.setRenderTarget(e.getRenderTarget()),_.stop(),n.dispatchEvent({type:"sessionend"})}function p(e){l=e,_.setContext(i),_.start(),n.dispatchEvent({type:"sessionstart"})}function f(){for(var e=0;e<o.length;e++)q[e]=x(e)}function x(e){for(var t=i.inputSources,n=0;n<t.length;n++){var l=t[n],r=l.handedness;if(0===e&&("none"===r||"right"===r))return l;if(1===e&&"left"===r)return l}}function v(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.getInverse(e.matrixWorld)}c.layers.enable(1),c.layers.enable(2),this.enabled=!1,this.getController=function(e){var t=o[e];return void 0===t&&((t=new co).matrixAutoUpdate=!1,t.visible=!1,o[e]=t),t},this.setFramebufferScaleFactor=function(){},this.setReferenceSpaceType=function(e){r=e},this.getSession=function(){return i},this.setSession=function(e){null!==(i=e)&&(i.addEventListener("select",u),i.addEventListener("selectstart",u),i.addEventListener("selectend",u),i.addEventListener("end",d),i.updateRenderState({baseLayer:new XRWebGLLayer(i,t)}),i.requestReferenceSpace(r).then(p),i.addEventListener("inputsourceschange",f),f())},this.getCamera=function(e){if(s()){var t=e.parent,n=c.cameras;v(c,t);for(var i=0;i<n.length;i++)v(n[i],t);e.matrixWorld.copy(c.matrixWorld);for(var l=e.children,r=(i=0,l.length);i<r;i++)l[i].updateMatrixWorld(!0);return vo(c,m,h),c}return e},this.isPresenting=s;var g=null;var _=new pr;_.setAnimationLoop((function(t,n){if(null!==(a=n.getViewerPose(l))){var r=a.views,s=i.renderState.baseLayer;e.setFramebuffer(s.framebuffer);for(var m=0;m<r.length;m++){var h=r[m],u=s.getViewport(h),d=h.transform.inverse.matrix,p=c.cameras[m];p.matrix.fromArray(d).getInverse(p.matrix),p.projectionMatrix.fromArray(h.projectionMatrix),p.viewport.set(u.x,u.y,u.width,u.height),0===m&&c.matrix.copy(p.matrix)}}for(m=0;m<o.length;m++){var f=o[m],x=q[m];if(x){var v=n.getPose(x.targetRaySpace,l);if(null!==v){f.matrix.fromArray(v.transform.matrix),f.matrix.decompose(f.position,f.rotation,f.scale),f.visible=!0;continue}}f.visible=!1}g&&g(t)})),this.setAnimationLoop=function(e){g=e},this.dispose=function(){},this.getStandingMatrix=function(){return console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed."),new Gn},this.getDevice=function(){console.warn("THREE.WebXRManager: getDevice() has been deprecated.")},this.setDevice=function(){console.warn("THREE.WebXRManager: setDevice() has been deprecated.")},this.setFrameOfReferenceType=function(){console.warn("THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.")},this.submitFrame=function(){}}function yo(e){var t=void 0!==(e=e||{}).canvas?e.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),n=void 0!==e.context?e.context:null,i=void 0!==e.alpha&&e.alpha,l=void 0===e.depth||e.depth,r=void 0===e.stencil||e.stencil,a=void 0!==e.antialias&&e.antialias,o=void 0===e.premultipliedAlpha||e.premultipliedAlpha,q=void 0!==e.preserveDrawingBuffer&&e.preserveDrawingBuffer,s=void 0!==e.powerPreference?e.powerPreference:"default",m=void 0!==e.failIfMajorPerformanceCaveat&&e.failIfMajorPerformanceCaveat,h=null,c=null;this.domElement=t,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=le,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var u,d,p,f,v,g,_,y,b,w,M,z,S,T,E,A,L,P,R=this,C=!1,O=null,I=0,D=0,N=null,B=null,F=-1,U={geometry:null,program:null,wireframe:!1},G=null,H=null,V=new Pn,j=new Pn,k=null,W=t.width,X=t.height,Y=1,Z=new Pn(0,0,W,X),J=new Pn(0,0,W,X),Q=!1,K=new hr,$=new br,ee=!1,te=!1,ne=new Gn,ie=new Mn;function re(){return null===N?Y:1}try{var ae={alpha:i,depth:l,stencil:r,antialias:a,premultipliedAlpha:o,preserveDrawingBuffer:q,powerPreference:s,failIfMajorPerformanceCaveat:m,xrCompatible:!0};if(t.addEventListener("webglcontextlost",he,!1),t.addEventListener("webglcontextrestored",ce,!1),null===(u=n||t.getContext("webgl",ae)||t.getContext("experimental-webgl",ae)))throw null!==t.getContext("webgl")?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.");void 0===u.getShaderPrecisionFormat&&(u.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(e){throw console.error("THREE.WebGLRenderer: "+e.message),e}function oe(){d=new wr(u),!1===(p=new yr(u,d,e)).isWebGL2&&(d.get("WEBGL_depth_texture"),d.get("OES_texture_float"),d.get("OES_texture_half_float"),d.get("OES_texture_half_float_linear"),d.get("OES_standard_derivatives"),d.get("OES_element_index_uint"),d.get("ANGLE_instanced_arrays")),d.get("OES_texture_float_linear"),P=new so(u,d,p),(f=new oo(u,d,p)).scissor(j.copy(J).multiplyScalar(Y).floor()),f.viewport(V.copy(Z).multiplyScalar(Y).floor()),v=new Sr(u),g=new ka,_=new qo(u,d,f,g,p,P,v),y=new fr(u),b=new Mr(u,y,v),w=new Ar(u,b,y,v),E=new Er(u),M=new ja(R,d,p),z=new Za,S=new to,T=new gr(R,f,w,o),A=new _r(u,d,v,p),L=new zr(u,d,v,p),v.programs=M.programs,R.capabilities=p,R.extensions=d,R.properties=g,R.renderLists=z,R.state=f,R.info=v}oe();var qe="undefined"!=typeof navigator&&"xr"in navigator&&"isSessionSupported"in navigator.xr?new _o(R,u):new go(R);this.vr=qe;var se=new ho(R,u),me=new ao(R,w,p.maxTextureSize);function he(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),C=!0}function ce(){console.log("THREE.WebGLRenderer: Context Restored."),C=!1,oe()}function ue(e){var t=e.target;t.removeEventListener("dispose",ue),function(e){de(e),g.remove(e)}(t)}function de(e){var t=g.get(e).program;e.program=void 0,void 0!==t&&M.releaseProgram(t)}this.shadowMap=me,this.getContext=function(){return u},this.getContextAttributes=function(){return u.getContextAttributes()},this.forceContextLoss=function(){var e=d.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){var e=d.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return Y},this.setPixelRatio=function(e){void 0!==e&&(Y=e,this.setSize(W,X,!1))},this.getSize=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),e=new _n),e.set(W,X)},this.setSize=function(e,n,i){qe.isPresenting()?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(W=e,X=n,t.width=Math.floor(e*Y),t.height=Math.floor(n*Y),!1!==i&&(t.style.width=e+"px",t.style.height=n+"px"),this.setViewport(0,0,e,n))},this.getDrawingBufferSize=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),e=new _n),e.set(W*Y,X*Y).floor()},this.setDrawingBufferSize=function(e,n,i){W=e,X=n,Y=i,t.width=Math.floor(e*i),t.height=Math.floor(n*i),this.setViewport(0,0,e,n)},this.getCurrentViewport=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),e=new Pn),e.copy(V)},this.getViewport=function(e){return e.copy(Z)},this.setViewport=function(e,t,n,i){e.isVector4?Z.set(e.x,e.y,e.z,e.w):Z.set(e,t,n,i),f.viewport(V.copy(Z).multiplyScalar(Y).floor())},this.getScissor=function(e){return e.copy(J)},this.setScissor=function(e,t,n,i){e.isVector4?J.set(e.x,e.y,e.z,e.w):J.set(e,t,n,i),f.scissor(j.copy(J).multiplyScalar(Y).floor())},this.getScissorTest=function(){return Q},this.setScissorTest=function(e){f.setScissorTest(Q=e)},this.getClearColor=function(){return T.getClearColor()},this.setClearColor=function(){T.setClearColor.apply(T,arguments)},this.getClearAlpha=function(){return T.getClearAlpha()},this.setClearAlpha=function(){T.setClearAlpha.apply(T,arguments)},this.clear=function(e,t,n){var i=0;(void 0===e||e)&&(i|=16384),(void 0===t||t)&&(i|=256),(void 0===n||n)&&(i|=1024),u.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",he,!1),t.removeEventListener("webglcontextrestored",ce,!1),z.dispose(),S.dispose(),g.dispose(),w.dispose(),qe.dispose(),fe.stop()},this.renderBufferImmediate=function(e,t){f.initAttributes();var n=g.get(e);e.hasPositions&&!n.position&&(n.position=u.createBuffer()),e.hasNormals&&!n.normal&&(n.normal=u.createBuffer()),e.hasUvs&&!n.uv&&(n.uv=u.createBuffer()),e.hasColors&&!n.color&&(n.color=u.createBuffer());var i=t.getAttributes();e.hasPositions&&(u.bindBuffer(34962,n.position),u.bufferData(34962,e.positionArray,35048),f.enableAttribute(i.position),u.vertexAttribPointer(i.position,3,5126,!1,0,0)),e.hasNormals&&(u.bindBuffer(34962,n.normal),u.bufferData(34962,e.normalArray,35048),f.enableAttribute(i.normal),u.vertexAttribPointer(i.normal,3,5126,!1,0,0)),e.hasUvs&&(u.bindBuffer(34962,n.uv),u.bufferData(34962,e.uvArray,35048),f.enableAttribute(i.uv),u.vertexAttribPointer(i.uv,2,5126,!1,0,0)),e.hasColors&&(u.bindBuffer(34962,n.color),u.bufferData(34962,e.colorArray,35048),f.enableAttribute(i.color),u.vertexAttribPointer(i.color,3,5126,!1,0,0)),f.disableUnusedAttributes(),u.drawArrays(4,0,e.count),e.count=0},this.renderBufferDirect=function(e,t,n,i,l,r){var a=l.isMesh&&l.matrixWorld.determinant()<0;f.setMaterial(i,a);var o=ye(e,t,i,l),q=!1;U.geometry===n.id&&U.program===o.id&&U.wireframe===(!0===i.wireframe)||(U.geometry=n.id,U.program=o.id,U.wireframe=!0===i.wireframe,q=!0),l.morphTargetInfluences&&(E.update(l,n,i,o),q=!0);var s,m=n.index,h=n.attributes.position,c=1;!0===i.wireframe&&(m=b.getWireframeAttribute(n),c=2);var x=A;null!==m&&(s=y.get(m),(x=L).setIndex(s)),q&&(!function(e,t,n,i){if(!1===p.isWebGL2&&(e.isInstancedMesh||t.isInstancedBufferGeometry)&&null===d.get("ANGLE_instanced_arrays"))return;f.initAttributes();var l=t.attributes,r=i.getAttributes(),a=n.defaultAttributeValues;for(var o in r){var q=r[o];if(q>=0){var s=l[o];if(void 0!==s){var m=s.normalized,h=s.itemSize;if(void 0===(w=y.get(s)))continue;var c=w.buffer,x=w.type,v=w.bytesPerElement;if(s.isInterleavedBufferAttribute){var g=s.data,_=g.stride,b=s.offset;g&&g.isInstancedInterleavedBuffer?(f.enableAttributeAndDivisor(q,g.meshPerAttribute),void 0===t.maxInstancedCount&&(t.maxInstancedCount=g.meshPerAttribute*g.count)):f.enableAttribute(q),u.bindBuffer(34962,c),u.vertexAttribPointer(q,h,x,m,_*v,b*v)}else s.isInstancedBufferAttribute?(f.enableAttributeAndDivisor(q,s.meshPerAttribute),void 0===t.maxInstancedCount&&(t.maxInstancedCount=s.meshPerAttribute*s.count)):f.enableAttribute(q),u.bindBuffer(34962,c),u.vertexAttribPointer(q,h,x,m,0,0)}else if("instanceMatrix"===o){var w;if(void 0===(w=y.get(e.instanceMatrix)))continue;c=w.buffer,x=w.type;f.enableAttributeAndDivisor(q+0,1),f.enableAttributeAndDivisor(q+1,1),f.enableAttributeAndDivisor(q+2,1),f.enableAttributeAndDivisor(q+3,1),u.bindBuffer(34962,c),u.vertexAttribPointer(q+0,4,x,!1,64,0),u.vertexAttribPointer(q+1,4,x,!1,64,16),u.vertexAttribPointer(q+2,4,x,!1,64,32),u.vertexAttribPointer(q+3,4,x,!1,64,48)}else if(void 0!==a){var M=a[o];if(void 0!==M)switch(M.length){case 2:u.vertexAttrib2fv(q,M);break;case 3:u.vertexAttrib3fv(q,M);break;case 4:u.vertexAttrib4fv(q,M);break;default:u.vertexAttrib1fv(q,M)}}}}f.disableUnusedAttributes()}(l,n,i,o),null!==m&&u.bindBuffer(34963,s.buffer));var v=1/0;null!==m?v=m.count:void 0!==h&&(v=h.count);var g=n.drawRange.start*c,_=n.drawRange.count*c,w=null!==r?r.start*c:0,M=null!==r?r.count*c:1/0,z=Math.max(g,w),S=Math.min(v,g+_,w+M)-1,T=Math.max(0,S-z+1);if(0!==T){if(l.isMesh)if(!0===i.wireframe)f.setLineWidth(i.wireframeLinewidth*re()),x.setMode(1);else switch(l.drawMode){case At:x.setMode(4);break;case Lt:x.setMode(5);break;case Pt:x.setMode(6)}else if(l.isLine){var P=i.linewidth;void 0===P&&(P=1),f.setLineWidth(P*re()),l.isLineSegments?x.setMode(1):l.isLineLoop?x.setMode(2):x.setMode(3)}else l.isPoints?x.setMode(0):l.isSprite&&x.setMode(4);l.isInstancedMesh?x.renderInstances(n,z,T,l.count):n.isInstancedBufferGeometry?x.renderInstances(n,z,T,n.maxInstancedCount):x.render(z,T)}},this.compile=function(e,t){(c=S.get(e,t)).init(),e.traverse((function(e){e.isLight&&(c.pushLight(e),e.castShadow&&c.pushShadow(e))})),c.setupLights(t),e.traverse((function(t){if(t.material)if(Array.isArray(t.material))for(var n=0;n<t.material.length;n++)_e(t.material[n],e.fog,t);else _e(t.material,e.fog,t)}))};var pe=null;var fe=new pr;function xe(e,t,n,i){if(!1!==e.visible){if(e.layers.test(t.layers))if(e.isGroup)n=e.renderOrder;else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)c.pushLight(e),e.castShadow&&c.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||K.intersectsSprite(e)){i&&ie.setFromMatrixPosition(e.matrixWorld).applyMatrix4(ne);var l=w.update(e);(r=e.material).visible&&h.push(e,l,r,n,ie.z,null)}}else if(e.isImmediateRenderObject)i&&ie.setFromMatrixPosition(e.matrixWorld).applyMatrix4(ne),h.push(e,null,e.material,n,ie.z,null);else if((e.isMesh||e.isLine||e.isPoints)&&(e.isSkinnedMesh&&e.skeleton.frame!==v.render.frame&&(e.skeleton.update(),e.skeleton.frame=v.render.frame),!e.frustumCulled||K.intersectsObject(e))){i&&ie.setFromMatrixPosition(e.matrixWorld).applyMatrix4(ne);l=w.update(e);var r=e.material;if(Array.isArray(r))for(var a=l.groups,o=0,q=a.length;o<q;o++){var s=a[o],m=r[s.materialIndex];m&&m.visible&&h.push(e,l,m,n,ie.z,s)}else r.visible&&h.push(e,l,r,n,ie.z,null)}var u=e.children;for(o=0,q=u.length;o<q;o++)xe(u[o],t,n,i)}}function ve(e,t,n,i){for(var l=0,r=e.length;l<r;l++){var a=e[l],o=a.object,q=a.geometry,s=void 0===i?a.material:i,m=a.group;if(n.isArrayCamera)if(H=n,qe.enabled&&se.isAvailable())ge(o,t,n,q,s,m);else for(var h=n.cameras,u=0,d=h.length;u<d;u++){var p=h[u];o.layers.test(p.layers)&&(f.viewport(V.copy(p.viewport)),c.setupLights(p),ge(o,t,p,q,s,m))}else H=null,ge(o,t,n,q,s,m)}}function ge(e,t,n,i,l,r){if(e.onBeforeRender(R,t,n,i,l,r),c=S.get(t,H||n),e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),e.isImmediateRenderObject){f.setMaterial(l);var a=ye(n,t.fog,l,e);U.geometry=null,U.program=null,U.wireframe=!1,function(e,t){e.render((function(e){R.renderBufferImmediate(e,t)}))}(e,a)}else R.renderBufferDirect(n,t.fog,i,l,e,r);e.onAfterRender(R,t,n,i,l,r),c=S.get(t,H||n)}function _e(e,t,n){var i=g.get(e),l=c.state.lights,r=c.state.shadowsArray,a=l.state.version,o=M.getParameters(e,l.state,r,t,$.numPlanes,$.numIntersection,n),q=M.getProgramCacheKey(e,o),s=i.program,m=!0;if(void 0===s)e.addEventListener("dispose",ue);else if(s.cacheKey!==q)de(e);else if(i.lightsStateVersion!==a)i.lightsStateVersion=a,m=!1;else{if(void 0!==o.shaderID)return;m=!1}if(m){if(o.shaderID){var h=dr[o.shaderID];i.shader={name:e.type,uniforms:Jl(h.uniforms),vertexShader:h.vertexShader,fragmentShader:h.fragmentShader}}else i.shader={name:e.type,uniforms:e.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader};e.onBeforeCompile(i.shader,R),q=M.getProgramCacheKey(e,o),s=M.acquireProgram(e,i.shader,o,q),i.program=s,e.program=s}var u=s.getAttributes();if(e.morphTargets){e.numSupportedMorphTargets=0;for(var d=0;d<R.maxMorphTargets;d++)u["morphTarget"+d]>=0&&e.numSupportedMorphTargets++}if(e.morphNormals){e.numSupportedMorphNormals=0;for(d=0;d<R.maxMorphNormals;d++)u["morphNormal"+d]>=0&&e.numSupportedMorphNormals++}var p=i.shader.uniforms;(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(i.numClippingPlanes=$.numPlanes,i.numIntersection=$.numIntersection,p.clippingPlanes=$.uniform),i.fog=t,i.needsLights=function(e){return e.isMeshLambertMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&!0===e.lights}(e),i.lightsStateVersion=a,i.needsLights&&(p.ambientLightColor.value=l.state.ambient,p.lightProbe.value=l.state.probe,p.directionalLights.value=l.state.directional,p.spotLights.value=l.state.spot,p.rectAreaLights.value=l.state.rectArea,p.pointLights.value=l.state.point,p.hemisphereLights.value=l.state.hemi,p.directionalShadowMap.value=l.state.directionalShadowMap,p.directionalShadowMatrix.value=l.state.directionalShadowMatrix,p.spotShadowMap.value=l.state.spotShadowMap,p.spotShadowMatrix.value=l.state.spotShadowMatrix,p.pointShadowMap.value=l.state.pointShadowMap,p.pointShadowMatrix.value=l.state.pointShadowMatrix);var f=i.program.getUniforms(),x=Sa.seqWithValue(f.seq,p);i.uniformsList=x}function ye(e,t,n,i){_.resetTextureUnits();var l=g.get(n),r=c.state.lights;if(ee&&(te||e!==G)){var a=e===G&&n.id===F;$.setState(n.clippingPlanes,n.clipIntersection,n.clipShadows,e,l,a)}!1===n.needsUpdate&&(void 0===l.program?n.needsUpdate=!0:n.fog&&l.fog!==t?n.needsUpdate=!0:l.needsLights&&l.lightsStateVersion!==r.state.version?n.needsUpdate=!0:void 0===l.numClippingPlanes||l.numClippingPlanes===$.numPlanes&&l.numIntersection===$.numIntersection||(n.needsUpdate=!0)),n.needsUpdate&&(_e(n,t,i),n.needsUpdate=!1);var o,q,s=!1,m=!1,h=!1,d=l.program,v=d.getUniforms(),y=l.shader.uniforms;if(f.useProgram(d.program)&&(s=!0,m=!0,h=!0),n.id!==F&&(F=n.id,m=!0),s||G!==e){if(d.numMultiviewViews>0?se.updateCameraProjectionMatricesUniform(e,v):v.setValue(u,"projectionMatrix",e.projectionMatrix),p.logarithmicDepthBuffer&&v.setValue(u,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),G!==e&&(G=e,m=!0,h=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshStandardMaterial||n.envMap){var b=v.map.cameraPosition;void 0!==b&&b.setValue(u,ie.setFromMatrixPosition(e.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial)&&v.setValue(u,"isOrthographic",!0===e.isOrthographicCamera),(n.isMeshPhongMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.skinning)&&(d.numMultiviewViews>0?se.updateCameraViewMatricesUniform(e,v):v.setValue(u,"viewMatrix",e.matrixWorldInverse))}if(n.skinning){v.setOptional(u,i,"bindMatrix"),v.setOptional(u,i,"bindMatrixInverse");var w=i.skeleton;if(w){var M=w.bones;if(p.floatVertexTextures){if(void 0===w.boneTexture){var z=Math.sqrt(4*M.length);z=gn.ceilPowerOfTwo(z),z=Math.max(z,4);var S=new Float32Array(z*z*4);S.set(w.boneMatrices);var T=new qr(S,z,z,je,De);w.boneMatrices=S,w.boneTexture=T,w.boneTextureSize=z}v.setValue(u,"boneTexture",w.boneTexture,_),v.setValue(u,"boneTextureSize",w.boneTextureSize)}else v.setOptional(u,w,"boneMatrices")}}return(m||l.receiveShadow!==i.receiveShadow)&&(l.receiveShadow=i.receiveShadow,v.setValue(u,"receiveShadow",i.receiveShadow)),m&&(v.setValue(u,"toneMappingExposure",R.toneMappingExposure),v.setValue(u,"toneMappingWhitePoint",R.toneMappingWhitePoint),l.needsLights&&(q=h,(o=y).ambientLightColor.needsUpdate=q,o.lightProbe.needsUpdate=q,o.directionalLights.needsUpdate=q,o.pointLights.needsUpdate=q,o.spotLights.needsUpdate=q,o.rectAreaLights.needsUpdate=q,o.hemisphereLights.needsUpdate=q),t&&n.fog&&function(e,t){e.fogColor.value.copy(t.color),t.isFog?(e.fogNear.value=t.near,e.fogFar.value=t.far):t.isFogExp2&&(e.fogDensity.value=t.density)}(y,t),n.isMeshBasicMaterial?be(y,n):n.isMeshLambertMaterial?(be(y,n),function(e,t){t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap)}(y,n)):n.isMeshPhongMaterial?(be(y,n),n.isMeshToonMaterial?function(e,t){we(e,t),t.gradientMap&&(e.gradientMap.value=t.gradientMap)}(y,n):we(y,n)):n.isMeshStandardMaterial?(be(y,n),n.isMeshPhysicalMaterial?function(e,t){Me(e,t),e.reflectivity.value=t.reflectivity,e.clearcoat.value=t.clearcoat,e.clearcoatRoughness.value=t.clearcoatRoughness,t.sheen&&e.sheen.value.copy(t.sheen);t.clearcoatNormalMap&&(e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale),e.clearcoatNormalMap.value=t.clearcoatNormalMap,t.side===x&&e.clearcoatNormalScale.value.negate());e.transparency.value=t.transparency}(y,n):Me(y,n)):n.isMeshMatcapMaterial?(be(y,n),function(e,t){t.matcap&&(e.matcap.value=t.matcap);t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,t.side===x&&(e.bumpScale.value*=-1));t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),t.side===x&&e.normalScale.value.negate());t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(y,n)):n.isMeshDepthMaterial?(be(y,n),function(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(y,n)):n.isMeshDistanceMaterial?(be(y,n),function(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias);e.referencePosition.value.copy(t.referencePosition),e.nearDistance.value=t.nearDistance,e.farDistance.value=t.farDistance}(y,n)):n.isMeshNormalMaterial?(be(y,n),function(e,t){t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,t.side===x&&(e.bumpScale.value*=-1));t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),t.side===x&&e.normalScale.value.negate());t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(y,n)):n.isLineBasicMaterial?(function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity}(y,n),n.isLineDashedMaterial&&function(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}(y,n)):n.isPointsMaterial?function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.size.value=t.size*Y,e.scale.value=.5*X,t.map&&(e.map.value=t.map);t.alphaMap&&(e.alphaMap.value=t.alphaMap);var n;t.map?n=t.map:t.alphaMap&&(n=t.alphaMap);void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),e.uvTransform.value.copy(n.matrix))}(y,n):n.isSpriteMaterial?function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.rotation.value=t.rotation,t.map&&(e.map.value=t.map);t.alphaMap&&(e.alphaMap.value=t.alphaMap);var n;t.map?n=t.map:t.alphaMap&&(n=t.alphaMap);void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),e.uvTransform.value.copy(n.matrix))}(y,n):n.isShadowMaterial&&(y.color.value.copy(n.color),y.opacity.value=n.opacity),void 0!==y.ltc_1&&(y.ltc_1.value=ur.LTC_1),void 0!==y.ltc_2&&(y.ltc_2.value=ur.LTC_2),Sa.upload(u,l.uniformsList,y,_),n.isShaderMaterial&&(n.uniformsNeedUpdate=!1)),n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(Sa.upload(u,l.uniformsList,y,_),n.uniformsNeedUpdate=!1),n.isSpriteMaterial&&v.setValue(u,"center",i.center),d.numMultiviewViews>0?se.updateObjectMatricesUniforms(i,e,v):(v.setValue(u,"modelViewMatrix",i.modelViewMatrix),v.setValue(u,"normalMatrix",i.normalMatrix)),v.setValue(u,"modelMatrix",i.matrixWorld),d}function be(e,t){var n;e.opacity.value=t.opacity,t.color&&e.diffuse.value.copy(t.color),t.emissive&&e.emissive.value.copy(t.emissive).multiplyScalar(t.emissiveIntensity),t.map&&(e.map.value=t.map),t.alphaMap&&(e.alphaMap.value=t.alphaMap),t.specularMap&&(e.specularMap.value=t.specularMap),t.envMap&&(e.envMap.value=t.envMap,e.flipEnvMap.value=t.envMap.isCubeTexture?-1:1,e.reflectivity.value=t.reflectivity,e.refractionRatio.value=t.refractionRatio,e.maxMipLevel.value=g.get(t.envMap).__maxMipLevel),t.lightMap&&(e.lightMap.value=t.lightMap,e.lightMapIntensity.value=t.lightMapIntensity),t.aoMap&&(e.aoMap.value=t.aoMap,e.aoMapIntensity.value=t.aoMapIntensity),t.map?n=t.map:t.specularMap?n=t.specularMap:t.displacementMap?n=t.displacementMap:t.normalMap?n=t.normalMap:t.bumpMap?n=t.bumpMap:t.roughnessMap?n=t.roughnessMap:t.metalnessMap?n=t.metalnessMap:t.alphaMap?n=t.alphaMap:t.emissiveMap&&(n=t.emissiveMap),void 0!==n&&(n.isWebGLRenderTarget&&(n=n.texture),!0===n.matrixAutoUpdate&&n.updateMatrix(),e.uvTransform.value.copy(n.matrix))}function we(e,t){e.specular.value.copy(t.specular),e.shininess.value=Math.max(t.shininess,1e-4),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,t.side===x&&(e.bumpScale.value*=-1)),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),t.side===x&&e.normalScale.value.negate()),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}function Me(e,t){e.roughness.value=t.roughness,e.metalness.value=t.metalness,t.roughnessMap&&(e.roughnessMap.value=t.roughnessMap),t.metalnessMap&&(e.metalnessMap.value=t.metalnessMap),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,t.side===x&&(e.bumpScale.value*=-1)),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),t.side===x&&e.normalScale.value.negate()),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias),t.envMap&&(e.envMapIntensity.value=t.envMapIntensity)}fe.setAnimationLoop((function(e){qe.isPresenting()||pe&&pe(e)})),"undefined"!=typeof window&&fe.setContext(window),this.setAnimationLoop=function(e){pe=e,qe.setAnimationLoop(e),fe.start()},this.render=function(e,t){var n,i;if(void 0!==arguments[2]&&(console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."),n=arguments[2]),void 0!==arguments[3]&&(console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."),i=arguments[3]),t&&t.isCamera){if(!C){U.geometry=null,U.program=null,U.wireframe=!1,F=-1,G=null,!0===e.autoUpdate&&e.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),qe.enabled&&(t=qe.getCamera(t)),(c=S.get(e,t)).init(),e.onBeforeRender(R,e,t,n||N),ne.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),K.setFromMatrix(ne),te=this.localClippingEnabled,ee=$.init(this.clippingPlanes,te,t),(h=z.get(e,t)).init(),xe(e,t,0,R.sortObjects),!0===R.sortObjects&&h.sort(),ee&&$.beginShadows();var l=c.state.shadowsArray;me.render(l,e,t),c.setupLights(t),ee&&$.endShadows(),this.info.autoReset&&this.info.reset(),void 0!==n&&this.setRenderTarget(n),qe.enabled&&se.isAvailable()&&se.attachCamera(t),T.render(h,e,t,i);var r=h.opaque,a=h.transparent;if(e.overrideMaterial){var o=e.overrideMaterial;r.length&&ve(r,e,t,o),a.length&&ve(a,e,t,o)}else r.length&&ve(r,e,t),a.length&&ve(a,e,t);e.onAfterRender(R,e,t),null!==N&&(_.updateRenderTargetMipmap(N),_.updateMultisampleRenderTarget(N)),f.buffers.depth.setTest(!0),f.buffers.depth.setMask(!0),f.buffers.color.setMask(!0),f.setPolygonOffset(!1),qe.enabled&&(se.isAvailable()&&se.detachCamera(t),qe.submitFrame()),h=null,c=null}}else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")},this.setFramebuffer=function(e){O!==e&&null===N&&u.bindFramebuffer(36160,e),O=e},this.getActiveCubeFace=function(){return I},this.getActiveMipmapLevel=function(){return D},this.getRenderTarget=function(){return N},this.setRenderTarget=function(e,t,n){N=e,I=t,D=n,e&&void 0===g.get(e).__webglFramebuffer&&_.setupRenderTarget(e);var i=O,l=!1;if(e){var r=g.get(e).__webglFramebuffer;e.isWebGLRenderTargetCube?(i=r[t||0],l=!0):i=e.isWebGLMultisampleRenderTarget?g.get(e).__webglMultisampledFramebuffer:r,V.copy(e.viewport),j.copy(e.scissor),k=e.scissorTest}else V.copy(Z).multiplyScalar(Y).floor(),j.copy(J).multiplyScalar(Y).floor(),k=Q;if(B!==i&&(u.bindFramebuffer(36160,i),B=i),f.viewport(V),f.scissor(j),f.setScissorTest(k),l){var a=g.get(e.texture);u.framebufferTexture2D(36160,36064,34069+(t||0),a.__webglTexture,n||0)}},this.readRenderTargetPixels=function(e,t,n,i,l,r,a){if(e&&e.isWebGLRenderTarget){var o=g.get(e).__webglFramebuffer;if(e.isWebGLRenderTargetCube&&void 0!==a&&(o=o[a]),o){var q=!1;o!==B&&(u.bindFramebuffer(36160,o),q=!0);try{var s=e.texture,m=s.format,h=s.type;if(m!==je&&P.convert(m)!==u.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(h===Le||P.convert(h)===u.getParameter(35738)||h===De&&(p.isWebGL2||d.get("OES_texture_float")||d.get("WEBGL_color_buffer_float"))||h===Ne&&(p.isWebGL2?d.get("EXT_color_buffer_float"):d.get("EXT_color_buffer_half_float"))))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===u.checkFramebufferStatus(36160)?t>=0&&t<=e.width-i&&n>=0&&n<=e.height-l&&u.readPixels(t,n,i,l,P.convert(m),P.convert(h),r):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{q&&u.bindFramebuffer(36160,B)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")},this.copyFramebufferToTexture=function(e,t,n){void 0===n&&(n=0);var i=Math.pow(2,-n),l=Math.floor(t.image.width*i),r=Math.floor(t.image.height*i),a=P.convert(t.format);_.setTexture2D(t,0),u.copyTexImage2D(3553,n,a,e.x,e.y,l,r,0),f.unbindTexture()},this.copyTextureToTexture=function(e,t,n,i){var l=t.image.width,r=t.image.height,a=P.convert(n.format),o=P.convert(n.type);_.setTexture2D(n,0),t.isDataTexture?u.texSubImage2D(3553,i||0,e.x,e.y,l,r,a,o,t.image.data):u.texSubImage2D(3553,i||0,e.x,e.y,a,o,t.image),f.unbindTexture()},this.initTexture=function(e){_.setTexture2D(e,0),f.unbindTexture()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}function bo(e,t){this.name="",this.color=new Zi(e),this.density=void 0!==t?t:25e-5}function wo(e,t,n){this.name="",this.color=new Zi(e),this.near=void 0!==t?t:1,this.far=void 0!==n?n:1e3}function Mo(e,t){this.array=e,this.stride=t,this.count=void 0!==e?e.length/t:0,this.usage=on,this.updateRange={offset:0,count:-1},this.version=0}function zo(e,t,n,i){this.data=e,this.itemSize=t,this.offset=n,this.normalized=!0===i}function So(e){tl.call(this),this.type="SpriteMaterial",this.color=new Zi(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(e)}Object.assign(go.prototype,fn.prototype),Object.assign(_o.prototype,fn.prototype),Object.assign(bo.prototype,{isFogExp2:!0,clone:function(){return new bo(this.color,this.density)},toJSON:function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}),Object.assign(wo.prototype,{isFog:!0,clone:function(){return new wo(this.color,this.near,this.far)},toJSON:function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}),Object.defineProperty(Mo.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.assign(Mo.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setUsage:function(e){return this.usage=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this},copyAt:function(e,t,n){e*=this.stride,n*=t.stride;for(var i=0,l=this.stride;i<l;i++)this.array[e+i]=t.array[n+i];return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(e){return this.onUploadCallback=e,this}}),Object.defineProperties(zo.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(zo.prototype,{isInterleavedBufferAttribute:!0,setX:function(e,t){return this.data.array[e*this.data.stride+this.offset]=t,this},setY:function(e,t){return this.data.array[e*this.data.stride+this.offset+1]=t,this},setZ:function(e,t){return this.data.array[e*this.data.stride+this.offset+2]=t,this},setW:function(e,t){return this.data.array[e*this.data.stride+this.offset+3]=t,this},getX:function(e){return this.data.array[e*this.data.stride+this.offset]},getY:function(e){return this.data.array[e*this.data.stride+this.offset+1]},getZ:function(e){return this.data.array[e*this.data.stride+this.offset+2]},getW:function(e){return this.data.array[e*this.data.stride+this.offset+3]},setXY:function(e,t,n){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this},setXYZ:function(e,t,n,i){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this},setXYZW:function(e,t,n,i,l){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this.data.array[e+3]=l,this}}),So.prototype=Object.create(tl.prototype),So.prototype.constructor=So,So.prototype.isSpriteMaterial=!0,So.prototype.copy=function(e){return tl.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this};var To=new Mn,Eo=new Mn,Ao=new Mn,Lo=new _n,Po=new _n,Ro=new Gn,Co=new Mn,Oo=new Mn,Io=new Mn,Do=new _n,No=new _n,Bo=new _n;function Fo(e){if(ri.call(this),this.type="Sprite",void 0===po){po=new bl;var t=new Mo(new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),5);po.setIndex([0,1,2,0,2,3]),po.setAttribute("position",new zo(t,3,0,!1)),po.setAttribute("uv",new zo(t,2,3,!1))}this.geometry=po,this.material=void 0!==e?e:new So,this.center=new _n(.5,.5)}function Uo(e,t,n,i,l,r){Lo.subVectors(e,n).addScalar(.5).multiply(i),void 0!==l?(Po.x=r*Lo.x-l*Lo.y,Po.y=l*Lo.x+r*Lo.y):Po.copy(Lo),e.copy(t),e.x+=Po.x,e.y+=Po.y,e.applyMatrix4(Ro)}Fo.prototype=Object.assign(Object.create(ri.prototype),{constructor:Fo,isSprite:!0,raycast:function(e,t){null===e.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),Eo.setFromMatrixScale(this.matrixWorld),Ro.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),Ao.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&Eo.multiplyScalar(-Ao.z);var n,i,l=this.material.rotation;0!==l&&(i=Math.cos(l),n=Math.sin(l));var r=this.center;Uo(Co.set(-.5,-.5,0),Ao,r,Eo,n,i),Uo(Oo.set(.5,-.5,0),Ao,r,Eo,n,i),Uo(Io.set(.5,.5,0),Ao,r,Eo,n,i),Do.set(0,0),No.set(1,0),Bo.set(1,1);var a=e.ray.intersectTriangle(Co,Oo,Io,!1,To);if(null!==a||(Uo(Oo.set(-.5,.5,0),Ao,r,Eo,n,i),No.set(0,1),null!==(a=e.ray.intersectTriangle(Co,Io,Oo,!1,To)))){var o=e.ray.origin.distanceTo(To);o<e.near||o>e.far||t.push({distance:o,point:To.clone(),uv:ki.getUV(To,Co,Oo,Io,Do,No,Bo,new _n),face:null,object:this})}},clone:function(){return new this.constructor(this.material).copy(this)},copy:function(e){return ri.prototype.copy.call(this,e),void 0!==e.center&&this.center.copy(e.center),this}});var Go=new Mn,Ho=new Mn;function Vo(){ri.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}}),this.autoUpdate=!0}function jo(e,t){e&&e.isGeometry&&console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."),Ul.call(this,e,t),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Gn,this.bindMatrixInverse=new Gn}Vo.prototype=Object.assign(Object.create(ri.prototype),{constructor:Vo,isLOD:!0,copy:function(e){ri.prototype.copy.call(this,e,!1);for(var t=e.levels,n=0,i=t.length;n<i;n++){var l=t[n];this.addLevel(l.object.clone(),l.distance)}return this},addLevel:function(e,t){void 0===t&&(t=0),t=Math.abs(t);for(var n=this.levels,i=0;i<n.length&&!(t<n[i].distance);i++);return n.splice(i,0,{distance:t,object:e}),this.add(e),this},getObjectForDistance:function(e){for(var t=this.levels,n=1,i=t.length;n<i&&!(e<t[n].distance);n++);return t[n-1].object},raycast:function(e,t){Go.setFromMatrixPosition(this.matrixWorld);var n=e.ray.origin.distanceTo(Go);this.getObjectForDistance(n).raycast(e,t)},update:function(e){var t=this.levels;if(t.length>1){Go.setFromMatrixPosition(e.matrixWorld),Ho.setFromMatrixPosition(this.matrixWorld);var n=Go.distanceTo(Ho);t[0].object.visible=!0;for(var i=1,l=t.length;i<l&&n>=t[i].distance;i++)t[i-1].object.visible=!1,t[i].object.visible=!0;for(;i<l;i++)t[i].object.visible=!1}},toJSON:function(e){var t=ri.prototype.toJSON.call(this,e);t.object.levels=[];for(var n=this.levels,i=0,l=n.length;i<l;i++){var r=n[i];t.object.levels.push({object:r.object.uuid,distance:r.distance})}return t}}),jo.prototype=Object.assign(Object.create(Ul.prototype),{constructor:jo,isSkinnedMesh:!0,bind:function(e,t){this.skeleton=e,void 0===t&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.getInverse(t)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){for(var e=new Pn,t=this.geometry.attributes.skinWeight,n=0,i=t.count;n<i;n++){e.x=t.getX(n),e.y=t.getY(n),e.z=t.getZ(n),e.w=t.getW(n);var l=1/e.manhattanLength();l!==1/0?e.multiplyScalar(l):e.set(1,0,0,0),t.setXYZW(n,e.x,e.y,e.z,e.w)}},updateMatrixWorld:function(e){Ul.prototype.updateMatrixWorld.call(this,e),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var ko=new Gn,Wo=new Gn;function Xo(e,t){if(e=e||[],this.bones=e.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),this.frame=-1,void 0===t)this.calculateInverses();else if(this.bones.length===t.length)this.boneInverses=t.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(var n=0,i=this.bones.length;n<i;n++)this.boneInverses.push(new Gn)}}function Yo(){ri.call(this),this.type="Bone"}function Zo(e,t,n){Ul.call(this,e,t),this.instanceMatrix=new il(new Float32Array(16*n),16),this.count=n}function Jo(e){tl.call(this),this.type="LineBasicMaterial",this.color=new Zi(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(e)}Object.assign(Xo.prototype,{calculateInverses:function(){this.boneInverses=[];for(var e=0,t=this.bones.length;e<t;e++){var n=new Gn;this.bones[e]&&n.getInverse(this.bones[e].matrixWorld),this.boneInverses.push(n)}},pose:function(){var e,t,n;for(t=0,n=this.bones.length;t<n;t++)(e=this.bones[t])&&e.matrixWorld.getInverse(this.boneInverses[t]);for(t=0,n=this.bones.length;t<n;t++)(e=this.bones[t])&&(e.parent&&e.parent.isBone?(e.matrix.getInverse(e.parent.matrixWorld),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))},update:function(){for(var e=this.bones,t=this.boneInverses,n=this.boneMatrices,i=this.boneTexture,l=0,r=e.length;l<r;l++){var a=e[l]?e[l].matrixWorld:Wo;ko.multiplyMatrices(a,t[l]),ko.toArray(n,16*l)}void 0!==i&&(i.needsUpdate=!0)},clone:function(){return new Xo(this.bones,this.boneInverses)},getBoneByName:function(e){for(var t=0,n=this.bones.length;t<n;t++){var i=this.bones[t];if(i.name===e)return i}}}),Yo.prototype=Object.assign(Object.create(ri.prototype),{constructor:Yo,isBone:!0}),Zo.prototype=Object.assign(Object.create(Ul.prototype),{constructor:Zo,isInstancedMesh:!0,raycast:function(){},setMatrixAt:function(e,t){t.toArray(this.instanceMatrix.array,16*e)},updateMorphTargets:function(){}}),Jo.prototype=Object.create(tl.prototype),Jo.prototype.constructor=Jo,Jo.prototype.isLineBasicMaterial=!0,Jo.prototype.copy=function(e){return tl.prototype.copy.call(this,e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this};var Qo=new Mn,Ko=new Mn,$o=new Gn,eq=new Li,tq=new bi;function nq(e,t,n){1===n&&console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."),ri.call(this),this.type="Line",this.geometry=void 0!==e?e:new bl,this.material=void 0!==t?t:new Jo({color:16777215*Math.random()})}nq.prototype=Object.assign(Object.create(ri.prototype),{constructor:nq,isLine:!0,computeLineDistances:function(){var e=this.geometry;if(e.isBufferGeometry)if(null===e.index){for(var t=e.attributes.position,n=[0],i=1,l=t.count;i<l;i++)Qo.fromBufferAttribute(t,i-1),Ko.fromBufferAttribute(t,i),n[i]=n[i-1],n[i]+=Qo.distanceTo(Ko);e.setAttribute("lineDistance",new hl(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(e.isGeometry){var r=e.vertices;(n=e.lineDistances)[0]=0;for(i=1,l=r.length;i<l;i++)n[i]=n[i-1],n[i]+=r[i-1].distanceTo(r[i])}return this},raycast:function(e,t){var n=e.linePrecision,i=this.geometry,l=this.matrixWorld;if(null===i.boundingSphere&&i.computeBoundingSphere(),tq.copy(i.boundingSphere),tq.applyMatrix4(l),tq.radius+=n,!1!==e.ray.intersectsSphere(tq)){$o.getInverse(l),eq.copy(e.ray).applyMatrix4($o);var r=n/((this.scale.x+this.scale.y+this.scale.z)/3),a=r*r,o=new Mn,q=new Mn,s=new Mn,m=new Mn,h=this&&this.isLineSegments?2:1;if(i.isBufferGeometry){var c=i.index,u=i.attributes.position.array;if(null!==c)for(var d=c.array,p=0,f=d.length-1;p<f;p+=h){var x=d[p],v=d[p+1];if(o.fromArray(u,3*x),q.fromArray(u,3*v),!(eq.distanceSqToSegment(o,q,m,s)>a))m.applyMatrix4(this.matrixWorld),(y=e.ray.origin.distanceTo(m))<e.near||y>e.far||t.push({distance:y,point:s.clone().applyMatrix4(this.matrixWorld),index:p,face:null,faceIndex:null,object:this})}else for(p=0,f=u.length/3-1;p<f;p+=h){if(o.fromArray(u,3*p),q.fromArray(u,3*p+3),!(eq.distanceSqToSegment(o,q,m,s)>a))m.applyMatrix4(this.matrixWorld),(y=e.ray.origin.distanceTo(m))<e.near||y>e.far||t.push({distance:y,point:s.clone().applyMatrix4(this.matrixWorld),index:p,face:null,faceIndex:null,object:this})}}else if(i.isGeometry){var g=i.vertices,_=g.length;for(p=0;p<_-1;p+=h){var y;if(!(eq.distanceSqToSegment(g[p],g[p+1],m,s)>a))m.applyMatrix4(this.matrixWorld),(y=e.ray.origin.distanceTo(m))<e.near||y>e.far||t.push({distance:y,point:s.clone().applyMatrix4(this.matrixWorld),index:p,face:null,faceIndex:null,object:this})}}}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var iq=new Mn,lq=new Mn;function rq(e,t){nq.call(this,e,t),this.type="LineSegments"}function aq(e,t){nq.call(this,e,t),this.type="LineLoop"}function oq(e){tl.call(this),this.type="PointsMaterial",this.color=new Zi(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.setValues(e)}rq.prototype=Object.assign(Object.create(nq.prototype),{constructor:rq,isLineSegments:!0,computeLineDistances:function(){var e=this.geometry;if(e.isBufferGeometry)if(null===e.index){for(var t=e.attributes.position,n=[],i=0,l=t.count;i<l;i+=2)iq.fromBufferAttribute(t,i),lq.fromBufferAttribute(t,i+1),n[i]=0===i?0:n[i-1],n[i+1]=n[i]+iq.distanceTo(lq);e.setAttribute("lineDistance",new hl(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(e.isGeometry){var r=e.vertices;for(n=e.lineDistances,i=0,l=r.length;i<l;i+=2)iq.copy(r[i]),lq.copy(r[i+1]),n[i]=0===i?0:n[i-1],n[i+1]=n[i]+iq.distanceTo(lq)}return this}}),aq.prototype=Object.assign(Object.create(nq.prototype),{constructor:aq,isLineLoop:!0}),oq.prototype=Object.create(tl.prototype),oq.prototype.constructor=oq,oq.prototype.isPointsMaterial=!0,oq.prototype.copy=function(e){return tl.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.morphTargets=e.morphTargets,this};var qq=new Gn,sq=new Li,mq=new bi,hq=new Mn;function cq(e,t){ri.call(this),this.type="Points",this.geometry=void 0!==e?e:new bl,this.material=void 0!==t?t:new oq({color:16777215*Math.random()}),this.updateMorphTargets()}function uq(e,t,n,i,l,r,a){var o=sq.distanceSqToPoint(e);if(o<n){var q=new Mn;sq.closestPointToPoint(e,q),q.applyMatrix4(i);var s=l.ray.origin.distanceTo(q);if(s<l.near||s>l.far)return;r.push({distance:s,distanceToRay:Math.sqrt(o),point:q,index:t,face:null,object:a})}}function dq(e,t,n,i,l,r,a,o,q){Ln.call(this,e,t,n,i,l,r,a,o,q),this.format=void 0!==a?a:Ve,this.minFilter=void 0!==r?r:ze,this.magFilter=void 0!==l?l:ze,this.generateMipmaps=!1}function pq(e,t,n,i,l,r,a,o,q,s,m,h){Ln.call(this,null,r,a,o,q,s,i,l,m,h),this.image={width:t,height:n},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}function fq(e,t,n,i,l,r,a,o,q){Ln.call(this,e,t,n,i,l,r,a,o,q),this.needsUpdate=!0}function xq(e,t,n,i,l,r,a,o,q,s){if((s=void 0!==s?s:Ye)!==Ye&&s!==Ze)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&s===Ye&&(n=Ce),void 0===n&&s===Ze&&(n=Ge),Ln.call(this,null,i,l,r,a,o,s,n,q),this.image={width:e,height:t},this.magFilter=void 0!==a?a:_e,this.minFilter=void 0!==o?o:_e,this.flipY=!1,this.generateMipmaps=!1}function vq(e){bl.call(this),this.type="WireframeGeometry";var t,n,i,l,r,a,o,q,s,m,h=[],c=[0,0],u={},d=["a","b","c"];if(e&&e.isGeometry){var p=e.faces;for(t=0,i=p.length;t<i;t++){var f=p[t];for(n=0;n<3;n++)o=f[d[n]],q=f[d[(n+1)%3]],c[0]=Math.min(o,q),c[1]=Math.max(o,q),void 0===u[s=c[0]+","+c[1]]&&(u[s]={index1:c[0],index2:c[1]})}for(s in u)a=u[s],m=e.vertices[a.index1],h.push(m.x,m.y,m.z),m=e.vertices[a.index2],h.push(m.x,m.y,m.z)}else if(e&&e.isBufferGeometry){var x,v,g,_,y,b,w;if(m=new Mn,null!==e.index){for(x=e.attributes.position,v=e.index,0===(g=e.groups).length&&(g=[{start:0,count:v.count,materialIndex:0}]),l=0,r=g.length;l<r;++l)for(t=y=(_=g[l]).start,i=y+_.count;t<i;t+=3)for(n=0;n<3;n++)o=v.getX(t+n),q=v.getX(t+(n+1)%3),c[0]=Math.min(o,q),c[1]=Math.max(o,q),void 0===u[s=c[0]+","+c[1]]&&(u[s]={index1:c[0],index2:c[1]});for(s in u)a=u[s],m.fromBufferAttribute(x,a.index1),h.push(m.x,m.y,m.z),m.fromBufferAttribute(x,a.index2),h.push(m.x,m.y,m.z)}else for(t=0,i=(x=e.attributes.position).count/3;t<i;t++)for(n=0;n<3;n++)b=3*t+n,m.fromBufferAttribute(x,b),h.push(m.x,m.y,m.z),w=3*t+(n+1)%3,m.fromBufferAttribute(x,w),h.push(m.x,m.y,m.z)}this.setAttribute("position",new hl(h,3))}function gq(e,t,n){Xl.call(this),this.type="ParametricGeometry",this.parameters={func:e,slices:t,stacks:n},this.fromBufferGeometry(new _q(e,t,n)),this.mergeVertices()}function _q(e,t,n){bl.call(this),this.type="ParametricBufferGeometry",this.parameters={func:e,slices:t,stacks:n};var i,l,r=[],a=[],o=[],q=[],s=new Mn,m=new Mn,h=new Mn,c=new Mn,u=new Mn;e.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");var d=t+1;for(i=0;i<=n;i++){var p=i/n;for(l=0;l<=t;l++){var f=l/t;e(f,p,m),a.push(m.x,m.y,m.z),f-1e-5>=0?(e(f-1e-5,p,h),c.subVectors(m,h)):(e(f+1e-5,p,h),c.subVectors(h,m)),p-1e-5>=0?(e(f,p-1e-5,h),u.subVectors(m,h)):(e(f,p+1e-5,h),u.subVectors(h,m)),s.crossVectors(c,u).normalize(),o.push(s.x,s.y,s.z),q.push(f,p)}}for(i=0;i<n;i++)for(l=0;l<t;l++){var x=i*d+l,v=i*d+l+1,g=(i+1)*d+l+1,_=(i+1)*d+l;r.push(x,v,_),r.push(v,g,_)}this.setIndex(r),this.setAttribute("position",new hl(a,3)),this.setAttribute("normal",new hl(o,3)),this.setAttribute("uv",new hl(q,2))}function yq(e,t,n,i){Xl.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:n,detail:i},this.fromBufferGeometry(new bq(e,t,n,i)),this.mergeVertices()}function bq(e,t,n,i){bl.call(this),this.type="PolyhedronBufferGeometry",this.parameters={vertices:e,indices:t,radius:n,detail:i},n=n||1;var l=[],r=[];function a(e,t,n,i){var l,r,a=Math.pow(2,i),q=[];for(l=0;l<=a;l++){q[l]=[];var s=e.clone().lerp(n,l/a),m=t.clone().lerp(n,l/a),h=a-l;for(r=0;r<=h;r++)q[l][r]=0===r&&l===a?s:s.clone().lerp(m,r/h)}for(l=0;l<a;l++)for(r=0;r<2*(a-l)-1;r++){var c=Math.floor(r/2);r%2==0?(o(q[l][c+1]),o(q[l+1][c]),o(q[l][c])):(o(q[l][c+1]),o(q[l+1][c+1]),o(q[l+1][c]))}}function o(e){l.push(e.x,e.y,e.z)}function q(t,n){var i=3*t;n.x=e[i+0],n.y=e[i+1],n.z=e[i+2]}function s(e,t,n,i){i<0&&1===e.x&&(r[t]=e.x-1),0===n.x&&0===n.z&&(r[t]=i/2/Math.PI+.5)}function m(e){return Math.atan2(e.z,-e.x)}!function(e){for(var n=new Mn,i=new Mn,l=new Mn,r=0;r<t.length;r+=3)q(t[r+0],n),q(t[r+1],i),q(t[r+2],l),a(n,i,l,e)}(i=i||0),function(e){for(var t=new Mn,n=0;n<l.length;n+=3)t.x=l[n+0],t.y=l[n+1],t.z=l[n+2],t.normalize().multiplyScalar(e),l[n+0]=t.x,l[n+1]=t.y,l[n+2]=t.z}(n),function(){for(var e=new Mn,t=0;t<l.length;t+=3){e.x=l[t+0],e.y=l[t+1],e.z=l[t+2];var n=m(e)/2/Math.PI+.5,i=(a=e,Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))/Math.PI+.5);r.push(n,1-i)}var a;(function(){for(var e=new Mn,t=new Mn,n=new Mn,i=new Mn,a=new _n,o=new _n,q=new _n,h=0,c=0;h<l.length;h+=9,c+=6){e.set(l[h+0],l[h+1],l[h+2]),t.set(l[h+3],l[h+4],l[h+5]),n.set(l[h+6],l[h+7],l[h+8]),a.set(r[c+0],r[c+1]),o.set(r[c+2],r[c+3]),q.set(r[c+4],r[c+5]),i.copy(e).add(t).add(n).divideScalar(3);var u=m(i);s(a,c+0,e,u),s(o,c+2,t,u),s(q,c+4,n,u)}})(),function(){for(var e=0;e<r.length;e+=6){var t=r[e+0],n=r[e+2],i=r[e+4],l=Math.max(t,n,i),a=Math.min(t,n,i);l>.9&&a<.1&&(t<.2&&(r[e+0]+=1),n<.2&&(r[e+2]+=1),i<.2&&(r[e+4]+=1))}}()}(),this.setAttribute("position",new hl(l,3)),this.setAttribute("normal",new hl(l.slice(),3)),this.setAttribute("uv",new hl(r,2)),0===i?this.computeVertexNormals():this.normalizeNormals()}function wq(e,t){Xl.call(this),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new Mq(e,t)),this.mergeVertices()}function Mq(e,t){bq.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],e,t),this.type="TetrahedronBufferGeometry",this.parameters={radius:e,detail:t}}function zq(e,t){Xl.call(this),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new Sq(e,t)),this.mergeVertices()}function Sq(e,t){bq.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],e,t),this.type="OctahedronBufferGeometry",this.parameters={radius:e,detail:t}}function Tq(e,t){Xl.call(this),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new Eq(e,t)),this.mergeVertices()}function Eq(e,t){var n=(1+Math.sqrt(5))/2,i=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1];bq.call(this,i,[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],e,t),this.type="IcosahedronBufferGeometry",this.parameters={radius:e,detail:t}}function Aq(e,t){Xl.call(this),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new Lq(e,t)),this.mergeVertices()}function Lq(e,t){var n=(1+Math.sqrt(5))/2,i=1/n,l=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-i,-n,0,-i,n,0,i,-n,0,i,n,-i,-n,0,-i,n,0,i,-n,0,i,n,0,-n,0,-i,n,0,-i,-n,0,i,n,0,i];bq.call(this,l,[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],e,t),this.type="DodecahedronBufferGeometry",this.parameters={radius:e,detail:t}}function Pq(e,t,n,i,l,r){Xl.call(this),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:n,radialSegments:i,closed:l},void 0!==r&&console.warn("THREE.TubeGeometry: taper has been removed.");var a=new Rq(e,t,n,i,l);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals,this.fromBufferGeometry(a),this.mergeVertices()}function Rq(e,t,n,i,l){bl.call(this),this.type="TubeBufferGeometry",this.parameters={path:e,tubularSegments:t,radius:n,radialSegments:i,closed:l},t=t||64,n=n||1,i=i||8,l=l||!1;var r=e.computeFrenetFrames(t,l);this.tangents=r.tangents,this.normals=r.normals,this.binormals=r.binormals;var a,o,q=new Mn,s=new Mn,m=new _n,h=new Mn,c=[],u=[],d=[],p=[];function f(l){h=e.getPointAt(l/t,h);var a=r.normals[l],m=r.binormals[l];for(o=0;o<=i;o++){var d=o/i*Math.PI*2,p=Math.sin(d),f=-Math.cos(d);s.x=f*a.x+p*m.x,s.y=f*a.y+p*m.y,s.z=f*a.z+p*m.z,s.normalize(),u.push(s.x,s.y,s.z),q.x=h.x+n*s.x,q.y=h.y+n*s.y,q.z=h.z+n*s.z,c.push(q.x,q.y,q.z)}}!function(){for(a=0;a<t;a++)f(a);f(!1===l?t:0),function(){for(a=0;a<=t;a++)for(o=0;o<=i;o++)m.x=a/t,m.y=o/i,d.push(m.x,m.y)}(),function(){for(o=1;o<=t;o++)for(a=1;a<=i;a++){var e=(i+1)*(o-1)+(a-1),n=(i+1)*o+(a-1),l=(i+1)*o+a,r=(i+1)*(o-1)+a;p.push(e,n,r),p.push(n,l,r)}}()}(),this.setIndex(p),this.setAttribute("position",new hl(c,3)),this.setAttribute("normal",new hl(u,3)),this.setAttribute("uv",new hl(d,2))}function Cq(e,t,n,i,l,r,a){Xl.call(this),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:n,radialSegments:i,p:l,q:r},void 0!==a&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new Oq(e,t,n,i,l,r)),this.mergeVertices()}function Oq(e,t,n,i,l,r){bl.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:e,tube:t,tubularSegments:n,radialSegments:i,p:l,q:r},e=e||1,t=t||.4,n=Math.floor(n)||64,i=Math.floor(i)||8,l=l||2,r=r||3;var a,o,q=[],s=[],m=[],h=[],c=new Mn,u=new Mn,d=new Mn,p=new Mn,f=new Mn,x=new Mn,v=new Mn;for(a=0;a<=n;++a){var g=a/n*l*Math.PI*2;for(T(g,l,r,e,d),T(g+.01,l,r,e,p),x.subVectors(p,d),v.addVectors(p,d),f.crossVectors(x,v),v.crossVectors(f,x),f.normalize(),v.normalize(),o=0;o<=i;++o){var _=o/i*Math.PI*2,y=-t*Math.cos(_),b=t*Math.sin(_);c.x=d.x+(y*v.x+b*f.x),c.y=d.y+(y*v.y+b*f.y),c.z=d.z+(y*v.z+b*f.z),s.push(c.x,c.y,c.z),u.subVectors(c,d).normalize(),m.push(u.x,u.y,u.z),h.push(a/n),h.push(o/i)}}for(o=1;o<=n;o++)for(a=1;a<=i;a++){var w=(i+1)*(o-1)+(a-1),M=(i+1)*o+(a-1),z=(i+1)*o+a,S=(i+1)*(o-1)+a;q.push(w,M,S),q.push(M,z,S)}function T(e,t,n,i,l){var r=Math.cos(e),a=Math.sin(e),o=n/t*e,q=Math.cos(o);l.x=i*(2+q)*.5*r,l.y=i*(2+q)*a*.5,l.z=i*Math.sin(o)*.5}this.setIndex(q),this.setAttribute("position",new hl(s,3)),this.setAttribute("normal",new hl(m,3)),this.setAttribute("uv",new hl(h,2))}function Iq(e,t,n,i,l){Xl.call(this),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:n,tubularSegments:i,arc:l},this.fromBufferGeometry(new Dq(e,t,n,i,l)),this.mergeVertices()}function Dq(e,t,n,i,l){bl.call(this),this.type="TorusBufferGeometry",this.parameters={radius:e,tube:t,radialSegments:n,tubularSegments:i,arc:l},e=e||1,t=t||.4,n=Math.floor(n)||8,i=Math.floor(i)||6,l=l||2*Math.PI;var r,a,o=[],q=[],s=[],m=[],h=new Mn,c=new Mn,u=new Mn;for(r=0;r<=n;r++)for(a=0;a<=i;a++){var d=a/i*l,p=r/n*Math.PI*2;c.x=(e+t*Math.cos(p))*Math.cos(d),c.y=(e+t*Math.cos(p))*Math.sin(d),c.z=t*Math.sin(p),q.push(c.x,c.y,c.z),h.x=e*Math.cos(d),h.y=e*Math.sin(d),u.subVectors(c,h).normalize(),s.push(u.x,u.y,u.z),m.push(a/i),m.push(r/n)}for(r=1;r<=n;r++)for(a=1;a<=i;a++){var f=(i+1)*r+a-1,x=(i+1)*(r-1)+a-1,v=(i+1)*(r-1)+a,g=(i+1)*r+a;o.push(f,x,g),o.push(x,v,g)}this.setIndex(o),this.setAttribute("position",new hl(q,3)),this.setAttribute("normal",new hl(s,3)),this.setAttribute("uv",new hl(m,2))}cq.prototype=Object.assign(Object.create(ri.prototype),{constructor:cq,isPoints:!0,raycast:function(e,t){var n=this.geometry,i=this.matrixWorld,l=e.params.Points.threshold;if(null===n.boundingSphere&&n.computeBoundingSphere(),mq.copy(n.boundingSphere),mq.applyMatrix4(i),mq.radius+=l,!1!==e.ray.intersectsSphere(mq)){qq.getInverse(i),sq.copy(e.ray).applyMatrix4(qq);var r=l/((this.scale.x+this.scale.y+this.scale.z)/3),a=r*r;if(n.isBufferGeometry){var o=n.index,q=n.attributes.position.array;if(null!==o)for(var s=o.array,m=0,h=s.length;m<h;m++){var c=s[m];hq.fromArray(q,3*c),uq(hq,c,a,i,e,t,this)}else{m=0;for(var u=q.length/3;m<u;m++)hq.fromArray(q,3*m),uq(hq,m,a,i,e,t,this)}}else{var d=n.vertices;for(m=0,u=d.length;m<u;m++)uq(d[m],m,a,i,e,t,this)}}},updateMorphTargets:function(){var e,t,n,i=this.geometry;if(i.isBufferGeometry){var l=i.morphAttributes,r=Object.keys(l);if(r.length>0){var a=l[r[0]];if(void 0!==a)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},e=0,t=a.length;e<t;e++)n=a[e].name||String(e),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}else{var o=i.morphTargets;void 0!==o&&o.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),dq.prototype=Object.assign(Object.create(Ln.prototype),{constructor:dq,isVideoTexture:!0,update:function(){var e=this.image;e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}),pq.prototype=Object.create(Ln.prototype),pq.prototype.constructor=pq,pq.prototype.isCompressedTexture=!0,fq.prototype=Object.create(Ln.prototype),fq.prototype.constructor=fq,fq.prototype.isCanvasTexture=!0,xq.prototype=Object.create(Ln.prototype),xq.prototype.constructor=xq,xq.prototype.isDepthTexture=!0,vq.prototype=Object.create(bl.prototype),vq.prototype.constructor=vq,gq.prototype=Object.create(Xl.prototype),gq.prototype.constructor=gq,_q.prototype=Object.create(bl.prototype),_q.prototype.constructor=_q,yq.prototype=Object.create(Xl.prototype),yq.prototype.constructor=yq,bq.prototype=Object.create(bl.prototype),bq.prototype.constructor=bq,wq.prototype=Object.create(Xl.prototype),wq.prototype.constructor=wq,Mq.prototype=Object.create(bq.prototype),Mq.prototype.constructor=Mq,zq.prototype=Object.create(Xl.prototype),zq.prototype.constructor=zq,Sq.prototype=Object.create(bq.prototype),Sq.prototype.constructor=Sq,Tq.prototype=Object.create(Xl.prototype),Tq.prototype.constructor=Tq,Eq.prototype=Object.create(bq.prototype),Eq.prototype.constructor=Eq,Aq.prototype=Object.create(Xl.prototype),Aq.prototype.constructor=Aq,Lq.prototype=Object.create(bq.prototype),Lq.prototype.constructor=Lq,Pq.prototype=Object.create(Xl.prototype),Pq.prototype.constructor=Pq,Rq.prototype=Object.create(bl.prototype),Rq.prototype.constructor=Rq,Rq.prototype.toJSON=function(){var e=bl.prototype.toJSON.call(this);return e.path=this.parameters.path.toJSON(),e},Cq.prototype=Object.create(Xl.prototype),Cq.prototype.constructor=Cq,Oq.prototype=Object.create(bl.prototype),Oq.prototype.constructor=Oq,Iq.prototype=Object.create(Xl.prototype),Iq.prototype.constructor=Iq,Dq.prototype=Object.create(bl.prototype),Dq.prototype.constructor=Dq;var Nq=function(e,t,n){n=n||2;var i,l,r,a,o,q,s,m=t&&t.length,h=m?t[0]*n:e.length,c=Bq(e,0,h,n,!0),u=[];if(!c||c.next===c.prev)return u;if(m&&(c=function(e,t,n,i){var l,r,a,o,q,s=[];for(l=0,r=t.length;l<r;l++)a=t[l]*i,o=l<r-1?t[l+1]*i:e.length,(q=Bq(e,a,o,i,!1))===q.next&&(q.steiner=!0),s.push(Yq(q));for(s.sort(kq),l=0;l<s.length;l++)Wq(s[l],n),n=Fq(n,n.next);return n}(e,t,c,n)),e.length>80*n){i=r=e[0],l=a=e[1];for(var d=n;d<h;d+=n)(o=e[d])<i&&(i=o),(q=e[d+1])<l&&(l=q),o>r&&(r=o),q>a&&(a=q);s=0!==(s=Math.max(r-i,a-l))?1/s:0}return Uq(c,u,n,i,l,s),u};function Bq(e,t,n,i,l){var r,a;if(l===function(e,t,n,i){for(var l=0,r=t,a=n-i;r<n;r+=i)l+=(e[a]-e[r])*(e[r+1]+e[a+1]),a=r;return l}(e,t,n,i)>0)for(r=t;r<n;r+=i)a=ns(r,e[r],e[r+1],a);else for(r=n-i;r>=t;r-=i)a=ns(r,e[r],e[r+1],a);return a&&Kq(a,a.next)&&(is(a),a=a.next),a}function Fq(e,t){if(!e)return e;t||(t=e);var n,i=e;do{if(n=!1,i.steiner||!Kq(i,i.next)&&0!==Qq(i.prev,i,i.next))i=i.next;else{if(is(i),(i=t=i.prev)===i.next)break;n=!0}}while(n||i!==t);return t}function Uq(e,t,n,i,l,r,a){if(e){!a&&r&&function(e,t,n,i){var l=e;do{null===l.z&&(l.z=Xq(l.x,l.y,t,n,i)),l.prevZ=l.prev,l.nextZ=l.next,l=l.next}while(l!==e);l.prevZ.nextZ=null,l.prevZ=null,function(e){var t,n,i,l,r,a,o,q,s=1;do{for(n=e,e=null,r=null,a=0;n;){for(a++,i=n,o=0,t=0;t<s&&(o++,i=i.nextZ);t++);for(q=s;o>0||q>0&&i;)0!==o&&(0===q||!i||n.z<=i.z)?(l=n,n=n.nextZ,o--):(l=i,i=i.nextZ,q--),r?r.nextZ=l:e=l,l.prevZ=r,r=l;n=i}r.nextZ=null,s*=2}while(a>1)}(l)}(e,i,l,r);for(var o,q,s=e;e.prev!==e.next;)if(o=e.prev,q=e.next,r?Hq(e,i,l,r):Gq(e))t.push(o.i/n),t.push(e.i/n),t.push(q.i/n),is(e),e=q.next,s=q.next;else if((e=q)===s){a?1===a?Uq(e=Vq(e,t,n),t,n,i,l,r,2):2===a&&jq(e,t,n,i,l,r):Uq(Fq(e),t,n,i,l,r,1);break}}}function Gq(e){var t=e.prev,n=e,i=e.next;if(Qq(t,n,i)>=0)return!1;for(var l=e.next.next;l!==e.prev;){if(Zq(t.x,t.y,n.x,n.y,i.x,i.y,l.x,l.y)&&Qq(l.prev,l,l.next)>=0)return!1;l=l.next}return!0}function Hq(e,t,n,i){var l=e.prev,r=e,a=e.next;if(Qq(l,r,a)>=0)return!1;for(var o=l.x<r.x?l.x<a.x?l.x:a.x:r.x<a.x?r.x:a.x,q=l.y<r.y?l.y<a.y?l.y:a.y:r.y<a.y?r.y:a.y,s=l.x>r.x?l.x>a.x?l.x:a.x:r.x>a.x?r.x:a.x,m=l.y>r.y?l.y>a.y?l.y:a.y:r.y>a.y?r.y:a.y,h=Xq(o,q,t,n,i),c=Xq(s,m,t,n,i),u=e.prevZ,d=e.nextZ;u&&u.z>=h&&d&&d.z<=c;){if(u!==e.prev&&u!==e.next&&Zq(l.x,l.y,r.x,r.y,a.x,a.y,u.x,u.y)&&Qq(u.prev,u,u.next)>=0)return!1;if(u=u.prevZ,d!==e.prev&&d!==e.next&&Zq(l.x,l.y,r.x,r.y,a.x,a.y,d.x,d.y)&&Qq(d.prev,d,d.next)>=0)return!1;d=d.nextZ}for(;u&&u.z>=h;){if(u!==e.prev&&u!==e.next&&Zq(l.x,l.y,r.x,r.y,a.x,a.y,u.x,u.y)&&Qq(u.prev,u,u.next)>=0)return!1;u=u.prevZ}for(;d&&d.z<=c;){if(d!==e.prev&&d!==e.next&&Zq(l.x,l.y,r.x,r.y,a.x,a.y,d.x,d.y)&&Qq(d.prev,d,d.next)>=0)return!1;d=d.nextZ}return!0}function Vq(e,t,n){var i=e;do{var l=i.prev,r=i.next.next;!Kq(l,r)&&$q(l,i,i.next,r)&&es(l,r)&&es(r,l)&&(t.push(l.i/n),t.push(i.i/n),t.push(r.i/n),is(i),is(i.next),i=e=r),i=i.next}while(i!==e);return i}function jq(e,t,n,i,l,r){var a=e;do{for(var o=a.next.next;o!==a.prev;){if(a.i!==o.i&&Jq(a,o)){var q=ts(a,o);return a=Fq(a,a.next),q=Fq(q,q.next),Uq(a,t,n,i,l,r),void Uq(q,t,n,i,l,r)}o=o.next}a=a.next}while(a!==e)}function kq(e,t){return e.x-t.x}function Wq(e,t){if(t=function(e,t){var n,i=t,l=e.x,r=e.y,a=-1/0;do{if(r<=i.y&&r>=i.next.y&&i.next.y!==i.y){var o=i.x+(r-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(o<=l&&o>a){if(a=o,o===l){if(r===i.y)return i;if(r===i.next.y)return i.next}n=i.x<i.next.x?i:i.next}}i=i.next}while(i!==t);if(!n)return null;if(l===a)return n.prev;var q,s=n,m=n.x,h=n.y,c=1/0;i=n.next;for(;i!==s;)l>=i.x&&i.x>=m&&l!==i.x&&Zq(r<h?l:a,r,m,h,r<h?a:l,r,i.x,i.y)&&((q=Math.abs(r-i.y)/(l-i.x))<c||q===c&&i.x>n.x)&&es(i,e)&&(n=i,c=q),i=i.next;return n}(e,t)){var n=ts(t,e);Fq(n,n.next)}}function Xq(e,t,n,i,l){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*l)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-i)*l)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function Yq(e){var t=e,n=e;do{(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next}while(t!==e);return n}function Zq(e,t,n,i,l,r,a,o){return(l-a)*(t-o)-(e-a)*(r-o)>=0&&(e-a)*(i-o)-(n-a)*(t-o)>=0&&(n-a)*(r-o)-(l-a)*(i-o)>=0}function Jq(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&$q(n,n.next,e,t))return!0;n=n.next}while(n!==e);return!1}(e,t)&&es(e,t)&&es(t,e)&&function(e,t){var n=e,i=!1,l=(e.x+t.x)/2,r=(e.y+t.y)/2;do{n.y>r!=n.next.y>r&&n.next.y!==n.y&&l<(n.next.x-n.x)*(r-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==e);return i}(e,t)}function Qq(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function Kq(e,t){return e.x===t.x&&e.y===t.y}function $q(e,t,n,i){return!!(Kq(e,n)&&Kq(t,i)||Kq(e,i)&&Kq(n,t))||Qq(e,t,n)>0!=Qq(e,t,i)>0&&Qq(n,i,e)>0!=Qq(n,i,t)>0}function es(e,t){return Qq(e.prev,e,e.next)<0?Qq(e,t,e.next)>=0&&Qq(e,e.prev,t)>=0:Qq(e,t,e.prev)<0||Qq(e,e.next,t)<0}function ts(e,t){var n=new ls(e.i,e.x,e.y),i=new ls(t.i,t.x,t.y),l=e.next,r=t.prev;return e.next=t,t.prev=e,n.next=l,l.prev=n,i.next=n,n.prev=i,r.next=i,i.prev=r,i}function ns(e,t,n,i){var l=new ls(e,t,n);return i?(l.next=i.next,l.prev=i,i.next.prev=l,i.next=l):(l.prev=l,l.next=l),l}function is(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function ls(e,t,n){this.i=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}var rs={area:function(e){for(var t=e.length,n=0,i=t-1,l=0;l<t;i=l++)n+=e[i].x*e[l].y-e[l].x*e[i].y;return.5*n},isClockWise:function(e){return rs.area(e)<0},triangulateShape:function(e,t){var n=[],i=[],l=[];as(e),os(n,e);var r=e.length;t.forEach(as);for(var a=0;a<t.length;a++)i.push(r),r+=t[a].length,os(n,t[a]);var o=Nq(n,i);for(a=0;a<o.length;a+=3)l.push(o.slice(a,a+3));return l}};function as(e){var t=e.length;t>2&&e[t-1].equals(e[0])&&e.pop()}function os(e,t){for(var n=0;n<t.length;n++)e.push(t[n].x),e.push(t[n].y)}function qs(e,t){Xl.call(this),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},this.fromBufferGeometry(new ss(e,t)),this.mergeVertices()}function ss(e,t){bl.call(this),this.type="ExtrudeBufferGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];for(var n=this,i=[],l=[],r=0,a=e.length;r<a;r++){o(e[r])}function o(e){var r=[],a=void 0!==t.curveSegments?t.curveSegments:12,o=void 0!==t.steps?t.steps:1,q=void 0!==t.depth?t.depth:100,s=void 0===t.bevelEnabled||t.bevelEnabled,m=void 0!==t.bevelThickness?t.bevelThickness:6,h=void 0!==t.bevelSize?t.bevelSize:m-2,c=void 0!==t.bevelOffset?t.bevelOffset:0,u=void 0!==t.bevelSegments?t.bevelSegments:3,d=t.extrudePath,p=void 0!==t.UVGenerator?t.UVGenerator:ms;void 0!==t.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),q=t.amount);var f,x,v,g,_,y,b,w,M=!1;d&&(f=d.getSpacedPoints(o),M=!0,s=!1,x=d.computeFrenetFrames(o,!1),v=new Mn,g=new Mn,_=new Mn),s||(u=0,m=0,h=0,c=0);var z=e.extractPoints(a),S=z.shape,T=z.holes;if(!rs.isClockWise(S))for(S=S.reverse(),b=0,w=T.length;b<w;b++)y=T[b],rs.isClockWise(y)&&(T[b]=y.reverse());var E=rs.triangulateShape(S,T),A=S;for(b=0,w=T.length;b<w;b++)y=T[b],S=S.concat(y);function L(e,t,n){return t||console.error("THREE.ExtrudeGeometry: vec does not exist"),t.clone().multiplyScalar(n).add(e)}var P,R,C,O,I,D,N=S.length,B=E.length;function F(e,t,n){var i,l,r,a=e.x-t.x,o=e.y-t.y,q=n.x-e.x,s=n.y-e.y,m=a*a+o*o,h=a*s-o*q;if(Math.abs(h)>Number.EPSILON){var c=Math.sqrt(m),u=Math.sqrt(q*q+s*s),d=t.x-o/c,p=t.y+a/c,f=((n.x-s/u-d)*s-(n.y+q/u-p)*q)/(a*s-o*q),x=(i=d+a*f-e.x)*i+(l=p+o*f-e.y)*l;if(x<=2)return new _n(i,l);r=Math.sqrt(x/2)}else{var v=!1;a>Number.EPSILON?q>Number.EPSILON&&(v=!0):a<-Number.EPSILON?q<-Number.EPSILON&&(v=!0):Math.sign(o)===Math.sign(s)&&(v=!0),v?(i=-o,l=a,r=Math.sqrt(m)):(i=a,l=o,r=Math.sqrt(m/2))}return new _n(i/r,l/r)}for(var U=[],G=0,H=A.length,V=H-1,j=G+1;G<H;G++,V++,j++)V===H&&(V=0),j===H&&(j=0),U[G]=F(A[G],A[V],A[j]);var k,W,X=[],Y=U.concat();for(b=0,w=T.length;b<w;b++){for(y=T[b],k=[],G=0,V=(H=y.length)-1,j=G+1;G<H;G++,V++,j++)V===H&&(V=0),j===H&&(j=0),k[G]=F(y[G],y[V],y[j]);X.push(k),Y=Y.concat(k)}for(P=0;P<u;P++){for(C=P/u,O=m*Math.cos(C*Math.PI/2),R=h*Math.sin(C*Math.PI/2)+c,G=0,H=A.length;G<H;G++)J((I=L(A[G],U[G],R)).x,I.y,-O);for(b=0,w=T.length;b<w;b++)for(y=T[b],k=X[b],G=0,H=y.length;G<H;G++)J((I=L(y[G],k[G],R)).x,I.y,-O)}for(R=h+c,G=0;G<N;G++)I=s?L(S[G],Y[G],R):S[G],M?(g.copy(x.normals[0]).multiplyScalar(I.x),v.copy(x.binormals[0]).multiplyScalar(I.y),_.copy(f[0]).add(g).add(v),J(_.x,_.y,_.z)):J(I.x,I.y,0);for(W=1;W<=o;W++)for(G=0;G<N;G++)I=s?L(S[G],Y[G],R):S[G],M?(g.copy(x.normals[W]).multiplyScalar(I.x),v.copy(x.binormals[W]).multiplyScalar(I.y),_.copy(f[W]).add(g).add(v),J(_.x,_.y,_.z)):J(I.x,I.y,q/o*W);for(P=u-1;P>=0;P--){for(C=P/u,O=m*Math.cos(C*Math.PI/2),R=h*Math.sin(C*Math.PI/2)+c,G=0,H=A.length;G<H;G++)J((I=L(A[G],U[G],R)).x,I.y,q+O);for(b=0,w=T.length;b<w;b++)for(y=T[b],k=X[b],G=0,H=y.length;G<H;G++)I=L(y[G],k[G],R),M?J(I.x,I.y+f[o-1].y,f[o-1].x+O):J(I.x,I.y,q+O)}function Z(e,t){var n,i;for(G=e.length;--G>=0;){n=G,(i=G-1)<0&&(i=e.length-1);var l=0,r=o+2*u;for(l=0;l<r;l++){var a=N*l,q=N*(l+1);K(t+n+a,t+i+a,t+i+q,t+n+q)}}}function J(e,t,n){r.push(e),r.push(t),r.push(n)}function Q(e,t,l){$(e),$(t),$(l);var r=i.length/3,a=p.generateTopUV(n,i,r-3,r-2,r-1);ee(a[0]),ee(a[1]),ee(a[2])}function K(e,t,l,r){$(e),$(t),$(r),$(t),$(l),$(r);var a=i.length/3,o=p.generateSideWallUV(n,i,a-6,a-3,a-2,a-1);ee(o[0]),ee(o[1]),ee(o[3]),ee(o[1]),ee(o[2]),ee(o[3])}function $(e){i.push(r[3*e+0]),i.push(r[3*e+1]),i.push(r[3*e+2])}function ee(e){l.push(e.x),l.push(e.y)}!function(){var e=i.length/3;if(s){var t=0,l=N*t;for(G=0;G<B;G++)Q((D=E[G])[2]+l,D[1]+l,D[0]+l);for(l=N*(t=o+2*u),G=0;G<B;G++)Q((D=E[G])[0]+l,D[1]+l,D[2]+l)}else{for(G=0;G<B;G++)Q((D=E[G])[2],D[1],D[0]);for(G=0;G<B;G++)Q((D=E[G])[0]+N*o,D[1]+N*o,D[2]+N*o)}n.addGroup(e,i.length/3-e,0)}(),function(){var e=i.length/3,t=0;for(Z(A,t),t+=A.length,b=0,w=T.length;b<w;b++)Z(y=T[b],t),t+=y.length;n.addGroup(e,i.length/3-e,1)}()}this.setAttribute("position",new hl(i,3)),this.setAttribute("uv",new hl(l,2)),this.computeVertexNormals()}qs.prototype=Object.create(Xl.prototype),qs.prototype.constructor=qs,qs.prototype.toJSON=function(){var e=Xl.prototype.toJSON.call(this);return hs(this.parameters.shapes,this.parameters.options,e)},ss.prototype=Object.create(bl.prototype),ss.prototype.constructor=ss,ss.prototype.toJSON=function(){var e=bl.prototype.toJSON.call(this);return hs(this.parameters.shapes,this.parameters.options,e)};var ms={generateTopUV:function(e,t,n,i,l){var r=t[3*n],a=t[3*n+1],o=t[3*i],q=t[3*i+1],s=t[3*l],m=t[3*l+1];return[new _n(r,a),new _n(o,q),new _n(s,m)]},generateSideWallUV:function(e,t,n,i,l,r){var a=t[3*n],o=t[3*n+1],q=t[3*n+2],s=t[3*i],m=t[3*i+1],h=t[3*i+2],c=t[3*l],u=t[3*l+1],d=t[3*l+2],p=t[3*r],f=t[3*r+1],x=t[3*r+2];return Math.abs(o-m)<.01?[new _n(a,1-q),new _n(s,1-h),new _n(c,1-d),new _n(p,1-x)]:[new _n(o,1-q),new _n(m,1-h),new _n(u,1-d),new _n(f,1-x)]}};function hs(e,t,n){if(n.shapes=[],Array.isArray(e))for(var i=0,l=e.length;i<l;i++){var r=e[i];n.shapes.push(r.uuid)}else n.shapes.push(e.uuid);return void 0!==t.extrudePath&&(n.options.extrudePath=t.extrudePath.toJSON()),n}function cs(e,t){Xl.call(this),this.type="TextGeometry",this.parameters={text:e,parameters:t},this.fromBufferGeometry(new us(e,t)),this.mergeVertices()}function us(e,t){var n=(t=t||{}).font;if(!n||!n.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new Xl;var i=n.generateShapes(e,t.size);t.depth=void 0!==t.height?t.height:50,void 0===t.bevelThickness&&(t.bevelThickness=10),void 0===t.bevelSize&&(t.bevelSize=8),void 0===t.bevelEnabled&&(t.bevelEnabled=!1),ss.call(this,i,t),this.type="TextBufferGeometry"}function ds(e,t,n,i,l,r,a){Xl.call(this),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:i,phiLength:l,thetaStart:r,thetaLength:a},this.fromBufferGeometry(new ps(e,t,n,i,l,r,a)),this.mergeVertices()}function ps(e,t,n,i,l,r,a){bl.call(this),this.type="SphereBufferGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:i,phiLength:l,thetaStart:r,thetaLength:a},e=e||1,t=Math.max(3,Math.floor(t)||8),n=Math.max(2,Math.floor(n)||6),i=void 0!==i?i:0,l=void 0!==l?l:2*Math.PI,r=void 0!==r?r:0,a=void 0!==a?a:Math.PI;var o,q,s=Math.min(r+a,Math.PI),m=0,h=[],c=new Mn,u=new Mn,d=[],p=[],f=[],x=[];for(q=0;q<=n;q++){var v=[],g=q/n,_=0;for(0==q&&0==r?_=.5/t:q==n&&s==Math.PI&&(_=-.5/t),o=0;o<=t;o++){var y=o/t;c.x=-e*Math.cos(i+y*l)*Math.sin(r+g*a),c.y=e*Math.cos(r+g*a),c.z=e*Math.sin(i+y*l)*Math.sin(r+g*a),p.push(c.x,c.y,c.z),u.copy(c).normalize(),f.push(u.x,u.y,u.z),x.push(y+_,1-g),v.push(m++)}h.push(v)}for(q=0;q<n;q++)for(o=0;o<t;o++){var b=h[q][o+1],w=h[q][o],M=h[q+1][o],z=h[q+1][o+1];(0!==q||r>0)&&d.push(b,w,z),(q!==n-1||s<Math.PI)&&d.push(w,M,z)}this.setIndex(d),this.setAttribute("position",new hl(p,3)),this.setAttribute("normal",new hl(f,3)),this.setAttribute("uv",new hl(x,2))}function fs(e,t,n,i,l,r){Xl.call(this),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:i,thetaStart:l,thetaLength:r},this.fromBufferGeometry(new xs(e,t,n,i,l,r)),this.mergeVertices()}function xs(e,t,n,i,l,r){bl.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:i,thetaStart:l,thetaLength:r},e=e||.5,t=t||1,l=void 0!==l?l:0,r=void 0!==r?r:2*Math.PI,n=void 0!==n?Math.max(3,n):8;var a,o,q,s=[],m=[],h=[],c=[],u=e,d=(t-e)/(i=void 0!==i?Math.max(1,i):1),p=new Mn,f=new _n;for(o=0;o<=i;o++){for(q=0;q<=n;q++)a=l+q/n*r,p.x=u*Math.cos(a),p.y=u*Math.sin(a),m.push(p.x,p.y,p.z),h.push(0,0,1),f.x=(p.x/t+1)/2,f.y=(p.y/t+1)/2,c.push(f.x,f.y);u+=d}for(o=0;o<i;o++){var x=o*(n+1);for(q=0;q<n;q++){var v=a=q+x,g=a+n+1,_=a+n+2,y=a+1;s.push(v,g,y),s.push(g,_,y)}}this.setIndex(s),this.setAttribute("position",new hl(m,3)),this.setAttribute("normal",new hl(h,3)),this.setAttribute("uv",new hl(c,2))}function vs(e,t,n,i){Xl.call(this),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:n,phiLength:i},this.fromBufferGeometry(new gs(e,t,n,i)),this.mergeVertices()}function gs(e,t,n,i){bl.call(this),this.type="LatheBufferGeometry",this.parameters={points:e,segments:t,phiStart:n,phiLength:i},t=Math.floor(t)||12,n=n||0,i=i||2*Math.PI,i=gn.clamp(i,0,2*Math.PI);var l,r,a,o=[],q=[],s=[],m=1/t,h=new Mn,c=new _n;for(r=0;r<=t;r++){var u=n+r*m*i,d=Math.sin(u),p=Math.cos(u);for(a=0;a<=e.length-1;a++)h.x=e[a].x*d,h.y=e[a].y,h.z=e[a].x*p,q.push(h.x,h.y,h.z),c.x=r/t,c.y=a/(e.length-1),s.push(c.x,c.y)}for(r=0;r<t;r++)for(a=0;a<e.length-1;a++){var f=l=a+r*e.length,x=l+e.length,v=l+e.length+1,g=l+1;o.push(f,x,g),o.push(x,v,g)}if(this.setIndex(o),this.setAttribute("position",new hl(q,3)),this.setAttribute("uv",new hl(s,2)),this.computeVertexNormals(),i===2*Math.PI){var _=this.attributes.normal.array,y=new Mn,b=new Mn,w=new Mn;for(l=t*e.length*3,r=0,a=0;r<e.length;r++,a+=3)y.x=_[a+0],y.y=_[a+1],y.z=_[a+2],b.x=_[l+a+0],b.y=_[l+a+1],b.z=_[l+a+2],w.addVectors(y,b).normalize(),_[a+0]=_[l+a+0]=w.x,_[a+1]=_[l+a+1]=w.y,_[a+2]=_[l+a+2]=w.z}}function _s(e,t){Xl.call(this),this.type="ShapeGeometry","object"==typeof t&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),t=t.curveSegments),this.parameters={shapes:e,curveSegments:t},this.fromBufferGeometry(new ys(e,t)),this.mergeVertices()}function ys(e,t){bl.call(this),this.type="ShapeBufferGeometry",this.parameters={shapes:e,curveSegments:t},t=t||12;var n=[],i=[],l=[],r=[],a=0,o=0;if(!1===Array.isArray(e))s(e);else for(var q=0;q<e.length;q++)s(e[q]),this.addGroup(a,o,q),a+=o,o=0;function s(e){var a,q,s,m=i.length/3,h=e.extractPoints(t),c=h.shape,u=h.holes;for(!1===rs.isClockWise(c)&&(c=c.reverse()),a=0,q=u.length;a<q;a++)s=u[a],!0===rs.isClockWise(s)&&(u[a]=s.reverse());var d=rs.triangulateShape(c,u);for(a=0,q=u.length;a<q;a++)s=u[a],c=c.concat(s);for(a=0,q=c.length;a<q;a++){var p=c[a];i.push(p.x,p.y,0),l.push(0,0,1),r.push(p.x,p.y)}for(a=0,q=d.length;a<q;a++){var f=d[a],x=f[0]+m,v=f[1]+m,g=f[2]+m;n.push(x,v,g),o+=3}}this.setIndex(n),this.setAttribute("position",new hl(i,3)),this.setAttribute("normal",new hl(l,3)),this.setAttribute("uv",new hl(r,2))}function bs(e,t){if(t.shapes=[],Array.isArray(e))for(var n=0,i=e.length;n<i;n++){var l=e[n];t.shapes.push(l.uuid)}else t.shapes.push(e.uuid);return t}function ws(e,t){bl.call(this),this.type="EdgesGeometry",this.parameters={thresholdAngle:t},t=void 0!==t?t:1;var n,i,l,r,a=[],o=Math.cos(gn.DEG2RAD*t),q=[0,0],s={},m=["a","b","c"];e.isBufferGeometry?(r=new Xl).fromBufferGeometry(e):r=e.clone(),r.mergeVertices(),r.computeFaceNormals();for(var h=r.vertices,c=r.faces,u=0,d=c.length;u<d;u++)for(var p=c[u],f=0;f<3;f++)n=p[m[f]],i=p[m[(f+1)%3]],q[0]=Math.min(n,i),q[1]=Math.max(n,i),void 0===s[l=q[0]+","+q[1]]?s[l]={index1:q[0],index2:q[1],face1:u,face2:void 0}:s[l].face2=u;for(l in s){var x=s[l];if(void 0===x.face2||c[x.face1].normal.dot(c[x.face2].normal)<=o){var v=h[x.index1];a.push(v.x,v.y,v.z),v=h[x.index2],a.push(v.x,v.y,v.z)}}this.setAttribute("position",new hl(a,3))}function Ms(e,t,n,i,l,r,a,o){Xl.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:i,heightSegments:l,openEnded:r,thetaStart:a,thetaLength:o},this.fromBufferGeometry(new zs(e,t,n,i,l,r,a,o)),this.mergeVertices()}function zs(e,t,n,i,l,r,a,o){bl.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:i,heightSegments:l,openEnded:r,thetaStart:a,thetaLength:o};var q=this;e=void 0!==e?e:1,t=void 0!==t?t:1,n=n||1,i=Math.floor(i)||8,l=Math.floor(l)||1,r=void 0!==r&&r,a=void 0!==a?a:0,o=void 0!==o?o:2*Math.PI;var s=[],m=[],h=[],c=[],u=0,d=[],p=n/2,f=0;function x(n){var l,r,d,x=new _n,v=new Mn,g=0,_=!0===n?e:t,y=!0===n?1:-1;for(r=u,l=1;l<=i;l++)m.push(0,p*y,0),h.push(0,y,0),c.push(.5,.5),u++;for(d=u,l=0;l<=i;l++){var b=l/i*o+a,w=Math.cos(b),M=Math.sin(b);v.x=_*M,v.y=p*y,v.z=_*w,m.push(v.x,v.y,v.z),h.push(0,y,0),x.x=.5*w+.5,x.y=.5*M*y+.5,c.push(x.x,x.y),u++}for(l=0;l<i;l++){var z=r+l,S=d+l;!0===n?s.push(S,S+1,z):s.push(S+1,S,z),g+=3}q.addGroup(f,g,!0===n?1:2),f+=g}!function(){var r,x,v=new Mn,g=new Mn,_=0,y=(t-e)/n;for(x=0;x<=l;x++){var b=[],w=x/l,M=w*(t-e)+e;for(r=0;r<=i;r++){var z=r/i,S=z*o+a,T=Math.sin(S),E=Math.cos(S);g.x=M*T,g.y=-w*n+p,g.z=M*E,m.push(g.x,g.y,g.z),v.set(T,y,E).normalize(),h.push(v.x,v.y,v.z),c.push(z,1-w),b.push(u++)}d.push(b)}for(r=0;r<i;r++)for(x=0;x<l;x++){var A=d[x][r],L=d[x+1][r],P=d[x+1][r+1],R=d[x][r+1];s.push(A,L,R),s.push(L,P,R),_+=6}q.addGroup(f,_,0),f+=_}(),!1===r&&(e>0&&x(!0),t>0&&x(!1)),this.setIndex(s),this.setAttribute("position",new hl(m,3)),this.setAttribute("normal",new hl(h,3)),this.setAttribute("uv",new hl(c,2))}function Ss(e,t,n,i,l,r,a){Ms.call(this,0,e,t,n,i,l,r,a),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:n,heightSegments:i,openEnded:l,thetaStart:r,thetaLength:a}}function Ts(e,t,n,i,l,r,a){zs.call(this,0,e,t,n,i,l,r,a),this.type="ConeBufferGeometry",this.parameters={radius:e,height:t,radialSegments:n,heightSegments:i,openEnded:l,thetaStart:r,thetaLength:a}}function Es(e,t,n,i){Xl.call(this),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:n,thetaLength:i},this.fromBufferGeometry(new As(e,t,n,i)),this.mergeVertices()}function As(e,t,n,i){bl.call(this),this.type="CircleBufferGeometry",this.parameters={radius:e,segments:t,thetaStart:n,thetaLength:i},e=e||1,t=void 0!==t?Math.max(3,t):8,n=void 0!==n?n:0,i=void 0!==i?i:2*Math.PI;var l,r,a=[],o=[],q=[],s=[],m=new Mn,h=new _n;for(o.push(0,0,0),q.push(0,0,1),s.push(.5,.5),r=0,l=3;r<=t;r++,l+=3){var c=n+r/t*i;m.x=e*Math.cos(c),m.y=e*Math.sin(c),o.push(m.x,m.y,m.z),q.push(0,0,1),h.x=(o[l]/e+1)/2,h.y=(o[l+1]/e+1)/2,s.push(h.x,h.y)}for(l=1;l<=t;l++)a.push(l,l+1,0);this.setIndex(a),this.setAttribute("position",new hl(o,3)),this.setAttribute("normal",new hl(q,3)),this.setAttribute("uv",new hl(s,2))}cs.prototype=Object.create(Xl.prototype),cs.prototype.constructor=cs,us.prototype=Object.create(ss.prototype),us.prototype.constructor=us,ds.prototype=Object.create(Xl.prototype),ds.prototype.constructor=ds,ps.prototype=Object.create(bl.prototype),ps.prototype.constructor=ps,fs.prototype=Object.create(Xl.prototype),fs.prototype.constructor=fs,xs.prototype=Object.create(bl.prototype),xs.prototype.constructor=xs,vs.prototype=Object.create(Xl.prototype),vs.prototype.constructor=vs,gs.prototype=Object.create(bl.prototype),gs.prototype.constructor=gs,_s.prototype=Object.create(Xl.prototype),_s.prototype.constructor=_s,_s.prototype.toJSON=function(){var e=Xl.prototype.toJSON.call(this);return bs(this.parameters.shapes,e)},ys.prototype=Object.create(bl.prototype),ys.prototype.constructor=ys,ys.prototype.toJSON=function(){var e=bl.prototype.toJSON.call(this);return bs(this.parameters.shapes,e)},ws.prototype=Object.create(bl.prototype),ws.prototype.constructor=ws,Ms.prototype=Object.create(Xl.prototype),Ms.prototype.constructor=Ms,zs.prototype=Object.create(bl.prototype),zs.prototype.constructor=zs,Ss.prototype=Object.create(Ms.prototype),Ss.prototype.constructor=Ss,Ts.prototype=Object.create(zs.prototype),Ts.prototype.constructor=Ts,Es.prototype=Object.create(Xl.prototype),Es.prototype.constructor=Es,As.prototype=Object.create(bl.prototype),As.prototype.constructor=As;var Ls=Object.freeze({__proto__:null,WireframeGeometry:vq,ParametricGeometry:gq,ParametricBufferGeometry:_q,TetrahedronGeometry:wq,TetrahedronBufferGeometry:Mq,OctahedronGeometry:zq,OctahedronBufferGeometry:Sq,IcosahedronGeometry:Tq,IcosahedronBufferGeometry:Eq,DodecahedronGeometry:Aq,DodecahedronBufferGeometry:Lq,PolyhedronGeometry:yq,PolyhedronBufferGeometry:bq,TubeGeometry:Pq,TubeBufferGeometry:Rq,TorusKnotGeometry:Cq,TorusKnotBufferGeometry:Oq,TorusGeometry:Iq,TorusBufferGeometry:Dq,TextGeometry:cs,TextBufferGeometry:us,SphereGeometry:ds,SphereBufferGeometry:ps,RingGeometry:fs,RingBufferGeometry:xs,PlaneGeometry:xr,PlaneBufferGeometry:vr,LatheGeometry:vs,LatheBufferGeometry:gs,ShapeGeometry:_s,ShapeBufferGeometry:ys,ExtrudeGeometry:qs,ExtrudeBufferGeometry:ss,EdgesGeometry:ws,ConeGeometry:Ss,ConeBufferGeometry:Ts,CylinderGeometry:Ms,CylinderBufferGeometry:zs,CircleGeometry:Es,CircleBufferGeometry:As,BoxGeometry:Yl,BoxBufferGeometry:Zl});function Ps(e){tl.call(this),this.type="ShadowMaterial",this.color=new Zi(0),this.transparent=!0,this.setValues(e)}function Rs(e){tr.call(this,e),this.type="RawShaderMaterial"}function Cs(e){tl.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Zi(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Zi(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ht,this.normalScale=new _n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Os(e){Cs.call(this),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.reflectivity=.5,this.clearcoat=0,this.clearcoatRoughness=0,this.sheen=null,this.clearcoatNormalScale=new _n(1,1),this.clearcoatNormalMap=null,this.transparency=0,this.setValues(e)}function Is(e){tl.call(this),this.type="MeshPhongMaterial",this.color=new Zi(16777215),this.specular=new Zi(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Zi(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ht,this.normalScale=new _n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ee,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Ds(e){Is.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.gradientMap=null,this.setValues(e)}function Ns(e){tl.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ht,this.normalScale=new _n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Bs(e){tl.call(this),this.type="MeshLambertMaterial",this.color=new Zi(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Zi(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ee,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Fs(e){tl.call(this),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Zi(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ht,this.normalScale=new _n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Us(e){Jo.call(this),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}Ps.prototype=Object.create(tl.prototype),Ps.prototype.constructor=Ps,Ps.prototype.isShadowMaterial=!0,Ps.prototype.copy=function(e){return tl.prototype.copy.call(this,e),this.color.copy(e.color),this},Rs.prototype=Object.create(tr.prototype),Rs.prototype.constructor=Rs,Rs.prototype.isRawShaderMaterial=!0,Cs.prototype=Object.create(tl.prototype),Cs.prototype.constructor=Cs,Cs.prototype.isMeshStandardMaterial=!0,Cs.prototype.copy=function(e){return tl.prototype.copy.call(this,e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Os.prototype=Object.create(Cs.prototype),Os.prototype.constructor=Os,Os.prototype.isMeshPhysicalMaterial=!0,Os.prototype.copy=function(e){return Cs.prototype.copy.call(this,e),this.defines={STANDARD:"",PHYSICAL:""},this.reflectivity=e.reflectivity,this.clearcoat=e.clearcoat,this.clearcoatRoughness=e.clearcoatRoughness,e.sheen?this.sheen=(this.sheen||new Zi).copy(e.sheen):this.sheen=null,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.transparency=e.transparency,this},Is.prototype=Object.create(tl.prototype),Is.prototype.constructor=Is,Is.prototype.isMeshPhongMaterial=!0,Is.prototype.copy=function(e){return tl.prototype.copy.call(this,e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Ds.prototype=Object.create(Is.prototype),Ds.prototype.constructor=Ds,Ds.prototype.isMeshToonMaterial=!0,Ds.prototype.copy=function(e){return Is.prototype.copy.call(this,e),this.gradientMap=e.gradientMap,this},Ns.prototype=Object.create(tl.prototype),Ns.prototype.constructor=Ns,Ns.prototype.isMeshNormalMaterial=!0,Ns.prototype.copy=function(e){return tl.prototype.copy.call(this,e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Bs.prototype=Object.create(tl.prototype),Bs.prototype.constructor=Bs,Bs.prototype.isMeshLambertMaterial=!0,Bs.prototype.copy=function(e){return tl.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Fs.prototype=Object.create(tl.prototype),Fs.prototype.constructor=Fs,Fs.prototype.isMeshMatcapMaterial=!0,Fs.prototype.copy=function(e){return tl.prototype.copy.call(this,e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Us.prototype=Object.create(Jo.prototype),Us.prototype.constructor=Us,Us.prototype.isLineDashedMaterial=!0,Us.prototype.copy=function(e){return Jo.prototype.copy.call(this,e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this};var Gs=Object.freeze({__proto__:null,ShadowMaterial:Ps,SpriteMaterial:So,RawShaderMaterial:Rs,ShaderMaterial:tr,PointsMaterial:oq,MeshPhysicalMaterial:Os,MeshStandardMaterial:Cs,MeshPhongMaterial:Is,MeshToonMaterial:Ds,MeshNormalMaterial:Ns,MeshLambertMaterial:Bs,MeshDepthMaterial:no,MeshDistanceMaterial:io,MeshBasicMaterial:nl,MeshMatcapMaterial:Fs,LineDashedMaterial:Us,LineBasicMaterial:Jo,Material:tl}),Hs={arraySlice:function(e,t,n){return Hs.isTypedArray(e)?new e.constructor(e.subarray(t,void 0!==n?n:e.length)):e.slice(t,n)},convertArray:function(e,t,n){return!e||!n&&e.constructor===t?e:"number"==typeof t.BYTES_PER_ELEMENT?new t(e):Array.prototype.slice.call(e)},isTypedArray:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)},getKeyframeOrder:function(e){for(var t=e.length,n=new Array(t),i=0;i!==t;++i)n[i]=i;return n.sort((function(t,n){return e[t]-e[n]})),n},sortedArray:function(e,t,n){for(var i=e.length,l=new e.constructor(i),r=0,a=0;a!==i;++r)for(var o=n[r]*t,q=0;q!==t;++q)l[a++]=e[o+q];return l},flattenJSON:function(e,t,n,i){for(var l=1,r=e[0];void 0!==r&&void 0===r[i];)r=e[l++];if(void 0!==r){var a=r[i];if(void 0!==a)if(Array.isArray(a))do{void 0!==(a=r[i])&&(t.push(r.time),n.push.apply(n,a)),r=e[l++]}while(void 0!==r);else if(void 0!==a.toArray)do{void 0!==(a=r[i])&&(t.push(r.time),a.toArray(n,n.length)),r=e[l++]}while(void 0!==r);else do{void 0!==(a=r[i])&&(t.push(r.time),n.push(a)),r=e[l++]}while(void 0!==r)}},subclip:function(e,t,n,i,l){l=l||30;var r=e.clone();r.name=t;for(var a=[],o=0;o<r.tracks.length;++o){for(var q=r.tracks[o],s=q.getValueSize(),m=[],h=[],c=0;c<q.times.length;++c){var u=q.times[c]*l;if(!(u<n||u>=i)){m.push(q.times[c]);for(var d=0;d<s;++d)h.push(q.values[c*s+d])}}0!==m.length&&(q.times=Hs.convertArray(m,q.times.constructor),q.values=Hs.convertArray(h,q.values.constructor),a.push(q))}r.tracks=a;var p=1/0;for(o=0;o<r.tracks.length;++o)p>r.tracks[o].times[0]&&(p=r.tracks[o].times[0]);for(o=0;o<r.tracks.length;++o)r.tracks[o].shift(-1*p);return r.resetDuration(),r}};function Vs(e,t,n,i){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=void 0!==i?i:new t.constructor(n),this.sampleValues=t,this.valueSize=n}function js(e,t,n,i){Vs.call(this,e,t,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function ks(e,t,n,i){Vs.call(this,e,t,n,i)}function Ws(e,t,n,i){Vs.call(this,e,t,n,i)}function Xs(e,t,n,i){if(void 0===e)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===t||0===t.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=Hs.convertArray(t,this.TimeBufferType),this.values=Hs.convertArray(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}function Ys(e,t,n){Xs.call(this,e,t,n)}function Zs(e,t,n,i){Xs.call(this,e,t,n,i)}function Js(e,t,n,i){Xs.call(this,e,t,n,i)}function Qs(e,t,n,i){Vs.call(this,e,t,n,i)}function Ks(e,t,n,i){Xs.call(this,e,t,n,i)}function $s(e,t,n,i){Xs.call(this,e,t,n,i)}function em(e,t,n,i){Xs.call(this,e,t,n,i)}function tm(e,t,n){this.name=e,this.tracks=n,this.duration=void 0!==t?t:-1,this.uuid=gn.generateUUID(),this.duration<0&&this.resetDuration()}function nm(e){if(void 0===e.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");var t=function(e){switch(e.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Js;case"vector":case"vector2":case"vector3":case"vector4":return em;case"color":return Zs;case"quaternion":return Ks;case"bool":case"boolean":return Ys;case"string":return $s}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+e)}(e.type);if(void 0===e.times){var n=[],i=[];Hs.flattenJSON(e.keys,n,i,"value"),e.times=n,e.values=i}return void 0!==t.parse?t.parse(e):new t(e.name,e.times,e.values,e.interpolation)}Object.assign(Vs.prototype,{evaluate:function(e){var t=this.parameterPositions,n=this._cachedIndex,i=t[n],l=t[n-1];e:{t:{var r;n:{i:if(!(e<i)){for(var a=n+2;;){if(void 0===i){if(e<l)break i;return n=t.length,this._cachedIndex=n,this.afterEnd_(n-1,e,l)}if(n===a)break;if(l=i,e<(i=t[++n]))break t}r=t.length;break n}if(e>=l)break e;var o=t[1];e<o&&(n=2,l=o);for(a=n-2;;){if(void 0===l)return this._cachedIndex=0,this.beforeStart_(0,e,i);if(n===a)break;if(i=l,e>=(l=t[--n-1]))break t}r=n,n=0}for(;n<r;){var q=n+r>>>1;e<t[q]?r=q:n=q+1}if(i=t[n],void 0===(l=t[n-1]))return this._cachedIndex=0,this.beforeStart_(0,e,i);if(void 0===i)return n=t.length,this._cachedIndex=n,this.afterEnd_(n-1,l,e)}this._cachedIndex=n,this.intervalChanged_(n,l,i)}return this.interpolate_(n,l,e,i)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(e){for(var t=this.resultBuffer,n=this.sampleValues,i=this.valueSize,l=e*i,r=0;r!==i;++r)t[r]=n[l+r];return t},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}}),
//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(Vs.prototype,{beforeStart_:Vs.prototype.copySampleValue_,afterEnd_:Vs.prototype.copySampleValue_}),js.prototype=Object.assign(Object.create(Vs.prototype),{constructor:js,DefaultSettings_:{endingStart:St,endingEnd:St},intervalChanged_:function(e,t,n){var i=this.parameterPositions,l=e-2,r=e+1,a=i[l],o=i[r];if(void 0===a)switch(this.getSettings_().endingStart){case Tt:l=e,a=2*t-n;break;case Et:a=t+i[l=i.length-2]-i[l+1];break;default:l=e,a=n}if(void 0===o)switch(this.getSettings_().endingEnd){case Tt:r=e,o=2*n-t;break;case Et:r=1,o=n+i[1]-i[0];break;default:r=e-1,o=t}var q=.5*(n-t),s=this.valueSize;this._weightPrev=q/(t-a),this._weightNext=q/(o-n),this._offsetPrev=l*s,this._offsetNext=r*s},interpolate_:function(e,t,n,i){for(var l=this.resultBuffer,r=this.sampleValues,a=this.valueSize,o=e*a,q=o-a,s=this._offsetPrev,m=this._offsetNext,h=this._weightPrev,c=this._weightNext,u=(n-t)/(i-t),d=u*u,p=d*u,f=-h*p+2*h*d-h*u,x=(1+h)*p+(-1.5-2*h)*d+(-.5+h)*u+1,v=(-1-c)*p+(1.5+c)*d+.5*u,g=c*p-c*d,_=0;_!==a;++_)l[_]=f*r[s+_]+x*r[q+_]+v*r[o+_]+g*r[m+_];return l}}),ks.prototype=Object.assign(Object.create(Vs.prototype),{constructor:ks,interpolate_:function(e,t,n,i){for(var l=this.resultBuffer,r=this.sampleValues,a=this.valueSize,o=e*a,q=o-a,s=(n-t)/(i-t),m=1-s,h=0;h!==a;++h)l[h]=r[q+h]*m+r[o+h]*s;return l}}),Ws.prototype=Object.assign(Object.create(Vs.prototype),{constructor:Ws,interpolate_:function(e){return this.copySampleValue_(e-1)}}),Object.assign(Xs,{toJSON:function(e){var t,n=e.constructor;if(void 0!==n.toJSON)t=n.toJSON(e);else{t={name:e.name,times:Hs.convertArray(e.times,Array),values:Hs.convertArray(e.values,Array)};var i=e.getInterpolation();i!==e.DefaultInterpolation&&(t.interpolation=i)}return t.type=e.ValueTypeName,t}}),Object.assign(Xs.prototype,{constructor:Xs,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:Mt,InterpolantFactoryMethodDiscrete:function(e){return new Ws(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodLinear:function(e){return new ks(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:function(e){return new js(this.times,this.values,this.getValueSize(),e)},setInterpolation:function(e){var t;switch(e){case wt:t=this.InterpolantFactoryMethodDiscrete;break;case Mt:t=this.InterpolantFactoryMethodLinear;break;case zt:t=this.InterpolantFactoryMethodSmooth}if(void 0===t){var n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(e===this.DefaultInterpolation)throw new Error(n);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=t,this},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return wt;case this.InterpolantFactoryMethodLinear:return Mt;case this.InterpolantFactoryMethodSmooth:return zt}},getValueSize:function(){return this.values.length/this.times.length},shift:function(e){if(0!==e)for(var t=this.times,n=0,i=t.length;n!==i;++n)t[n]+=e;return this},scale:function(e){if(1!==e)for(var t=this.times,n=0,i=t.length;n!==i;++n)t[n]*=e;return this},trim:function(e,t){for(var n=this.times,i=n.length,l=0,r=i-1;l!==i&&n[l]<e;)++l;for(;-1!==r&&n[r]>t;)--r;if(++r,0!==l||r!==i){l>=r&&(l=(r=Math.max(r,1))-1);var a=this.getValueSize();this.times=Hs.arraySlice(n,l,r),this.values=Hs.arraySlice(this.values,l*a,r*a)}return this},validate:function(){var e=!0,t=this.getValueSize();t-Math.floor(t)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);var n=this.times,i=this.values,l=n.length;0===l&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);for(var r=null,a=0;a!==l;a++){var o=n[a];if("number"==typeof o&&isNaN(o)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,a,o),e=!1;break}if(null!==r&&r>o){console.error("THREE.KeyframeTrack: Out of order keys.",this,a,o,r),e=!1;break}r=o}if(void 0!==i&&Hs.isTypedArray(i)){a=0;for(var q=i.length;a!==q;++a){var s=i[a];if(isNaN(s)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,a,s),e=!1;break}}}return e},optimize:function(){for(var e=this.times,t=this.values,n=this.getValueSize(),i=this.getInterpolation()===zt,l=1,r=e.length-1,a=1;a<r;++a){var o=!1,q=e[a];if(q!==e[a+1]&&(1!==a||q!==q[0]))if(i)o=!0;else for(var s=a*n,m=s-n,h=s+n,c=0;c!==n;++c){var u=t[s+c];if(u!==t[m+c]||u!==t[h+c]){o=!0;break}}if(o){if(a!==l){e[l]=e[a];var d=a*n,p=l*n;for(c=0;c!==n;++c)t[p+c]=t[d+c]}++l}}if(r>0){e[l]=e[r];for(d=r*n,p=l*n,c=0;c!==n;++c)t[p+c]=t[d+c];++l}return l!==e.length&&(this.times=Hs.arraySlice(e,0,l),this.values=Hs.arraySlice(t,0,l*n)),this},clone:function(){var e=Hs.arraySlice(this.times,0),t=Hs.arraySlice(this.values,0),n=new(0,this.constructor)(this.name,e,t);return n.createInterpolant=this.createInterpolant,n}}),Ys.prototype=Object.assign(Object.create(Xs.prototype),{constructor:Ys,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:wt,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),Zs.prototype=Object.assign(Object.create(Xs.prototype),{constructor:Zs,ValueTypeName:"color"}),Js.prototype=Object.assign(Object.create(Xs.prototype),{constructor:Js,ValueTypeName:"number"}),Qs.prototype=Object.assign(Object.create(Vs.prototype),{constructor:Qs,interpolate_:function(e,t,n,i){for(var l=this.resultBuffer,r=this.sampleValues,a=this.valueSize,o=e*a,q=(n-t)/(i-t),s=o+a;o!==s;o+=4)yn.slerpFlat(l,0,r,o-a,r,o,q);return l}}),Ks.prototype=Object.assign(Object.create(Xs.prototype),{constructor:Ks,ValueTypeName:"quaternion",DefaultInterpolation:Mt,InterpolantFactoryMethodLinear:function(e){return new Qs(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:void 0}),$s.prototype=Object.assign(Object.create(Xs.prototype),{constructor:$s,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:wt,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),em.prototype=Object.assign(Object.create(Xs.prototype),{constructor:em,ValueTypeName:"vector"}),Object.assign(tm,{parse:function(e){for(var t=[],n=e.tracks,i=1/(e.fps||1),l=0,r=n.length;l!==r;++l)t.push(nm(n[l]).scale(i));return new tm(e.name,e.duration,t)},toJSON:function(e){for(var t=[],n=e.tracks,i={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid},l=0,r=n.length;l!==r;++l)t.push(Xs.toJSON(n[l]));return i},CreateFromMorphTargetSequence:function(e,t,n,i){for(var l=t.length,r=[],a=0;a<l;a++){var o=[],q=[];o.push((a+l-1)%l,a,(a+1)%l),q.push(0,1,0);var s=Hs.getKeyframeOrder(o);o=Hs.sortedArray(o,1,s),q=Hs.sortedArray(q,1,s),i||0!==o[0]||(o.push(l),q.push(q[0])),r.push(new Js(".morphTargetInfluences["+t[a].name+"]",o,q).scale(1/n))}return new tm(e,-1,r)},findByName:function(e,t){var n=e;if(!Array.isArray(e)){var i=e;n=i.geometry&&i.geometry.animations||i.animations}for(var l=0;l<n.length;l++)if(n[l].name===t)return n[l];return null},CreateClipsFromMorphTargetSequences:function(e,t,n){for(var i={},l=/^([\w-]*?)([\d]+)$/,r=0,a=e.length;r<a;r++){var o=e[r],q=o.name.match(l);if(q&&q.length>1){var s=i[h=q[1]];s||(i[h]=s=[]),s.push(o)}}var m=[];for(var h in i)m.push(tm.CreateFromMorphTargetSequence(h,i[h],t,n));return m},parseAnimation:function(e,t){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;for(var n=function(e,t,n,i,l){if(0!==n.length){var r=[],a=[];Hs.flattenJSON(n,r,a,i),0!==r.length&&l.push(new e(t,r,a))}},i=[],l=e.name||"default",r=e.length||-1,a=e.fps||30,o=e.hierarchy||[],q=0;q<o.length;q++){var s=o[q].keys;if(s&&0!==s.length)if(s[0].morphTargets){for(var m={},h=0;h<s.length;h++)if(s[h].morphTargets)for(var c=0;c<s[h].morphTargets.length;c++)m[s[h].morphTargets[c]]=-1;for(var u in m){var d=[],p=[];for(c=0;c!==s[h].morphTargets.length;++c){var f=s[h];d.push(f.time),p.push(f.morphTarget===u?1:0)}i.push(new Js(".morphTargetInfluence["+u+"]",d,p))}r=m.length*(a||1)}else{var x=".bones["+t[q].name+"]";n(em,x+".position",s,"pos",i),n(Ks,x+".quaternion",s,"rot",i),n(em,x+".scale",s,"scl",i)}}return 0===i.length?null:new tm(l,r,i)}}),Object.assign(tm.prototype,{resetDuration:function(){for(var e=0,t=0,n=this.tracks.length;t!==n;++t){var i=this.tracks[t];e=Math.max(e,i.times[i.times.length-1])}return this.duration=e,this},trim:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this},validate:function(){for(var e=!0,t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e},optimize:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this},clone:function(){for(var e=[],t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new tm(this.name,this.duration,e)}});var im={enabled:!1,files:{},add:function(e,t){!1!==this.enabled&&(this.files[e]=t)},get:function(e){if(!1!==this.enabled)return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}};function lm(e,t,n){var i=this,l=!1,r=0,a=0,o=void 0,q=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(e){a++,!1===l&&void 0!==i.onStart&&i.onStart(e,r,a),l=!0},this.itemEnd=function(e){r++,void 0!==i.onProgress&&i.onProgress(e,r,a),r===a&&(l=!1,void 0!==i.onLoad&&i.onLoad())},this.itemError=function(e){void 0!==i.onError&&i.onError(e)},this.resolveURL=function(e){return o?o(e):e},this.setURLModifier=function(e){return o=e,this},this.addHandler=function(e,t){return q.push(e,t),this},this.removeHandler=function(e){var t=q.indexOf(e);return-1!==t&&q.splice(t,2),this},this.getHandler=function(e){for(var t=0,n=q.length;t<n;t+=2){var i=q[t],l=q[t+1];if(i.test(e))return l}return null}}var rm=new lm;function am(e){this.manager=void 0!==e?e:rm,this.crossOrigin="anonymous",this.path="",this.resourcePath=""}Object.assign(am.prototype,{load:function(){},parse:function(){},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this},setResourcePath:function(e){return this.resourcePath=e,this}});var om={};function qm(e){am.call(this,e)}function sm(e){am.call(this,e)}function mm(e){am.call(this,e)}function hm(e){am.call(this,e)}function cm(e){am.call(this,e)}function um(e){am.call(this,e)}function dm(e){am.call(this,e)}function pm(){this.type="Curve",this.arcLengthDivisions=200}function fm(e,t,n,i,l,r,a,o){pm.call(this),this.type="EllipseCurve",this.aX=e||0,this.aY=t||0,this.xRadius=n||1,this.yRadius=i||1,this.aStartAngle=l||0,this.aEndAngle=r||2*Math.PI,this.aClockwise=a||!1,this.aRotation=o||0}function xm(e,t,n,i,l,r){fm.call(this,e,t,n,n,i,l,r),this.type="ArcCurve"}function vm(){var e=0,t=0,n=0,i=0;function l(l,r,a,o){e=l,t=a,n=-3*l+3*r-2*a-o,i=2*l-2*r+a+o}return{initCatmullRom:function(e,t,n,i,r){l(t,n,r*(n-e),r*(i-t))},initNonuniformCatmullRom:function(e,t,n,i,r,a,o){var q=(t-e)/r-(n-e)/(r+a)+(n-t)/a,s=(n-t)/a-(i-t)/(a+o)+(i-n)/o;l(t,n,q*=a,s*=a)},calc:function(l){var r=l*l;return e+t*l+n*r+i*(r*l)}}}qm.prototype=Object.assign(Object.create(am.prototype),{constructor:qm,load:function(e,t,n,i){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var l=this,r=im.get(e);if(void 0!==r)return l.manager.itemStart(e),setTimeout((function(){t&&t(r),l.manager.itemEnd(e)}),0),r;if(void 0===om[e]){var a=e.match(/^data:(.*?)(;base64)?,(.*)$/);if(a){var o=a[1],q=!!a[2],s=a[3];s=decodeURIComponent(s),q&&(s=atob(s));try{var m,h=(this.responseType||"").toLowerCase();switch(h){case"arraybuffer":case"blob":for(var c=new Uint8Array(s.length),u=0;u<s.length;u++)c[u]=s.charCodeAt(u);m="blob"===h?new Blob([c.buffer],{type:o}):c.buffer;break;case"document":var d=new DOMParser;m=d.parseFromString(s,o);break;case"json":m=JSON.parse(s);break;default:m=s}setTimeout((function(){t&&t(m),l.manager.itemEnd(e)}),0)}catch(t){setTimeout((function(){i&&i(t),l.manager.itemError(e),l.manager.itemEnd(e)}),0)}}else{om[e]=[],om[e].push({onLoad:t,onProgress:n,onError:i});var p=new XMLHttpRequest;for(var f in p.open("GET",e,!0),p.addEventListener("load",(function(t){var n=this.response,i=om[e];if(delete om[e],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),im.add(e,n);for(var r=0,a=i.length;r<a;r++){(o=i[r]).onLoad&&o.onLoad(n)}l.manager.itemEnd(e)}else{for(r=0,a=i.length;r<a;r++){var o;(o=i[r]).onError&&o.onError(t)}l.manager.itemError(e),l.manager.itemEnd(e)}}),!1),p.addEventListener("progress",(function(t){for(var n=om[e],i=0,l=n.length;i<l;i++){var r=n[i];r.onProgress&&r.onProgress(t)}}),!1),p.addEventListener("error",(function(t){var n=om[e];delete om[e];for(var i=0,r=n.length;i<r;i++){var a=n[i];a.onError&&a.onError(t)}l.manager.itemError(e),l.manager.itemEnd(e)}),!1),p.addEventListener("abort",(function(t){var n=om[e];delete om[e];for(var i=0,r=n.length;i<r;i++){var a=n[i];a.onError&&a.onError(t)}l.manager.itemError(e),l.manager.itemEnd(e)}),!1),void 0!==this.responseType&&(p.responseType=this.responseType),void 0!==this.withCredentials&&(p.withCredentials=this.withCredentials),p.overrideMimeType&&p.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain"),this.requestHeader)p.setRequestHeader(f,this.requestHeader[f]);p.send(null)}return l.manager.itemStart(e),p}om[e].push({onLoad:t,onProgress:n,onError:i})},setResponseType:function(e){return this.responseType=e,this},setWithCredentials:function(e){return this.withCredentials=e,this},setMimeType:function(e){return this.mimeType=e,this},setRequestHeader:function(e){return this.requestHeader=e,this}}),sm.prototype=Object.assign(Object.create(am.prototype),{constructor:sm,load:function(e,t,n,i){var l=this,r=new qm(l.manager);r.setPath(l.path),r.load(e,(function(e){t(l.parse(JSON.parse(e)))}),n,i)},parse:function(e){for(var t=[],n=0;n<e.length;n++){var i=tm.parse(e[n]);t.push(i)}return t}}),mm.prototype=Object.assign(Object.create(am.prototype),{constructor:mm,load:function(e,t,n,i){var l=this,r=[],a=new pq;a.image=r;var o=new qm(this.manager);function q(q){o.load(e[q],(function(e){var n=l.parse(e,!0);r[q]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps},6===(s+=1)&&(1===n.mipmapCount&&(a.minFilter=ze),a.format=n.format,a.needsUpdate=!0,t&&t(a))}),n,i)}if(o.setPath(this.path),o.setResponseType("arraybuffer"),Array.isArray(e))for(var s=0,m=0,h=e.length;m<h;++m)q(m);else o.load(e,(function(e){var n=l.parse(e,!0);if(n.isCubemap)for(var i=n.mipmaps.length/n.mipmapCount,o=0;o<i;o++){r[o]={mipmaps:[]};for(var q=0;q<n.mipmapCount;q++)r[o].mipmaps.push(n.mipmaps[o*n.mipmapCount+q]),r[o].format=n.format,r[o].width=n.width,r[o].height=n.height}else a.image.width=n.width,a.image.height=n.height,a.mipmaps=n.mipmaps;1===n.mipmapCount&&(a.minFilter=ze),a.format=n.format,a.needsUpdate=!0,t&&t(a)}),n,i);return a}}),hm.prototype=Object.assign(Object.create(am.prototype),{constructor:hm,load:function(e,t,n,i){var l=this,r=new qr,a=new qm(this.manager);return a.setResponseType("arraybuffer"),a.setPath(this.path),a.load(e,(function(e){var n=l.parse(e);n&&(void 0!==n.image?r.image=n.image:void 0!==n.data&&(r.image.width=n.width,r.image.height=n.height,r.image.data=n.data),r.wrapS=void 0!==n.wrapS?n.wrapS:ve,r.wrapT=void 0!==n.wrapT?n.wrapT:ve,r.magFilter=void 0!==n.magFilter?n.magFilter:ze,r.minFilter=void 0!==n.minFilter?n.minFilter:ze,r.anisotropy=void 0!==n.anisotropy?n.anisotropy:1,void 0!==n.format&&(r.format=n.format),void 0!==n.type&&(r.type=n.type),void 0!==n.mipmaps&&(r.mipmaps=n.mipmaps,r.minFilter=Ee),1===n.mipmapCount&&(r.minFilter=ze),r.needsUpdate=!0,t&&t(r,n))}),n,i),r}}),cm.prototype=Object.assign(Object.create(am.prototype),{constructor:cm,load:function(e,t,n,i){void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var l=this,r=im.get(e);if(void 0!==r)return l.manager.itemStart(e),setTimeout((function(){t&&t(r),l.manager.itemEnd(e)}),0),r;var a=document.createElementNS("http://www.w3.org/1999/xhtml","img");function o(){a.removeEventListener("load",o,!1),a.removeEventListener("error",q,!1),im.add(e,this),t&&t(this),l.manager.itemEnd(e)}function q(t){a.removeEventListener("load",o,!1),a.removeEventListener("error",q,!1),i&&i(t),l.manager.itemError(e),l.manager.itemEnd(e)}return a.addEventListener("load",o,!1),a.addEventListener("error",q,!1),"data:"!==e.substr(0,5)&&void 0!==this.crossOrigin&&(a.crossOrigin=this.crossOrigin),l.manager.itemStart(e),a.src=e,a}}),um.prototype=Object.assign(Object.create(am.prototype),{constructor:um,load:function(e,t,n,i){var l=new Lr,r=new cm(this.manager);r.setCrossOrigin(this.crossOrigin),r.setPath(this.path);var a=0;function o(n){r.load(e[n],(function(e){l.images[n]=e,6===++a&&(l.needsUpdate=!0,t&&t(l))}),void 0,i)}for(var q=0;q<e.length;++q)o(q);return l}}),dm.prototype=Object.assign(Object.create(am.prototype),{constructor:dm,load:function(e,t,n,i){var l=new Ln,r=new cm(this.manager);return r.setCrossOrigin(this.crossOrigin),r.setPath(this.path),r.load(e,(function(n){l.image=n;var i=e.search(/\.jpe?g($|\?)/i)>0||0===e.search(/^data\:image\/jpeg/);l.format=i?Ve:je,l.needsUpdate=!0,void 0!==t&&t(l)}),n,i),l}}),Object.assign(pm.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(e,t){var n=this.getUtoTmapping(e);return this.getPoint(n,t)},getPoints:function(e){void 0===e&&(e=5);for(var t=[],n=0;n<=e;n++)t.push(this.getPoint(n/e));return t},getSpacedPoints:function(e){void 0===e&&(e=5);for(var t=[],n=0;n<=e;n++)t.push(this.getPointAt(n/e));return t},getLength:function(){var e=this.getLengths();return e[e.length-1]},getLengths:function(e){if(void 0===e&&(e=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var t,n,i=[],l=this.getPoint(0),r=0;for(i.push(0),n=1;n<=e;n++)r+=(t=this.getPoint(n/e)).distanceTo(l),i.push(r),l=t;return this.cacheArcLengths=i,i},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(e,t){var n,i=this.getLengths(),l=0,r=i.length;n=t||e*i[r-1];for(var a,o=0,q=r-1;o<=q;)if((a=i[l=Math.floor(o+(q-o)/2)]-n)<0)o=l+1;else{if(!(a>0)){q=l;break}q=l-1}if(i[l=q]===n)return l/(r-1);var s=i[l];return(l+(n-s)/(i[l+1]-s))/(r-1)},getTangent:function(e){var t=e-1e-4,n=e+1e-4;t<0&&(t=0),n>1&&(n=1);var i=this.getPoint(t);return this.getPoint(n).clone().sub(i).normalize()},getTangentAt:function(e){var t=this.getUtoTmapping(e);return this.getTangent(t)},computeFrenetFrames:function(e,t){var n,i,l,r=new Mn,a=[],o=[],q=[],s=new Mn,m=new Gn;for(n=0;n<=e;n++)i=n/e,a[n]=this.getTangentAt(i),a[n].normalize();o[0]=new Mn,q[0]=new Mn;var h=Number.MAX_VALUE,c=Math.abs(a[0].x),u=Math.abs(a[0].y),d=Math.abs(a[0].z);for(c<=h&&(h=c,r.set(1,0,0)),u<=h&&(h=u,r.set(0,1,0)),d<=h&&r.set(0,0,1),s.crossVectors(a[0],r).normalize(),o[0].crossVectors(a[0],s),q[0].crossVectors(a[0],o[0]),n=1;n<=e;n++)o[n]=o[n-1].clone(),q[n]=q[n-1].clone(),s.crossVectors(a[n-1],a[n]),s.length()>Number.EPSILON&&(s.normalize(),l=Math.acos(gn.clamp(a[n-1].dot(a[n]),-1,1)),o[n].applyMatrix4(m.makeRotationAxis(s,l))),q[n].crossVectors(a[n],o[n]);if(!0===t)for(l=Math.acos(gn.clamp(o[0].dot(o[e]),-1,1)),l/=e,a[0].dot(s.crossVectors(o[0],o[e]))>0&&(l=-l),n=1;n<=e;n++)o[n].applyMatrix4(m.makeRotationAxis(a[n],l*n)),q[n].crossVectors(a[n],o[n]);return{tangents:a,normals:o,binormals:q}},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.arcLengthDivisions=e.arcLengthDivisions,this},toJSON:function(){var e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e},fromJSON:function(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}),fm.prototype=Object.create(pm.prototype),fm.prototype.constructor=fm,fm.prototype.isEllipseCurve=!0,fm.prototype.getPoint=function(e,t){for(var n=t||new _n,i=2*Math.PI,l=this.aEndAngle-this.aStartAngle,r=Math.abs(l)<Number.EPSILON;l<0;)l+=i;for(;l>i;)l-=i;l<Number.EPSILON&&(l=r?0:i),!0!==this.aClockwise||r||(l===i?l=-i:l-=i);var a=this.aStartAngle+e*l,o=this.aX+this.xRadius*Math.cos(a),q=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){var s=Math.cos(this.aRotation),m=Math.sin(this.aRotation),h=o-this.aX,c=q-this.aY;o=h*s-c*m+this.aX,q=h*m+c*s+this.aY}return n.set(o,q)},fm.prototype.copy=function(e){return pm.prototype.copy.call(this,e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this},fm.prototype.toJSON=function(){var e=pm.prototype.toJSON.call(this);return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e},fm.prototype.fromJSON=function(e){return pm.prototype.fromJSON.call(this,e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this},xm.prototype=Object.create(fm.prototype),xm.prototype.constructor=xm,xm.prototype.isArcCurve=!0;var gm=new Mn,_m=new vm,ym=new vm,bm=new vm;function wm(e,t,n,i){pm.call(this),this.type="CatmullRomCurve3",this.points=e||[],this.closed=t||!1,this.curveType=n||"centripetal",this.tension=i||.5}function Mm(e,t,n,i,l){var r=.5*(i-t),a=.5*(l-n),o=e*e;return(2*n-2*i+r+a)*(e*o)+(-3*n+3*i-2*r-a)*o+r*e+n}function zm(e,t,n,i){return function(e,t){var n=1-e;return n*n*t}(e,t)+function(e,t){return 2*(1-e)*e*t}(e,n)+function(e,t){return e*e*t}(e,i)}function Sm(e,t,n,i,l){return function(e,t){var n=1-e;return n*n*n*t}(e,t)+function(e,t){var n=1-e;return 3*n*n*e*t}(e,n)+function(e,t){return 3*(1-e)*e*e*t}(e,i)+function(e,t){return e*e*e*t}(e,l)}function Tm(e,t,n,i){pm.call(this),this.type="CubicBezierCurve",this.v0=e||new _n,this.v1=t||new _n,this.v2=n||new _n,this.v3=i||new _n}function Em(e,t,n,i){pm.call(this),this.type="CubicBezierCurve3",this.v0=e||new Mn,this.v1=t||new Mn,this.v2=n||new Mn,this.v3=i||new Mn}function Am(e,t){pm.call(this),this.type="LineCurve",this.v1=e||new _n,this.v2=t||new _n}function Lm(e,t){pm.call(this),this.type="LineCurve3",this.v1=e||new Mn,this.v2=t||new Mn}function Pm(e,t,n){pm.call(this),this.type="QuadraticBezierCurve",this.v0=e||new _n,this.v1=t||new _n,this.v2=n||new _n}function Rm(e,t,n){pm.call(this),this.type="QuadraticBezierCurve3",this.v0=e||new Mn,this.v1=t||new Mn,this.v2=n||new Mn}function Cm(e){pm.call(this),this.type="SplineCurve",this.points=e||[]}wm.prototype=Object.create(pm.prototype),wm.prototype.constructor=wm,wm.prototype.isCatmullRomCurve3=!0,wm.prototype.getPoint=function(e,t){var n,i,l,r,a=t||new Mn,o=this.points,q=o.length,s=(q-(this.closed?0:1))*e,m=Math.floor(s),h=s-m;if(this.closed?m+=m>0?0:(Math.floor(Math.abs(m)/q)+1)*q:0===h&&m===q-1&&(m=q-2,h=1),this.closed||m>0?n=o[(m-1)%q]:(gm.subVectors(o[0],o[1]).add(o[0]),n=gm),i=o[m%q],l=o[(m+1)%q],this.closed||m+2<q?r=o[(m+2)%q]:(gm.subVectors(o[q-1],o[q-2]).add(o[q-1]),r=gm),"centripetal"===this.curveType||"chordal"===this.curveType){var c="chordal"===this.curveType?.5:.25,u=Math.pow(n.distanceToSquared(i),c),d=Math.pow(i.distanceToSquared(l),c),p=Math.pow(l.distanceToSquared(r),c);d<1e-4&&(d=1),u<1e-4&&(u=d),p<1e-4&&(p=d),_m.initNonuniformCatmullRom(n.x,i.x,l.x,r.x,u,d,p),ym.initNonuniformCatmullRom(n.y,i.y,l.y,r.y,u,d,p),bm.initNonuniformCatmullRom(n.z,i.z,l.z,r.z,u,d,p)}else"catmullrom"===this.curveType&&(_m.initCatmullRom(n.x,i.x,l.x,r.x,this.tension),ym.initCatmullRom(n.y,i.y,l.y,r.y,this.tension),bm.initCatmullRom(n.z,i.z,l.z,r.z,this.tension));return a.set(_m.calc(h),ym.calc(h),bm.calc(h)),a},wm.prototype.copy=function(e){pm.prototype.copy.call(this,e),this.points=[];for(var t=0,n=e.points.length;t<n;t++){var i=e.points[t];this.points.push(i.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this},wm.prototype.toJSON=function(){var e=pm.prototype.toJSON.call(this);e.points=[];for(var t=0,n=this.points.length;t<n;t++){var i=this.points[t];e.points.push(i.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e},wm.prototype.fromJSON=function(e){pm.prototype.fromJSON.call(this,e),this.points=[];for(var t=0,n=e.points.length;t<n;t++){var i=e.points[t];this.points.push((new Mn).fromArray(i))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this},Tm.prototype=Object.create(pm.prototype),Tm.prototype.constructor=Tm,Tm.prototype.isCubicBezierCurve=!0,Tm.prototype.getPoint=function(e,t){var n=t||new _n,i=this.v0,l=this.v1,r=this.v2,a=this.v3;return n.set(Sm(e,i.x,l.x,r.x,a.x),Sm(e,i.y,l.y,r.y,a.y)),n},Tm.prototype.copy=function(e){return pm.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this},Tm.prototype.toJSON=function(){var e=pm.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e},Tm.prototype.fromJSON=function(e){return pm.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this},Em.prototype=Object.create(pm.prototype),Em.prototype.constructor=Em,Em.prototype.isCubicBezierCurve3=!0,Em.prototype.getPoint=function(e,t){var n=t||new Mn,i=this.v0,l=this.v1,r=this.v2,a=this.v3;return n.set(Sm(e,i.x,l.x,r.x,a.x),Sm(e,i.y,l.y,r.y,a.y),Sm(e,i.z,l.z,r.z,a.z)),n},Em.prototype.copy=function(e){return pm.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this},Em.prototype.toJSON=function(){var e=pm.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e},Em.prototype.fromJSON=function(e){return pm.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this},Am.prototype=Object.create(pm.prototype),Am.prototype.constructor=Am,Am.prototype.isLineCurve=!0,Am.prototype.getPoint=function(e,t){var n=t||new _n;return 1===e?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n},Am.prototype.getPointAt=function(e,t){return this.getPoint(e,t)},Am.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()},Am.prototype.copy=function(e){return pm.prototype.copy.call(this,e),this.v1.copy(e.v1),this.v2.copy(e.v2),this},Am.prototype.toJSON=function(){var e=pm.prototype.toJSON.call(this);return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},Am.prototype.fromJSON=function(e){return pm.prototype.fromJSON.call(this,e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},Lm.prototype=Object.create(pm.prototype),Lm.prototype.constructor=Lm,Lm.prototype.isLineCurve3=!0,Lm.prototype.getPoint=function(e,t){var n=t||new Mn;return 1===e?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n},Lm.prototype.getPointAt=function(e,t){return this.getPoint(e,t)},Lm.prototype.copy=function(e){return pm.prototype.copy.call(this,e),this.v1.copy(e.v1),this.v2.copy(e.v2),this},Lm.prototype.toJSON=function(){var e=pm.prototype.toJSON.call(this);return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},Lm.prototype.fromJSON=function(e){return pm.prototype.fromJSON.call(this,e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},Pm.prototype=Object.create(pm.prototype),Pm.prototype.constructor=Pm,Pm.prototype.isQuadraticBezierCurve=!0,Pm.prototype.getPoint=function(e,t){var n=t||new _n,i=this.v0,l=this.v1,r=this.v2;return n.set(zm(e,i.x,l.x,r.x),zm(e,i.y,l.y,r.y)),n},Pm.prototype.copy=function(e){return pm.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this},Pm.prototype.toJSON=function(){var e=pm.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},Pm.prototype.fromJSON=function(e){return pm.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},Rm.prototype=Object.create(pm.prototype),Rm.prototype.constructor=Rm,Rm.prototype.isQuadraticBezierCurve3=!0,Rm.prototype.getPoint=function(e,t){var n=t||new Mn,i=this.v0,l=this.v1,r=this.v2;return n.set(zm(e,i.x,l.x,r.x),zm(e,i.y,l.y,r.y),zm(e,i.z,l.z,r.z)),n},Rm.prototype.copy=function(e){return pm.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this},Rm.prototype.toJSON=function(){var e=pm.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},Rm.prototype.fromJSON=function(e){return pm.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},Cm.prototype=Object.create(pm.prototype),Cm.prototype.constructor=Cm,Cm.prototype.isSplineCurve=!0,Cm.prototype.getPoint=function(e,t){var n=t||new _n,i=this.points,l=(i.length-1)*e,r=Math.floor(l),a=l-r,o=i[0===r?r:r-1],q=i[r],s=i[r>i.length-2?i.length-1:r+1],m=i[r>i.length-3?i.length-1:r+2];return n.set(Mm(a,o.x,q.x,s.x,m.x),Mm(a,o.y,q.y,s.y,m.y)),n},Cm.prototype.copy=function(e){pm.prototype.copy.call(this,e),this.points=[];for(var t=0,n=e.points.length;t<n;t++){var i=e.points[t];this.points.push(i.clone())}return this},Cm.prototype.toJSON=function(){var e=pm.prototype.toJSON.call(this);e.points=[];for(var t=0,n=this.points.length;t<n;t++){var i=this.points[t];e.points.push(i.toArray())}return e},Cm.prototype.fromJSON=function(e){pm.prototype.fromJSON.call(this,e),this.points=[];for(var t=0,n=e.points.length;t<n;t++){var i=e.points[t];this.points.push((new _n).fromArray(i))}return this};var Om=Object.freeze({__proto__:null,ArcCurve:xm,CatmullRomCurve3:wm,CubicBezierCurve:Tm,CubicBezierCurve3:Em,EllipseCurve:fm,LineCurve:Am,LineCurve3:Lm,QuadraticBezierCurve:Pm,QuadraticBezierCurve3:Rm,SplineCurve:Cm});function Im(){pm.call(this),this.type="CurvePath",this.curves=[],this.autoClose=!1}function Dm(e){Im.call(this),this.type="Path",this.currentPoint=new _n,e&&this.setFromPoints(e)}function Nm(e){Dm.call(this,e),this.uuid=gn.generateUUID(),this.type="Shape",this.holes=[]}function Bm(e,t){ri.call(this),this.type="Light",this.color=new Zi(e),this.intensity=void 0!==t?t:1,this.receiveShadow=void 0}function Fm(e,t,n){Bm.call(this,e,n),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy(ri.DefaultUp),this.updateMatrix(),this.groundColor=new Zi(t)}function Um(e){this.camera=e,this.bias=0,this.radius=1,this.mapSize=new _n(512,512),this.map=null,this.mapPass=null,this.matrix=new Gn,this._frustum=new hr,this._frameExtents=new _n(1,1),this._viewportCount=1,this._viewports=[new Pn(0,0,1,1)]}function Gm(){Um.call(this,new ir(50,1,.5,500))}function Hm(e,t,n,i,l,r){Bm.call(this,e,t),this.type="SpotLight",this.position.copy(ri.DefaultUp),this.updateMatrix(),this.target=new ri,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(e){this.intensity=e/Math.PI}}),this.distance=void 0!==n?n:0,this.angle=void 0!==i?i:Math.PI/3,this.penumbra=void 0!==l?l:0,this.decay=void 0!==r?r:1,this.shadow=new Gm}function Vm(){Um.call(this,new ir(90,1,.5,500)),this._frameExtents=new _n(4,2),this._viewportCount=6,this._viewports=[new Pn(2,1,1,1),new Pn(0,1,1,1),new Pn(3,1,1,1),new Pn(1,1,1,1),new Pn(3,0,1,1),new Pn(1,0,1,1)],this._cubeDirections=[new Mn(1,0,0),new Mn(-1,0,0),new Mn(0,0,1),new Mn(0,0,-1),new Mn(0,1,0),new Mn(0,-1,0)],this._cubeUps=[new Mn(0,1,0),new Mn(0,1,0),new Mn(0,1,0),new Mn(0,1,0),new Mn(0,0,1),new Mn(0,0,-1)]}function jm(e,t,n,i){Bm.call(this,e,t),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(e){this.intensity=e/(4*Math.PI)}}),this.distance=void 0!==n?n:0,this.decay=void 0!==i?i:1,this.shadow=new Vm}function km(e,t,n,i,l,r){nr.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=void 0!==e?e:-1,this.right=void 0!==t?t:1,this.top=void 0!==n?n:1,this.bottom=void 0!==i?i:-1,this.near=void 0!==l?l:.1,this.far=void 0!==r?r:2e3,this.updateProjectionMatrix()}function Wm(){Um.call(this,new km(-5,5,5,-5,.5,500))}function Xm(e,t){Bm.call(this,e,t),this.type="DirectionalLight",this.position.copy(ri.DefaultUp),this.updateMatrix(),this.target=new ri,this.shadow=new Wm}function Ym(e,t){Bm.call(this,e,t),this.type="AmbientLight",this.castShadow=void 0}function Zm(e,t,n,i){Bm.call(this,e,t),this.type="RectAreaLight",this.width=void 0!==n?n:10,this.height=void 0!==i?i:10}function Jm(e){am.call(this,e),this.textures={}}Im.prototype=Object.assign(Object.create(pm.prototype),{constructor:Im,add:function(e){this.curves.push(e)},closePath:function(){var e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new Am(t,e))},getPoint:function(e){for(var t=e*this.getLength(),n=this.getCurveLengths(),i=0;i<n.length;){if(n[i]>=t){var l=n[i]-t,r=this.curves[i],a=r.getLength(),o=0===a?0:1-l/a;return r.getPointAt(o)}i++}return null},getLength:function(){var e=this.getCurveLengths();return e[e.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var e=[],t=0,n=0,i=this.curves.length;n<i;n++)t+=this.curves[n].getLength(),e.push(t);return this.cacheLengths=e,e},getSpacedPoints:function(e){void 0===e&&(e=40);for(var t=[],n=0;n<=e;n++)t.push(this.getPoint(n/e));return this.autoClose&&t.push(t[0]),t},getPoints:function(e){e=e||12;for(var t,n=[],i=0,l=this.curves;i<l.length;i++)for(var r=l[i],a=r&&r.isEllipseCurve?2*e:r&&(r.isLineCurve||r.isLineCurve3)?1:r&&r.isSplineCurve?e*r.points.length:e,o=r.getPoints(a),q=0;q<o.length;q++){var s=o[q];t&&t.equals(s)||(n.push(s),t=s)}return this.autoClose&&n.length>1&&!n[n.length-1].equals(n[0])&&n.push(n[0]),n},copy:function(e){pm.prototype.copy.call(this,e),this.curves=[];for(var t=0,n=e.curves.length;t<n;t++){var i=e.curves[t];this.curves.push(i.clone())}return this.autoClose=e.autoClose,this},toJSON:function(){var e=pm.prototype.toJSON.call(this);e.autoClose=this.autoClose,e.curves=[];for(var t=0,n=this.curves.length;t<n;t++){var i=this.curves[t];e.curves.push(i.toJSON())}return e},fromJSON:function(e){pm.prototype.fromJSON.call(this,e),this.autoClose=e.autoClose,this.curves=[];for(var t=0,n=e.curves.length;t<n;t++){var i=e.curves[t];this.curves.push((new Om[i.type]).fromJSON(i))}return this}}),Dm.prototype=Object.assign(Object.create(Im.prototype),{constructor:Dm,setFromPoints:function(e){this.moveTo(e[0].x,e[0].y);for(var t=1,n=e.length;t<n;t++)this.lineTo(e[t].x,e[t].y);return this},moveTo:function(e,t){return this.currentPoint.set(e,t),this},lineTo:function(e,t){var n=new Am(this.currentPoint.clone(),new _n(e,t));return this.curves.push(n),this.currentPoint.set(e,t),this},quadraticCurveTo:function(e,t,n,i){var l=new Pm(this.currentPoint.clone(),new _n(e,t),new _n(n,i));return this.curves.push(l),this.currentPoint.set(n,i),this},bezierCurveTo:function(e,t,n,i,l,r){var a=new Tm(this.currentPoint.clone(),new _n(e,t),new _n(n,i),new _n(l,r));return this.curves.push(a),this.currentPoint.set(l,r),this},splineThru:function(e){var t=new Cm([this.currentPoint.clone()].concat(e));return this.curves.push(t),this.currentPoint.copy(e[e.length-1]),this},arc:function(e,t,n,i,l,r){var a=this.currentPoint.x,o=this.currentPoint.y;return this.absarc(e+a,t+o,n,i,l,r),this},absarc:function(e,t,n,i,l,r){return this.absellipse(e,t,n,n,i,l,r),this},ellipse:function(e,t,n,i,l,r,a,o){var q=this.currentPoint.x,s=this.currentPoint.y;return this.absellipse(e+q,t+s,n,i,l,r,a,o),this},absellipse:function(e,t,n,i,l,r,a,o){var q=new fm(e,t,n,i,l,r,a,o);if(this.curves.length>0){var s=q.getPoint(0);s.equals(this.currentPoint)||this.lineTo(s.x,s.y)}this.curves.push(q);var m=q.getPoint(1);return this.currentPoint.copy(m),this},copy:function(e){return Im.prototype.copy.call(this,e),this.currentPoint.copy(e.currentPoint),this},toJSON:function(){var e=Im.prototype.toJSON.call(this);return e.currentPoint=this.currentPoint.toArray(),e},fromJSON:function(e){return Im.prototype.fromJSON.call(this,e),this.currentPoint.fromArray(e.currentPoint),this}}),Nm.prototype=Object.assign(Object.create(Dm.prototype),{constructor:Nm,getPointsHoles:function(e){for(var t=[],n=0,i=this.holes.length;n<i;n++)t[n]=this.holes[n].getPoints(e);return t},extractPoints:function(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}},copy:function(e){Dm.prototype.copy.call(this,e),this.holes=[];for(var t=0,n=e.holes.length;t<n;t++){var i=e.holes[t];this.holes.push(i.clone())}return this},toJSON:function(){var e=Dm.prototype.toJSON.call(this);e.uuid=this.uuid,e.holes=[];for(var t=0,n=this.holes.length;t<n;t++){var i=this.holes[t];e.holes.push(i.toJSON())}return e},fromJSON:function(e){Dm.prototype.fromJSON.call(this,e),this.uuid=e.uuid,this.holes=[];for(var t=0,n=e.holes.length;t<n;t++){var i=e.holes[t];this.holes.push((new Dm).fromJSON(i))}return this}}),Bm.prototype=Object.assign(Object.create(ri.prototype),{constructor:Bm,isLight:!0,copy:function(e){return ri.prototype.copy.call(this,e),this.color.copy(e.color),this.intensity=e.intensity,this},toJSON:function(e){var t=ri.prototype.toJSON.call(this,e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),void 0!==this.shadow&&(t.object.shadow=this.shadow.toJSON()),t}}),Fm.prototype=Object.assign(Object.create(Bm.prototype),{constructor:Fm,isHemisphereLight:!0,copy:function(e){return Bm.prototype.copy.call(this,e),this.groundColor.copy(e.groundColor),this}}),Object.assign(Um.prototype,{_projScreenMatrix:new Gn,_lightPositionWorld:new Mn,_lookTarget:new Mn,getViewportCount:function(){return this._viewportCount},getFrustum:function(){return this._frustum},updateMatrices:function(e){var t=this.camera,n=this.matrix,i=this._projScreenMatrix,l=this._lookTarget,r=this._lightPositionWorld;r.setFromMatrixPosition(e.matrixWorld),t.position.copy(r),l.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(l),t.updateMatrixWorld(),i.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromMatrix(i),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(t.projectionMatrix),n.multiply(t.matrixWorldInverse)},getViewport:function(e){return this._viewports[e]},getFrameExtents:function(){return this._frameExtents},copy:function(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var e={};return 0!==this.bias&&(e.bias=this.bias),1!==this.radius&&(e.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}),Gm.prototype=Object.assign(Object.create(Um.prototype),{constructor:Gm,isSpotLightShadow:!0,updateMatrices:function(e){var t=this.camera,n=2*gn.RAD2DEG*e.angle,i=this.mapSize.width/this.mapSize.height,l=e.distance||t.far;n===t.fov&&i===t.aspect&&l===t.far||(t.fov=n,t.aspect=i,t.far=l,t.updateProjectionMatrix()),Um.prototype.updateMatrices.call(this,e)}}),Hm.prototype=Object.assign(Object.create(Bm.prototype),{constructor:Hm,isSpotLight:!0,copy:function(e){return Bm.prototype.copy.call(this,e),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),Vm.prototype=Object.assign(Object.create(Um.prototype),{constructor:Vm,isPointLightShadow:!0,updateMatrices:function(e,t){void 0===t&&(t=0);var n=this.camera,i=this.matrix,l=this._lightPositionWorld,r=this._lookTarget,a=this._projScreenMatrix;l.setFromMatrixPosition(e.matrixWorld),n.position.copy(l),r.copy(n.position),r.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(r),n.updateMatrixWorld(),i.makeTranslation(-l.x,-l.y,-l.z),a.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromMatrix(a)}}),jm.prototype=Object.assign(Object.create(Bm.prototype),{constructor:jm,isPointLight:!0,copy:function(e){return Bm.prototype.copy.call(this,e),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}),km.prototype=Object.assign(Object.create(nr.prototype),{constructor:km,isOrthographicCamera:!0,copy:function(e,t){return nr.prototype.copy.call(this,e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this},setViewOffset:function(e,t,n,i,l,r){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=l,this.view.height=r,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2,l=n-e,r=n+e,a=i+t,o=i-t;if(null!==this.view&&this.view.enabled){var q=this.zoom/(this.view.width/this.view.fullWidth),s=this.zoom/(this.view.height/this.view.fullHeight),m=(this.right-this.left)/this.view.width,h=(this.top-this.bottom)/this.view.height;r=(l+=m*(this.view.offsetX/q))+m*(this.view.width/q),o=(a-=h*(this.view.offsetY/s))-h*(this.view.height/s)}this.projectionMatrix.makeOrthographic(l,r,a,o,this.near,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(e){var t=ri.prototype.toJSON.call(this,e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}}),Wm.prototype=Object.assign(Object.create(Um.prototype),{constructor:Wm,isDirectionalLightShadow:!0,updateMatrices:function(e){Um.prototype.updateMatrices.call(this,e)}}),Xm.prototype=Object.assign(Object.create(Bm.prototype),{constructor:Xm,isDirectionalLight:!0,copy:function(e){return Bm.prototype.copy.call(this,e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),Ym.prototype=Object.assign(Object.create(Bm.prototype),{constructor:Ym,isAmbientLight:!0}),Zm.prototype=Object.assign(Object.create(Bm.prototype),{constructor:Zm,isRectAreaLight:!0,copy:function(e){return Bm.prototype.copy.call(this,e),this.width=e.width,this.height=e.height,this},toJSON:function(e){var t=Bm.prototype.toJSON.call(this,e);return t.object.width=this.width,t.object.height=this.height,t}}),Jm.prototype=Object.assign(Object.create(am.prototype),{constructor:Jm,load:function(e,t,n,i){var l=this,r=new qm(l.manager);r.setPath(l.path),r.load(e,(function(e){t(l.parse(JSON.parse(e)))}),n,i)},parse:function(e){var t=this.textures;function n(e){return void 0===t[e]&&console.warn("THREE.MaterialLoader: Undefined texture",e),t[e]}var i=new Gs[e.type];if(void 0!==e.uuid&&(i.uuid=e.uuid),void 0!==e.name&&(i.name=e.name),void 0!==e.color&&i.color.setHex(e.color),void 0!==e.roughness&&(i.roughness=e.roughness),void 0!==e.metalness&&(i.metalness=e.metalness),void 0!==e.sheen&&(i.sheen=(new Zi).setHex(e.sheen)),void 0!==e.emissive&&i.emissive.setHex(e.emissive),void 0!==e.specular&&i.specular.setHex(e.specular),void 0!==e.shininess&&(i.shininess=e.shininess),void 0!==e.clearcoat&&(i.clearcoat=e.clearcoat),void 0!==e.clearcoatRoughness&&(i.clearcoatRoughness=e.clearcoatRoughness),void 0!==e.vertexColors&&(i.vertexColors=e.vertexColors),void 0!==e.fog&&(i.fog=e.fog),void 0!==e.flatShading&&(i.flatShading=e.flatShading),void 0!==e.blending&&(i.blending=e.blending),void 0!==e.combine&&(i.combine=e.combine),void 0!==e.side&&(i.side=e.side),void 0!==e.opacity&&(i.opacity=e.opacity),void 0!==e.transparent&&(i.transparent=e.transparent),void 0!==e.alphaTest&&(i.alphaTest=e.alphaTest),void 0!==e.depthTest&&(i.depthTest=e.depthTest),void 0!==e.depthWrite&&(i.depthWrite=e.depthWrite),void 0!==e.colorWrite&&(i.colorWrite=e.colorWrite),void 0!==e.stencilWrite&&(i.stencilWrite=e.stencilWrite),void 0!==e.stencilWriteMask&&(i.stencilWriteMask=e.stencilWriteMask),void 0!==e.stencilFunc&&(i.stencilFunc=e.stencilFunc),void 0!==e.stencilRef&&(i.stencilRef=e.stencilRef),void 0!==e.stencilFuncMask&&(i.stencilFuncMask=e.stencilFuncMask),void 0!==e.stencilFail&&(i.stencilFail=e.stencilFail),void 0!==e.stencilZFail&&(i.stencilZFail=e.stencilZFail),void 0!==e.stencilZPass&&(i.stencilZPass=e.stencilZPass),void 0!==e.wireframe&&(i.wireframe=e.wireframe),void 0!==e.wireframeLinewidth&&(i.wireframeLinewidth=e.wireframeLinewidth),void 0!==e.wireframeLinecap&&(i.wireframeLinecap=e.wireframeLinecap),void 0!==e.wireframeLinejoin&&(i.wireframeLinejoin=e.wireframeLinejoin),void 0!==e.rotation&&(i.rotation=e.rotation),1!==e.linewidth&&(i.linewidth=e.linewidth),void 0!==e.dashSize&&(i.dashSize=e.dashSize),void 0!==e.gapSize&&(i.gapSize=e.gapSize),void 0!==e.scale&&(i.scale=e.scale),void 0!==e.polygonOffset&&(i.polygonOffset=e.polygonOffset),void 0!==e.polygonOffsetFactor&&(i.polygonOffsetFactor=e.polygonOffsetFactor),void 0!==e.polygonOffsetUnits&&(i.polygonOffsetUnits=e.polygonOffsetUnits),void 0!==e.skinning&&(i.skinning=e.skinning),void 0!==e.morphTargets&&(i.morphTargets=e.morphTargets),void 0!==e.morphNormals&&(i.morphNormals=e.morphNormals),void 0!==e.dithering&&(i.dithering=e.dithering),void 0!==e.visible&&(i.visible=e.visible),void 0!==e.toneMapped&&(i.toneMapped=e.toneMapped),void 0!==e.userData&&(i.userData=e.userData),void 0!==e.uniforms)for(var l in e.uniforms){var r=e.uniforms[l];switch(i.uniforms[l]={},r.type){case"t":i.uniforms[l].value=n(r.value);break;case"c":i.uniforms[l].value=(new Zi).setHex(r.value);break;case"v2":i.uniforms[l].value=(new _n).fromArray(r.value);break;case"v3":i.uniforms[l].value=(new Mn).fromArray(r.value);break;case"v4":i.uniforms[l].value=(new Pn).fromArray(r.value);break;case"m3":i.uniforms[l].value=(new Tn).fromArray(r.value);case"m4":i.uniforms[l].value=(new Gn).fromArray(r.value);break;default:i.uniforms[l].value=r.value}}if(void 0!==e.defines&&(i.defines=e.defines),void 0!==e.vertexShader&&(i.vertexShader=e.vertexShader),void 0!==e.fragmentShader&&(i.fragmentShader=e.fragmentShader),void 0!==e.extensions)for(var a in e.extensions)i.extensions[a]=e.extensions[a];if(void 0!==e.shading&&(i.flatShading=1===e.shading),void 0!==e.size&&(i.size=e.size),void 0!==e.sizeAttenuation&&(i.sizeAttenuation=e.sizeAttenuation),void 0!==e.map&&(i.map=n(e.map)),void 0!==e.matcap&&(i.matcap=n(e.matcap)),void 0!==e.alphaMap&&(i.alphaMap=n(e.alphaMap),i.transparent=!0),void 0!==e.bumpMap&&(i.bumpMap=n(e.bumpMap)),void 0!==e.bumpScale&&(i.bumpScale=e.bumpScale),void 0!==e.normalMap&&(i.normalMap=n(e.normalMap)),void 0!==e.normalMapType&&(i.normalMapType=e.normalMapType),void 0!==e.normalScale){var o=e.normalScale;!1===Array.isArray(o)&&(o=[o,o]),i.normalScale=(new _n).fromArray(o)}return void 0!==e.displacementMap&&(i.displacementMap=n(e.displacementMap)),void 0!==e.displacementScale&&(i.displacementScale=e.displacementScale),void 0!==e.displacementBias&&(i.displacementBias=e.displacementBias),void 0!==e.roughnessMap&&(i.roughnessMap=n(e.roughnessMap)),void 0!==e.metalnessMap&&(i.metalnessMap=n(e.metalnessMap)),void 0!==e.emissiveMap&&(i.emissiveMap=n(e.emissiveMap)),void 0!==e.emissiveIntensity&&(i.emissiveIntensity=e.emissiveIntensity),void 0!==e.specularMap&&(i.specularMap=n(e.specularMap)),void 0!==e.envMap&&(i.envMap=n(e.envMap)),void 0!==e.envMapIntensity&&(i.envMapIntensity=e.envMapIntensity),void 0!==e.reflectivity&&(i.reflectivity=e.reflectivity),void 0!==e.refractionRatio&&(i.refractionRatio=e.refractionRatio),void 0!==e.lightMap&&(i.lightMap=n(e.lightMap)),void 0!==e.lightMapIntensity&&(i.lightMapIntensity=e.lightMapIntensity),void 0!==e.aoMap&&(i.aoMap=n(e.aoMap)),void 0!==e.aoMapIntensity&&(i.aoMapIntensity=e.aoMapIntensity),void 0!==e.gradientMap&&(i.gradientMap=n(e.gradientMap)),void 0!==e.clearcoatNormalMap&&(i.clearcoatNormalMap=n(e.clearcoatNormalMap)),void 0!==e.clearcoatNormalScale&&(i.clearcoatNormalScale=(new _n).fromArray(e.clearcoatNormalScale)),i},setTextures:function(e){return this.textures=e,this}});var Qm={decodeText:function(e){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(e);for(var t="",n=0,i=e.length;n<i;n++)t+=String.fromCharCode(e[n]);try{return decodeURIComponent(escape(t))}catch(e){return t}},extractUrlBase:function(e){var t=e.lastIndexOf("/");return-1===t?"./":e.substr(0,t+1)}};function Km(){bl.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0}function $m(e,t,n,i){"number"==typeof n&&(i=n,n=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),il.call(this,e,t,n),this.meshPerAttribute=i||1}function eh(e){am.call(this,e)}Km.prototype=Object.assign(Object.create(bl.prototype),{constructor:Km,isInstancedBufferGeometry:!0,copy:function(e){return bl.prototype.copy.call(this,e),this.maxInstancedCount=e.maxInstancedCount,this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var e=bl.prototype.toJSON.call(this);return e.maxInstancedCount=this.maxInstancedCount,e.isInstancedBufferGeometry=!0,e}}),$m.prototype=Object.assign(Object.create(il.prototype),{constructor:$m,isInstancedBufferAttribute:!0,copy:function(e){return il.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this},toJSON:function(){var e=il.prototype.toJSON.call(this);return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}),eh.prototype=Object.assign(Object.create(am.prototype),{constructor:eh,load:function(e,t,n,i){var l=this,r=new qm(l.manager);r.setPath(l.path),r.load(e,(function(e){t(l.parse(JSON.parse(e)))}),n,i)},parse:function(e){var t=e.isInstancedBufferGeometry?new Km:new bl,n=e.data.index;if(void 0!==n){var i=new th[n.type](n.array);t.setIndex(new il(i,1))}var l=e.data.attributes;for(var r in l){var a=l[r],o=(i=new th[a.type](a.array),new(a.isInstancedBufferAttribute?$m:il)(i,a.itemSize,a.normalized));void 0!==a.name&&(o.name=a.name),t.setAttribute(r,o)}var q=e.data.morphAttributes;if(q)for(var r in q){for(var s=q[r],m=[],h=0,c=s.length;h<c;h++){a=s[h],o=new il(i=new th[a.type](a.array),a.itemSize,a.normalized);void 0!==a.name&&(o.name=a.name),m.push(o)}t.morphAttributes[r]=m}var u=e.data.groups||e.data.drawcalls||e.data.offsets;if(void 0!==u){h=0;for(var d=u.length;h!==d;++h){var p=u[h];t.addGroup(p.start,p.count,p.materialIndex)}}var f=e.data.boundingSphere;if(void 0!==f){var x=new Mn;void 0!==f.center&&x.fromArray(f.center),t.boundingSphere=new bi(x,f.radius)}return e.name&&(t.name=e.name),e.userData&&(t.userData=e.userData),t}});var th={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:"undefined"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function nh(e){am.call(this,e)}nh.prototype=Object.assign(Object.create(am.prototype),{constructor:nh,load:function(e,t,n,i){var l=this,r=""===this.path?Qm.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||r;var a=new qm(l.manager);a.setPath(this.path),a.load(e,(function(n){var r=null;try{r=JSON.parse(n)}catch(t){return void 0!==i&&i(t),void console.error("THREE:ObjectLoader: Can't parse "+e+".",t.message)}var a=r.metadata;void 0!==a&&void 0!==a.type&&"geometry"!==a.type.toLowerCase()?l.parse(r,t):console.error("THREE.ObjectLoader: Can't load "+e)}),n,i)},parse:function(e,t){var n=this.parseShape(e.shapes),i=this.parseGeometries(e.geometries,n),l=this.parseImages(e.images,(function(){void 0!==t&&t(o)})),r=this.parseTextures(e.textures,l),a=this.parseMaterials(e.materials,r),o=this.parseObject(e.object,i,a);return e.animations&&(o.animations=this.parseAnimations(e.animations)),void 0!==e.images&&0!==e.images.length||void 0!==t&&t(o),o},parseShape:function(e){var t={};if(void 0!==e)for(var n=0,i=e.length;n<i;n++){var l=(new Nm).fromJSON(e[n]);t[l.uuid]=l}return t},parseGeometries:function(e,t){var n={};if(void 0!==e)for(var i=new eh,l=0,r=e.length;l<r;l++){var a,o=e[l];switch(o.type){case"PlaneGeometry":case"PlaneBufferGeometry":a=new Ls[o.type](o.width,o.height,o.widthSegments,o.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":a=new Ls[o.type](o.width,o.height,o.depth,o.widthSegments,o.heightSegments,o.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":a=new Ls[o.type](o.radius,o.segments,o.thetaStart,o.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":a=new Ls[o.type](o.radiusTop,o.radiusBottom,o.height,o.radialSegments,o.heightSegments,o.openEnded,o.thetaStart,o.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":a=new Ls[o.type](o.radius,o.height,o.radialSegments,o.heightSegments,o.openEnded,o.thetaStart,o.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":a=new Ls[o.type](o.radius,o.widthSegments,o.heightSegments,o.phiStart,o.phiLength,o.thetaStart,o.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":a=new Ls[o.type](o.radius,o.detail);break;case"RingGeometry":case"RingBufferGeometry":a=new Ls[o.type](o.innerRadius,o.outerRadius,o.thetaSegments,o.phiSegments,o.thetaStart,o.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":a=new Ls[o.type](o.radius,o.tube,o.radialSegments,o.tubularSegments,o.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":a=new Ls[o.type](o.radius,o.tube,o.tubularSegments,o.radialSegments,o.p,o.q);break;case"TubeGeometry":case"TubeBufferGeometry":a=new Ls[o.type]((new Om[o.path.type]).fromJSON(o.path),o.tubularSegments,o.radius,o.radialSegments,o.closed);break;case"LatheGeometry":case"LatheBufferGeometry":a=new Ls[o.type](o.points,o.segments,o.phiStart,o.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":a=new Ls[o.type](o.vertices,o.indices,o.radius,o.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":for(var q=[],s=0,m=o.shapes.length;s<m;s++){var h=t[o.shapes[s]];q.push(h)}a=new Ls[o.type](q,o.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":for(q=[],s=0,m=o.shapes.length;s<m;s++){h=t[o.shapes[s]];q.push(h)}var c=o.options.extrudePath;void 0!==c&&(o.options.extrudePath=(new Om[c.type]).fromJSON(c)),a=new Ls[o.type](q,o.options);break;case"BufferGeometry":case"InstancedBufferGeometry":a=i.parse(o);break;case"Geometry":if("THREE"in window&&"LegacyJSONLoader"in THREE)a=(new THREE.LegacyJSONLoader).parse(o,this.resourcePath).geometry;else console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+o.type+'"');continue}a.uuid=o.uuid,void 0!==o.name&&(a.name=o.name),!0===a.isBufferGeometry&&void 0!==o.userData&&(a.userData=o.userData),n[o.uuid]=a}return n},parseMaterials:function(e,t){var n={},i={};if(void 0!==e){var l=new Jm;l.setTextures(t);for(var r=0,a=e.length;r<a;r++){var o=e[r];if("MultiMaterial"===o.type){for(var q=[],s=0;s<o.materials.length;s++){var m=o.materials[s];void 0===n[m.uuid]&&(n[m.uuid]=l.parse(m)),q.push(n[m.uuid])}i[o.uuid]=q}else void 0===n[o.uuid]&&(n[o.uuid]=l.parse(o)),i[o.uuid]=n[o.uuid]}}return i},parseAnimations:function(e){for(var t=[],n=0;n<e.length;n++){var i=e[n],l=tm.parse(i);void 0!==i.uuid&&(l.uuid=i.uuid),t.push(l)}return t},parseImages:function(e,t){var n=this,i={};function l(e){return n.manager.itemStart(e),r.load(e,(function(){n.manager.itemEnd(e)}),void 0,(function(){n.manager.itemError(e),n.manager.itemEnd(e)}))}if(void 0!==e&&e.length>0){var r=new cm(new lm(t));r.setCrossOrigin(this.crossOrigin);for(var a=0,o=e.length;a<o;a++){var q=e[a],s=q.url;if(Array.isArray(s)){i[q.uuid]=[];for(var m=0,h=s.length;m<h;m++){var c=s[m],u=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(c)?c:n.resourcePath+c;i[q.uuid].push(l(u))}}else{u=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(q.url)?q.url:n.resourcePath+q.url;i[q.uuid]=l(u)}}}return i},parseTextures:function(e,t){function n(e,t){return"number"==typeof e?e:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",e),t[e])}var i={};if(void 0!==e)for(var l=0,r=e.length;l<r;l++){var a,o=e[l];void 0===o.image&&console.warn('THREE.ObjectLoader: No "image" specified for',o.uuid),void 0===t[o.image]&&console.warn("THREE.ObjectLoader: Undefined image",o.image),(a=Array.isArray(t[o.image])?new Lr(t[o.image]):new Ln(t[o.image])).needsUpdate=!0,a.uuid=o.uuid,void 0!==o.name&&(a.name=o.name),void 0!==o.mapping&&(a.mapping=n(o.mapping,lh)),void 0!==o.offset&&a.offset.fromArray(o.offset),void 0!==o.repeat&&a.repeat.fromArray(o.repeat),void 0!==o.center&&a.center.fromArray(o.center),void 0!==o.rotation&&(a.rotation=o.rotation),void 0!==o.wrap&&(a.wrapS=n(o.wrap[0],rh),a.wrapT=n(o.wrap[1],rh)),void 0!==o.format&&(a.format=o.format),void 0!==o.type&&(a.type=o.type),void 0!==o.encoding&&(a.encoding=o.encoding),void 0!==o.minFilter&&(a.minFilter=n(o.minFilter,ah)),void 0!==o.magFilter&&(a.magFilter=n(o.magFilter,ah)),void 0!==o.anisotropy&&(a.anisotropy=o.anisotropy),void 0!==o.flipY&&(a.flipY=o.flipY),void 0!==o.premultiplyAlpha&&(a.premultiplyAlpha=o.premultiplyAlpha),void 0!==o.unpackAlignment&&(a.unpackAlignment=o.unpackAlignment),i[o.uuid]=a}return i},parseObject:function(e,t,n){var i;function l(e){return void 0===t[e]&&console.warn("THREE.ObjectLoader: Undefined geometry",e),t[e]}function r(e){if(void 0!==e){if(Array.isArray(e)){for(var t=[],i=0,l=e.length;i<l;i++){var r=e[i];void 0===n[r]&&console.warn("THREE.ObjectLoader: Undefined material",r),t.push(n[r])}return t}return void 0===n[e]&&console.warn("THREE.ObjectLoader: Undefined material",e),n[e]}}switch(e.type){case"Scene":i=new ai,void 0!==e.background&&Number.isInteger(e.background)&&(i.background=new Zi(e.background)),void 0!==e.fog&&("Fog"===e.fog.type?i.fog=new wo(e.fog.color,e.fog.near,e.fog.far):"FogExp2"===e.fog.type&&(i.fog=new bo(e.fog.color,e.fog.density)));break;case"PerspectiveCamera":i=new ir(e.fov,e.aspect,e.near,e.far),void 0!==e.focus&&(i.focus=e.focus),void 0!==e.zoom&&(i.zoom=e.zoom),void 0!==e.filmGauge&&(i.filmGauge=e.filmGauge),void 0!==e.filmOffset&&(i.filmOffset=e.filmOffset),void 0!==e.view&&(i.view=Object.assign({},e.view));break;case"OrthographicCamera":i=new km(e.left,e.right,e.top,e.bottom,e.near,e.far),void 0!==e.zoom&&(i.zoom=e.zoom),void 0!==e.view&&(i.view=Object.assign({},e.view));break;case"AmbientLight":i=new Ym(e.color,e.intensity);break;case"DirectionalLight":i=new Xm(e.color,e.intensity);break;case"PointLight":i=new jm(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":i=new Zm(e.color,e.intensity,e.width,e.height);break;case"SpotLight":i=new Hm(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"HemisphereLight":i=new Fm(e.color,e.groundColor,e.intensity);break;case"SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":var a=l(e.geometry),o=r(e.material);i=a.bones&&a.bones.length>0?new jo(a,o):new Ul(a,o);break;case"InstancedMesh":a=l(e.geometry),o=r(e.material);var q=e.count,s=e.instanceMatrix;(i=new Zo(a,o,q)).instanceMatrix=new il(new Float32Array(s.array),16);break;case"LOD":i=new Vo;break;case"Line":i=new nq(l(e.geometry),r(e.material),e.mode);break;case"LineLoop":i=new aq(l(e.geometry),r(e.material));break;case"LineSegments":i=new rq(l(e.geometry),r(e.material));break;case"PointCloud":case"Points":i=new cq(l(e.geometry),r(e.material));break;case"Sprite":i=new Fo(r(e.material));break;case"Group":i=new co;break;default:i=new ri}if(i.uuid=e.uuid,void 0!==e.name&&(i.name=e.name),void 0!==e.matrix?(i.matrix.fromArray(e.matrix),void 0!==e.matrixAutoUpdate&&(i.matrixAutoUpdate=e.matrixAutoUpdate),i.matrixAutoUpdate&&i.matrix.decompose(i.position,i.quaternion,i.scale)):(void 0!==e.position&&i.position.fromArray(e.position),void 0!==e.rotation&&i.rotation.fromArray(e.rotation),void 0!==e.quaternion&&i.quaternion.fromArray(e.quaternion),void 0!==e.scale&&i.scale.fromArray(e.scale)),void 0!==e.castShadow&&(i.castShadow=e.castShadow),void 0!==e.receiveShadow&&(i.receiveShadow=e.receiveShadow),e.shadow&&(void 0!==e.shadow.bias&&(i.shadow.bias=e.shadow.bias),void 0!==e.shadow.radius&&(i.shadow.radius=e.shadow.radius),void 0!==e.shadow.mapSize&&i.shadow.mapSize.fromArray(e.shadow.mapSize),void 0!==e.shadow.camera&&(i.shadow.camera=this.parseObject(e.shadow.camera))),void 0!==e.visible&&(i.visible=e.visible),void 0!==e.frustumCulled&&(i.frustumCulled=e.frustumCulled),void 0!==e.renderOrder&&(i.renderOrder=e.renderOrder),void 0!==e.userData&&(i.userData=e.userData),void 0!==e.layers&&(i.layers.mask=e.layers),void 0!==e.drawMode&&i.setDrawMode(e.drawMode),void 0!==e.children)for(var m=e.children,h=0;h<m.length;h++)i.add(this.parseObject(m[h],t,n));if("LOD"===e.type)for(var c=e.levels,u=0;u<c.length;u++){var d=c[u],p=i.getObjectByProperty("uuid",d.object);void 0!==p&&i.addLevel(p,d.distance)}return i}});var ih,lh={UVMapping:se,CubeReflectionMapping:me,CubeRefractionMapping:he,EquirectangularReflectionMapping:ce,EquirectangularRefractionMapping:ue,SphericalReflectionMapping:de,CubeUVReflectionMapping:pe,CubeUVRefractionMapping:fe},rh={RepeatWrapping:xe,ClampToEdgeWrapping:ve,MirroredRepeatWrapping:ge},ah={NearestFilter:_e,NearestMipmapNearestFilter:ye,NearestMipmapLinearFilter:we,LinearFilter:ze,LinearMipmapNearestFilter:Se,LinearMipmapLinearFilter:Ee};function oh(e){"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),am.call(this,e),this.options=void 0}function qh(){this.type="ShapePath",this.color=new Zi,this.subPaths=[],this.currentPath=null}function sh(e){this.type="Font",this.data=e}function mh(e,t,n,i,l){var r=l.glyphs[e]||l.glyphs["?"];if(r){var a,o,q,s,m,h,c,u,d=new qh;if(r.o)for(var p=r._cachedOutline||(r._cachedOutline=r.o.split(" ")),f=0,x=p.length;f<x;){switch(p[f++]){case"m":a=p[f++]*t+n,o=p[f++]*t+i,d.moveTo(a,o);break;case"l":a=p[f++]*t+n,o=p[f++]*t+i,d.lineTo(a,o);break;case"q":q=p[f++]*t+n,s=p[f++]*t+i,m=p[f++]*t+n,h=p[f++]*t+i,d.quadraticCurveTo(m,h,q,s);break;case"b":q=p[f++]*t+n,s=p[f++]*t+i,m=p[f++]*t+n,h=p[f++]*t+i,c=p[f++]*t+n,u=p[f++]*t+i,d.bezierCurveTo(m,h,c,u,q,s)}}return{offsetX:r.ha*t,path:d}}console.error('THREE.Font: character "'+e+'" does not exists in font family '+l.familyName+".")}function hh(e){am.call(this,e)}oh.prototype=Object.assign(Object.create(am.prototype),{constructor:oh,setOptions:function(e){return this.options=e,this},load:function(e,t,n,i){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var l=this,r=im.get(e);if(void 0!==r)return l.manager.itemStart(e),setTimeout((function(){t&&t(r),l.manager.itemEnd(e)}),0),r;fetch(e).then((function(e){return e.blob()})).then((function(e){return void 0===l.options?createImageBitmap(e):createImageBitmap(e,l.options)})).then((function(n){im.add(e,n),t&&t(n),l.manager.itemEnd(e)})).catch((function(t){i&&i(t),l.manager.itemError(e),l.manager.itemEnd(e)})),l.manager.itemStart(e)}}),Object.assign(qh.prototype,{moveTo:function(e,t){return this.currentPath=new Dm,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t),this},lineTo:function(e,t){return this.currentPath.lineTo(e,t),this},quadraticCurveTo:function(e,t,n,i){return this.currentPath.quadraticCurveTo(e,t,n,i),this},bezierCurveTo:function(e,t,n,i,l,r){return this.currentPath.bezierCurveTo(e,t,n,i,l,r),this},splineThru:function(e){return this.currentPath.splineThru(e),this},toShapes:function(e,t){function n(e){for(var t=[],n=0,i=e.length;n<i;n++){var l=e[n],r=new Nm;r.curves=l.curves,t.push(r)}return t}function i(e,t){for(var n=t.length,i=!1,l=n-1,r=0;r<n;l=r++){var a=t[l],o=t[r],q=o.x-a.x,s=o.y-a.y;if(Math.abs(s)>Number.EPSILON){if(s<0&&(a=t[r],q=-q,o=t[l],s=-s),e.y<a.y||e.y>o.y)continue;if(e.y===a.y){if(e.x===a.x)return!0}else{var m=s*(e.x-a.x)-q*(e.y-a.y);if(0===m)return!0;if(m<0)continue;i=!i}}else{if(e.y!==a.y)continue;if(o.x<=e.x&&e.x<=a.x||a.x<=e.x&&e.x<=o.x)return!0}}return i}var l=rs.isClockWise,r=this.subPaths;if(0===r.length)return[];if(!0===t)return n(r);var a,o,q,s=[];if(1===r.length)return o=r[0],(q=new Nm).curves=o.curves,s.push(q),s;var m=!l(r[0].getPoints());m=e?!m:m;var h,c,u=[],d=[],p=[],f=0;d[f]=void 0,p[f]=[];for(var x=0,v=r.length;x<v;x++)a=l(h=(o=r[x]).getPoints()),(a=e?!a:a)?(!m&&d[f]&&f++,d[f]={s:new Nm,p:h},d[f].s.curves=o.curves,m&&f++,p[f]=[]):p[f].push({h:o,p:h[0]});if(!d[0])return n(r);if(d.length>1){for(var g=!1,_=[],y=0,b=d.length;y<b;y++)u[y]=[];for(y=0,b=d.length;y<b;y++)for(var w=p[y],M=0;M<w.length;M++){for(var z=w[M],S=!0,T=0;T<d.length;T++)i(z.p,d[T].p)&&(y!==T&&_.push({froms:y,tos:T,hole:M}),S?(S=!1,u[T].push(z)):g=!0);S&&u[y].push(z)}_.length>0&&(g||(p=u))}x=0;for(var E=d.length;x<E;x++){q=d[x].s,s.push(q);for(var A=0,L=(c=p[x]).length;A<L;A++)q.holes.push(c[A].h)}return s}}),Object.assign(sh.prototype,{isFont:!0,generateShapes:function(e,t){void 0===t&&(t=100);for(var n=[],i=function(e,t,n){for(var i=Array.from?Array.from(e):String(e).split(""),l=t/n.resolution,r=(n.boundingBox.yMax-n.boundingBox.yMin+n.underlineThickness)*l,a=[],o=0,q=0,s=0;s<i.length;s++){var m=i[s];if("\n"===m)o=0,q-=r;else{var h=mh(m,l,o,q,n);o+=h.offsetX,a.push(h.path)}}return a}(e,t,this.data),l=0,r=i.length;l<r;l++)Array.prototype.push.apply(n,i[l].toShapes());return n}}),hh.prototype=Object.assign(Object.create(am.prototype),{constructor:hh,load:function(e,t,n,i){var l=this,r=new qm(this.manager);r.setPath(this.path),r.load(e,(function(e){var n;try{n=JSON.parse(e)}catch(t){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),n=JSON.parse(e.substring(65,e.length-2))}var i=l.parse(n);t&&t(i)}),n,i)},parse:function(e){return new sh(e)}});var ch={getContext:function(){return void 0===ih&&(ih=new(window.AudioContext||window.webkitAudioContext)),ih},setContext:function(e){ih=e}};function uh(e){am.call(this,e)}function dh(){this.coefficients=[];for(var e=0;e<9;e++)this.coefficients.push(new Mn)}function ph(e,t){Bm.call(this,void 0,t),this.sh=void 0!==e?e:new dh}function fh(e,t,n){ph.call(this,void 0,n);var i=(new Zi).set(e),l=(new Zi).set(t),r=new Mn(i.r,i.g,i.b),a=new Mn(l.r,l.g,l.b),o=Math.sqrt(Math.PI),q=o*Math.sqrt(.75);this.sh.coefficients[0].copy(r).add(a).multiplyScalar(o),this.sh.coefficients[1].copy(r).sub(a).multiplyScalar(q)}function xh(e,t){ph.call(this,void 0,t);var n=(new Zi).set(e);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}uh.prototype=Object.assign(Object.create(am.prototype),{constructor:uh,load:function(e,t,n,i){var l=new qm(this.manager);l.setResponseType("arraybuffer"),l.setPath(this.path),l.load(e,(function(e){var n=e.slice(0);ch.getContext().decodeAudioData(n,(function(e){t(e)}))}),n,i)}}),Object.assign(dh.prototype,{isSphericalHarmonics3:!0,set:function(e){for(var t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this},zero:function(){for(var e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this},getAt:function(e,t){var n=e.x,i=e.y,l=e.z,r=this.coefficients;return t.copy(r[0]).multiplyScalar(.282095),t.addScale(r[1],.488603*i),t.addScale(r[2],.488603*l),t.addScale(r[3],.488603*n),t.addScale(r[4],n*i*1.092548),t.addScale(r[5],i*l*1.092548),t.addScale(r[6],.315392*(3*l*l-1)),t.addScale(r[7],n*l*1.092548),t.addScale(r[8],.546274*(n*n-i*i)),t},getIrradianceAt:function(e,t){var n=e.x,i=e.y,l=e.z,r=this.coefficients;return t.copy(r[0]).multiplyScalar(.886227),t.addScale(r[1],1.023328*i),t.addScale(r[2],1.023328*l),t.addScale(r[3],1.023328*n),t.addScale(r[4],.858086*n*i),t.addScale(r[5],.858086*i*l),t.addScale(r[6],.743125*l*l-.247708),t.addScale(r[7],.858086*n*l),t.addScale(r[8],.429043*(n*n-i*i)),t},add:function(e){for(var t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this},scale:function(e){for(var t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this},lerp:function(e,t){for(var n=0;n<9;n++)this.coefficients[n].lerp(e.coefficients[n],t);return this},equals:function(e){for(var t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0},copy:function(e){return this.set(e.coefficients)},clone:function(){return(new this.constructor).copy(this)},fromArray:function(e,t){void 0===t&&(t=0);for(var n=this.coefficients,i=0;i<9;i++)n[i].fromArray(e,t+3*i);return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);for(var n=this.coefficients,i=0;i<9;i++)n[i].toArray(e,t+3*i);return e}}),Object.assign(dh,{getBasisAt:function(e,t){var n=e.x,i=e.y,l=e.z;t[0]=.282095,t[1]=.488603*i,t[2]=.488603*l,t[3]=.488603*n,t[4]=1.092548*n*i,t[5]=1.092548*i*l,t[6]=.315392*(3*l*l-1),t[7]=1.092548*n*l,t[8]=.546274*(n*n-i*i)}}),ph.prototype=Object.assign(Object.create(Bm.prototype),{constructor:ph,isLightProbe:!0,copy:function(e){return Bm.prototype.copy.call(this,e),this.sh.copy(e.sh),this.intensity=e.intensity,this},toJSON:function(e){return Bm.prototype.toJSON.call(this,e)}}),fh.prototype=Object.assign(Object.create(ph.prototype),{constructor:fh,isHemisphereLightProbe:!0,copy:function(e){return ph.prototype.copy.call(this,e),this},toJSON:function(e){return ph.prototype.toJSON.call(this,e)}}),xh.prototype=Object.assign(Object.create(ph.prototype),{constructor:xh,isAmbientLightProbe:!0,copy:function(e){return ph.prototype.copy.call(this,e),this},toJSON:function(e){return ph.prototype.toJSON.call(this,e)}});var vh=new Gn,gh=new Gn;function _h(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new ir,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new ir,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}function yh(e){this.autoStart=void 0===e||e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}Object.assign(_h.prototype,{update:function(e){var t=this._cache;if(t.focus!==e.focus||t.fov!==e.fov||t.aspect!==e.aspect*this.aspect||t.near!==e.near||t.far!==e.far||t.zoom!==e.zoom||t.eyeSep!==this.eyeSep){t.focus=e.focus,t.fov=e.fov,t.aspect=e.aspect*this.aspect,t.near=e.near,t.far=e.far,t.zoom=e.zoom,t.eyeSep=this.eyeSep;var n,i,l=e.projectionMatrix.clone(),r=t.eyeSep/2,a=r*t.near/t.focus,o=t.near*Math.tan(gn.DEG2RAD*t.fov*.5)/t.zoom;gh.elements[12]=-r,vh.elements[12]=r,n=-o*t.aspect+a,i=o*t.aspect+a,l.elements[0]=2*t.near/(i-n),l.elements[8]=(i+n)/(i-n),this.cameraL.projectionMatrix.copy(l),n=-o*t.aspect-a,i=o*t.aspect-a,l.elements[0]=2*t.near/(i-n),l.elements[8]=(i+n)/(i-n),this.cameraR.projectionMatrix.copy(l)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(gh),this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(vh)}}),Object.assign(yh.prototype,{start:function(){this.startTime=("undefined"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var t=("undefined"==typeof performance?Date:performance).now();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}});var bh=new Mn,wh=new yn,Mh=new Mn,zh=new Mn;function Sh(){ri.call(this),this.type="AudioListener",this.context=ch.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new yh}function Th(e){ri.call(this),this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this._startedAt=0,this._pausedAt=0,this.filters=[]}Sh.prototype=Object.assign(Object.create(ri.prototype),{constructor:Sh,getInput:function(){return this.gain},removeFilter:function(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this},getFilter:function(){return this.filter},setFilter:function(e){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this},updateMatrixWorld:function(e){ri.prototype.updateMatrixWorld.call(this,e);var t=this.context.listener,n=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(bh,wh,Mh),zh.set(0,0,-1).applyQuaternion(wh),t.positionX){var i=this.context.currentTime+this.timeDelta;t.positionX.linearRampToValueAtTime(bh.x,i),t.positionY.linearRampToValueAtTime(bh.y,i),t.positionZ.linearRampToValueAtTime(bh.z,i),t.forwardX.linearRampToValueAtTime(zh.x,i),t.forwardY.linearRampToValueAtTime(zh.y,i),t.forwardZ.linearRampToValueAtTime(zh.z,i),t.upX.linearRampToValueAtTime(n.x,i),t.upY.linearRampToValueAtTime(n.y,i),t.upZ.linearRampToValueAtTime(n.z,i)}else t.setPosition(bh.x,bh.y,bh.z),t.setOrientation(zh.x,zh.y,zh.z,n.x,n.y,n.z)}}),Th.prototype=Object.assign(Object.create(ri.prototype),{constructor:Th,getOutput:function(){return this.gain},setNodeSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this},setMediaElementSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this},setMediaStreamSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this},setBuffer:function(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(e){if(void 0===e&&(e=0),!0!==this.isPlaying){if(!1!==this.hasPlaybackControl){this._startedAt=this.context.currentTime+e;var t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.loopStart=this.loopStart,t.loopEnd=this.loopEnd,t.onended=this.onEnded.bind(this),t.start(this._startedAt,this._pausedAt+this.offset,this.duration),this.isPlaying=!0,this.source=t,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}console.warn("THREE.Audio: this Audio has no playback control.")}else console.warn("THREE.Audio: Audio is already playing.")},pause:function(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._pausedAt=(this.context.currentTime-this._startedAt)*this.playbackRate,this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")},stop:function(){if(!1!==this.hasPlaybackControl)return this._pausedAt=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(e){return e||(e=[]),!0===this.isPlaying?(this.disconnect(),this.filters=e,this.connect()):this.filters=e,this},setDetune:function(e){if(this.detune=e,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this},getDetune:function(){return this.detune},getFilter:function(){return this.getFilters()[0]},setFilter:function(e){return this.setFilters(e?[e]:[])},setPlaybackRate:function(e){if(!1!==this.hasPlaybackControl)return this.playbackRate=e,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(e){if(!1!==this.hasPlaybackControl)return this.loop=e,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")},setLoopStart:function(e){return this.loopStart=e,this},setLoopEnd:function(e){return this.loopEnd=e,this},getVolume:function(){return this.gain.gain.value},setVolume:function(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}});var Eh=new Mn,Ah=new yn,Lh=new Mn,Ph=new Mn;function Rh(e){Th.call(this,e),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}function Ch(e,t){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=void 0!==t?t:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}function Oh(e,t,n){this.binding=e,this.valueSize=n;var i,l=Float64Array;switch(t){case"quaternion":i=this._slerp;break;case"string":case"bool":l=Array,i=this._select;break;default:i=this._lerp}this.buffer=new l(4*n),this._mixBufferRegion=i,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}Rh.prototype=Object.assign(Object.create(Th.prototype),{constructor:Rh,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(e){return this.panner.refDistance=e,this},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(e){return this.panner.rolloffFactor=e,this},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(e){return this.panner.distanceModel=e,this},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(e){return this.panner.maxDistance=e,this},setDirectionalCone:function(e,t,n){return this.panner.coneInnerAngle=e,this.panner.coneOuterAngle=t,this.panner.coneOuterGain=n,this},updateMatrixWorld:function(e){if(ri.prototype.updateMatrixWorld.call(this,e),!0!==this.hasPlaybackControl||!1!==this.isPlaying){this.matrixWorld.decompose(Eh,Ah,Lh),Ph.set(0,0,1).applyQuaternion(Ah);var t=this.panner;if(t.positionX){var n=this.context.currentTime+this.listener.timeDelta;t.positionX.linearRampToValueAtTime(Eh.x,n),t.positionY.linearRampToValueAtTime(Eh.y,n),t.positionZ.linearRampToValueAtTime(Eh.z,n),t.orientationX.linearRampToValueAtTime(Ph.x,n),t.orientationY.linearRampToValueAtTime(Ph.y,n),t.orientationZ.linearRampToValueAtTime(Ph.z,n)}else t.setPosition(Eh.x,Eh.y,Eh.z),t.setOrientation(Ph.x,Ph.y,Ph.z)}}}),Object.assign(Ch.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var e=0,t=this.getFrequencyData(),n=0;n<t.length;n++)e+=t[n];return e/t.length}}),Object.assign(Oh.prototype,{accumulate:function(e,t){var n=this.buffer,i=this.valueSize,l=e*i+i,r=this.cumulativeWeight;if(0===r){for(var a=0;a!==i;++a)n[l+a]=n[a];r=t}else{var o=t/(r+=t);this._mixBufferRegion(n,l,0,o,i)}this.cumulativeWeight=r},apply:function(e){var t=this.valueSize,n=this.buffer,i=e*t+t,l=this.cumulativeWeight,r=this.binding;if(this.cumulativeWeight=0,l<1){var a=3*t;this._mixBufferRegion(n,i,a,1-l,t)}for(var o=t,q=t+t;o!==q;++o)if(n[o]!==n[o+t]){r.setValue(n,i);break}},saveOriginalState:function(){var e=this.binding,t=this.buffer,n=this.valueSize,i=3*n;e.getValue(t,i);for(var l=n,r=i;l!==r;++l)t[l]=t[i+l%n];this.cumulativeWeight=0},restoreOriginalState:function(){var e=3*this.valueSize;this.binding.setValue(this.buffer,e)},_select:function(e,t,n,i,l){if(i>=.5)for(var r=0;r!==l;++r)e[t+r]=e[n+r]},_slerp:function(e,t,n,i){yn.slerpFlat(e,t,e,t,e,n,i)},_lerp:function(e,t,n,i,l){for(var r=1-i,a=0;a!==l;++a){var o=t+a;e[o]=e[o]*r+e[n+a]*i}}});var Ih=new RegExp("[\\[\\]\\.:\\/]","g"),Dh="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",Nh=/((?:WC+[\/:])*)/.source.replace("WC","[^\\[\\]\\.:\\/]"),Bh=/(WCOD+)?/.source.replace("WCOD",Dh),Fh=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC","[^\\[\\]\\.:\\/]"),Uh=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC","[^\\[\\]\\.:\\/]"),Gh=new RegExp("^"+Nh+Bh+Fh+Uh+"$"),Hh=["material","materials","bones"];function Vh(e,t,n){var i=n||jh.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,i)}function jh(e,t,n){this.path=t,this.parsedPath=n||jh.parseTrackName(t),this.node=jh.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e}function kh(){this.uuid=gn.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var e={};this._indicesByUUID=e;for(var t=0,n=arguments.length;t!==n;++t)e[arguments[t].uuid]=t;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var i=this;this.stats={objects:{get total(){return i._objects.length},get inUse(){return this.total-i.nCachedObjects_}},get bindingsPerObject(){return i._bindings.length}}}function Wh(e,t,n){this._mixer=e,this._clip=t,this._localRoot=n||null;for(var i=t.tracks,l=i.length,r=new Array(l),a={endingStart:St,endingEnd:St},o=0;o!==l;++o){var q=i[o].createInterpolant(null);r[o]=q,q.settings=a}this._interpolantSettings=a,this._interpolants=r,this._propertyBindings=new Array(l),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=yt,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function Xh(e){this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function Yh(e){"string"==typeof e&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),e=arguments[1]),this.value=e}function Zh(e,t,n){Mo.call(this,e,t),this.meshPerAttribute=n||1}function Jh(e,t,n,i){this.ray=new Li(e,t),this.near=n||0,this.far=i||1/0,this.camera=null,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function Qh(e,t){return e.distance-t.distance}function Kh(e,t,n,i){if(!1!==e.visible&&(e.raycast(t,n),!0===i))for(var l=e.children,r=0,a=l.length;r<a;r++)Kh(l[r],t,n,!0)}function $h(e,t,n){return this.radius=void 0!==e?e:1,this.phi=void 0!==t?t:0,this.theta=void 0!==n?n:0,this}function ec(e,t,n){return this.radius=void 0!==e?e:1,this.theta=void 0!==t?t:0,this.y=void 0!==n?n:0,this}Object.assign(Vh.prototype,{getValue:function(e,t){this.bind();var n=this._targetGroup.nCachedObjects_,i=this._bindings[n];void 0!==i&&i.getValue(e,t)},setValue:function(e,t){for(var n=this._bindings,i=this._targetGroup.nCachedObjects_,l=n.length;i!==l;++i)n[i].setValue(e,t)},bind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()},unbind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}}),Object.assign(jh,{Composite:Vh,create:function(e,t,n){return e&&e.isAnimationObjectGroup?new jh.Composite(e,t,n):new jh(e,t,n)},sanitizeNodeName:function(e){return e.replace(/\s/g,"_").replace(Ih,"")},parseTrackName:function(e){var t=Gh.exec(e);if(!t)throw new Error("PropertyBinding: Cannot parse trackName: "+e);var n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==i&&-1!==i){var l=n.nodeName.substring(i+1);-1!==Hh.indexOf(l)&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=l)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return n},findNode:function(e,t){if(!t||""===t||"root"===t||"."===t||-1===t||t===e.name||t===e.uuid)return e;if(e.skeleton){var n=e.skeleton.getBoneByName(t);if(void 0!==n)return n}if(e.children){var i=function(e){for(var n=0;n<e.length;n++){var l=e[n];if(l.name===t||l.uuid===t)return l;var r=i(l.children);if(r)return r}return null},l=i(e.children);if(l)return l}return null}}),Object.assign(jh.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(e,t){e[t]=this.node[this.propertyName]},function(e,t){for(var n=this.resolvedProperty,i=0,l=n.length;i!==l;++i)e[t++]=n[i]},function(e,t){e[t]=this.resolvedProperty[this.propertyIndex]},function(e,t){this.resolvedProperty.toArray(e,t)}],SetterByBindingTypeAndVersioning:[[function(e,t){this.targetObject[this.propertyName]=e[t]},function(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){for(var n=this.resolvedProperty,i=0,l=n.length;i!==l;++i)n[i]=e[t++]},function(e,t){for(var n=this.resolvedProperty,i=0,l=n.length;i!==l;++i)n[i]=e[t++];this.targetObject.needsUpdate=!0},function(e,t){for(var n=this.resolvedProperty,i=0,l=n.length;i!==l;++i)n[i]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty[this.propertyIndex]=e[t]},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty.fromArray(e,t)},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(e,t){this.bind(),this.getValue(e,t)},setValue:function(e,t){this.bind(),this.setValue(e,t)},bind:function(){var e=this.node,t=this.parsedPath,n=t.objectName,i=t.propertyName,l=t.propertyIndex;if(e||(e=jh.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,e){if(n){var r=t.objectIndex;switch(n){case"materials":if(!e.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!e.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);e=e.material.materials;break;case"bones":if(!e.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);e=e.skeleton.bones;for(var a=0;a<e.length;a++)if(e[a].name===r){r=a;break}break;default:if(void 0===e[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);e=e[n]}if(void 0!==r){if(void 0===e[r])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);e=e[r]}}var o=e[i];if(void 0!==o){var q=this.Versioning.None;this.targetObject=e,void 0!==e.needsUpdate?q=this.Versioning.NeedsUpdate:void 0!==e.matrixWorldNeedsUpdate&&(q=this.Versioning.MatrixWorldNeedsUpdate);var s=this.BindingType.Direct;if(void 0!==l){if("morphTargetInfluences"===i){if(!e.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(e.geometry.isBufferGeometry){if(!e.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);for(a=0;a<this.node.geometry.morphAttributes.position.length;a++)if(e.geometry.morphAttributes.position[a].name===l){l=a;break}}else{if(!e.geometry.morphTargets)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",this);for(a=0;a<this.node.geometry.morphTargets.length;a++)if(e.geometry.morphTargets[a].name===l){l=a;break}}}s=this.BindingType.ArrayElement,this.resolvedProperty=o,this.propertyIndex=l}else void 0!==o.fromArray&&void 0!==o.toArray?(s=this.BindingType.HasFromToArray,this.resolvedProperty=o):Array.isArray(o)?(s=this.BindingType.EntireArray,this.resolvedProperty=o):this.propertyName=i;this.getValue=this.GetterByBindingType[s],this.setValue=this.SetterByBindingTypeAndVersioning[s][q]}else{var m=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+m+"."+i+" but it wasn't found.",e)}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.")},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),
//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(jh.prototype,{_getValue_unbound:jh.prototype.getValue,_setValue_unbound:jh.prototype.setValue}),Object.assign(kh.prototype,{isAnimationObjectGroup:!0,add:function(){for(var e=this._objects,t=e.length,n=this.nCachedObjects_,i=this._indicesByUUID,l=this._paths,r=this._parsedPaths,a=this._bindings,o=a.length,q=void 0,s=0,m=arguments.length;s!==m;++s){var h=arguments[s],c=h.uuid,u=i[c];if(void 0===u){u=t++,i[c]=u,e.push(h);for(var d=0,p=o;d!==p;++d)a[d].push(new jh(h,l[d],r[d]))}else if(u<n){q=e[u];var f=--n,x=e[f];i[x.uuid]=u,e[u]=x,i[c]=f,e[f]=h;for(d=0,p=o;d!==p;++d){var v=a[d],g=v[f],_=v[u];v[u]=g,void 0===_&&(_=new jh(h,l[d],r[d])),v[f]=_}}else e[u]!==q&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=n},remove:function(){for(var e=this._objects,t=this.nCachedObjects_,n=this._indicesByUUID,i=this._bindings,l=i.length,r=0,a=arguments.length;r!==a;++r){var o=arguments[r],q=o.uuid,s=n[q];if(void 0!==s&&s>=t){var m=t++,h=e[m];n[h.uuid]=s,e[s]=h,n[q]=m,e[m]=o;for(var c=0,u=l;c!==u;++c){var d=i[c],p=d[m],f=d[s];d[s]=p,d[m]=f}}}this.nCachedObjects_=t},uncache:function(){for(var e=this._objects,t=e.length,n=this.nCachedObjects_,i=this._indicesByUUID,l=this._bindings,r=l.length,a=0,o=arguments.length;a!==o;++a){var q=arguments[a],s=q.uuid,m=i[s];if(void 0!==m)if(delete i[s],m<n){var h=--n,c=e[h],u=e[v=--t];i[c.uuid]=m,e[m]=c,i[u.uuid]=h,e[h]=u,e.pop();for(var d=0,p=r;d!==p;++d){var f=(g=l[d])[h],x=g[v];g[m]=f,g[h]=x,g.pop()}}else{var v;i[(u=e[v=--t]).uuid]=m,e[m]=u,e.pop();for(d=0,p=r;d!==p;++d){var g;(g=l[d])[m]=g[v],g.pop()}}}this.nCachedObjects_=n},subscribe_:function(e,t){var n=this._bindingsIndicesByPath,i=n[e],l=this._bindings;if(void 0!==i)return l[i];var r=this._paths,a=this._parsedPaths,o=this._objects,q=o.length,s=this.nCachedObjects_,m=new Array(q);i=l.length,n[e]=i,r.push(e),a.push(t),l.push(m);for(var h=s,c=o.length;h!==c;++h){var u=o[h];m[h]=new jh(u,e,t)}return m},unsubscribe_:function(e){var t=this._bindingsIndicesByPath,n=t[e];if(void 0!==n){var i=this._paths,l=this._parsedPaths,r=this._bindings,a=r.length-1,o=r[a];t[e[a]]=n,r[n]=o,r.pop(),l[n]=l[a],l.pop(),i[n]=i[a],i.pop()}}}),Object.assign(Wh.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(e){return this._startTime=e,this},setLoop:function(e,t){return this.loop=e,this.repetitions=t,this},setEffectiveWeight:function(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(e){return this._scheduleFading(e,0,1)},fadeOut:function(e){return this._scheduleFading(e,1,0)},crossFadeFrom:function(e,t,n){if(e.fadeOut(t),this.fadeIn(t),n){var i=this._clip.duration,l=e._clip.duration,r=l/i,a=i/l;e.warp(1,r,t),this.warp(a,1,t)}return this},crossFadeTo:function(e,t,n){return e.crossFadeFrom(this,t,n)},stopFading:function(){var e=this._weightInterpolant;return null!==e&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},setEffectiveTimeScale:function(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(e){return this.timeScale=this._clip.duration/e,this.stopWarping()},syncWith:function(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()},halt:function(e){return this.warp(this._effectiveTimeScale,0,e)},warp:function(e,t,n){var i=this._mixer,l=i.time,r=this._timeScaleInterpolant,a=this.timeScale;null===r&&(r=i._lendControlInterpolant(),this._timeScaleInterpolant=r);var o=r.parameterPositions,q=r.sampleValues;return o[0]=l,o[1]=l+n,q[0]=e/a,q[1]=t/a,this},stopWarping:function(){var e=this._timeScaleInterpolant;return null!==e&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(e,t,n,i){if(this.enabled){var l=this._startTime;if(null!==l){var r=(e-l)*n;if(r<0||0===n)return;this._startTime=null,t=n*r}t*=this._updateTimeScale(e);var a=this._updateTime(t),o=this._updateWeight(e);if(o>0)for(var q=this._interpolants,s=this._propertyBindings,m=0,h=q.length;m!==h;++m)q[m].evaluate(a),s[m].accumulate(i,o)}else this._updateWeight(e)},_updateWeight:function(e){var t=0;if(this.enabled){t=this.weight;var n=this._weightInterpolant;if(null!==n){var i=n.evaluate(e)[0];t*=i,e>n.parameterPositions[1]&&(this.stopFading(),0===i&&(this.enabled=!1))}}return this._effectiveWeight=t,t},_updateTimeScale:function(e){var t=0;if(!this.paused){t=this.timeScale;var n=this._timeScaleInterpolant;if(null!==n)t*=n.evaluate(e)[0],e>n.parameterPositions[1]&&(this.stopWarping(),0===t?this.paused=!0:this.timeScale=t)}return this._effectiveTimeScale=t,t},_updateTime:function(e){var t=this.time+e,n=this._clip.duration,i=this.loop,l=this._loopCount,r=i===bt;if(0===e)return-1===l?t:r&&1==(1&l)?n-t:t;if(i===_t){-1===l&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(t>=n)t=n;else{if(!(t<0)){this.time=t;break e}t=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=t,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(-1===l&&(e>=0?(l=0,this._setEndings(!0,0===this.repetitions,r)):this._setEndings(0===this.repetitions,!0,r)),t>=n||t<0){var a=Math.floor(t/n);t-=n*a,l+=Math.abs(a);var o=this.repetitions-l;if(o<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,t=e>0?n:0,this.time=t,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(1===o){var q=e<0;this._setEndings(q,!q,r)}else this._setEndings(!1,!1,r);this._loopCount=l,this.time=t,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:a})}}else this.time=t;if(r&&1==(1&l))return n-t}return t},_setEndings:function(e,t,n){var i=this._interpolantSettings;n?(i.endingStart=Tt,i.endingEnd=Tt):(i.endingStart=e?this.zeroSlopeAtStart?Tt:St:Et,i.endingEnd=t?this.zeroSlopeAtEnd?Tt:St:Et)},_scheduleFading:function(e,t,n){var i=this._mixer,l=i.time,r=this._weightInterpolant;null===r&&(r=i._lendControlInterpolant(),this._weightInterpolant=r);var a=r.parameterPositions,o=r.sampleValues;return a[0]=l,o[0]=t,a[1]=l+e,o[1]=n,this}}),Xh.prototype=Object.assign(Object.create(fn.prototype),{constructor:Xh,_bindAction:function(e,t){var n=e._localRoot||this._root,i=e._clip.tracks,l=i.length,r=e._propertyBindings,a=e._interpolants,o=n.uuid,q=this._bindingsByRootAndName,s=q[o];void 0===s&&(s={},q[o]=s);for(var m=0;m!==l;++m){var h=i[m],c=h.name,u=s[c];if(void 0!==u)r[m]=u;else{if(void 0!==(u=r[m])){null===u._cacheIndex&&(++u.referenceCount,this._addInactiveBinding(u,o,c));continue}var d=t&&t._propertyBindings[m].binding.parsedPath;++(u=new Oh(jh.create(n,c,d),h.ValueTypeName,h.getValueSize())).referenceCount,this._addInactiveBinding(u,o,c),r[m]=u}a[m].resultBuffer=u.buffer}},_activateAction:function(e){if(!this._isActiveAction(e)){if(null===e._cacheIndex){var t=(e._localRoot||this._root).uuid,n=e._clip.uuid,i=this._actionsByClip[n];this._bindAction(e,i&&i.knownActions[0]),this._addInactiveAction(e,n,t)}for(var l=e._propertyBindings,r=0,a=l.length;r!==a;++r){var o=l[r];0==o.useCount++&&(this._lendBinding(o),o.saveOriginalState())}this._lendAction(e)}},_deactivateAction:function(e){if(this._isActiveAction(e)){for(var t=e._propertyBindings,n=0,i=t.length;n!==i;++n){var l=t[n];0==--l.useCount&&(l.restoreOriginalState(),this._takeBackBinding(l))}this._takeBackAction(e)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}},_isActiveAction:function(e){var t=e._cacheIndex;return null!==t&&t<this._nActiveActions},_addInactiveAction:function(e,t,n){var i=this._actions,l=this._actionsByClip,r=l[t];if(void 0===r)r={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,l[t]=r;else{var a=r.knownActions;e._byClipCacheIndex=a.length,a.push(e)}e._cacheIndex=i.length,i.push(e),r.actionByRoot[n]=e},_removeInactiveAction:function(e){var t=this._actions,n=t[t.length-1],i=e._cacheIndex;n._cacheIndex=i,t[i]=n,t.pop(),e._cacheIndex=null;var l=e._clip.uuid,r=this._actionsByClip,a=r[l],o=a.knownActions,q=o[o.length-1],s=e._byClipCacheIndex;q._byClipCacheIndex=s,o[s]=q,o.pop(),e._byClipCacheIndex=null,delete a.actionByRoot[(e._localRoot||this._root).uuid],0===o.length&&delete r[l],this._removeInactiveBindingsForAction(e)},_removeInactiveBindingsForAction:function(e){for(var t=e._propertyBindings,n=0,i=t.length;n!==i;++n){var l=t[n];0==--l.referenceCount&&this._removeInactiveBinding(l)}},_lendAction:function(e){var t=this._actions,n=e._cacheIndex,i=this._nActiveActions++,l=t[i];e._cacheIndex=i,t[i]=e,l._cacheIndex=n,t[n]=l},_takeBackAction:function(e){var t=this._actions,n=e._cacheIndex,i=--this._nActiveActions,l=t[i];e._cacheIndex=i,t[i]=e,l._cacheIndex=n,t[n]=l},_addInactiveBinding:function(e,t,n){var i=this._bindingsByRootAndName,l=i[t],r=this._bindings;void 0===l&&(l={},i[t]=l),l[n]=e,e._cacheIndex=r.length,r.push(e)},_removeInactiveBinding:function(e){var t=this._bindings,n=e.binding,i=n.rootNode.uuid,l=n.path,r=this._bindingsByRootAndName,a=r[i],o=t[t.length-1],q=e._cacheIndex;o._cacheIndex=q,t[q]=o,t.pop(),delete a[l],0===Object.keys(a).length&&delete r[i]},_lendBinding:function(e){var t=this._bindings,n=e._cacheIndex,i=this._nActiveBindings++,l=t[i];e._cacheIndex=i,t[i]=e,l._cacheIndex=n,t[n]=l},_takeBackBinding:function(e){var t=this._bindings,n=e._cacheIndex,i=--this._nActiveBindings,l=t[i];e._cacheIndex=i,t[i]=e,l._cacheIndex=n,t[n]=l},_lendControlInterpolant:function(){var e=this._controlInterpolants,t=this._nActiveControlInterpolants++,n=e[t];return void 0===n&&((n=new ks(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=t,e[t]=n),n},_takeBackControlInterpolant:function(e){var t=this._controlInterpolants,n=e.__cacheIndex,i=--this._nActiveControlInterpolants,l=t[i];e.__cacheIndex=i,t[i]=e,l.__cacheIndex=n,t[n]=l},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(e,t){var n=t||this._root,i=n.uuid,l="string"==typeof e?tm.findByName(n,e):e,r=null!==l?l.uuid:e,a=this._actionsByClip[r],o=null;if(void 0!==a){var q=a.actionByRoot[i];if(void 0!==q)return q;o=a.knownActions[0],null===l&&(l=o._clip)}if(null===l)return null;var s=new Wh(this,l,t);return this._bindAction(s,o),this._addInactiveAction(s,r,i),s},existingAction:function(e,t){var n=t||this._root,i=n.uuid,l="string"==typeof e?tm.findByName(n,e):e,r=l?l.uuid:e,a=this._actionsByClip[r];return void 0!==a&&a.actionByRoot[i]||null},stopAllAction:function(){var e=this._actions,t=this._nActiveActions,n=this._bindings,i=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var l=0;l!==t;++l)e[l].reset();for(l=0;l!==i;++l)n[l].useCount=0;return this},update:function(e){e*=this.timeScale;for(var t=this._actions,n=this._nActiveActions,i=this.time+=e,l=Math.sign(e),r=this._accuIndex^=1,a=0;a!==n;++a){t[a]._update(i,e,l,r)}var o=this._bindings,q=this._nActiveBindings;for(a=0;a!==q;++a)o[a].apply(r);return this},setTime:function(e){this.time=0;for(var t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(e)},getRoot:function(){return this._root},uncacheClip:function(e){var t=this._actions,n=e.uuid,i=this._actionsByClip,l=i[n];if(void 0!==l){for(var r=l.knownActions,a=0,o=r.length;a!==o;++a){var q=r[a];this._deactivateAction(q);var s=q._cacheIndex,m=t[t.length-1];q._cacheIndex=null,q._byClipCacheIndex=null,m._cacheIndex=s,t[s]=m,t.pop(),this._removeInactiveBindingsForAction(q)}delete i[n]}},uncacheRoot:function(e){var t=e.uuid,n=this._actionsByClip;for(var i in n){var l=n[i].actionByRoot[t];void 0!==l&&(this._deactivateAction(l),this._removeInactiveAction(l))}var r=this._bindingsByRootAndName[t];if(void 0!==r)for(var a in r){var o=r[a];o.restoreOriginalState(),this._removeInactiveBinding(o)}},uncacheAction:function(e,t){var n=this.existingAction(e,t);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}),Yh.prototype.clone=function(){return new Yh(void 0===this.value.clone?this.value:this.value.clone())},Zh.prototype=Object.assign(Object.create(Mo.prototype),{constructor:Zh,isInstancedInterleavedBuffer:!0,copy:function(e){return Mo.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this}}),Object.assign(Jh.prototype,{linePrecision:1,set:function(e,t){this.ray.set(e,t)},setFromCamera:function(e,t){t&&t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t&&t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(e,t,n){var i=n||[];return Kh(e,this,i,t),i.sort(Qh),i},intersectObjects:function(e,t,n){var i=n||[];if(!1===Array.isArray(e))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),i;for(var l=0,r=e.length;l<r;l++)Kh(e[l],this,i,t);return i.sort(Qh),i}}),Object.assign($h.prototype,{set:function(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this},makeSafe:function(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this},setFromVector3:function(e){return this.setFromCartesianCoords(e.x,e.y,e.z)},setFromCartesianCoords:function(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(gn.clamp(t/this.radius,-1,1))),this}}),Object.assign(ec.prototype,{set:function(e,t,n){return this.radius=e,this.theta=t,this.y=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this},setFromVector3:function(e){return this.setFromCartesianCoords(e.x,e.y,e.z)},setFromCartesianCoords:function(e,t,n){return this.radius=Math.sqrt(e*e+n*n),this.theta=Math.atan2(e,n),this.y=t,this}});var tc=new _n;function nc(e,t){this.min=void 0!==e?e:new _n(1/0,1/0),this.max=void 0!==t?t:new _n(-1/0,-1/0)}Object.assign(nc.prototype,{set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(e,t){var n=tc.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(e){return void 0===e&&(console.warn("THREE.Box2: .getCenter() target is now required"),e=new _n),this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(e){return void 0===e&&(console.warn("THREE.Box2: .getSize() target is now required"),e=new _n),this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y},getParameter:function(e,t){return void 0===t&&(console.warn("THREE.Box2: .getParameter() target is now required"),t=new _n),t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)},clampPoint:function(e,t){return void 0===t&&(console.warn("THREE.Box2: .clampPoint() target is now required"),t=new _n),t.copy(e).clamp(this.min,this.max)},distanceToPoint:function(e){return tc.copy(e).clamp(this.min,this.max).sub(e).length()},intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}});var ic=new Mn,lc=new Mn;function rc(e,t){this.start=void 0!==e?e:new Mn,this.end=void 0!==t?t:new Mn}function ac(e){ri.call(this),this.material=e,this.render=function(){}}Object.assign(rc.prototype,{set:function(e,t){return this.start.copy(e),this.end.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.start.copy(e.start),this.end.copy(e.end),this},getCenter:function(e){return void 0===e&&(console.warn("THREE.Line3: .getCenter() target is now required"),e=new Mn),e.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(e){return void 0===e&&(console.warn("THREE.Line3: .delta() target is now required"),e=new Mn),e.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(e,t){return void 0===t&&(console.warn("THREE.Line3: .at() target is now required"),t=new Mn),this.delta(t).multiplyScalar(e).add(this.start)},closestPointToPointParameter:function(e,t){ic.subVectors(e,this.start),lc.subVectors(this.end,this.start);var n=lc.dot(lc),i=lc.dot(ic)/n;return t&&(i=gn.clamp(i,0,1)),i},closestPointToPoint:function(e,t,n){var i=this.closestPointToPointParameter(e,t);return void 0===n&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),n=new Mn),this.delta(n).multiplyScalar(i).add(this.start)},applyMatrix4:function(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this},equals:function(e){return e.start.equals(this.start)&&e.end.equals(this.end)}}),ac.prototype=Object.create(ri.prototype),ac.prototype.constructor=ac,ac.prototype.isImmediateRenderObject=!0;var oc=new Mn,qc=new Mn,sc=new Tn,mc=["a","b","c"];function hc(e,t,n,i){this.object=e,this.size=void 0!==t?t:1;var l=void 0!==n?n:16711680,r=void 0!==i?i:1,a=0,o=this.object.geometry;o&&o.isGeometry?a=3*o.faces.length:o&&o.isBufferGeometry&&(a=o.attributes.normal.count);var q=new bl,s=new hl(2*a*3,3);q.setAttribute("position",s),rq.call(this,q,new Jo({color:l,linewidth:r})),this.matrixAutoUpdate=!1,this.update()}hc.prototype=Object.create(rq.prototype),hc.prototype.constructor=hc,hc.prototype.update=function(){this.object.updateMatrixWorld(!0),sc.getNormalMatrix(this.object.matrixWorld);var e=this.object.matrixWorld,t=this.geometry.attributes.position,n=this.object.geometry;if(n&&n.isGeometry)for(var i=n.vertices,l=n.faces,r=0,a=0,o=l.length;a<o;a++)for(var q=l[a],s=0,m=q.vertexNormals.length;s<m;s++){var h=i[q[mc[s]]],c=q.vertexNormals[s];oc.copy(h).applyMatrix4(e),qc.copy(c).applyMatrix3(sc).normalize().multiplyScalar(this.size).add(oc),t.setXYZ(r,oc.x,oc.y,oc.z),r+=1,t.setXYZ(r,qc.x,qc.y,qc.z),r+=1}else if(n&&n.isBufferGeometry){var u=n.attributes.position,d=n.attributes.normal;for(r=0,s=0,m=u.count;s<m;s++)oc.set(u.getX(s),u.getY(s),u.getZ(s)).applyMatrix4(e),qc.set(d.getX(s),d.getY(s),d.getZ(s)),qc.applyMatrix3(sc).normalize().multiplyScalar(this.size).add(oc),t.setXYZ(r,oc.x,oc.y,oc.z),r+=1,t.setXYZ(r,qc.x,qc.y,qc.z),r+=1}t.needsUpdate=!0};var cc=new Mn;function uc(e,t){ri.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=t;for(var n=new bl,i=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],l=0,r=1;l<32;l++,r++){var a=l/32*Math.PI*2,o=r/32*Math.PI*2;i.push(Math.cos(a),Math.sin(a),1,Math.cos(o),Math.sin(o),1)}n.setAttribute("position",new hl(i,3));var q=new Jo({fog:!1});this.cone=new rq(n,q),this.add(this.cone),this.update()}uc.prototype=Object.create(ri.prototype),uc.prototype.constructor=uc,uc.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},uc.prototype.update=function(){this.light.updateMatrixWorld();var e=this.light.distance?this.light.distance:1e3,t=e*Math.tan(this.light.angle);this.cone.scale.set(t,t,e),cc.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(cc),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)};var dc=new Mn,pc=new Gn,fc=new Gn;function xc(e){for(var t=function e(t){var n=[];t&&t.isBone&&n.push(t);for(var i=0;i<t.children.length;i++)n.push.apply(n,e(t.children[i]));return n}(e),n=new bl,i=[],l=[],r=new Zi(0,0,1),a=new Zi(0,1,0),o=0;o<t.length;o++){var q=t[o];q.parent&&q.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),l.push(r.r,r.g,r.b),l.push(a.r,a.g,a.b))}n.setAttribute("position",new hl(i,3)),n.setAttribute("color",new hl(l,3));var s=new Jo({vertexColors:w,depthTest:!1,depthWrite:!1,transparent:!0});rq.call(this,n,s),this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}function vc(e,t,n){this.light=e,this.light.updateMatrixWorld(),this.color=n;var i=new ps(t,4,2),l=new nl({wireframe:!0,fog:!1});Ul.call(this,i,l),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}function gc(e,t){this.type="RectAreaLightHelper",this.light=e,this.color=t;var n=new bl;n.setAttribute("position",new hl([1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],3)),n.computeBoundingSphere();var i=new Jo({fog:!1});nq.call(this,n,i);var l=new bl;l.setAttribute("position",new hl([1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],3)),l.computeBoundingSphere(),this.add(new Ul(l,new nl({side:x,fog:!1}))),this.update()}xc.prototype=Object.create(rq.prototype),xc.prototype.constructor=xc,xc.prototype.updateMatrixWorld=function(e){var t=this.bones,n=this.geometry,i=n.getAttribute("position");fc.getInverse(this.root.matrixWorld);for(var l=0,r=0;l<t.length;l++){var a=t[l];a.parent&&a.parent.isBone&&(pc.multiplyMatrices(fc,a.matrixWorld),dc.setFromMatrixPosition(pc),i.setXYZ(r,dc.x,dc.y,dc.z),pc.multiplyMatrices(fc,a.parent.matrixWorld),dc.setFromMatrixPosition(pc),i.setXYZ(r+1,dc.x,dc.y,dc.z),r+=2)}n.getAttribute("position").needsUpdate=!0,ri.prototype.updateMatrixWorld.call(this,e)},vc.prototype=Object.create(Ul.prototype),vc.prototype.constructor=vc,vc.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},vc.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)},gc.prototype=Object.create(nq.prototype),gc.prototype.constructor=gc,gc.prototype.update=function(){if(this.scale.set(.5*this.light.width,.5*this.light.height,1),void 0!==this.color)this.material.color.set(this.color),this.children[0].material.color.set(this.color);else{this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);var e=this.material.color,t=Math.max(e.r,e.g,e.b);t>1&&e.multiplyScalar(1/t),this.children[0].material.color.copy(this.material.color)}},gc.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()};var _c=new Mn,yc=new Zi,bc=new Zi;function wc(e,t,n){ri.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n;var i=new Sq(t);i.rotateY(.5*Math.PI),this.material=new nl({wireframe:!0,fog:!1}),void 0===this.color&&(this.material.vertexColors=w);var l=i.getAttribute("position"),r=new Float32Array(3*l.count);i.setAttribute("color",new il(r,3)),this.add(new Ul(i,this.material)),this.update()}function Mc(e,t){this.lightProbe=e,this.size=t;var n={GAMMA_OUTPUT:""},i=new tr({defines:n,uniforms:{sh:{value:this.lightProbe.sh.coefficients},intensity:{value:this.lightProbe.intensity}},vertexShader:["varying vec3 vNormal;","void main() {","\tvNormal = normalize( normalMatrix * normal );","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["#define RECIPROCAL_PI 0.318309886","vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {","\t// matrix is assumed to be orthogonal","\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );","}","vec3 linearToOutput( in vec3 a ) {","\t#ifdef GAMMA_OUTPUT","\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );","\t#else","\t\treturn a;","\t#endif","}","// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf","vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {","\t// normal is assumed to have unit length","\tfloat x = normal.x, y = normal.y, z = normal.z;","\t// band 0","\tvec3 result = shCoefficients[ 0 ] * 0.886227;","\t// band 1","\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;","\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;","\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;","\t// band 2","\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;","\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;","\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );","\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;","\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );","\treturn result;","}","uniform vec3 sh[ 9 ]; // sh coefficients","uniform float intensity; // light probe intensity","varying vec3 vNormal;","void main() {","\tvec3 normal = normalize( vNormal );","\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );","\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );","\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;","\toutgoingLight = linearToOutput( outgoingLight );","\tgl_FragColor = vec4( outgoingLight, 1.0 );","}"].join("\n")}),l=new ps(1,32,16);Ul.call(this,l,i),this.onBeforeRender()}function zc(e,t,n,i){e=e||10,t=t||10,n=new Zi(void 0!==n?n:4473924),i=new Zi(void 0!==i?i:8947848);for(var l=t/2,r=e/t,a=e/2,o=[],q=[],s=0,m=0,h=-a;s<=t;s++,h+=r){o.push(-a,0,h,a,0,h),o.push(h,0,-a,h,0,a);var c=s===l?n:i;c.toArray(q,m),m+=3,c.toArray(q,m),m+=3,c.toArray(q,m),m+=3,c.toArray(q,m),m+=3}var u=new bl;u.setAttribute("position",new hl(o,3)),u.setAttribute("color",new hl(q,3));var d=new Jo({vertexColors:w});rq.call(this,u,d)}function Sc(e,t,n,i,l,r){e=e||10,t=t||16,n=n||8,i=i||64,l=new Zi(void 0!==l?l:4473924),r=new Zi(void 0!==r?r:8947848);var a,o,q,s,m,h,c,u=[],d=[];for(s=0;s<=t;s++)q=s/t*(2*Math.PI),a=Math.sin(q)*e,o=Math.cos(q)*e,u.push(0,0,0),u.push(a,0,o),c=1&s?l:r,d.push(c.r,c.g,c.b),d.push(c.r,c.g,c.b);for(s=0;s<=n;s++)for(c=1&s?l:r,h=e-e/n*s,m=0;m<i;m++)q=m/i*(2*Math.PI),a=Math.sin(q)*h,o=Math.cos(q)*h,u.push(a,0,o),d.push(c.r,c.g,c.b),q=(m+1)/i*(2*Math.PI),a=Math.sin(q)*h,o=Math.cos(q)*h,u.push(a,0,o),d.push(c.r,c.g,c.b);var p=new bl;p.setAttribute("position",new hl(u,3)),p.setAttribute("color",new hl(d,3));var f=new Jo({vertexColors:w});rq.call(this,p,f)}function Tc(e,t,n,i){this.audio=e,this.range=t||1,this.divisionsInnerAngle=n||16,this.divisionsOuterAngle=i||2;var l=new bl,r=this.divisionsInnerAngle+2*this.divisionsOuterAngle,a=new Float32Array(3*(3*r+3));l.setAttribute("position",new il(a,3));var o=new Jo({color:65280}),q=new Jo({color:16776960});nq.call(this,l,[q,o]),this.update()}wc.prototype=Object.create(ri.prototype),wc.prototype.constructor=wc,wc.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},wc.prototype.update=function(){var e=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var t=e.geometry.getAttribute("color");yc.copy(this.light.color),bc.copy(this.light.groundColor);for(var n=0,i=t.count;n<i;n++){var l=n<i/2?yc:bc;t.setXYZ(n,l.r,l.g,l.b)}t.needsUpdate=!0}e.lookAt(_c.setFromMatrixPosition(this.light.matrixWorld).negate())},Mc.prototype=Object.create(Ul.prototype),Mc.prototype.constructor=Mc,Mc.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},Mc.prototype.onBeforeRender=function(){this.position.copy(this.lightProbe.position),this.scale.set(1,1,1).multiplyScalar(this.size),this.material.uniforms.intensity.value=this.lightProbe.intensity},zc.prototype=Object.assign(Object.create(rq.prototype),{constructor:zc,copy:function(e){return rq.prototype.copy.call(this,e),this.geometry.copy(e.geometry),this.material.copy(e.material),this},clone:function(){return(new this.constructor).copy(this)}}),Sc.prototype=Object.create(rq.prototype),Sc.prototype.constructor=Sc,Tc.prototype=Object.create(nq.prototype),Tc.prototype.constructor=Tc,Tc.prototype.update=function(){var e,t,n=this.audio,i=this.range,l=this.divisionsInnerAngle,r=this.divisionsOuterAngle,a=gn.degToRad(n.panner.coneInnerAngle),o=gn.degToRad(n.panner.coneOuterAngle),q=a/2,s=o/2,m=0,h=0,c=this.geometry,u=c.attributes.position;function d(n,l,r,a){var o=(l-n)/r;for(u.setXYZ(m,0,0,0),h++,e=n;e<l;e+=o)t=m+h,u.setXYZ(t,Math.sin(e)*i,0,Math.cos(e)*i),u.setXYZ(t+1,Math.sin(Math.min(e+o,l))*i,0,Math.cos(Math.min(e+o,l))*i),u.setXYZ(t+2,0,0,0),h+=3;c.addGroup(m,h,a),m+=h,h=0}c.clearGroups(),d(-s,-q,r,0),d(-q,q,l,1),d(q,s,r,0),u.needsUpdate=!0,a===o&&(this.material[0].visible=!1)},Tc.prototype.dispose=function(){this.geometry.dispose(),this.material[0].dispose(),this.material[1].dispose()};var Ec=new Mn,Ac=new Mn,Lc=new Tn;function Pc(e,t,n,i){this.object=e,this.size=void 0!==t?t:1;var l=void 0!==n?n:16776960,r=void 0!==i?i:1,a=0,o=this.object.geometry;o&&o.isGeometry?a=o.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");var q=new bl,s=new hl(2*a*3,3);q.setAttribute("position",s),rq.call(this,q,new Jo({color:l,linewidth:r})),this.matrixAutoUpdate=!1,this.update()}Pc.prototype=Object.create(rq.prototype),Pc.prototype.constructor=Pc,Pc.prototype.update=function(){this.object.updateMatrixWorld(!0),Lc.getNormalMatrix(this.object.matrixWorld);for(var e=this.object.matrixWorld,t=this.geometry.attributes.position,n=this.object.geometry,i=n.vertices,l=n.faces,r=0,a=0,o=l.length;a<o;a++){var q=l[a],s=q.normal;Ec.copy(i[q.a]).add(i[q.b]).add(i[q.c]).divideScalar(3).applyMatrix4(e),Ac.copy(s).applyMatrix3(Lc).normalize().multiplyScalar(this.size).add(Ec),t.setXYZ(r,Ec.x,Ec.y,Ec.z),r+=1,t.setXYZ(r,Ac.x,Ac.y,Ac.z),r+=1}t.needsUpdate=!0};var Rc=new Mn,Cc=new Mn,Oc=new Mn;function Ic(e,t,n){ri.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,void 0===t&&(t=1);var i=new bl;i.setAttribute("position",new hl([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));var l=new Jo({fog:!1});this.lightPlane=new nq(i,l),this.add(this.lightPlane),(i=new bl).setAttribute("position",new hl([0,0,0,0,0,1],3)),this.targetLine=new nq(i,l),this.add(this.targetLine),this.update()}Ic.prototype=Object.create(ri.prototype),Ic.prototype.constructor=Ic,Ic.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},Ic.prototype.update=function(){Rc.setFromMatrixPosition(this.light.matrixWorld),Cc.setFromMatrixPosition(this.light.target.matrixWorld),Oc.subVectors(Cc,Rc),this.lightPlane.lookAt(Cc),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(Cc),this.targetLine.scale.z=Oc.length()};var Dc=new Mn,Nc=new nr;function Bc(e){var t=new bl,n=new Jo({color:16777215,vertexColors:b}),i=[],l=[],r={},a=new Zi(16755200),o=new Zi(16711680),q=new Zi(43775),s=new Zi(16777215),m=new Zi(3355443);function h(e,t,n){c(e,n),c(t,n)}function c(e,t){i.push(0,0,0),l.push(t.r,t.g,t.b),void 0===r[e]&&(r[e]=[]),r[e].push(i.length/3-1)}h("n1","n2",a),h("n2","n4",a),h("n4","n3",a),h("n3","n1",a),h("f1","f2",a),h("f2","f4",a),h("f4","f3",a),h("f3","f1",a),h("n1","f1",a),h("n2","f2",a),h("n3","f3",a),h("n4","f4",a),h("p","n1",o),h("p","n2",o),h("p","n3",o),h("p","n4",o),h("u1","u2",q),h("u2","u3",q),h("u3","u1",q),h("c","t",s),h("p","c",m),h("cn1","cn2",m),h("cn3","cn4",m),h("cf1","cf2",m),h("cf3","cf4",m),t.setAttribute("position",new hl(i,3)),t.setAttribute("color",new hl(l,3)),rq.call(this,t,n),this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=r,this.update()}function Fc(e,t,n,i,l,r,a){Dc.set(l,r,a).unproject(i);var o=t[e];if(void 0!==o)for(var q=n.getAttribute("position"),s=0,m=o.length;s<m;s++)q.setXYZ(o[s],Dc.x,Dc.y,Dc.z)}Bc.prototype=Object.create(rq.prototype),Bc.prototype.constructor=Bc,Bc.prototype.update=function(){var e=this.geometry,t=this.pointMap;Nc.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),Fc("c",t,e,Nc,0,0,-1),Fc("t",t,e,Nc,0,0,1),Fc("n1",t,e,Nc,-1,-1,-1),Fc("n2",t,e,Nc,1,-1,-1),Fc("n3",t,e,Nc,-1,1,-1),Fc("n4",t,e,Nc,1,1,-1),Fc("f1",t,e,Nc,-1,-1,1),Fc("f2",t,e,Nc,1,-1,1),Fc("f3",t,e,Nc,-1,1,1),Fc("f4",t,e,Nc,1,1,1),Fc("u1",t,e,Nc,.7,1.1,-1),Fc("u2",t,e,Nc,-.7,1.1,-1),Fc("u3",t,e,Nc,0,2,-1),Fc("cf1",t,e,Nc,-1,0,1),Fc("cf2",t,e,Nc,1,0,1),Fc("cf3",t,e,Nc,0,-1,1),Fc("cf4",t,e,Nc,0,1,1),Fc("cn1",t,e,Nc,-1,0,-1),Fc("cn2",t,e,Nc,1,0,-1),Fc("cn3",t,e,Nc,0,-1,-1),Fc("cn4",t,e,Nc,0,1,-1),e.getAttribute("position").needsUpdate=!0};var Uc=new gi;function Gc(e,t){this.object=e,void 0===t&&(t=16776960);var n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Float32Array(24),l=new bl;l.setIndex(new il(n,1)),l.setAttribute("position",new il(i,3)),rq.call(this,l,new Jo({color:t})),this.matrixAutoUpdate=!1,this.update()}function Hc(e,t){this.type="Box3Helper",this.box=e,t=t||16776960;var n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new bl;i.setIndex(new il(n,1)),i.setAttribute("position",new hl([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),rq.call(this,i,new Jo({color:t})),this.geometry.computeBoundingSphere()}function Vc(e,t,n){this.type="PlaneHelper",this.plane=e,this.size=void 0===t?1:t;var i=void 0!==n?n:16776960,l=new bl;l.setAttribute("position",new hl([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),l.computeBoundingSphere(),nq.call(this,l,new Jo({color:i}));var r=new bl;r.setAttribute("position",new hl([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),r.computeBoundingSphere(),this.add(new Ul(r,new nl({color:i,opacity:.2,transparent:!0,depthWrite:!1})))}Gc.prototype=Object.create(rq.prototype),Gc.prototype.constructor=Gc,Gc.prototype.update=function(e){if(void 0!==e&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&Uc.setFromObject(this.object),!Uc.isEmpty()){var t=Uc.min,n=Uc.max,i=this.geometry.attributes.position,l=i.array;l[0]=n.x,l[1]=n.y,l[2]=n.z,l[3]=t.x,l[4]=n.y,l[5]=n.z,l[6]=t.x,l[7]=t.y,l[8]=n.z,l[9]=n.x,l[10]=t.y,l[11]=n.z,l[12]=n.x,l[13]=n.y,l[14]=t.z,l[15]=t.x,l[16]=n.y,l[17]=t.z,l[18]=t.x,l[19]=t.y,l[20]=t.z,l[21]=n.x,l[22]=t.y,l[23]=t.z,i.needsUpdate=!0,this.geometry.computeBoundingSphere()}},Gc.prototype.setFromObject=function(e){return this.object=e,this.update(),this},Gc.prototype.copy=function(e){return rq.prototype.copy.call(this,e),this.object=e.object,this},Gc.prototype.clone=function(){return(new this.constructor).copy(this)},Hc.prototype=Object.create(rq.prototype),Hc.prototype.constructor=Hc,Hc.prototype.updateMatrixWorld=function(e){var t=this.box;t.isEmpty()||(t.getCenter(this.position),t.getSize(this.scale),this.scale.multiplyScalar(.5),ri.prototype.updateMatrixWorld.call(this,e))},Vc.prototype=Object.create(nq.prototype),Vc.prototype.constructor=Vc,Vc.prototype.updateMatrixWorld=function(e){var t=-this.plane.constant;Math.abs(t)<1e-8&&(t=1e-8),this.scale.set(.5*this.size,.5*this.size,t),this.children[0].material.side=t<0?x:f,this.lookAt(this.plane.normal),ri.prototype.updateMatrixWorld.call(this,e)};var jc,kc,Wc=new Mn;function Xc(e,t,n,i,l,r){ri.call(this),void 0===e&&(e=new Mn(0,0,1)),void 0===t&&(t=new Mn(0,0,0)),void 0===n&&(n=1),void 0===i&&(i=16776960),void 0===l&&(l=.2*n),void 0===r&&(r=.2*l),void 0===jc&&((jc=new bl).setAttribute("position",new hl([0,0,0,0,1,0],3)),(kc=new zs(0,.5,1,5,1)).translate(0,-.5,0)),this.position.copy(t),this.line=new nq(jc,new Jo({color:i})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Ul(kc,new nl({color:i})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(n,l,r)}function Yc(e){var t=[0,0,0,e=e||1,0,0,0,0,0,0,e,0,0,0,0,0,0,e],n=new bl;n.setAttribute("position",new hl(t,3)),n.setAttribute("color",new hl([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));var i=new Jo({vertexColors:w});rq.call(this,n,i)}function Zc(e,t,n,i,l,r,a){return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),new $i(e,t,n,l,r,a)}Xc.prototype=Object.create(ri.prototype),Xc.prototype.constructor=Xc,Xc.prototype.setDirection=function(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{Wc.set(e.z,0,-e.x).normalize();var t=Math.acos(e.y);this.quaternion.setFromAxisAngle(Wc,t)}},Xc.prototype.setLength=function(e,t,n){void 0===t&&(t=.2*e),void 0===n&&(n=.2*t),this.line.scale.set(1,Math.max(1e-4,e-t),1),this.line.updateMatrix(),this.cone.scale.set(n,t,n),this.cone.position.y=e,this.cone.updateMatrix()},Xc.prototype.setColor=function(e){this.line.material.color.set(e),this.cone.material.color.set(e)},Xc.prototype.copy=function(e){return ri.prototype.copy.call(this,e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this},Xc.prototype.clone=function(){return(new this.constructor).copy(this)},Yc.prototype=Object.create(rq.prototype),Yc.prototype.constructor=Yc;var Jc=0,Qc=1;function Kc(e){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),e}function $c(e){return void 0===e&&(e=[]),console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),e.isMultiMaterial=!0,e.materials=e,e.clone=function(){return e.slice()},e}function eu(e,t){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new cq(e,t)}function tu(e){return console.warn("THREE.Particle has been renamed to THREE.Sprite."),new Fo(e)}function nu(e,t){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new cq(e,t)}function iu(e){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new oq(e)}function lu(e){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new oq(e)}function ru(e){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new oq(e)}function au(e,t,n){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new Mn(e,t,n)}function ou(e,t){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."),new il(e,t).setDynamic(!0)}function qu(e,t){return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),new ll(e,t)}function su(e,t){return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),new rl(e,t)}function mu(e,t){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),new al(e,t)}function hu(e,t){return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),new ol(e,t)}function cu(e,t){return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),new ql(e,t)}function uu(e,t){return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),new sl(e,t)}function du(e,t){return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),new ml(e,t)}function pu(e,t){return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),new hl(e,t)}function fu(e,t){return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),new cl(e,t)}function xu(e){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),wm.call(this,e),this.type="catmullrom",this.closed=!0}function vu(e){console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),wm.call(this,e),this.type="catmullrom"}function gu(e){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),wm.call(this,e),this.type="catmullrom"}function _u(e){return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),new Yc(e)}function yu(e,t){return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),new Gc(e,t)}function bu(e,t){return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),new rq(new ws(e.geometry),new Jo({color:void 0!==t?t:16777215}))}function wu(e,t){return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),new rq(new vq(e.geometry),new Jo({color:void 0!==t?t:16777215}))}function Mu(e){return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),new qm(e)}function zu(e){return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),new hm(e)}pm.create=function(e,t){return console.log("THREE.Curve.create() has been deprecated"),e.prototype=Object.create(pm.prototype),e.prototype.constructor=e,e.prototype.getPoint=t,e},Object.assign(Im.prototype,{createPointsGeometry:function(e){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var t=this.getPoints(e);return this.createGeometry(t)},createSpacedPointsGeometry:function(e){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var t=this.getSpacedPoints(e);return this.createGeometry(t)},createGeometry:function(e){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var t=new Xl,n=0,i=e.length;n<i;n++){var l=e[n];t.vertices.push(new Mn(l.x,l.y,l.z||0))}return t}}),Object.assign(Dm.prototype,{fromPoints:function(e){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(e)}}),xu.prototype=Object.create(wm.prototype),vu.prototype=Object.create(wm.prototype),gu.prototype=Object.create(wm.prototype),Object.assign(gu.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}}),zc.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},xc.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Object.assign(am.prototype,{extractUrlBase:function(e){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),Qm.extractUrlBase(e)}}),am.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},Object.assign(nh.prototype,{setTexturePath:function(e){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(e)}}),Object.assign(nc.prototype,{center:function(e){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(e)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},size:function(e){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(e)}}),Object.assign(gi.prototype,{center:function(e){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(e)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionSphere:function(e){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)},size:function(e){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(e)}}),rc.prototype.center=function(e){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(e)},Object.assign(gn,{random16:function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},nearestPowerOfTwo:function(e){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),gn.floorPowerOfTwo(e)},nextPowerOfTwo:function(e){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),gn.ceilPowerOfTwo(e)}}),Object.assign(Tn.prototype,{flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(e,t)},multiplyVector3:function(e){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),e.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBuffer:function(e){return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(e)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}}),Object.assign(Gn.prototype,{extractPosition:function(e){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(e)},flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(e,t)},getPosition:function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new Mn).setFromMatrixColumn(this,3)},setRotationFromQuaternion:function(e){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(e)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(e){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector4:function(e){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(e){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),e.transformDirection(this)},crossVector:function(e){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBuffer:function(e){return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(e)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(e,t,n,i,l,r){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(e,t,i,n,l,r)}}),Oi.prototype.isIntersectionLine=function(e){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(e)},yn.prototype.multiplyVector3=function(e){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),e.applyQuaternion(this)},Object.assign(Li.prototype,{isIntersectionBox:function(e){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionPlane:function(e){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(e)},isIntersectionSphere:function(e){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)}}),Object.assign(ki.prototype,{area:function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},barycoordFromPoint:function(e,t){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(e,t)},midpoint:function(e){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(e)},normal:function(e){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(e)},plane:function(e){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(e)}}),Object.assign(ki,{barycoordFromPoint:function(e,t,n,i,l){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),ki.getBarycoord(e,t,n,i,l)},normal:function(e,t,n,i){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),ki.getNormal(e,t,n,i)}}),Object.assign(Nm.prototype,{extractAllPoints:function(e){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(e)},extrude:function(e){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new qs(this,e)},makeGeometry:function(e){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new _s(this,e)}}),Object.assign(_n.prototype,{fromAttribute:function(e,t,n){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},distanceToManhattan:function(e){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(e)},lengthManhattan:function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Mn.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(e){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(e)},getScaleFromMatrix:function(e){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(e)},getColumnFromMatrix:function(e,t){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(t,e)},applyProjection:function(e){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(e)},fromAttribute:function(e,t,n){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},distanceToManhattan:function(e){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(e)},lengthManhattan:function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Pn.prototype,{fromAttribute:function(e,t,n){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},lengthManhattan:function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Xl.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")}}),Object.assign(ri.prototype,{getChildByName:function(e){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(e)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(e,t){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(t,e)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")}}),Object.defineProperties(ri.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(e){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=e}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.defineProperties(Vo.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),Object.defineProperty(Xo.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}}),jo.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},Object.defineProperty(pm.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(e){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=e}}),ir.prototype.setLens=function(e,t){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==t&&(this.filmGauge=t),this.setFocalLength(e)},Object.defineProperties(Bm.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(e){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=e}},shadowCameraLeft:{set:function(e){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=e}},shadowCameraRight:{set:function(e){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=e}},shadowCameraTop:{set:function(e){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=e}},shadowCameraBottom:{set:function(e){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=e}},shadowCameraNear:{set:function(e){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=e}},shadowCameraFar:{set:function(e){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=e}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(e){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=e}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(e){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=e}},shadowMapHeight:{set:function(e){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=e}}}),Object.defineProperties(il.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===qn},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(qn)}}}),Object.assign(il.prototype,{setDynamic:function(e){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===e?qn:on),this},copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},setArray:function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}}),Object.assign(bl.prototype,{addIndex:function(e){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(e)},addAttribute:function(e,t){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),t&&t.isBufferAttribute||t&&t.isInterleavedBufferAttribute?"index"===e?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(t),this):this.setAttribute(e,t):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(e,new il(arguments[1],arguments[2])))},addDrawCall:function(e,t,n){void 0!==n&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(e,t)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},removeAttribute:function(e){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(e)}}),Object.defineProperties(bl.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.defineProperties(Mo.prototype,{dynamic:{get:function(){return console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."),this.usage===qn},set:function(e){console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."),this.setUsage(e)}}}),Object.assign(Mo.prototype,{setDynamic:function(e){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===e?qn:on),this},setArray:function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}}),Object.assign(ss.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}}),Object.defineProperties(Yh.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}}),Object.defineProperties(tl.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new Zi}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=e===g}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(e){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=e}}}),Object.defineProperties(Is.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(tr.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(e){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=e}}}),Object.assign(yo.prototype,{clearTarget:function(e,t,n,i){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(e),this.clear(t,n,i)},animate:function(e){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(e)},getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},resetGLState:function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(e){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(e)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},allocTextureUnit:function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},setTexture:function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},setTexture2D:function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},setTextureCube:function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},getActiveMipMapLevel:function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()}}),Object.defineProperties(yo.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=e}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=e}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}}}),Object.defineProperties(ao.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(or.prototype,{activeCubeFace:{set:function(){console.warn("THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().")}},activeMipMapLevel:{set:function(){console.warn("THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().")}}}),Object.defineProperties(Rn.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=e}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=e}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=e}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=e}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(e){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=e}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(e){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=e}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(e){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=e}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(e){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=e}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(e){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=e}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(e){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=e}}}),Object.defineProperties(go.prototype,{standing:{set:function(){console.warn("THREE.WebVRManager: .standing has been removed.")}},userHeight:{set:function(){console.warn("THREE.WebVRManager: .userHeight has been removed.")}}}),Object.defineProperties(Th.prototype,{load:{value:function(e){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var t=this;return(new uh).load(e,(function(e){t.setBuffer(e)})),this}},startTime:{set:function(){console.warn("THREE.Audio: .startTime is now .play( delay ).")}}}),Ch.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},ar.prototype.updateCubeMap=function(e,t){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(e,t)};var Su={merge:function(e,t,n){var i;console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead."),t.isMesh&&(t.matrixAutoUpdate&&t.updateMatrix(),i=t.matrix,t=t.geometry),e.merge(t,i,n)},center:function(e){return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),e.center()}};function Tu(){console.error("THREE.CanvasRenderer has been removed")}function Eu(){console.error("THREE.JSONLoader has been removed.")}En.crossOrigin=void 0,En.loadTexture=function(e,t,n,i){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var l=new dm;l.setCrossOrigin(this.crossOrigin);var r=l.load(e,n,void 0,i);return t&&(r.mapping=t),r},En.loadTextureCube=function(e,t,n,i){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var l=new um;l.setCrossOrigin(this.crossOrigin);var r=l.load(e,n,void 0,i);return t&&(r.mapping=t),r},En.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},En.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};var Au={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")}};function Lu(){console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js")}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:i}}))},function(e,t,n){"use strict";n.r(t),function(e){var n=function(){this._tweens={},this._tweensAddedDuringUpdate={}};n.prototype={getAll:function(){return Object.keys(this._tweens).map(function(e){return this._tweens[e]}.bind(this))},removeAll:function(){this._tweens={}},add:function(e){this._tweens[e.getId()]=e,this._tweensAddedDuringUpdate[e.getId()]=e},remove:function(e){delete this._tweens[e.getId()],delete this._tweensAddedDuringUpdate[e.getId()]},update:function(e,t){var n=Object.keys(this._tweens);if(0===n.length)return!1;for(e=void 0!==e?e:l.now();n.length>0;){this._tweensAddedDuringUpdate={};for(var i=0;i<n.length;i++){var r=this._tweens[n[i]];r&&!1===r.update(e)&&(r._isPlaying=!1,t||delete this._tweens[n[i]])}n=Object.keys(this._tweensAddedDuringUpdate)}return!0}};var i,l=new n;l.Group=n,l._nextId=0,l.nextId=function(){return l._nextId++},"undefined"==typeof self&&void 0!==e&&e.hrtime?l.now=function(){var t=e.hrtime();return 1e3*t[0]+t[1]/1e6}:"undefined"!=typeof self&&void 0!==self.performance&&void 0!==self.performance.now?l.now=self.performance.now.bind(self.performance):void 0!==Date.now?l.now=Date.now:l.now=function(){return(new Date).getTime()},l.Tween=function(e,t){this._isPaused=!1,this._pauseStart=null,this._object=e,this._valuesStart={},this._valuesEnd={},this._valuesStartRepeat={},this._duration=1e3,this._repeat=0,this._repeatDelayTime=void 0,this._yoyo=!1,this._isPlaying=!1,this._reversed=!1,this._delayTime=0,this._startTime=null,this._easingFunction=l.Easing.Linear.None,this._interpolationFunction=l.Interpolation.Linear,this._chainedTweens=[],this._onStartCallback=null,this._onStartCallbackFired=!1,this._onUpdateCallback=null,this._onRepeatCallback=null,this._onCompleteCallback=null,this._onStopCallback=null,this._group=t||l,this._id=l.nextId()},l.Tween.prototype={getId:function(){return this._id},isPlaying:function(){return this._isPlaying},isPaused:function(){return this._isPaused},to:function(e,t){return this._valuesEnd=Object.create(e),void 0!==t&&(this._duration=t),this},duration:function(e){return this._duration=e,this},start:function(e){for(var t in this._group.add(this),this._isPlaying=!0,this._isPaused=!1,this._onStartCallbackFired=!1,this._startTime=void 0!==e?"string"==typeof e?l.now()+parseFloat(e):e:l.now(),this._startTime+=this._delayTime,this._valuesEnd){if(this._valuesEnd[t]instanceof Array){if(0===this._valuesEnd[t].length)continue;this._valuesEnd[t]=[this._object[t]].concat(this._valuesEnd[t])}void 0!==this._object[t]&&(void 0===this._valuesStart[t]&&(this._valuesStart[t]=this._object[t]),this._valuesStart[t]instanceof Array==!1&&(this._valuesStart[t]*=1),this._valuesStartRepeat[t]=this._valuesStart[t]||0)}return this},stop:function(){return this._isPlaying?(this._group.remove(this),this._isPlaying=!1,this._isPaused=!1,null!==this._onStopCallback&&this._onStopCallback(this._object),this.stopChainedTweens(),this):this},end:function(){return this.update(1/0),this},pause:function(e){return this._isPaused||!this._isPlaying?this:(this._isPaused=!0,this._pauseStart=void 0===e?l.now():e,this._group.remove(this),this)},resume:function(e){return this._isPaused&&this._isPlaying?(this._isPaused=!1,this._startTime+=(void 0===e?l.now():e)-this._pauseStart,this._pauseStart=0,this._group.add(this),this):this},stopChainedTweens:function(){for(var e=0,t=this._chainedTweens.length;e<t;e++)this._chainedTweens[e].stop()},group:function(e){return this._group=e,this},delay:function(e){return this._delayTime=e,this},repeat:function(e){return this._repeat=e,this},repeatDelay:function(e){return this._repeatDelayTime=e,this},yoyo:function(e){return this._yoyo=e,this},easing:function(e){return this._easingFunction=e,this},interpolation:function(e){return this._interpolationFunction=e,this},chain:function(){return this._chainedTweens=arguments,this},onStart:function(e){return this._onStartCallback=e,this},onUpdate:function(e){return this._onUpdateCallback=e,this},onRepeat:function(e){return this._onRepeatCallback=e,this},onComplete:function(e){return this._onCompleteCallback=e,this},onStop:function(e){return this._onStopCallback=e,this},update:function(e){var t,n,i;if(e<this._startTime)return!0;for(t in!1===this._onStartCallbackFired&&(null!==this._onStartCallback&&this._onStartCallback(this._object),this._onStartCallbackFired=!0),n=(e-this._startTime)/this._duration,n=0===this._duration||n>1?1:n,i=this._easingFunction(n),this._valuesEnd)if(void 0!==this._valuesStart[t]){var l=this._valuesStart[t]||0,r=this._valuesEnd[t];r instanceof Array?this._object[t]=this._interpolationFunction(r,i):("string"==typeof r&&(r="+"===r.charAt(0)||"-"===r.charAt(0)?l+parseFloat(r):parseFloat(r)),"number"==typeof r&&(this._object[t]=l+(r-l)*i))}if(null!==this._onUpdateCallback&&this._onUpdateCallback(this._object,n),1===n){if(this._repeat>0){for(t in isFinite(this._repeat)&&this._repeat--,this._valuesStartRepeat){if("string"==typeof this._valuesEnd[t]&&(this._valuesStartRepeat[t]=this._valuesStartRepeat[t]+parseFloat(this._valuesEnd[t])),this._yoyo){var a=this._valuesStartRepeat[t];this._valuesStartRepeat[t]=this._valuesEnd[t],this._valuesEnd[t]=a}this._valuesStart[t]=this._valuesStartRepeat[t]}return this._yoyo&&(this._reversed=!this._reversed),void 0!==this._repeatDelayTime?this._startTime=e+this._repeatDelayTime:this._startTime=e+this._delayTime,null!==this._onRepeatCallback&&this._onRepeatCallback(this._object),!0}null!==this._onCompleteCallback&&this._onCompleteCallback(this._object);for(var o=0,q=this._chainedTweens.length;o<q;o++)this._chainedTweens[o].start(this._startTime+this._duration);return!1}return!0}},l.Easing={Linear:{None:function(e){return e}},Quadratic:{In:function(e){return e*e},Out:function(e){return e*(2-e)},InOut:function(e){return(e*=2)<1?.5*e*e:-.5*(--e*(e-2)-1)}},Cubic:{In:function(e){return e*e*e},Out:function(e){return--e*e*e+1},InOut:function(e){return(e*=2)<1?.5*e*e*e:.5*((e-=2)*e*e+2)}},Quartic:{In:function(e){return e*e*e*e},Out:function(e){return 1- --e*e*e*e},InOut:function(e){return(e*=2)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)}},Quintic:{In:function(e){return e*e*e*e*e},Out:function(e){return--e*e*e*e*e+1},InOut:function(e){return(e*=2)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)}},Sinusoidal:{In:function(e){return 1-Math.cos(e*Math.PI/2)},Out:function(e){return Math.sin(e*Math.PI/2)},InOut:function(e){return.5*(1-Math.cos(Math.PI*e))}},Exponential:{In:function(e){return 0===e?0:Math.pow(1024,e-1)},Out:function(e){return 1===e?1:1-Math.pow(2,-10*e)},InOut:function(e){return 0===e?0:1===e?1:(e*=2)<1?.5*Math.pow(1024,e-1):.5*(2-Math.pow(2,-10*(e-1)))}},Circular:{In:function(e){return 1-Math.sqrt(1-e*e)},Out:function(e){return Math.sqrt(1- --e*e)},InOut:function(e){return(e*=2)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)}},Elastic:{In:function(e){return 0===e?0:1===e?1:-Math.pow(2,10*(e-1))*Math.sin(5*(e-1.1)*Math.PI)},Out:function(e){return 0===e?0:1===e?1:Math.pow(2,-10*e)*Math.sin(5*(e-.1)*Math.PI)+1},InOut:function(e){return 0===e?0:1===e?1:(e*=2)<1?-.5*Math.pow(2,10*(e-1))*Math.sin(5*(e-1.1)*Math.PI):.5*Math.pow(2,-10*(e-1))*Math.sin(5*(e-1.1)*Math.PI)+1}},Back:{In:function(e){var t=1.70158;return e*e*((t+1)*e-t)},Out:function(e){var t=1.70158;return--e*e*((t+1)*e+t)+1},InOut:function(e){var t=2.5949095;return(e*=2)<1?e*e*((t+1)*e-t)*.5:.5*((e-=2)*e*((t+1)*e+t)+2)}},Bounce:{In:function(e){return 1-l.Easing.Bounce.Out(1-e)},Out:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},InOut:function(e){return e<.5?.5*l.Easing.Bounce.In(2*e):.5*l.Easing.Bounce.Out(2*e-1)+.5}}},l.Interpolation={Linear:function(e,t){var n=e.length-1,i=n*t,r=Math.floor(i),a=l.Interpolation.Utils.Linear;return t<0?a(e[0],e[1],i):t>1?a(e[n],e[n-1],n-i):a(e[r],e[r+1>n?n:r+1],i-r)},Bezier:function(e,t){for(var n=0,i=e.length-1,r=Math.pow,a=l.Interpolation.Utils.Bernstein,o=0;o<=i;o++)n+=r(1-t,i-o)*r(t,o)*e[o]*a(i,o);return n},CatmullRom:function(e,t){var n=e.length-1,i=n*t,r=Math.floor(i),a=l.Interpolation.Utils.CatmullRom;return e[0]===e[n]?(t<0&&(r=Math.floor(i=n*(1+t))),a(e[(r-1+n)%n],e[r],e[(r+1)%n],e[(r+2)%n],i-r)):t<0?e[0]-(a(e[0],e[0],e[1],e[1],-i)-e[0]):t>1?e[n]-(a(e[n],e[n],e[n-1],e[n-1],i-n)-e[n]):a(e[r?r-1:0],e[r],e[n<r+1?n:r+1],e[n<r+2?n:r+2],i-r)},Utils:{Linear:function(e,t,n){return(t-e)*n+e},Bernstein:function(e,t){var n=l.Interpolation.Utils.Factorial;return n(e)/n(t)/n(e-t)},Factorial:(i=[1],function(e){var t=1;if(i[e])return i[e];for(var n=e;n>1;n--)t*=n;return i[e]=t,t}),CatmullRom:function(e,t,n,i,l){var r=.5*(n-e),a=.5*(i-t),o=l*l;return(2*t-2*n+r+a)*(l*o)+(-3*t+3*n-2*r-a)*o+r*l+t}}},t.default=l}.call(this,n(8))},function(e){e.exports=JSON.parse('{"glyphs":{"0":{"ha":765,"x_min":45,"x_max":753,"o":"m 753 686 q 638 177 753 368 q 318 -14 524 -14 q 114 69 184 -14 q 45 317 45 152 q 102 681 45 518 q 256 925 159 844 q 482 1007 354 1007 q 753 686 753 1007 m 464 838 q 362 767 410 838 q 283 562 315 696 q 250 313 250 428 q 269 195 250 235 q 335 155 288 155 q 437 227 390 155 q 516 431 484 299 q 547 693 547 564 q 527 803 547 768 q 464 838 506 838 z "},"1":{"ha":765,"x_min":123,"x_max":676,"o":"m 467 0 l 260 0 l 382 562 q 433 757 406 665 q 392 725 427 751 q 214 610 356 699 l 123 755 l 507 991 l 676 991 l 467 0 z "},"2":{"ha":765,"x_min":-33,"x_max":745,"o":"m 619 0 l -33 0 l -4 144 l 319 432 q 488 605 441 540 q 534 726 534 669 q 507 804 534 777 q 432 831 479 831 q 340 808 387 831 q 224 728 293 785 l 125 865 q 296 974 214 941 q 465 1006 377 1006 q 669 939 594 1006 q 745 764 745 873 q 717 627 745 691 q 634 500 689 564 q 453 334 578 436 l 271 183 l 271 176 l 656 176 l 619 0 z "},"3":{"ha":765,"x_min":9,"x_max":749,"o":"m 749 779 q 685 602 749 673 q 507 510 621 530 l 507 507 q 642 435 596 490 q 688 298 688 380 q 637 137 688 208 q 494 26 587 66 q 272 -14 400 -14 q 9 40 110 -14 l 9 221 q 133 170 66 187 q 262 153 199 153 q 427 196 370 153 q 485 315 485 239 q 310 432 485 432 l 216 432 l 248 582 l 297 582 q 475 624 410 582 q 541 741 541 666 q 511 811 541 786 q 429 836 482 836 q 235 768 338 836 l 149 907 q 306 984 233 962 q 473 1006 380 1006 q 675 944 602 1006 q 749 779 749 883 z "},"4":{"ha":765,"x_min":-17,"x_max":749,"o":"m 697 205 l 582 205 l 539 0 l 340 0 l 383 205 l -17 205 l 16 364 l 538 991 l 749 991 l 616 368 l 732 368 l 697 205 m 418 368 l 457 536 q 484 648 465 576 q 513 743 503 720 l 509 743 q 419 621 485 701 l 207 368 l 418 368 z "},"5":{"ha":765,"x_min":18,"x_max":765,"o":"m 422 625 q 618 555 547 625 q 690 361 690 486 q 642 163 690 248 q 500 32 593 78 q 277 -14 408 -14 q 129 2 197 -14 q 18 41 60 18 l 18 224 q 257 157 136 157 q 420 205 361 157 q 479 336 479 253 q 440 432 479 400 q 328 464 401 464 q 183 441 258 464 l 113 494 l 253 991 l 765 991 l 728 814 l 396 814 l 336 615 q 422 625 385 625 z "},"6":{"ha":765,"x_min":60,"x_max":782,"o":"m 60 318 q 101 586 60 455 q 215 813 142 718 q 389 958 287 909 q 631 1007 490 1007 q 782 989 715 1007 l 747 822 q 618 839 690 839 q 405 766 486 839 q 279 532 324 692 l 282 532 q 493 644 360 644 q 657 578 600 644 q 715 393 715 513 q 667 181 715 279 q 538 35 619 83 q 350 -14 457 -14 q 133 73 206 -14 q 60 318 60 159 m 359 154 q 469 218 427 154 q 511 378 511 281 q 489 455 511 426 q 419 484 466 484 q 341 459 378 484 q 282 395 304 435 q 260 286 260 354 q 287 189 260 224 q 359 154 314 154 z "},"7":{"ha":765,"x_min":53,"x_max":825,"o":"m 53 0 l 553 815 l 126 815 l 164 991 l 825 991 l 798 860 l 288 0 l 53 0 z "},"8":{"ha":765,"x_min":37,"x_max":764,"o":"m 489 1007 q 635 979 572 1007 q 731 899 698 950 q 764 781 764 847 q 709 622 764 690 q 553 519 654 555 q 700 272 700 424 q 657 124 700 189 q 534 22 614 58 q 349 -14 454 -14 q 120 54 203 -14 q 37 237 37 122 q 273 526 37 439 q 161 729 161 616 q 201 873 161 810 q 315 972 240 937 q 489 1007 389 1007 m 395 436 q 277 363 316 406 q 239 260 239 321 q 273 173 239 205 q 364 140 307 140 q 464 177 427 140 q 501 271 501 213 q 476 360 501 320 q 395 436 452 399 m 471 854 q 389 823 419 854 q 358 742 358 791 q 441 606 358 652 q 567 755 567 654 q 540 828 567 802 q 471 854 513 854 z "},"9":{"ha":765,"x_min":58,"x_max":741,"o":"m 741 679 q 673 317 741 489 q 494 66 606 146 q 221 -14 382 -14 q 58 8 134 -14 l 58 182 q 212 154 134 154 q 353 187 294 154 q 451 281 412 220 q 518 456 490 342 l 515 456 q 315 349 440 349 q 144 419 205 349 q 83 612 83 489 q 133 820 83 725 q 266 961 182 914 q 460 1007 349 1007 q 669 924 597 1007 q 741 679 741 840 m 437 839 q 359 810 393 839 q 306 733 325 782 q 288 629 288 684 q 313 540 288 570 q 385 510 338 510 q 460 535 425 510 q 516 603 495 559 q 536 710 536 646 q 512 803 536 767 q 437 839 488 839 z "}," ":{"ha":361,"x_min":0,"x_max":0,"o":""},"!":{"ha":397,"x_min":17,"x_max":439,"o":"m 265 329 l 102 329 l 208 991 l 439 991 l 265 329 m 17 78 q 53 176 17 139 q 155 212 90 212 q 229 186 201 212 q 257 114 257 161 q 220 18 257 55 q 122 -18 182 -18 q 45 7 73 -18 q 17 78 17 33 z "},"\\"":{"ha":629,"x_min":136,"x_max":647,"o":"m 372 991 l 269 633 l 136 633 l 184 991 l 372 991 m 647 991 l 545 633 l 410 633 l 460 991 l 647 991 z "},"#":{"ha":897,"x_min":28,"x_max":904,"o":"m 703 574 l 656 416 l 831 416 l 818 277 l 616 277 l 538 0 l 389 0 l 468 277 l 336 277 l 258 0 l 113 0 l 189 277 l 28 277 l 40 416 l 228 416 l 275 574 l 104 574 l 117 715 l 313 715 l 393 991 l 541 991 l 461 715 l 596 715 l 675 991 l 821 991 l 742 715 l 904 715 l 892 574 l 703 574 m 375 416 l 509 416 l 555 574 l 422 574 l 375 416 z "},"$":{"ha":765,"x_min":35,"x_max":760,"o":"m 701 336 q 616 139 701 212 q 367 54 531 66 l 340 -81 l 245 -81 l 275 56 q 35 114 134 64 l 35 294 q 309 215 169 222 l 357 433 q 193 536 246 475 q 140 681 140 597 q 227 870 140 798 q 464 953 313 943 l 488 1055 l 582 1055 l 559 953 q 760 892 672 938 l 688 734 q 524 785 598 779 l 481 582 q 613 514 570 547 q 679 438 656 481 q 701 336 701 394 m 403 218 q 472 249 446 224 q 498 315 498 273 q 482 367 498 347 q 441 396 465 387 l 403 218 m 429 785 q 364 757 387 780 q 340 693 340 734 q 395 618 340 640 l 429 785 z "},"%":{"ha":1189,"x_min":78,"x_max":1139,"o":"m 351 864 q 276 777 309 864 q 244 589 244 690 q 282 524 244 524 q 358 612 326 524 q 390 799 390 701 q 351 864 390 864 m 557 790 q 519 580 557 677 q 416 433 481 482 q 269 383 352 383 q 126 440 175 383 q 78 600 78 496 q 116 811 78 715 q 216 957 153 908 q 363 1006 279 1006 q 506 951 456 1006 q 557 790 557 897 m 1054 991 l 319 0 l 157 0 l 895 991 l 1054 991 m 933 468 q 882 430 907 468 q 842 326 858 392 q 827 193 827 259 q 864 127 827 127 q 916 165 892 127 q 957 270 941 202 q 972 403 972 337 q 933 468 972 468 m 1139 400 q 1102 188 1139 287 q 1002 38 1065 88 q 856 -12 938 -12 q 709 41 758 -12 q 660 192 660 94 q 696 411 660 312 q 796 559 732 509 q 945 610 861 610 q 1088 556 1038 610 q 1139 400 1139 503 z "},"&":{"ha":983,"x_min":46,"x_max":970,"o":"m 899 0 l 661 0 l 612 66 q 339 -14 494 -14 q 122 53 197 -14 q 46 243 46 119 q 99 411 46 341 q 285 547 153 481 q 233 722 233 635 q 313 931 233 854 q 528 1007 393 1007 q 708 951 642 1007 q 774 799 774 895 q 526 510 774 609 l 659 332 q 713 414 688 370 q 766 532 738 458 l 970 532 q 760 195 880 319 l 899 0 m 367 422 q 283 352 307 388 q 260 262 260 315 q 291 189 260 218 q 370 160 321 160 q 519 200 448 160 l 367 422 m 449 624 q 554 699 526 664 q 583 775 583 734 q 563 831 583 814 q 515 848 543 848 q 446 817 471 848 q 421 736 421 785 q 429 673 421 705 q 449 624 437 642 z "},"\'":{"ha":354,"x_min":136,"x_max":372,"o":"m 372 991 l 269 633 l 136 633 l 184 991 l 372 991 z "},"(":{"ha":471,"x_min":50,"x_max":570,"o":"m 50 191 q 133 615 50 420 q 392 991 216 810 l 570 991 q 314 603 397 803 q 231 183 231 402 q 310 -220 231 -26 l 151 -220 q 50 191 50 -39 z "},")":{"ha":471,"x_min":-100,"x_max":419,"o":"m 419 582 q 335 154 419 350 q 78 -220 251 -41 l -100 -220 q 239 589 239 150 q 160 991 239 797 l 318 991 q 419 582 419 812 z "},"*":{"ha":757,"x_min":117,"x_max":786,"o":"m 600 1032 l 524 793 l 786 812 l 774 640 l 545 669 l 653 441 l 486 392 l 425 621 l 292 432 l 151 543 l 338 711 l 117 774 l 175 935 l 404 817 l 427 1067 l 600 1032 z "},"+":{"ha":765,"x_min":74,"x_max":720,"o":"m 322 415 l 74 415 l 74 564 l 322 564 l 322 814 l 471 814 l 471 564 l 720 564 l 720 415 l 471 415 l 471 168 l 322 168 l 322 415 z "},",":{"ha":386,"x_min":-69,"x_max":261,"o":"m 256 161 l 261 146 q 83 -179 181 -27 l -69 -179 q 62 161 -19 -66 l 256 161 z "},"-":{"ha":447,"x_min":28,"x_max":419,"o":"m 28 288 l 64 457 l 419 457 l 383 288 l 28 288 z "},".":{"ha":396,"x_min":17,"x_max":257,"o":"m 17 78 q 53 176 17 139 q 155 212 90 212 q 229 186 201 212 q 257 114 257 161 q 220 18 257 55 q 122 -18 182 -18 q 45 7 73 -18 q 17 78 17 33 z "},"/":{"ha":585,"x_min":-61,"x_max":688,"o":"m 688 991 l 139 0 l -61 0 l 488 991 l 688 991 z "},":":{"ha":396,"x_min":17,"x_max":380,"o":"m 140 637 q 178 736 140 700 q 279 772 216 772 q 353 746 326 772 q 380 673 380 720 q 343 578 380 615 q 245 542 307 542 q 169 567 197 542 q 140 637 140 591 m 17 78 q 53 176 17 139 q 155 212 90 212 q 229 186 201 212 q 257 114 257 161 q 220 18 257 55 q 122 -18 182 -18 q 45 7 73 -18 q 17 78 17 33 z "},";":{"ha":396,"x_min":-69,"x_max":380,"o":"m 261 146 q 83 -179 181 -27 l -69 -179 q 62 161 -19 -66 l 256 161 l 261 146 m 140 637 q 178 736 140 700 q 279 772 216 772 q 353 746 326 772 q 380 673 380 720 q 343 578 380 615 q 245 542 307 542 q 169 567 197 542 q 140 637 140 591 z "},"<":{"ha":765,"x_min":74,"x_max":720,"o":"m 720 138 l 74 435 l 74 532 l 720 868 l 720 705 l 283 490 l 720 300 l 720 138 z "},"=":{"ha":765,"x_min":74,"x_max":720,"o":"m 74 547 l 74 694 l 720 694 l 720 547 l 74 547 m 74 283 l 74 432 l 720 432 l 720 283 l 74 283 z "},">":{"ha":765,"x_min":74,"x_max":720,"o":"m 74 300 l 510 490 l 74 705 l 74 868 l 720 532 l 720 435 l 74 138 l 74 300 z "},"?":{"ha":637,"x_min":113,"x_max":682,"o":"m 176 329 l 186 382 q 236 502 199 452 q 353 607 273 552 q 459 693 437 664 q 482 758 482 722 q 392 839 482 839 q 320 828 358 839 q 183 771 281 817 l 121 921 q 422 1006 277 1006 q 612 946 543 1006 q 682 781 682 887 q 663 679 682 724 q 607 596 644 634 q 478 496 570 557 q 413 446 435 467 q 377 402 391 426 q 351 329 363 379 l 176 329 m 113 78 q 150 176 113 140 q 252 212 187 212 q 325 186 298 212 q 353 114 353 161 q 315 18 353 55 q 218 -18 278 -18 q 140 7 168 -18 q 113 78 113 33 z "},"@":{"ha":1189,"x_min":62,"x_max":1175,"o":"m 1175 570 q 1132 352 1175 452 q 1011 195 1088 252 q 839 139 935 139 q 741 165 779 139 q 692 239 703 191 l 688 239 q 611 163 654 186 q 511 139 568 139 q 377 193 425 139 q 329 349 329 247 q 375 536 329 448 q 502 675 420 624 q 684 726 583 726 q 905 689 809 726 l 833 404 q 821 352 826 374 q 815 309 815 330 q 854 262 815 262 q 939 306 899 262 q 1001 422 978 349 q 1025 567 1025 494 q 941 788 1025 711 q 697 864 857 864 q 449 800 559 864 q 276 620 338 736 q 214 354 214 503 q 304 96 214 189 q 559 3 395 3 q 708 16 639 3 q 859 61 778 30 l 859 -65 q 543 -126 703 -126 q 287 -68 396 -126 q 120 96 178 -10 q 62 339 62 201 q 144 676 62 528 q 377 908 226 824 q 714 991 528 991 q 1053 881 930 991 q 1175 570 1175 770 m 675 603 q 576 568 619 603 q 508 475 533 533 q 484 357 484 417 q 500 288 484 313 q 547 262 517 262 q 692 446 643 262 l 730 596 q 675 603 706 603 z "},"A":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 z "},"B":{"ha":861,"x_min":36,"x_max":848,"o":"m 534 991 q 769 936 690 991 q 848 771 848 881 q 792 603 848 669 q 632 515 736 537 l 632 511 q 740 446 700 494 q 781 323 781 398 q 677 84 781 168 q 390 0 573 0 l 36 0 l 245 991 l 534 991 m 370 599 l 471 599 q 594 632 553 599 q 635 726 635 665 q 519 819 635 819 l 416 819 l 370 599 m 279 174 l 401 174 q 526 213 481 174 q 571 322 571 252 q 447 432 571 432 l 335 432 l 279 174 z "},"C":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 453 777 524 832 q 338 615 381 722 q 294 386 294 509 q 341 218 294 273 q 489 163 387 163 q 718 215 588 163 l 718 39 q 447 -14 583 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 764 992 699 1007 q 905 936 830 977 l 825 766 q 707 819 753 806 q 614 832 660 832 z "},"D":{"ha":940,"x_min":36,"x_max":897,"o":"m 897 616 q 831 287 897 427 q 638 73 764 146 q 342 0 513 0 l 36 0 l 245 991 l 514 991 q 797 895 697 991 q 897 616 897 798 m 351 174 q 526 225 452 174 q 643 377 601 277 q 685 606 685 477 q 636 765 685 710 q 494 819 587 819 l 416 819 l 279 174 l 351 174 z "},"E":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 z "},"F":{"ha":737,"x_min":36,"x_max":798,"o":"m 243 0 l 36 0 l 245 991 l 798 991 l 761 819 l 416 819 l 363 564 l 684 564 l 646 392 l 325 392 l 243 0 z "},"G":{"ha":958,"x_min":83,"x_max":942,"o":"m 511 557 l 893 557 l 783 40 q 615 -2 692 9 q 450 -14 537 -14 q 179 86 275 -14 q 83 372 83 186 q 156 701 83 554 q 360 927 229 848 q 664 1007 492 1007 q 942 940 812 1007 l 864 770 q 764 813 814 797 q 654 829 713 829 q 469 773 551 829 q 341 613 387 717 q 294 389 294 509 q 343 217 294 272 q 494 163 393 163 q 610 179 546 163 l 654 382 l 473 382 l 511 557 z "},"H":{"ha":972,"x_min":36,"x_max":979,"o":"m 770 0 l 562 0 l 653 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 979 991 l 770 0 z "},"J":{"ha":460,"x_min":-218,"x_max":468,"o":"m -92 -292 q -218 -273 -155 -292 l -218 -102 q -107 -115 -159 -115 q 2 -74 -40 -115 q 62 56 43 -33 l 261 991 l 468 991 l 262 26 q 143 -216 227 -140 q -92 -292 60 -292 z "},"K":{"ha":851,"x_min":36,"x_max":979,"o":"m 774 0 l 545 0 l 401 401 l 317 354 l 243 0 l 36 0 l 245 991 l 453 991 l 350 515 l 457 654 l 734 991 l 979 991 l 576 517 l 774 0 z "},"L":{"ha":720,"x_min":36,"x_max":627,"o":"m 36 0 l 245 991 l 453 991 l 279 174 l 627 174 l 590 0 l 36 0 z "},"M":{"ha":1222,"x_min":36,"x_max":1229,"o":"m 568 250 l 942 991 l 1229 991 l 1019 0 l 829 0 l 928 469 q 999 768 964 637 l 996 768 l 610 0 l 419 0 l 378 768 l 375 768 q 349 612 368 709 q 222 0 331 515 l 36 0 l 245 991 l 519 991 l 566 250 l 568 250 z "},"N":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 846 0 l 614 0 l 372 750 l 368 750 l 366 728 q 321 467 344 582 l 222 0 l 36 0 l 245 991 l 488 991 l 718 261 l 721 261 q 747 408 729 313 q 869 991 766 504 l 1055 991 l 846 0 z "},"O":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 z "},"P":{"ha":806,"x_min":36,"x_max":807,"o":"m 354 525 l 392 525 q 544 572 488 525 q 599 697 599 618 q 467 819 599 819 l 416 819 l 354 525 m 807 703 q 692 446 807 539 q 375 353 577 353 l 317 353 l 243 0 l 36 0 l 245 991 l 475 991 q 723 919 639 991 q 807 703 807 847 z "},"Q":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 888 259 971 422 q 661 31 805 97 l 833 -236 l 590 -236 l 469 -14 l 452 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 z "},"R":{"ha":846,"x_min":36,"x_max":811,"o":"m 359 551 l 412 551 q 551 590 501 551 q 600 708 600 629 q 568 791 600 764 q 467 819 536 819 l 416 819 l 359 551 m 323 380 l 243 0 l 36 0 l 245 991 l 489 991 q 730 922 650 991 q 811 720 811 853 q 755 535 811 612 q 593 421 699 458 l 770 0 l 545 0 l 404 380 l 323 380 z "},"S":{"ha":736,"x_min":28,"x_max":753,"o":"m 642 293 q 541 69 642 151 q 269 -14 441 -14 q 28 47 119 -14 l 28 233 q 271 160 159 160 q 389 189 347 160 q 432 268 432 218 q 423 319 432 297 q 397 360 414 341 q 313 429 380 379 q 181 562 219 496 q 143 704 143 628 q 185 860 143 791 q 305 967 227 929 q 484 1006 382 1006 q 753 939 631 1006 l 679 781 q 484 831 573 831 q 391 800 427 831 q 355 720 355 770 q 378 647 355 678 q 478 566 400 616 q 601 446 560 511 q 642 293 642 380 z "},"T":{"ha":737,"x_min":114,"x_max":836,"o":"m 387 0 l 180 0 l 353 817 l 114 817 l 151 991 l 836 991 l 799 817 l 559 817 l 387 0 z "},"U":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 z "},"V":{"ha":819,"x_min":125,"x_max":945,"o":"m 363 203 q 437 395 416 353 l 730 991 l 945 991 l 437 0 l 211 0 l 125 991 l 325 991 l 359 395 q 362 304 362 364 q 358 203 361 235 l 363 203 z "},"W":{"ha":1242,"x_min":125,"x_max":1372,"o":"m 682 690 q 604 488 651 591 l 385 0 l 155 0 l 125 991 l 319 991 l 323 450 q 321 333 323 415 q 314 215 318 251 l 318 215 q 363 337 333 258 q 404 436 394 416 l 654 991 l 838 991 l 852 399 q 846 215 852 300 l 850 215 q 939 452 879 302 l 1162 991 l 1372 991 l 933 0 l 699 0 l 684 489 l 682 583 q 685 690 682 643 l 682 690 z "},"X":{"ha":842,"x_min":-79,"x_max":950,"o":"m 762 0 l 538 0 l 421 368 l 153 0 l -79 0 l 311 518 l 150 991 l 367 991 l 471 640 l 717 991 l 950 991 l 581 500 l 762 0 z "},"Y":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 z "},"Z":{"ha":745,"x_min":-41,"x_max":814,"o":"m 624 0 l -41 0 l -16 136 l 511 818 l 143 818 l 179 991 l 814 991 l 786 854 l 256 174 l 660 174 l 624 0 z "},"[":{"ha":460,"x_min":-25,"x_max":554,"o":"m 296 -220 l -25 -220 l 233 991 l 554 991 l 524 848 l 378 848 l 180 -77 l 326 -77 l 296 -220 z "},"\\\\":{"ha":585,"x_min":150,"x_max":478,"o":"m 326 991 l 478 0 l 297 0 l 150 991 l 326 991 z "},"]":{"ha":460,"x_min":-93,"x_max":485,"o":"m -62 -77 l 82 -77 l 279 848 l 134 848 l 164 991 l 485 991 l 227 -220 l -93 -220 l -62 -77 z "},"^":{"ha":733,"x_min":14,"x_max":721,"o":"m 14 353 l 433 997 l 533 997 l 721 353 l 570 353 l 452 782 l 179 353 l 14 353 z "},"_":{"ha":555,"x_min":-126,"x_max":452,"o":"m 431 -220 l -126 -220 l -106 -125 l 452 -125 l 431 -220 z "},"`":{"ha":770,"x_min":345,"x_max":633,"o":"m 633 842 l 509 842 q 415 946 460 888 q 345 1050 369 1003 l 345 1064 l 555 1064 q 633 859 580 964 l 633 842 z "},"a":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 z "},"b":{"ha":827,"x_min":25,"x_max":765,"o":"m 551 772 q 708 699 650 772 q 765 497 765 626 q 719 248 765 368 q 592 57 673 127 q 414 -14 511 -14 q 227 97 282 -14 l 221 97 l 182 0 l 25 0 l 249 1055 l 453 1055 l 411 860 q 354 657 383 736 l 359 657 q 456 748 412 724 q 551 772 500 772 m 469 607 q 381 563 423 607 q 312 440 339 519 q 285 271 285 362 q 310 184 285 216 q 379 151 335 151 q 466 198 425 151 q 533 327 507 245 q 558 488 558 408 q 469 607 558 607 z "},"c":{"ha":671,"x_min":61,"x_max":685,"o":"m 343 -14 q 134 59 207 -14 q 61 265 61 132 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 299 184 268 217 q 385 151 330 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 z "},"d":{"ha":825,"x_min":61,"x_max":864,"o":"m 275 -14 q 118 59 176 -14 q 61 262 61 132 q 110 516 61 395 q 237 705 158 637 q 412 772 317 772 q 508 747 468 772 q 585 661 549 722 l 590 661 l 591 680 q 608 812 595 755 l 660 1055 l 864 1055 l 640 0 l 485 0 l 494 98 l 492 98 q 391 13 444 39 q 275 -14 338 -14 m 361 151 q 448 198 406 151 q 516 321 490 244 q 542 488 542 399 q 516 574 542 542 q 447 607 491 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 361 151 268 151 z "},"e":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 z "},"f":{"ha":518,"x_min":-149,"x_max":669,"o":"m -31 -334 q -149 -317 -101 -334 l -149 -153 q -71 -167 -107 -167 q 2 -140 -29 -167 q 46 -52 33 -113 l 184 603 l 74 603 l 94 701 l 218 758 l 231 815 q 325 1003 258 944 q 510 1063 391 1063 q 669 1029 599 1063 l 615 878 q 525 899 568 899 q 463 871 486 899 q 431 800 439 844 l 422 758 l 571 758 l 538 603 l 389 603 l 243 -82 q -31 -334 191 -334 z "},"g":{"ha":751,"x_min":-78,"x_max":804,"o":"m 804 757 l 781 644 l 663 616 q 673 536 673 581 q 591 327 673 404 q 368 250 509 250 q 301 257 328 250 q 244 204 244 239 q 264 171 244 181 q 325 155 285 161 l 418 143 q 579 86 528 129 q 629 -39 629 43 q 524 -258 629 -182 q 221 -334 418 -334 q 1 -282 80 -334 q -78 -142 -78 -231 q -32 -23 -78 -73 q 114 60 15 27 q 64 150 64 92 q 94 233 64 198 q 193 300 124 268 q 128 376 149 333 q 107 479 107 418 q 192 693 107 614 q 424 772 277 772 q 536 757 480 772 l 804 757 m 248 -4 q 139 -43 176 -14 q 102 -117 102 -72 q 233 -195 102 -195 q 388 -164 336 -195 q 440 -78 440 -134 q 418 -37 440 -52 q 325 -14 396 -23 l 248 -4 m 416 643 q 332 591 364 643 q 300 461 300 539 q 370 380 300 380 q 452 432 420 380 q 484 564 484 484 q 416 643 484 643 z "},"h":{"ha":839,"x_min":25,"x_max":768,"o":"m 663 0 l 458 0 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 249 1055 l 453 1055 q 412 867 427 932 q 354 657 398 801 l 359 657 q 453 741 401 709 q 572 772 505 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 663 0 z "},"i":{"ha":412,"x_min":25,"x_max":443,"o":"m 218 936 q 251 1025 218 995 q 342 1055 283 1055 q 417 1034 391 1055 q 443 974 443 1013 q 413 886 443 920 q 321 852 383 852 q 218 936 218 852 m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 z "},"j":{"ha":412,"x_min":-179,"x_max":444,"o":"m -61 -334 q -179 -317 -132 -334 l -179 -153 q -102 -167 -138 -167 q 16 -52 -9 -167 l 187 758 l 392 758 l 212 -82 q -61 -334 160 -334 m 220 936 q 252 1025 220 995 q 343 1055 284 1055 q 418 1034 393 1055 q 444 974 444 1013 q 414 886 444 920 q 322 852 385 852 q 220 936 220 852 z "},"k":{"ha":789,"x_min":25,"x_max":857,"o":"m 624 758 l 857 758 l 519 416 l 713 0 l 485 0 l 361 285 l 279 236 l 229 0 l 25 0 l 249 1055 l 453 1055 l 353 585 q 333 505 347 557 l 314 436 l 317 436 l 624 758 z "},"l":{"ha":412,"x_min":25,"x_max":453,"o":"m 229 0 l 25 0 l 249 1055 l 453 1055 l 229 0 z "},"m":{"ha":1257,"x_min":25,"x_max":1186,"o":"m 572 772 q 750 618 721 772 l 754 618 q 863 732 800 692 q 997 772 926 772 q 1138 715 1089 772 q 1186 554 1186 657 q 1171 432 1186 503 l 1080 0 l 876 0 l 970 443 q 981 524 981 489 q 914 607 981 607 q 801 531 852 607 q 721 315 751 455 l 656 0 l 452 0 l 545 443 q 555 524 555 489 q 489 607 555 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 z "},"n":{"ha":839,"x_min":25,"x_max":768,"o":"m 663 0 l 458 0 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 663 0 z "},"o":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 z "},"p":{"ha":827,"x_min":-46,"x_max":765,"o":"m 551 772 q 708 700 650 772 q 765 496 765 627 q 719 247 765 366 q 591 57 672 127 q 414 -14 511 -14 q 317 12 357 -14 q 241 97 276 37 l 236 97 q 207 -103 228 -11 l 158 -334 l -46 -334 l 186 758 l 342 758 l 330 643 l 336 643 q 551 772 430 772 m 469 607 q 380 561 423 607 q 311 439 337 515 q 285 271 285 363 q 310 184 285 216 q 379 151 335 151 q 466 198 425 151 q 533 327 507 245 q 558 488 558 408 q 469 607 558 607 z "},"q":{"ha":825,"x_min":61,"x_max":802,"o":"m 265 -14 q 159 19 205 -14 q 87 113 113 51 q 61 261 61 174 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 516 747 471 772 q 600 661 561 722 l 606 661 l 644 758 l 802 758 l 570 -334 l 366 -334 q 415 -105 397 -186 q 472 102 433 -24 l 467 102 q 370 12 418 38 q 265 -14 321 -14 m 363 151 q 449 199 406 151 q 517 321 492 246 q 542 488 542 397 q 516 574 542 542 q 447 607 491 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 293 181 268 211 q 363 151 317 151 z "},"r":{"ha":585,"x_min":25,"x_max":636,"o":"m 571 772 q 636 765 611 772 l 591 568 q 524 579 561 579 q 386 517 445 579 q 301 339 326 455 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 571 772 431 772 z "},"s":{"ha":657,"x_min":16,"x_max":629,"o":"m 562 250 q 478 55 562 123 q 243 -14 393 -14 q 116 -3 170 -14 q 16 31 62 7 l 16 199 q 232 138 122 138 q 321 160 286 138 q 355 220 355 182 q 330 272 355 249 q 241 330 305 295 q 127 422 159 376 q 94 530 94 468 q 169 709 94 646 q 383 772 244 772 q 629 708 519 772 l 562 562 q 387 619 467 619 q 325 602 349 619 q 301 555 301 585 q 323 509 301 529 q 404 458 345 489 q 525 366 488 416 q 562 250 562 315 z "},"t":{"ha":570,"x_min":64,"x_max":596,"o":"m 349 151 q 458 175 393 151 l 458 22 q 278 -14 383 -14 q 129 29 176 -14 q 81 161 81 72 q 89 237 81 195 l 167 603 l 64 603 l 83 703 l 216 760 l 306 920 l 437 920 l 404 758 l 596 758 l 562 603 l 371 603 l 293 237 q 289 201 289 217 q 349 151 289 151 z "},"u":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 z "},"v":{"ha":711,"x_min":69,"x_max":791,"o":"m 309 204 q 371 355 346 308 l 572 758 l 791 758 l 382 0 l 163 0 l 69 758 l 269 758 l 300 361 q 304 204 304 271 l 309 204 z "},"w":{"ha":1095,"x_min":85,"x_max":1165,"o":"m 581 583 q 497 367 538 463 l 339 0 l 119 0 l 85 758 l 275 758 l 278 422 l 275 309 l 271 193 l 273 193 q 283 221 277 207 q 317 314 288 236 q 349 395 347 392 l 505 758 l 728 758 l 728 395 q 721 193 728 298 l 725 193 l 744 248 q 808 422 793 389 l 957 758 l 1165 758 l 806 0 l 582 0 l 578 353 q 585 583 578 458 l 581 583 z "},"x":{"ha":737,"x_min":-68,"x_max":806,"o":"m 257 389 l 104 758 l 322 758 l 400 532 l 566 758 l 806 758 l 489 378 l 654 0 l 433 0 l 349 232 l 170 0 l -68 0 l 257 389 z "},"y":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 z "},"z":{"ha":632,"x_min":-32,"x_max":656,"o":"m 507 0 l -32 0 l -8 122 l 382 600 l 113 600 l 147 758 l 656 758 l 627 623 l 243 158 l 541 158 l 507 0 z "},"{":{"ha":493,"x_min":-5,"x_max":589,"o":"m 136 216 q -5 311 136 311 l 25 467 q 156 495 108 467 q 218 589 203 523 l 260 782 q 349 944 286 897 q 532 991 412 991 l 589 991 l 555 839 q 467 815 494 838 q 429 743 439 793 l 385 542 q 197 382 354 401 l 197 376 q 283 320 255 359 q 311 229 311 282 q 301 153 311 199 l 277 32 q 272 -3 272 13 q 295 -53 272 -39 q 357 -66 317 -66 l 357 -220 l 321 -220 q 149 -177 208 -220 q 90 -52 90 -134 q 100 33 90 -13 l 126 158 q 136 216 136 205 z "},"|":{"ha":765,"x_min":309,"x_max":457,"o":"m 309 1051 l 457 1051 l 457 -315 l 309 -315 l 309 1051 z "},"}":{"ha":493,"x_min":-68,"x_max":500,"o":"m 174 991 q 404 823 404 991 q 395 739 404 785 l 368 614 q 358 555 358 567 q 500 461 358 461 l 469 306 q 339 277 387 306 q 277 183 291 249 l 235 -9 q 146 -172 210 -125 q -37 -220 83 -220 l -68 -220 l -68 -66 q 25 -42 -5 -64 q 65 29 55 -20 l 110 231 q 174 343 127 306 q 297 390 222 380 l 297 396 q 183 543 183 431 q 193 619 183 572 l 218 741 q 222 775 222 761 q 198 825 222 812 q 123 839 173 839 l 151 991 l 174 991 z "},"~":{"ha":765,"x_min":74,"x_max":720,"o":"m 232 456 q 153 433 195 456 q 74 374 111 411 l 74 530 q 248 604 142 604 q 327 595 291 604 q 421 561 363 585 q 496 533 465 543 q 561 524 528 524 q 637 544 595 524 q 720 606 678 565 l 720 449 q 546 375 650 375 q 472 383 506 375 q 372 418 438 391 q 286 450 312 444 q 232 456 260 456 z "}," ":{"ha":361,"x_min":0,"x_max":0,"o":""},"¡":{"ha":397,"x_min":-50,"x_max":372,"o":"m 123 411 l 288 411 l 180 -252 l -50 -252 l 123 411 m 372 663 q 335 564 372 600 q 233 528 297 528 q 160 553 187 528 q 132 627 132 579 q 169 721 132 684 q 267 758 205 758 q 344 733 316 758 q 372 663 372 708 z "},"¢":{"ha":765,"x_min":111,"x_max":734,"o":"m 390 -14 l 262 -14 l 296 129 q 158 221 205 153 q 111 396 111 289 q 154 637 111 527 q 274 815 196 747 q 456 899 353 883 l 478 1006 l 606 1006 l 582 899 q 734 854 662 889 l 672 699 q 601 726 636 714 q 521 737 566 737 q 374 640 431 737 q 318 412 318 543 q 349 315 318 347 q 435 282 379 282 q 530 298 486 282 q 621 338 574 314 l 621 171 q 418 117 528 123 l 390 -14 z "},"£":{"ha":765,"x_min":-8,"x_max":842,"o":"m 591 1007 q 842 949 724 1007 l 765 791 q 604 838 669 838 q 521 811 553 838 q 475 721 488 784 l 443 566 l 646 566 l 615 416 l 412 416 l 400 359 q 258 176 372 227 l 703 176 l 665 0 l -8 0 l 25 167 q 191 346 158 199 l 205 416 l 75 416 l 106 566 l 236 566 l 269 733 q 379 937 297 867 q 591 1007 461 1007 z "},"¤":{"ha":765,"x_min":78,"x_max":718,"o":"m 129 490 q 165 624 129 559 l 78 710 l 178 810 l 264 724 q 397 760 326 760 q 530 722 469 760 l 616 810 l 718 713 l 631 625 q 667 490 667 565 q 631 355 667 418 l 715 271 l 616 172 l 530 257 q 397 222 466 222 q 262 257 319 222 l 178 174 l 79 272 l 165 357 q 129 490 129 420 m 269 490 q 306 400 269 438 q 397 363 343 363 q 490 400 452 363 q 528 490 528 437 q 489 582 528 545 q 397 619 451 619 q 307 581 345 619 q 269 490 269 543 z "},"¥":{"ha":765,"x_min":60,"x_max":875,"o":"m 412 591 l 664 991 l 875 991 l 532 485 l 669 485 l 643 364 l 472 364 l 453 271 l 624 271 l 599 150 l 428 150 l 396 0 l 199 0 l 231 150 l 60 150 l 85 271 l 256 271 l 275 364 l 104 364 l 131 485 l 264 485 l 134 991 l 335 991 l 412 591 z "},"¦":{"ha":765,"x_min":309,"x_max":457,"o":"m 309 1051 l 457 1051 l 457 498 l 309 498 l 309 1051 m 309 237 l 457 237 l 457 -315 l 309 -315 l 309 237 z "},"§":{"ha":675,"x_min":14,"x_max":697,"o":"m 102 515 q 134 626 102 576 q 239 722 166 676 q 191 780 210 745 q 172 852 172 814 q 252 1011 172 954 q 464 1069 331 1069 q 697 1010 581 1069 l 642 879 q 450 936 542 936 q 353 864 353 936 q 380 812 353 835 q 467 764 408 790 q 631 558 631 692 q 500 353 631 431 q 543 295 526 329 q 561 221 561 260 q 475 49 561 112 q 241 -14 390 -14 q 14 37 103 -14 l 14 189 q 248 118 130 118 q 346 142 315 118 q 376 204 376 165 q 354 253 376 231 q 268 307 332 276 q 145 396 189 346 q 102 515 102 446 m 343 656 q 288 608 309 639 q 267 541 267 577 q 296 475 267 504 q 393 415 326 446 q 445 468 427 436 q 463 533 463 500 q 343 656 463 607 z "},"¨":{"ha":770,"x_min":269,"x_max":742,"o":"m 269 937 q 298 1017 269 990 q 379 1044 327 1044 q 469 971 469 1044 q 443 892 469 922 q 361 863 416 863 q 269 937 269 863 m 542 937 q 570 1017 542 990 q 652 1044 599 1044 q 719 1025 696 1044 q 742 971 742 1006 q 715 892 742 922 q 633 863 688 863 q 542 937 542 863 z "},"©":{"ha":1156,"x_min":85,"x_max":1104,"o":"m 632 685 q 522 635 557 685 q 486 490 486 586 q 524 353 486 399 q 632 306 562 306 q 706 316 661 306 q 790 346 750 327 l 790 216 q 612 178 701 178 q 404 261 479 178 q 329 489 329 344 q 409 727 329 642 q 629 812 488 812 q 822 764 726 812 l 771 646 q 632 685 694 685 m 85 496 q 153 750 85 631 q 339 937 220 869 q 595 1006 458 1006 q 848 939 730 1006 q 1035 752 966 871 q 1104 496 1104 632 q 1037 243 1104 361 q 852 56 970 125 q 595 -14 734 -14 q 336 57 454 -14 q 151 244 217 127 q 85 496 85 361 m 180 496 q 236 289 180 385 q 388 138 291 193 q 595 82 484 82 q 804 138 708 82 q 954 290 899 195 q 1008 496 1008 385 q 954 702 1008 606 q 803 853 899 797 q 595 909 707 909 q 387 853 484 909 q 235 702 290 798 q 180 496 180 606 z "},"ª":{"ha":524,"x_min":103,"x_max":595,"o":"m 250 510 q 142 557 180 510 q 103 692 103 605 q 134 846 103 771 q 218 962 165 922 q 338 1003 270 1003 q 460 933 419 1003 l 464 933 l 490 994 l 595 994 l 488 518 l 383 518 l 389 581 l 387 581 q 250 510 333 510 m 300 612 q 357 641 330 612 q 401 722 383 669 q 419 827 419 775 q 359 899 419 899 q 276 833 310 899 q 241 688 241 768 q 300 612 241 612 z "},"«":{"ha":781,"x_min":49,"x_max":781,"o":"m 49 386 l 321 700 l 450 595 l 261 368 l 353 131 l 186 61 l 49 374 l 49 386 m 379 386 l 652 700 l 781 595 l 591 368 l 684 131 l 517 61 l 379 374 l 379 386 z "},"¬":{"ha":765,"x_min":74,"x_max":720,"o":"m 720 168 l 571 168 l 571 415 l 74 415 l 74 564 l 720 564 l 720 168 z "},"­":{"ha":447,"x_min":28,"x_max":419,"o":"m 28 288 l 64 457 l 419 457 l 383 288 l 28 288 z "},"®":{"ha":1156,"x_min":85,"x_max":1104,"o":"m 839 610 q 809 508 839 551 q 721 443 779 465 l 854 199 l 682 199 l 589 400 l 543 400 l 543 199 l 387 199 l 387 791 l 596 791 q 776 746 713 791 q 839 610 839 700 m 543 514 l 578 514 q 654 535 627 514 q 682 597 682 556 q 658 657 682 637 q 579 677 634 677 l 543 677 l 543 514 m 85 496 q 153 750 85 631 q 339 937 220 869 q 595 1006 458 1006 q 848 939 730 1006 q 1035 752 966 871 q 1104 496 1104 632 q 1037 243 1104 361 q 852 56 970 125 q 595 -14 734 -14 q 336 57 454 -14 q 151 244 217 127 q 85 496 85 361 m 180 496 q 236 289 180 385 q 388 138 291 193 q 595 82 484 82 q 804 138 708 82 q 954 290 899 195 q 1008 496 1008 385 q 954 702 1008 606 q 803 853 899 797 q 595 909 707 909 q 387 853 484 909 q 235 702 290 798 q 180 496 180 606 z "},"¯":{"ha":694,"x_min":-4,"x_max":729,"o":"m 699 1055 l -4 1055 l 26 1192 l 729 1192 l 699 1055 z "},"°":{"ha":595,"x_min":111,"x_max":581,"o":"m 111 771 q 143 889 111 834 q 229 975 174 943 q 346 1006 284 1006 q 464 974 409 1006 q 549 888 518 942 q 581 771 581 833 q 549 654 581 708 q 464 569 518 600 q 346 538 410 538 q 229 568 283 538 q 143 653 174 599 q 111 771 111 707 m 240 771 q 271 697 240 728 q 346 667 302 667 q 421 698 391 667 q 452 771 452 729 q 421 846 452 814 q 346 878 390 878 q 271 845 302 878 q 240 771 240 813 z "},"±":{"ha":765,"x_min":74,"x_max":720,"o":"m 322 457 l 74 457 l 74 606 l 322 606 l 322 856 l 471 856 l 471 606 l 720 606 l 720 457 l 471 457 l 471 210 l 322 210 l 322 457 m 74 0 l 74 149 l 720 149 l 720 0 l 74 0 z "},"²":{"ha":526,"x_min":40,"x_max":550,"o":"m 479 397 l 40 397 l 64 510 l 249 659 q 345 741 324 720 q 375 781 365 762 q 385 819 385 800 q 367 861 385 848 q 326 875 350 875 q 199 819 268 875 l 131 926 q 237 985 181 965 q 367 1006 292 1006 q 500 963 450 1006 q 550 854 550 920 q 535 771 550 807 q 488 701 520 735 q 359 597 455 667 l 272 533 l 507 533 l 479 397 z "},"³":{"ha":526,"x_min":62,"x_max":551,"o":"m 551 861 q 517 763 551 802 q 404 703 482 723 l 404 700 q 509 581 509 677 q 436 439 509 492 q 243 386 363 386 q 144 396 192 386 q 62 424 96 407 l 62 554 q 235 505 147 505 q 319 526 286 505 q 353 586 353 547 q 335 628 353 611 q 275 646 317 646 l 189 646 l 212 754 l 273 754 q 363 773 330 754 q 396 831 396 792 q 378 871 396 858 q 330 885 361 885 q 203 840 272 885 l 147 942 q 359 1004 243 1004 q 499 967 448 1004 q 551 861 551 929 z "},"´":{"ha":770,"x_min":328,"x_max":705,"o":"m 328 859 q 478 1064 381 918 l 705 1064 l 705 1053 q 601 949 674 1015 q 469 842 528 884 l 328 842 l 328 859 z "},"µ":{"ha":847,"x_min":-46,"x_max":823,"o":"m 288 236 q 309 173 288 195 q 363 151 330 151 q 473 223 424 151 q 553 440 522 296 l 619 758 l 823 758 l 663 0 l 507 0 l 519 119 l 515 119 q 335 -14 436 -14 q 274 0 300 -14 q 235 32 248 13 l 231 32 q 216 -62 225 -13 q 160 -334 207 -112 l -46 -334 l 186 758 l 390 758 l 298 321 q 288 236 288 273 z "},"¶":{"ha":909,"x_min":100,"x_max":815,"o":"m 815 -176 l 705 -176 l 705 920 l 593 920 l 593 -176 l 484 -176 l 484 379 q 385 367 441 367 q 169 452 238 367 q 100 707 100 536 q 173 968 100 880 q 406 1055 245 1055 l 815 1055 l 815 -176 z "},"·":{"ha":396,"x_min":89,"x_max":329,"o":"m 89 471 q 125 569 89 532 q 227 606 161 606 q 301 580 273 606 q 329 507 329 554 q 292 412 329 448 q 194 375 254 375 q 117 400 144 375 q 89 471 89 426 z "},"¸":{"ha":285,"x_min":-140,"x_max":178,"o":"m 178 -170 q 121 -291 178 -248 q -37 -334 65 -334 q -140 -318 -96 -334 l -140 -204 q -56 -220 -98 -220 q 14 -164 14 -220 q -7 -126 14 -141 q -82 -104 -28 -111 l -17 0 l 109 0 l 82 -49 q 178 -170 178 -82 z "},"¹":{"ha":526,"x_min":87,"x_max":498,"o":"m 358 991 l 498 991 l 372 397 l 205 397 l 262 667 q 300 807 279 741 q 245 766 289 797 l 157 711 l 87 823 l 358 991 z "},"º":{"ha":511,"x_min":110,"x_max":549,"o":"m 549 810 q 516 652 549 723 q 426 546 483 581 q 293 510 369 510 q 156 561 202 510 q 110 704 110 612 q 180 920 110 838 q 368 1003 251 1003 q 502 953 456 1003 q 549 810 549 903 m 354 892 q 281 831 311 892 q 252 696 252 770 q 306 621 252 621 q 377 679 349 621 q 406 819 406 736 q 354 892 406 892 z "},"»":{"ha":781,"x_min":0,"x_max":732,"o":"m 732 363 l 460 49 l 330 154 l 519 380 l 428 618 l 595 688 l 732 375 l 732 363 m 401 363 l 129 49 l 0 154 l 189 380 l 97 618 l 264 688 l 401 375 l 401 363 z "},"¼":{"ha":1223,"x_min":66,"x_max":1092,"o":"m 1017 991 l 282 0 l 120 0 l 857 991 l 1017 991 m 336 991 l 477 991 l 351 397 l 184 397 l 241 667 q 278 807 257 741 q 224 766 267 797 l 135 711 l 66 823 l 336 991 m 1067 103 l 986 103 l 964 1 l 803 1 l 825 103 l 572 103 l 593 221 l 916 599 l 1092 599 l 1010 217 l 1090 217 l 1067 103 m 849 217 l 888 374 l 903 424 q 874 385 895 410 q 731 217 854 359 l 849 217 z "},"½":{"ha":1223,"x_min":66,"x_max":1147,"o":"m 1077 1 l 637 1 l 661 113 l 846 262 q 942 345 922 323 q 972 385 962 366 q 982 422 982 404 q 965 465 982 451 q 924 478 947 478 q 796 422 865 478 l 728 530 q 834 589 779 568 q 964 609 890 609 q 1098 566 1048 609 q 1147 458 1147 524 q 1133 374 1147 410 q 1085 304 1118 338 q 957 201 1053 270 l 869 136 l 1105 136 l 1077 1 m 336 991 l 477 991 l 351 397 l 184 397 l 241 667 q 278 807 257 741 q 224 766 267 797 l 135 711 l 66 823 l 336 991 m 1017 991 l 282 0 l 120 0 l 857 991 l 1017 991 z "},"¾":{"ha":1223,"x_min":90,"x_max":1133,"o":"m 1107 991 l 372 0 l 210 0 l 947 991 l 1107 991 m 1108 103 l 1027 103 l 1006 1 l 844 1 l 867 103 l 614 103 l 635 221 l 957 599 l 1133 599 l 1051 217 l 1132 217 l 1108 103 m 890 217 l 930 374 l 945 424 q 916 385 936 410 q 772 217 895 359 l 890 217 m 579 861 q 545 763 579 802 q 432 703 510 723 l 432 700 q 536 581 536 677 q 464 439 536 492 q 271 386 391 386 q 172 396 220 386 q 90 424 124 407 l 90 554 q 262 505 175 505 q 347 526 314 505 q 380 586 380 547 q 363 628 380 611 q 303 646 345 646 l 217 646 l 240 754 l 301 754 q 391 773 358 754 q 424 831 424 792 q 406 871 424 858 q 358 885 389 885 q 231 840 300 885 l 175 942 q 387 1004 271 1004 q 527 967 475 1004 q 579 861 579 929 z "},"¿":{"ha":637,"x_min":-46,"x_max":524,"o":"m 460 411 l 450 358 q 398 236 437 287 q 283 134 359 185 q 177 48 201 77 q 154 -18 154 19 q 244 -98 154 -98 q 316 -87 278 -98 q 453 -31 355 -77 l 515 -180 q 214 -265 366 -265 q 24 -206 94 -265 q -46 -40 -46 -146 q -27 61 -46 16 q 30 145 -7 106 q 158 244 67 184 q 245 316 221 286 q 279 389 269 347 l 285 411 l 460 411 m 524 663 q 486 564 524 600 q 385 528 448 528 q 311 553 338 528 q 283 627 283 579 q 320 722 283 685 q 418 758 357 758 q 495 733 467 758 q 524 663 524 708 z "},"À":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 654 1071 l 530 1071 q 436 1175 481 1118 q 366 1279 390 1232 l 366 1293 l 576 1293 q 654 1088 601 1193 l 654 1071 z "},"Á":{"ha":872,"x_min":-83,"x_max":876,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 498 1088 q 649 1293 552 1147 l 876 1293 l 876 1282 q 772 1178 845 1244 q 640 1071 699 1113 l 498 1071 l 498 1088 z "},"Â":{"ha":872,"x_min":-83,"x_max":838,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 838 1071 l 703 1071 q 593 1185 661 1107 q 436 1071 522 1125 l 289 1071 l 289 1088 q 393 1187 332 1126 q 489 1293 454 1249 l 718 1293 q 768 1197 733 1257 q 838 1088 804 1137 l 838 1071 z "},"Ã":{"ha":872,"x_min":-83,"x_max":872,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 677 1071 q 619 1082 644 1071 q 572 1106 593 1093 q 530 1131 550 1120 q 488 1142 510 1142 q 450 1123 467 1142 q 424 1069 433 1104 l 304 1069 q 494 1279 344 1279 q 554 1268 528 1279 q 602 1243 580 1257 q 644 1219 625 1230 q 685 1208 664 1208 q 724 1226 708 1208 q 755 1280 741 1243 l 872 1280 q 677 1071 827 1071 z "},"Ä":{"ha":872,"x_min":-83,"x_max":823,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 350 1166 q 379 1246 350 1219 q 460 1274 408 1274 q 550 1200 550 1274 q 524 1121 550 1151 q 441 1092 497 1092 q 350 1166 350 1092 m 623 1166 q 651 1246 623 1219 q 732 1274 680 1274 q 800 1255 777 1274 q 823 1200 823 1236 q 796 1121 823 1151 q 714 1092 769 1092 q 623 1166 623 1092 z "},"Å":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 737 1063 q 690 945 737 990 q 565 900 642 900 q 444 943 490 900 q 397 1061 397 986 q 443 1179 397 1135 q 565 1222 490 1222 q 688 1178 640 1222 q 737 1063 737 1134 m 631 1061 q 612 1109 631 1092 q 565 1126 593 1126 q 518 1109 536 1126 q 500 1061 500 1092 q 516 1013 500 1031 q 565 996 532 996 q 612 1013 593 996 q 631 1061 631 1031 z "},"Æ":{"ha":1243,"x_min":-83,"x_max":1291,"o":"m 1080 0 l 526 0 l 576 236 l 288 236 l 139 0 l -83 0 l 542 991 l 1291 991 l 1254 819 l 907 819 l 861 602 l 1185 602 l 1147 429 l 823 429 l 770 174 l 1117 174 l 1080 0 m 614 412 l 700 819 l 646 819 l 399 412 l 614 412 z "},"Ç":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 453 777 524 832 q 338 615 381 722 q 294 386 294 509 q 341 218 294 273 q 489 163 387 163 q 718 215 588 163 l 718 39 q 447 -14 583 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 764 992 699 1007 q 905 936 830 977 l 825 766 q 707 819 753 806 q 614 832 660 832 m 559 -170 q 503 -291 559 -248 q 345 -334 447 -334 q 241 -318 286 -334 l 241 -204 q 326 -220 284 -220 q 395 -164 395 -220 q 374 -126 395 -141 q 300 -104 353 -111 l 365 0 l 490 0 l 464 -49 q 559 -170 559 -82 z "},"È":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 614 1071 l 490 1071 q 396 1175 441 1118 q 326 1279 350 1232 l 326 1293 l 536 1293 q 614 1088 561 1193 l 614 1071 z "},"É":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 412 1088 q 563 1293 466 1147 l 790 1293 l 790 1282 q 686 1178 759 1244 q 554 1071 612 1113 l 412 1071 l 412 1088 z "},"Ê":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 798 1071 l 664 1071 q 554 1185 621 1107 q 397 1071 483 1125 l 250 1071 l 250 1088 q 353 1187 292 1126 q 450 1293 414 1249 l 679 1293 q 729 1197 694 1257 q 798 1088 764 1137 l 798 1071 z "},"Ë":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 297 1166 q 326 1246 297 1219 q 407 1274 355 1274 q 497 1200 497 1274 q 471 1121 497 1151 q 389 1092 444 1092 q 297 1166 297 1092 m 570 1166 q 598 1246 570 1219 q 680 1274 627 1274 q 747 1255 724 1274 q 770 1200 770 1236 q 743 1121 770 1151 q 661 1092 716 1092 q 570 1166 570 1092 z "},"Ð":{"ha":940,"x_min":25,"x_max":897,"o":"m 897 616 q 831 287 897 427 q 638 73 764 146 q 342 0 513 0 l 36 0 l 121 404 l 25 404 l 62 576 l 157 576 l 245 991 l 514 991 q 797 895 697 991 q 897 616 897 798 m 351 174 q 526 225 452 174 q 643 377 601 277 q 685 606 685 477 q 636 765 685 710 q 494 819 587 819 l 416 819 l 366 576 l 526 576 l 489 404 l 328 404 l 279 174 l 351 174 z "},"Ñ":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 846 0 l 614 0 l 372 750 l 368 750 l 366 728 q 321 467 344 582 l 222 0 l 36 0 l 245 991 l 488 991 l 718 261 l 721 261 q 747 408 729 313 q 869 991 766 504 l 1055 991 l 846 0 m 755 1071 q 697 1082 722 1071 q 650 1106 671 1093 q 608 1131 628 1120 q 566 1142 588 1142 q 528 1123 545 1142 q 502 1069 511 1104 l 382 1069 q 572 1279 422 1279 q 632 1268 606 1279 q 680 1243 658 1257 q 722 1219 703 1230 q 763 1208 742 1208 q 802 1226 786 1208 q 833 1280 819 1243 l 950 1280 q 755 1071 905 1071 z "},"Ò":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 714 1071 l 589 1071 q 495 1175 541 1118 q 425 1279 450 1232 l 425 1293 l 636 1293 q 714 1088 661 1193 l 714 1071 z "},"Ó":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 511 1088 q 661 1293 564 1147 l 888 1293 l 888 1282 q 784 1178 857 1244 q 652 1071 711 1113 l 511 1071 l 511 1088 z "},"Ô":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 887 1071 l 753 1071 q 643 1185 710 1107 q 486 1071 572 1125 l 338 1071 l 338 1088 q 442 1187 381 1126 q 538 1293 503 1249 l 768 1293 q 818 1197 783 1257 q 887 1088 853 1137 l 887 1071 z "},"Õ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 726 1071 q 668 1082 693 1071 q 621 1106 642 1093 q 579 1131 599 1120 q 536 1142 559 1142 q 499 1123 515 1142 q 473 1069 482 1104 l 353 1069 q 543 1279 393 1279 q 603 1268 576 1279 q 651 1243 629 1257 q 693 1219 673 1230 q 734 1208 713 1208 q 773 1226 757 1208 q 804 1280 789 1243 l 921 1280 q 726 1071 876 1071 z "},"Ö":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 397 1166 q 426 1246 397 1219 q 507 1274 454 1274 q 597 1200 597 1274 q 570 1121 597 1151 q 488 1092 544 1092 q 397 1166 397 1092 m 669 1166 q 698 1246 669 1219 q 779 1274 726 1274 q 846 1255 823 1274 q 869 1200 869 1236 q 843 1121 869 1151 q 761 1092 816 1092 q 669 1166 669 1092 z "},"×":{"ha":765,"x_min":87,"x_max":705,"o":"m 290 490 l 87 694 l 191 799 l 395 596 l 602 799 l 705 697 l 498 490 l 703 285 l 602 182 l 395 386 l 191 183 l 89 286 l 290 490 z "},"Ø":{"ha":1014,"x_min":68,"x_max":989,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 245 35 330 -14 l 172 -58 l 68 20 l 150 122 q 83 364 83 216 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 815 956 732 1007 l 886 1044 l 989 965 l 909 867 q 971 636 971 776 m 590 836 q 435 774 505 836 q 326 603 365 712 q 288 364 288 494 q 293 296 288 342 l 697 807 q 590 836 650 836 m 768 631 l 765 685 l 366 183 q 469 158 406 158 q 623 218 553 158 q 730 386 692 279 q 768 631 768 494 z "},"Ù":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 680 1071 l 555 1071 q 461 1175 507 1118 q 391 1279 415 1232 l 391 1293 l 602 1293 q 680 1088 626 1193 l 680 1071 z "},"Ú":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 513 1088 q 664 1293 567 1147 l 891 1293 l 891 1282 q 787 1178 860 1244 q 655 1071 713 1113 l 513 1071 l 513 1088 z "},"Û":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 871 1071 l 736 1071 q 627 1185 694 1107 q 469 1071 555 1125 l 322 1071 l 322 1088 q 426 1187 365 1126 q 522 1293 487 1249 l 751 1293 q 802 1197 766 1257 q 871 1088 837 1137 l 871 1071 z "},"Ü":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 383 1166 q 412 1246 383 1219 q 493 1274 441 1274 q 583 1200 583 1274 q 557 1121 583 1151 q 475 1092 530 1092 q 383 1166 383 1092 m 656 1166 q 684 1246 656 1219 q 766 1274 713 1274 q 833 1255 810 1274 q 856 1200 856 1236 q 829 1121 856 1151 q 747 1092 802 1092 q 656 1166 656 1092 z "},"Ý":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 m 411 1088 q 562 1293 465 1147 l 789 1293 l 789 1282 q 684 1178 758 1244 q 553 1071 611 1113 l 411 1071 l 411 1088 z "},"Þ":{"ha":806,"x_min":36,"x_max":775,"o":"m 775 547 q 660 291 775 382 q 343 199 544 199 l 285 199 l 243 0 l 36 0 l 245 991 l 453 991 l 419 836 l 443 836 q 691 764 607 836 q 775 547 775 692 m 322 371 l 359 371 q 510 416 454 371 q 567 542 567 461 q 435 664 567 664 l 385 664 l 322 371 z "},"ß":{"ha":916,"x_min":-176,"x_max":882,"o":"m 574 1063 q 798 1002 715 1063 q 882 839 882 941 q 848 709 882 762 q 728 606 815 656 q 663 559 678 577 q 647 522 647 541 q 662 489 647 507 q 715 441 677 471 q 813 339 788 385 q 839 237 839 294 q 755 54 839 122 q 526 -14 671 -14 q 325 28 399 -14 l 325 191 q 500 138 412 138 q 600 160 568 138 q 632 218 632 182 q 614 269 632 245 q 541 335 596 293 q 453 423 477 384 q 429 509 429 463 q 460 607 429 566 q 570 693 490 648 q 641 745 614 718 q 667 810 667 771 q 640 877 667 852 q 555 901 613 901 q 450 866 490 901 q 392 750 409 831 l 220 -77 q 120 -272 191 -211 q -68 -334 50 -334 q -176 -317 -129 -334 l -176 -153 q -98 -167 -135 -167 q 17 -46 -8 -167 l 189 772 q 313 994 221 924 q 574 1063 404 1063 z "},"à":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 589 842 l 465 842 q 371 946 416 888 q 300 1050 325 1003 l 300 1064 l 511 1064 q 589 859 536 964 l 589 842 z "},"á":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 406 859 q 556 1064 459 918 l 783 1064 l 783 1053 q 679 949 752 1015 q 547 842 606 884 l 406 842 l 406 859 z "},"â":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 760 841 l 625 841 q 515 955 583 877 q 358 841 444 895 l 211 841 l 211 858 q 315 958 254 897 q 411 1063 376 1019 l 640 1063 q 690 967 655 1027 q 760 858 726 907 l 760 841 z "},"ã":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 600 842 q 541 853 566 842 q 494 877 515 864 q 452 902 472 890 q 410 913 432 913 q 372 894 389 913 q 346 840 355 875 l 226 840 q 416 1050 266 1050 q 476 1039 450 1050 q 524 1014 502 1027 q 566 990 547 1001 q 607 979 586 979 q 646 997 630 979 q 677 1051 663 1014 l 794 1051 q 600 842 749 842 z "},"ä":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 269 937 q 298 1017 269 990 q 379 1044 327 1044 q 469 971 469 1044 q 443 892 469 922 q 361 863 416 863 q 269 937 269 863 m 542 937 q 570 1017 542 990 q 652 1044 599 1044 q 719 1025 696 1044 q 742 971 742 1006 q 715 892 742 922 q 633 863 688 863 q 542 937 542 863 z "},"å":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 694 1003 q 646 885 694 930 q 522 840 599 840 q 400 883 447 840 q 353 1002 353 926 q 400 1119 353 1076 q 522 1162 446 1162 q 645 1118 596 1162 q 694 1003 694 1074 m 587 1002 q 569 1049 587 1032 q 522 1067 550 1067 q 475 1049 493 1067 q 456 1002 456 1032 q 473 954 456 971 q 522 936 489 936 q 569 954 550 936 q 587 1002 587 971 z "},"æ":{"ha":1211,"x_min":61,"x_max":1177,"o":"m 818 -14 q 696 5 744 -14 q 616 64 648 23 l 606 0 l 478 0 l 488 98 l 484 98 q 384 13 435 39 q 271 -14 333 -14 q 116 60 172 -14 q 61 261 61 134 q 107 516 61 397 q 233 704 154 635 q 408 772 312 772 q 517 746 473 772 q 595 661 561 720 l 599 661 l 637 758 l 765 758 l 753 697 q 834 751 783 730 q 949 772 886 772 q 1116 716 1055 772 q 1177 566 1177 659 q 1063 370 1177 439 q 741 301 950 301 l 705 301 l 704 288 l 704 275 q 742 175 704 210 q 850 140 779 140 q 953 156 895 140 q 1063 199 1011 172 l 1063 45 q 818 -14 941 -14 m 351 151 q 442 197 400 151 q 509 322 484 243 q 534 488 534 401 q 512 574 534 542 q 443 607 490 607 q 356 560 397 607 q 292 434 315 513 q 268 271 268 355 q 290 182 268 214 q 351 151 312 151 m 909 625 q 797 571 850 625 q 728 439 744 517 l 758 439 q 922 472 863 439 q 981 561 981 505 q 909 625 981 625 z "},"ç":{"ha":671,"x_min":61,"x_max":685,"o":"m 343 -14 q 134 59 207 -14 q 61 265 61 132 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 299 184 268 217 q 385 151 330 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 m 443 -170 q 387 -291 443 -248 q 228 -334 330 -334 q 125 -318 170 -334 l 125 -204 q 210 -220 168 -220 q 279 -164 279 -220 q 258 -126 279 -141 q 183 -104 237 -111 l 248 0 l 374 0 l 347 -49 q 443 -170 443 -82 z "},"è":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 576 842 l 451 842 q 357 946 403 888 q 287 1050 311 1003 l 287 1064 l 498 1064 q 576 859 522 964 l 576 842 z "},"é":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 358 859 q 509 1064 412 918 l 736 1064 l 736 1053 q 631 949 705 1015 q 500 842 558 884 l 358 842 l 358 859 z "},"ê":{"ha":774,"x_min":61,"x_max":747,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 747 842 l 612 842 q 503 956 570 878 q 345 842 431 896 l 198 842 l 198 859 q 302 958 241 897 q 398 1064 363 1019 l 627 1064 q 677 967 642 1027 q 747 859 713 907 l 747 842 z "},"ë":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 248 937 q 276 1017 248 990 q 357 1044 305 1044 q 448 971 448 1044 q 421 892 448 922 q 339 863 395 863 q 248 937 248 863 m 520 937 q 549 1017 520 990 q 630 1044 577 1044 q 697 1025 674 1044 q 720 971 720 1006 q 693 892 720 922 q 612 863 667 863 q 520 937 520 863 z "},"ì":{"ha":412,"x_min":25,"x_max":393,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 393 842 l 268 842 q 174 946 220 888 q 104 1050 128 1003 l 104 1064 l 315 1064 q 393 859 339 964 l 393 842 z "},"í":{"ha":412,"x_min":25,"x_max":575,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 197 859 q 348 1064 251 918 l 575 1064 l 575 1053 q 471 949 544 1015 q 339 842 397 884 l 197 842 l 197 859 z "},"î":{"ha":412,"x_min":24,"x_max":573,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 573 842 l 439 842 q 329 956 396 878 q 172 842 258 896 l 24 842 l 24 859 q 128 958 67 897 q 224 1064 189 1019 l 454 1064 q 504 967 469 1027 q 573 859 539 907 l 573 842 z "},"ï":{"ha":412,"x_min":25,"x_max":558,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 85 937 q 114 1017 85 990 q 195 1044 143 1044 q 286 971 286 1044 q 259 892 286 922 q 177 863 233 863 q 85 937 85 863 m 358 937 q 387 1017 358 990 q 468 1044 415 1044 q 535 1025 512 1044 q 558 971 558 1006 q 531 892 558 922 q 450 863 505 863 q 358 937 358 863 z "},"ð":{"ha":802,"x_min":49,"x_max":785,"o":"m 419 888 q 335 942 396 911 l 415 1068 q 572 974 506 1027 l 733 1063 l 785 960 l 654 888 q 731 728 709 815 q 753 539 753 642 q 706 246 753 370 q 568 54 659 121 q 349 -14 477 -14 q 125 61 202 -14 q 49 275 49 136 q 93 479 49 387 q 215 623 136 572 q 395 675 294 675 q 497 654 451 675 q 575 590 544 633 l 579 590 q 500 800 566 734 l 343 711 l 283 811 l 419 888 m 358 139 q 441 177 403 139 q 502 277 479 214 q 524 408 524 340 q 497 491 524 460 q 424 522 471 522 q 336 486 374 522 q 276 389 297 450 q 254 256 254 328 q 281 170 254 201 q 358 139 307 139 z "},"ñ":{"ha":839,"x_min":25,"x_max":811,"o":"m 663 0 l 458 0 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 663 0 m 616 842 q 558 853 583 842 q 511 877 532 864 q 469 902 489 890 q 427 913 449 913 q 389 894 406 913 q 363 840 372 875 l 243 840 q 433 1050 283 1050 q 493 1039 467 1050 q 541 1014 519 1027 q 583 990 564 1001 q 624 979 603 979 q 663 997 647 979 q 694 1051 680 1014 l 811 1051 q 616 842 766 842 z "},"ò":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 573 842 l 448 842 q 354 946 400 888 q 284 1050 309 1003 l 284 1064 l 495 1064 q 573 859 519 964 l 573 842 z "},"ó":{"ha":812,"x_min":61,"x_max":765,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 387 859 q 538 1064 441 918 l 765 1064 l 765 1053 q 661 949 734 1015 q 529 842 587 884 l 387 842 l 387 859 z "},"ô":{"ha":812,"x_min":61,"x_max":752,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 752 842 l 618 842 q 508 956 575 878 q 351 842 437 896 l 203 842 l 203 859 q 307 958 246 897 q 404 1064 368 1019 l 633 1064 q 683 967 648 1027 q 752 859 718 907 l 752 842 z "},"õ":{"ha":812,"x_min":61,"x_max":781,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 587 842 q 528 853 553 842 q 481 877 503 864 q 439 902 459 890 q 397 913 419 913 q 359 894 376 913 q 333 840 342 875 l 213 840 q 404 1050 253 1050 q 463 1039 437 1050 q 511 1014 489 1027 q 553 990 534 1001 q 594 979 573 979 q 633 997 617 979 q 665 1051 650 1014 l 781 1051 q 587 842 736 842 z "},"ö":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 262 937 q 291 1017 262 990 q 372 1044 319 1044 q 462 971 462 1044 q 435 892 462 922 q 353 863 409 863 q 262 937 262 863 m 534 937 q 563 1017 534 990 q 644 1044 591 1044 q 711 1025 688 1044 q 734 971 734 1006 q 708 892 734 922 q 626 863 681 863 q 534 937 534 863 z "},"÷":{"ha":765,"x_min":74,"x_max":720,"o":"m 74 415 l 74 564 l 720 564 l 720 415 l 74 415 m 301 253 q 326 330 301 304 q 396 355 351 355 q 466 329 441 355 q 490 253 490 302 q 465 178 490 205 q 396 150 440 150 q 327 176 352 150 q 301 253 301 203 m 301 726 q 326 803 301 777 q 396 829 351 829 q 466 802 441 829 q 490 726 490 774 q 465 651 490 679 q 396 624 440 624 q 327 650 352 624 q 301 726 301 677 z "},"ø":{"ha":812,"x_min":29,"x_max":764,"o":"m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 199 22 268 -14 l 125 -69 l 29 4 l 110 104 q 61 278 61 177 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 618 734 553 772 l 665 794 l 764 720 l 707 648 q 751 472 751 576 m 449 612 q 351 570 394 612 q 284 455 308 528 q 261 297 261 382 l 261 289 l 509 596 q 449 612 485 612 m 368 146 q 499 236 446 146 q 553 452 553 326 l 553 463 l 310 161 q 334 151 317 156 q 368 146 351 146 z "},"ù":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 573 842 l 448 842 q 354 946 400 888 q 284 1050 309 1003 l 284 1064 l 495 1064 q 573 859 519 964 l 573 842 z "},"ú":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 414 859 q 564 1064 467 918 l 791 1064 l 791 1053 q 687 949 760 1015 q 555 842 614 884 l 414 842 l 414 859 z "},"û":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 775 842 l 641 842 q 531 956 598 878 q 374 842 460 896 l 227 842 l 227 859 q 330 958 269 897 q 427 1064 391 1019 l 656 1064 q 706 967 671 1027 q 775 859 741 907 l 775 842 z "},"ü":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 279 937 q 308 1017 279 990 q 389 1044 336 1044 q 479 971 479 1044 q 452 892 479 922 q 370 863 426 863 q 279 937 279 863 m 551 937 q 580 1017 551 990 q 661 1044 608 1044 q 728 1025 705 1044 q 751 971 751 1006 q 725 892 751 922 q 643 863 698 863 q 551 937 551 863 z "},"ý":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 337 859 q 488 1064 391 918 l 715 1064 l 715 1053 q 610 949 684 1015 q 479 842 537 884 l 337 842 l 337 859 z "},"þ":{"ha":827,"x_min":-46,"x_max":765,"o":"m 551 772 q 709 700 653 772 q 765 496 765 628 q 718 237 765 361 q 595 50 671 114 q 425 -14 518 -14 q 241 97 304 -14 l 236 97 q 207 -103 228 -11 l 158 -334 l -46 -334 l 249 1055 l 453 1055 l 408 847 q 354 657 389 758 l 359 657 q 551 772 448 772 m 463 607 q 374 563 414 607 q 310 438 334 519 q 285 271 285 357 q 308 184 285 216 q 379 151 330 151 q 467 195 426 151 q 533 320 507 239 q 558 488 558 400 q 533 577 558 547 q 463 607 507 607 z "},"ÿ":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 210 937 q 239 1017 210 990 q 320 1044 268 1044 q 410 971 410 1044 q 384 892 410 922 q 302 863 357 863 q 210 937 210 863 m 483 937 q 511 1017 483 990 q 593 1044 540 1044 q 660 1025 637 1044 q 683 971 683 1006 q 656 892 683 922 q 574 863 629 863 q 483 937 483 863 z "},"Ā":{"ha":872,"x_min":-83,"x_max":811,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 391 1214 l 811 1214 l 781 1071 l 361 1071 l 391 1214 z "},"ā":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 315 985 l 735 985 l 705 842 l 285 842 l 315 985 z "},"Ă":{"ha":872,"x_min":-83,"x_max":840,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 840 1300 q 574 1071 803 1071 q 412 1120 470 1071 q 354 1255 354 1170 q 358 1300 354 1281 l 476 1300 q 501 1236 476 1256 q 581 1215 526 1215 q 667 1234 633 1215 q 712 1300 701 1252 l 840 1300 z "},"ă":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 766 1071 q 500 842 729 842 q 338 891 396 842 q 280 1026 280 941 q 284 1071 280 1052 l 402 1071 q 427 1006 402 1027 q 507 986 452 986 q 593 1004 559 986 q 638 1071 627 1023 l 766 1071 z "},"Ą":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 722 0 q 617 -100 642 -65 q 593 -170 593 -136 q 604 -199 593 -189 q 633 -210 614 -210 q 703 -197 663 -210 l 703 -317 q 591 -334 646 -334 q 482 -297 522 -334 q 441 -201 441 -261 q 474 -99 441 -146 q 587 0 506 -52 l 722 0 z "},"ą":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 620 0 q 515 -100 539 -65 q 490 -170 490 -136 q 501 -199 490 -189 q 531 -210 512 -210 q 600 -197 561 -210 l 600 -317 q 489 -334 543 -334 q 379 -297 420 -334 q 339 -201 339 -261 q 371 -99 339 -146 q 485 0 404 -52 l 620 0 z "},"Ć":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 453 777 524 832 q 338 615 381 722 q 294 386 294 509 q 341 218 294 273 q 489 163 387 163 q 718 215 588 163 l 718 39 q 447 -14 583 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 764 992 699 1007 q 905 936 830 977 l 825 766 q 707 819 753 806 q 614 832 660 832 m 498 1088 q 649 1293 552 1147 l 876 1293 l 876 1282 q 772 1178 845 1244 q 640 1071 699 1113 l 498 1071 l 498 1088 z "},"ć":{"ha":671,"x_min":61,"x_max":724,"o":"m 343 -14 q 134 59 207 -14 q 61 265 61 132 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 299 184 268 217 q 385 151 330 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 m 346 859 q 496 1064 399 918 l 724 1064 l 724 1053 q 619 949 692 1015 q 488 842 546 884 l 346 842 l 346 859 z "},"Ĉ":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 453 777 524 832 q 338 615 381 722 q 294 386 294 509 q 341 218 294 273 q 489 163 387 163 q 718 215 588 163 l 718 39 q 447 -14 583 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 764 992 699 1007 q 905 936 830 977 l 825 766 q 707 819 753 806 q 614 832 660 832 m 876 1071 l 742 1071 q 632 1185 699 1107 q 475 1071 561 1125 l 328 1071 l 328 1088 q 431 1187 370 1126 q 528 1293 492 1249 l 757 1293 q 807 1197 772 1257 q 876 1088 842 1137 l 876 1071 z "},"ĉ":{"ha":671,"x_min":61,"x_max":720,"o":"m 343 -14 q 134 59 207 -14 q 61 265 61 132 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 299 184 268 217 q 385 151 330 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 m 720 842 l 586 842 q 476 956 543 878 q 319 842 405 896 l 172 842 l 172 859 q 275 958 214 897 q 372 1064 336 1019 l 601 1064 q 651 967 616 1027 q 720 859 686 907 l 720 842 z "},"Ċ":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 453 777 524 832 q 338 615 381 722 q 294 386 294 509 q 341 218 294 273 q 489 163 387 163 q 718 215 588 163 l 718 39 q 447 -14 583 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 764 992 699 1007 q 905 936 830 977 l 825 766 q 707 819 753 806 q 614 832 660 832 m 526 1165 q 558 1254 526 1224 q 649 1284 590 1284 q 724 1263 699 1284 q 750 1203 750 1242 q 720 1115 750 1149 q 628 1082 690 1082 q 526 1165 526 1082 z "},"ċ":{"ha":671,"x_min":61,"x_max":685,"o":"m 343 -14 q 134 59 207 -14 q 61 265 61 132 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 299 184 268 217 q 385 151 330 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 m 360 936 q 392 1025 360 995 q 484 1055 425 1055 q 559 1034 533 1055 q 585 974 585 1013 q 555 886 585 920 q 463 852 525 852 q 360 936 360 852 z "},"Č":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 453 777 524 832 q 338 615 381 722 q 294 386 294 509 q 341 218 294 273 q 489 163 387 163 q 718 215 588 163 l 718 39 q 447 -14 583 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 764 992 699 1007 q 905 936 830 977 l 825 766 q 707 819 753 806 q 614 832 660 832 m 349 1293 l 483 1293 q 593 1179 526 1257 q 750 1293 671 1243 l 897 1293 l 897 1276 q 697 1071 753 1142 l 468 1071 q 418 1167 453 1107 q 349 1276 382 1227 l 349 1293 z "},"č":{"ha":671,"x_min":61,"x_max":758,"o":"m 343 -14 q 134 59 207 -14 q 61 265 61 132 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 299 184 268 217 q 385 151 330 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 m 209 1064 l 343 1064 q 453 950 386 1028 q 610 1064 531 1014 l 758 1064 l 758 1047 q 557 842 614 913 l 328 842 q 278 938 313 878 q 209 1047 243 998 l 209 1064 z "},"Ď":{"ha":940,"x_min":36,"x_max":897,"o":"m 897 616 q 831 287 897 427 q 638 73 764 146 q 342 0 513 0 l 36 0 l 245 991 l 514 991 q 797 895 697 991 q 897 616 897 798 m 351 174 q 526 225 452 174 q 643 377 601 277 q 685 606 685 477 q 636 765 685 710 q 494 819 587 819 l 416 819 l 279 174 l 351 174 m 318 1293 l 452 1293 q 562 1179 495 1257 q 720 1293 640 1243 l 867 1293 l 867 1276 q 667 1071 723 1142 l 437 1071 q 387 1167 422 1107 q 318 1276 352 1227 l 318 1293 z "},"ď":{"ha":825,"x_min":61,"x_max":1158,"o":"m 275 -14 q 118 59 176 -14 q 61 262 61 132 q 110 516 61 395 q 237 705 158 637 q 412 772 317 772 q 508 747 468 772 q 585 661 549 722 l 590 661 l 591 680 q 608 812 595 755 l 660 1055 l 864 1055 l 640 0 l 485 0 l 494 98 l 492 98 q 391 13 444 39 q 275 -14 338 -14 m 361 151 q 448 198 406 151 q 516 321 490 244 q 542 488 542 399 q 516 574 542 542 q 447 607 491 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 361 151 268 151 m 882 851 q 966 1055 939 972 l 1158 1055 l 1158 1042 q 1093 942 1138 1003 q 1004 833 1048 880 l 882 833 l 882 851 z "},"Đ":{"ha":940,"x_min":25,"x_max":897,"o":"m 897 616 q 831 287 897 427 q 638 73 764 146 q 342 0 513 0 l 36 0 l 121 404 l 25 404 l 62 576 l 157 576 l 245 991 l 514 991 q 797 895 697 991 q 897 616 897 798 m 351 174 q 526 225 452 174 q 643 377 601 277 q 685 606 685 477 q 636 765 685 710 q 494 819 587 819 l 416 819 l 366 576 l 526 576 l 489 404 l 328 404 l 279 174 l 351 174 z "},"đ":{"ha":825,"x_min":61,"x_max":945,"o":"m 404 730 q 506 707 464 730 q 579 629 549 684 l 585 629 q 588 684 585 648 q 608 811 592 721 l 408 811 l 436 946 l 636 946 l 660 1055 l 864 1055 l 840 946 l 945 946 l 917 811 l 811 811 l 640 0 l 485 0 l 494 98 l 492 98 q 390 12 439 37 q 282 -14 340 -14 q 120 58 179 -14 q 61 262 61 130 q 109 498 61 385 q 233 671 156 612 q 404 730 309 730 m 364 151 q 450 192 410 151 q 515 308 489 232 q 541 457 541 384 q 518 536 541 506 q 447 566 496 566 q 357 524 399 566 q 292 414 316 483 q 268 271 268 346 q 294 181 268 211 q 364 151 319 151 z "},"Ē":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 350 1214 l 770 1214 l 739 1071 l 319 1071 l 350 1214 z "},"ē":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 298 985 l 718 985 l 688 842 l 268 842 l 298 985 z "},"Ĕ":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 799 1300 q 532 1071 762 1071 q 371 1120 429 1071 q 313 1255 313 1170 q 317 1300 313 1281 l 435 1300 q 459 1236 435 1256 q 539 1215 484 1215 q 626 1234 592 1215 q 671 1300 659 1252 l 799 1300 z "},"ĕ":{"ha":774,"x_min":61,"x_max":762,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 762 1071 q 495 842 724 842 q 333 891 391 842 q 275 1026 275 941 q 279 1071 275 1052 l 397 1071 q 422 1006 397 1027 q 502 986 447 986 q 588 1004 555 986 q 633 1071 622 1023 l 762 1071 z "},"Ė":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 422 1145 q 455 1235 422 1204 q 546 1265 487 1265 q 621 1244 595 1265 q 647 1183 647 1223 q 617 1096 647 1129 q 525 1062 587 1062 q 422 1145 422 1062 z "},"ė":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 388 936 q 420 1025 388 995 q 511 1055 452 1055 q 587 1034 561 1055 q 612 974 612 1013 q 583 886 612 920 q 490 852 553 852 q 388 936 388 852 z "},"Ę":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 524 0 q 418 -100 443 -65 q 394 -170 394 -136 q 405 -199 394 -189 q 435 -210 416 -210 q 504 -197 465 -210 l 504 -317 q 393 -334 447 -334 q 283 -297 323 -334 q 243 -201 243 -261 q 275 -99 243 -146 q 389 0 307 -52 l 524 0 z "},"ę":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 469 14 q 363 -87 388 -52 q 339 -156 339 -122 q 350 -185 339 -175 q 380 -196 361 -196 q 449 -184 410 -196 l 449 -303 q 338 -320 392 -320 q 228 -284 269 -320 q 188 -188 188 -248 q 220 -85 188 -132 q 334 14 252 -39 l 469 14 z "},"Ě":{"ha":753,"x_min":36,"x_max":835,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 286 1293 l 420 1293 q 530 1179 463 1257 q 688 1293 608 1243 l 835 1293 l 835 1276 q 635 1071 691 1142 l 406 1071 q 355 1167 391 1107 q 286 1276 320 1227 l 286 1293 z "},"ě":{"ha":774,"x_min":61,"x_max":795,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 247 1064 l 381 1064 q 491 950 424 1028 q 648 1064 569 1014 l 795 1064 l 795 1047 q 595 842 652 913 l 366 842 q 316 938 351 878 q 247 1047 281 998 l 247 1064 z "},"Ĝ":{"ha":958,"x_min":83,"x_max":942,"o":"m 511 557 l 893 557 l 783 40 q 615 -2 692 9 q 450 -14 537 -14 q 179 86 275 -14 q 83 372 83 186 q 156 701 83 554 q 360 927 229 848 q 664 1007 492 1007 q 942 940 812 1007 l 864 770 q 764 813 814 797 q 654 829 713 829 q 469 773 551 829 q 341 613 387 717 q 294 389 294 509 q 343 217 294 272 q 494 163 393 163 q 610 179 546 163 l 654 382 l 473 382 l 511 557 m 887 1071 l 753 1071 q 643 1185 710 1107 q 486 1071 572 1125 l 338 1071 l 338 1088 q 442 1187 381 1126 q 538 1293 503 1249 l 768 1293 q 818 1197 783 1257 q 887 1088 853 1137 l 887 1071 z "},"ĝ":{"ha":751,"x_min":-78,"x_max":807,"o":"m 804 757 l 781 644 l 663 616 q 673 536 673 581 q 591 327 673 404 q 368 250 509 250 q 301 257 328 250 q 244 204 244 239 q 264 171 244 181 q 325 155 285 161 l 418 143 q 579 86 528 129 q 629 -39 629 43 q 524 -258 629 -182 q 221 -334 418 -334 q 1 -282 80 -334 q -78 -142 -78 -231 q -32 -23 -78 -73 q 114 60 15 27 q 64 150 64 92 q 94 233 64 198 q 193 300 124 268 q 128 376 149 333 q 107 479 107 418 q 192 693 107 614 q 424 772 277 772 q 536 757 480 772 l 804 757 m 248 -4 q 139 -43 176 -14 q 102 -117 102 -72 q 233 -195 102 -195 q 388 -164 336 -195 q 440 -78 440 -134 q 418 -37 440 -52 q 325 -14 396 -23 l 248 -4 m 416 643 q 332 591 364 643 q 300 461 300 539 q 370 380 300 380 q 452 432 420 380 q 484 564 484 484 q 416 643 484 643 m 807 842 l 673 842 q 563 956 630 878 q 406 842 492 896 l 258 842 l 258 859 q 362 958 301 897 q 458 1064 423 1019 l 688 1064 q 738 967 703 1027 q 807 859 773 907 l 807 842 z "},"Ğ":{"ha":958,"x_min":83,"x_max":942,"o":"m 511 557 l 893 557 l 783 40 q 615 -2 692 9 q 450 -14 537 -14 q 179 86 275 -14 q 83 372 83 186 q 156 701 83 554 q 360 927 229 848 q 664 1007 492 1007 q 942 940 812 1007 l 864 770 q 764 813 814 797 q 654 829 713 829 q 469 773 551 829 q 341 613 387 717 q 294 389 294 509 q 343 217 294 272 q 494 163 393 163 q 610 179 546 163 l 654 382 l 473 382 l 511 557 m 884 1300 q 617 1071 846 1071 q 455 1120 513 1071 q 397 1255 397 1170 q 401 1300 397 1281 l 519 1300 q 544 1236 519 1256 q 624 1215 569 1215 q 710 1234 677 1215 q 755 1300 744 1252 l 884 1300 z "},"ğ":{"ha":751,"x_min":-78,"x_max":804,"o":"m 804 757 l 781 644 l 663 616 q 673 536 673 581 q 591 327 673 404 q 368 250 509 250 q 301 257 328 250 q 244 204 244 239 q 264 171 244 181 q 325 155 285 161 l 418 143 q 579 86 528 129 q 629 -39 629 43 q 524 -258 629 -182 q 221 -334 418 -334 q 1 -282 80 -334 q -78 -142 -78 -231 q -32 -23 -78 -73 q 114 60 15 27 q 64 150 64 92 q 94 233 64 198 q 193 300 124 268 q 128 376 149 333 q 107 479 107 418 q 192 693 107 614 q 424 772 277 772 q 536 757 480 772 l 804 757 m 248 -4 q 139 -43 176 -14 q 102 -117 102 -72 q 233 -195 102 -195 q 388 -164 336 -195 q 440 -78 440 -134 q 418 -37 440 -52 q 325 -14 396 -23 l 248 -4 m 416 643 q 332 591 364 643 q 300 461 300 539 q 370 380 300 380 q 452 432 420 380 q 484 564 484 484 q 416 643 484 643 m 779 1071 q 513 842 742 842 q 351 891 409 842 q 293 1026 293 941 q 297 1071 293 1052 l 415 1071 q 440 1006 415 1027 q 519 986 465 986 q 606 1004 572 986 q 651 1071 640 1023 l 779 1071 z "},"Ġ":{"ha":958,"x_min":83,"x_max":942,"o":"m 511 557 l 893 557 l 783 40 q 615 -2 692 9 q 450 -14 537 -14 q 179 86 275 -14 q 83 372 83 186 q 156 701 83 554 q 360 927 229 848 q 664 1007 492 1007 q 942 940 812 1007 l 864 770 q 764 813 814 797 q 654 829 713 829 q 469 773 551 829 q 341 613 387 717 q 294 389 294 509 q 343 217 294 272 q 494 163 393 163 q 610 179 546 163 l 654 382 l 473 382 l 511 557 m 527 1165 q 559 1254 527 1224 q 650 1284 591 1284 q 726 1263 700 1284 q 751 1203 751 1242 q 722 1115 751 1149 q 629 1082 692 1082 q 527 1165 527 1082 z "},"ġ":{"ha":751,"x_min":-78,"x_max":804,"o":"m 804 757 l 781 644 l 663 616 q 673 536 673 581 q 591 327 673 404 q 368 250 509 250 q 301 257 328 250 q 244 204 244 239 q 264 171 244 181 q 325 155 285 161 l 418 143 q 579 86 528 129 q 629 -39 629 43 q 524 -258 629 -182 q 221 -334 418 -334 q 1 -282 80 -334 q -78 -142 -78 -231 q -32 -23 -78 -73 q 114 60 15 27 q 64 150 64 92 q 94 233 64 198 q 193 300 124 268 q 128 376 149 333 q 107 479 107 418 q 192 693 107 614 q 424 772 277 772 q 536 757 480 772 l 804 757 m 248 -4 q 139 -43 176 -14 q 102 -117 102 -72 q 233 -195 102 -195 q 388 -164 336 -195 q 440 -78 440 -134 q 418 -37 440 -52 q 325 -14 396 -23 l 248 -4 m 416 643 q 332 591 364 643 q 300 461 300 539 q 370 380 300 380 q 452 432 420 380 q 484 564 484 484 q 416 643 484 643 m 416 936 q 448 1025 416 995 q 539 1055 480 1055 q 614 1034 589 1055 q 640 974 640 1013 q 610 886 640 920 q 518 852 581 852 q 416 936 416 852 z "},"Ģ":{"ha":958,"x_min":83,"x_max":942,"o":"m 511 557 l 893 557 l 783 40 q 615 -2 692 9 q 450 -14 537 -14 q 179 86 275 -14 q 83 372 83 186 q 156 701 83 554 q 360 927 229 848 q 664 1007 492 1007 q 942 940 812 1007 l 864 770 q 764 813 814 797 q 654 829 713 829 q 469 773 551 829 q 341 613 387 717 q 294 389 294 509 q 343 217 294 272 q 494 163 393 163 q 610 179 546 163 l 654 382 l 473 382 l 511 557 m 274 -289 q 318 -189 291 -254 q 359 -85 346 -123 l 550 -85 l 550 -98 q 485 -198 528 -140 q 396 -307 443 -255 l 274 -307 l 274 -289 z "},"ģ":{"ha":751,"x_min":-78,"x_max":804,"o":"m 804 757 l 781 644 l 663 616 q 673 536 673 581 q 591 327 673 404 q 368 250 509 250 q 301 257 328 250 q 244 204 244 239 q 264 171 244 181 q 325 155 285 161 l 418 143 q 579 86 528 129 q 629 -39 629 43 q 524 -258 629 -182 q 221 -334 418 -334 q 1 -282 80 -334 q -78 -142 -78 -231 q -32 -23 -78 -73 q 114 60 15 27 q 64 150 64 92 q 94 233 64 198 q 193 300 124 268 q 128 376 149 333 q 107 479 107 418 q 192 693 107 614 q 424 772 277 772 q 536 757 480 772 l 804 757 m 248 -4 q 139 -43 176 -14 q 102 -117 102 -72 q 233 -195 102 -195 q 388 -164 336 -195 q 440 -78 440 -134 q 418 -37 440 -52 q 325 -14 396 -23 l 248 -4 m 416 643 q 332 591 364 643 q 300 461 300 539 q 370 380 300 380 q 452 432 420 380 q 484 564 484 484 q 416 643 484 643 m 675 1046 q 632 950 662 1019 q 591 842 603 882 l 399 842 l 399 856 q 464 955 420 896 q 553 1064 507 1014 l 675 1064 l 675 1046 z "},"Ĥ":{"ha":972,"x_min":36,"x_max":979,"o":"m 770 0 l 562 0 l 653 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 979 991 l 770 0 m 884 1071 l 750 1071 q 640 1185 707 1107 q 483 1071 569 1125 l 336 1071 l 336 1088 q 439 1187 378 1126 q 536 1293 500 1249 l 765 1293 q 815 1197 780 1257 q 884 1088 850 1137 l 884 1071 z "},"ĥ":{"ha":839,"x_min":25,"x_max":812,"o":"m 663 0 l 458 0 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 249 1055 l 453 1055 q 412 867 427 932 q 354 657 398 801 l 359 657 q 453 741 401 709 q 572 772 505 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 663 0 m 812 1108 l 678 1108 q 568 1222 635 1144 q 411 1108 497 1162 l 264 1108 l 264 1125 q 368 1225 307 1164 q 464 1331 429 1286 l 693 1331 q 743 1234 708 1294 q 812 1125 779 1174 l 812 1108 z "},"Ħ":{"ha":972,"x_min":36,"x_max":1072,"o":"m 951 860 l 1072 860 l 1044 725 l 922 725 l 770 0 l 562 0 l 653 428 l 334 428 l 243 0 l 36 0 l 189 725 l 69 725 l 97 860 l 218 860 l 245 991 l 453 991 l 425 860 l 745 860 l 772 991 l 979 991 l 951 860 m 690 603 l 715 725 l 396 725 l 371 603 l 690 603 z "},"ħ":{"ha":839,"x_min":25,"x_max":760,"o":"m 663 0 l 458 0 l 543 401 q 554 482 554 448 q 482 566 554 566 q 368 487 419 566 q 288 272 317 409 l 229 0 l 25 0 l 197 811 l 87 811 l 117 946 l 225 946 l 249 1055 l 453 1055 l 431 946 l 633 946 l 604 811 l 401 811 q 347 615 376 700 l 353 615 q 445 699 395 668 q 564 730 496 730 q 709 673 659 730 q 760 513 760 616 q 745 390 760 459 l 663 0 z "},"ĩ":{"ha":412,"x_min":25,"x_max":605,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 410 842 q 352 853 377 842 q 304 877 326 864 q 263 902 283 890 q 220 913 243 913 q 183 894 199 913 q 157 840 166 875 l 37 840 q 227 1050 77 1050 q 287 1039 260 1050 q 335 1014 313 1027 q 377 990 357 1001 q 418 979 397 979 q 457 997 441 979 q 488 1051 473 1014 l 605 1051 q 410 842 560 842 z "},"ī":{"ha":412,"x_min":25,"x_max":537,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 117 985 l 537 985 l 507 842 l 87 842 l 117 985 z "},"ĭ":{"ha":412,"x_min":25,"x_max":577,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 577 1071 q 311 842 540 842 q 149 891 207 842 q 91 1026 91 941 q 95 1071 91 1052 l 213 1071 q 238 1006 213 1027 q 317 986 262 986 q 404 1004 370 986 q 449 1071 437 1023 l 577 1071 z "},"į":{"ha":412,"x_min":-52,"x_max":443,"o":"m 218 936 q 251 1025 218 995 q 342 1055 283 1055 q 417 1034 391 1055 q 443 974 443 1013 q 413 886 443 920 q 321 852 383 852 q 218 936 218 852 m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 229 0 q 124 -100 149 -65 q 100 -170 100 -136 q 111 -199 100 -189 q 140 -210 121 -210 q 210 -197 170 -210 l 210 -317 q 98 -334 153 -334 q -11 -297 29 -334 q -52 -201 -52 -261 q -19 -99 -52 -146 q 94 0 13 -52 l 229 0 z "},"ı":{"ha":412,"x_min":25,"x_max":390,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 z "},"ĳ":{"ha":825,"x_min":25,"x_max":857,"o":"m 218 936 q 251 1025 218 995 q 342 1055 283 1055 q 417 1034 391 1055 q 443 974 443 1013 q 413 886 443 920 q 321 852 383 852 q 218 936 218 852 m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 351 -334 q 233 -317 281 -334 l 233 -153 q 311 -167 275 -167 q 428 -52 404 -167 l 600 758 l 804 758 l 625 -82 q 351 -334 572 -334 m 632 936 q 664 1025 632 995 q 755 1055 696 1055 q 831 1034 805 1055 q 857 974 857 1013 q 827 886 857 920 q 734 852 797 852 q 632 936 632 852 z "},"Ĵ":{"ha":460,"x_min":-218,"x_max":644,"o":"m -92 -292 q -218 -273 -155 -292 l -218 -102 q -107 -115 -159 -115 q 2 -74 -40 -115 q 62 56 43 -33 l 261 991 l 468 991 l 262 26 q 143 -216 227 -140 q -92 -292 60 -292 m 644 1071 l 509 1071 q 399 1185 467 1107 q 242 1071 328 1125 l 95 1071 l 95 1088 q 199 1187 138 1126 q 295 1293 260 1249 l 524 1293 q 574 1197 539 1257 q 644 1088 610 1137 l 644 1071 z "},"ĵ":{"ha":412,"x_min":-178,"x_max":567,"o":"m -60 -334 q -178 -317 -130 -334 l -178 -153 q -100 -167 -136 -167 q -27 -140 -58 -167 q 17 -52 4 -113 l 189 758 l 393 758 l 214 -82 q -60 -334 161 -334 m 567 842 l 433 842 q 323 956 390 878 q 165 842 252 896 l 18 842 l 18 859 q 122 958 61 897 q 218 1064 183 1019 l 448 1064 q 498 967 463 1027 q 567 859 533 907 l 567 842 z "},"Ķ":{"ha":851,"x_min":36,"x_max":979,"o":"m 774 0 l 545 0 l 401 401 l 317 354 l 243 0 l 36 0 l 245 991 l 453 991 l 350 515 l 457 654 l 734 991 l 979 991 l 576 517 l 774 0 m 205 -289 q 250 -189 222 -254 q 290 -85 277 -123 l 481 -85 l 481 -98 q 417 -198 459 -140 q 328 -307 374 -255 l 205 -307 l 205 -289 z "},"ķ":{"ha":789,"x_min":25,"x_max":857,"o":"m 624 758 l 857 758 l 519 416 l 713 0 l 485 0 l 361 285 l 279 236 l 229 0 l 25 0 l 249 1055 l 453 1055 l 353 585 q 333 505 347 557 l 314 436 l 317 436 l 624 758 m 167 -289 q 211 -189 184 -254 q 252 -85 239 -123 l 443 -85 l 443 -98 q 378 -198 420 -140 q 289 -307 336 -255 l 167 -307 l 167 -289 z "},"ĸ":{"ha":789,"x_min":25,"x_max":857,"o":"m 624 758 l 857 758 l 519 416 l 713 0 l 485 0 l 361 285 l 279 236 l 229 0 l 25 0 l 186 758 l 390 758 q 331 501 342 542 q 311 432 320 460 l 314 432 l 624 758 z "},"Ĺ":{"ha":720,"x_min":36,"x_max":652,"o":"m 36 0 l 245 991 l 453 991 l 279 174 l 627 174 l 590 0 l 36 0 m 274 1088 q 425 1293 328 1147 l 652 1293 l 652 1282 q 547 1178 621 1244 q 416 1071 474 1113 l 274 1071 l 274 1088 z "},"ĺ":{"ha":412,"x_min":25,"x_max":638,"o":"m 229 0 l 25 0 l 249 1055 l 453 1055 l 229 0 m 260 1126 q 411 1332 314 1186 l 638 1332 l 638 1320 q 534 1217 607 1282 q 402 1109 460 1152 l 260 1109 l 260 1126 z "},"Ļ":{"ha":720,"x_min":36,"x_max":627,"o":"m 36 0 l 245 991 l 453 991 l 279 174 l 627 174 l 590 0 l 36 0 m 128 -289 q 173 -189 145 -254 q 213 -85 200 -123 l 404 -85 l 404 -98 q 339 -198 382 -140 q 250 -307 297 -255 l 128 -307 l 128 -289 z "},"ļ":{"ha":412,"x_min":-67,"x_max":453,"o":"m 229 0 l 25 0 l 249 1055 l 453 1055 l 229 0 m -67 -289 q -23 -189 -50 -254 q 18 -85 5 -123 l 209 -85 l 209 -98 q 144 -198 186 -140 q 55 -307 102 -255 l -67 -307 l -67 -289 z "},"Ľ":{"ha":720,"x_min":36,"x_max":807,"o":"m 36 0 l 245 991 l 453 991 l 279 174 l 627 174 l 590 0 l 36 0 m 531 788 q 615 992 587 909 l 807 992 l 807 979 q 742 879 787 940 q 653 770 696 817 l 531 770 l 531 788 z "},"ľ":{"ha":412,"x_min":25,"x_max":747,"o":"m 229 0 l 25 0 l 249 1055 l 453 1055 l 229 0 m 471 851 q 555 1055 528 972 l 747 1055 l 747 1042 q 682 942 727 1003 q 593 833 637 880 l 471 833 l 471 851 z "},"Ŀ":{"ha":720,"x_min":36,"x_max":696,"o":"m 36 0 l 245 991 l 453 991 l 279 174 l 627 174 l 590 0 l 36 0 m 471 491 q 504 580 471 550 q 595 610 536 610 q 670 589 644 610 q 696 529 696 568 q 666 441 696 475 q 574 408 636 408 q 471 491 471 408 z "},"ŀ":{"ha":603,"x_min":25,"x_max":639,"o":"m 229 0 l 25 0 l 249 1055 l 453 1055 l 229 0 m 414 453 q 447 542 414 512 q 538 572 479 572 q 613 551 587 572 q 639 491 639 530 q 609 403 639 437 q 517 370 579 370 q 414 453 414 370 z "},"Ł":{"ha":721,"x_min":0,"x_max":628,"o":"m 39 0 l 109 326 l 69 306 l 0 443 l 150 524 l 249 991 l 454 991 l 382 648 l 478 701 l 550 564 l 339 450 l 281 174 l 628 174 l 591 0 l 39 0 z "},"ł":{"ha":454,"x_min":0,"x_max":494,"o":"m 379 635 l 422 660 l 494 522 l 338 437 l 244 0 l 43 0 l 110 317 l 69 294 l 0 432 l 151 514 l 267 1055 l 468 1055 l 379 635 z "},"Ń":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 846 0 l 614 0 l 372 750 l 368 750 l 366 728 q 321 467 344 582 l 222 0 l 36 0 l 245 991 l 488 991 l 718 261 l 721 261 q 747 408 729 313 q 869 991 766 504 l 1055 991 l 846 0 m 581 1088 q 731 1293 634 1147 l 958 1293 l 958 1282 q 854 1178 927 1244 q 722 1071 781 1113 l 581 1071 l 581 1088 z "},"ń":{"ha":839,"x_min":25,"x_max":783,"o":"m 663 0 l 458 0 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 663 0 m 406 859 q 556 1064 459 918 l 783 1064 l 783 1053 q 679 949 752 1015 q 547 842 606 884 l 406 842 l 406 859 z "},"Ņ":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 846 0 l 614 0 l 372 750 l 368 750 l 366 728 q 321 467 344 582 l 222 0 l 36 0 l 245 991 l 488 991 l 718 261 l 721 261 q 747 408 729 313 q 869 991 766 504 l 1055 991 l 846 0 m 258 -289 q 303 -189 275 -254 q 343 -85 330 -123 l 534 -85 l 534 -98 q 470 -198 512 -140 q 380 -307 427 -255 l 258 -307 l 258 -289 z "},"ņ":{"ha":839,"x_min":25,"x_max":768,"o":"m 663 0 l 458 0 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 663 0 m 161 -289 q 206 -189 178 -254 q 246 -85 233 -123 l 437 -85 l 437 -98 q 373 -198 415 -140 q 283 -307 330 -255 l 161 -307 l 161 -289 z "},"Ň":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 846 0 l 614 0 l 372 750 l 368 750 l 366 728 q 321 467 344 582 l 222 0 l 36 0 l 245 991 l 488 991 l 718 261 l 721 261 q 747 408 729 313 q 869 991 766 504 l 1055 991 l 846 0 m 421 1293 l 555 1293 q 665 1179 598 1257 q 823 1293 743 1243 l 970 1293 l 970 1276 q 770 1071 826 1142 l 541 1071 q 490 1167 526 1107 q 421 1276 455 1227 l 421 1293 z "},"ň":{"ha":839,"x_min":25,"x_max":808,"o":"m 663 0 l 458 0 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 663 0 m 260 1064 l 394 1064 q 504 950 437 1028 q 661 1064 582 1014 l 808 1064 l 808 1047 q 608 842 665 913 l 379 842 q 329 938 364 878 q 260 1047 294 998 l 260 1064 z "},"ŉ":{"ha":946,"x_min":1,"x_max":876,"o":"m 770 0 l 566 0 l 659 443 q 669 524 669 489 q 596 607 669 607 q 483 530 534 607 q 403 314 432 452 l 336 0 l 132 0 l 293 758 l 449 758 l 435 618 l 439 618 q 680 772 538 772 q 824 716 773 772 q 876 554 876 659 q 860 432 876 505 l 770 0 m 326 991 l 332 977 q 154 652 262 823 l 1 652 q 133 991 61 791 l 326 991 z "},"Ŋ":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 493 -292 q 364 -275 412 -292 l 364 -100 q 473 -115 422 -115 q 656 0 619 -115 l 372 750 l 368 750 l 366 728 q 321 467 344 582 l 222 0 l 36 0 l 245 991 l 469 991 l 728 323 l 732 323 q 781 593 760 500 l 869 991 l 1055 991 l 846 0 q 725 -219 814 -146 q 493 -292 635 -292 z "},"ŋ":{"ha":839,"x_min":25,"x_max":768,"o":"m 371 -334 q 253 -317 300 -334 l 253 -153 q 330 -167 294 -167 q 403 -139 372 -167 q 447 -52 435 -112 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 646 -79 q 550 -272 618 -210 q 371 -334 481 -334 z "},"Ō":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 453 1214 l 873 1214 l 842 1071 l 422 1071 l 453 1214 z "},"ō":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 301 985 l 721 985 l 690 842 l 271 842 l 301 985 z "},"Ŏ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 897 1300 q 631 1071 860 1071 q 469 1120 527 1071 q 411 1255 411 1170 q 415 1300 411 1281 l 533 1300 q 558 1236 533 1256 q 637 1215 583 1215 q 724 1234 690 1215 q 769 1300 758 1252 l 897 1300 z "},"ŏ":{"ha":812,"x_min":61,"x_max":753,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 753 1071 q 487 842 716 842 q 325 891 383 842 q 267 1026 267 941 q 271 1071 267 1052 l 389 1071 q 414 1006 389 1027 q 494 986 439 986 q 580 1004 547 986 q 625 1071 614 1023 l 753 1071 z "},"Ő":{"ha":1014,"x_min":83,"x_max":1040,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 408 1088 q 564 1293 485 1175 l 771 1293 l 771 1282 q 668 1182 742 1246 q 528 1071 593 1118 l 408 1071 l 408 1088 m 677 1088 q 833 1293 754 1175 l 1040 1293 l 1040 1282 q 937 1182 1011 1246 q 798 1071 863 1118 l 677 1071 l 677 1088 z "},"ő":{"ha":812,"x_min":61,"x_max":887,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 254 859 q 411 1064 332 945 l 618 1064 l 618 1053 q 514 952 589 1017 q 375 842 440 888 l 254 842 l 254 859 m 524 859 q 680 1064 601 945 l 887 1064 l 887 1053 q 784 952 858 1017 q 644 842 709 888 l 524 842 l 524 859 z "},"Œ":{"ha":1251,"x_min":83,"x_max":1299,"o":"m 1089 0 l 574 0 q 452 -14 511 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 750 991 703 1007 l 1299 991 l 1263 819 l 916 819 l 869 602 l 1193 602 l 1156 429 l 832 429 l 778 174 l 1125 174 l 1089 0 m 467 163 q 574 184 526 163 l 705 806 q 591 832 663 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 z "},"œ":{"ha":1225,"x_min":61,"x_max":1190,"o":"m 812 -14 q 671 13 734 -14 q 578 85 609 39 q 478 13 535 39 q 338 -14 421 -14 q 136 66 211 -14 q 61 281 61 145 q 108 539 61 427 q 243 711 155 650 q 453 772 332 772 q 665 664 595 772 q 936 772 770 772 q 1123 717 1056 772 q 1190 566 1190 662 q 1077 370 1190 439 q 754 301 964 301 l 720 301 l 718 287 l 718 273 q 753 176 718 212 q 852 140 787 140 q 960 153 911 140 q 1076 199 1008 166 l 1076 45 q 950 0 1013 14 q 812 -14 888 -14 m 437 606 q 351 565 389 606 q 290 445 313 524 q 267 281 267 366 q 291 186 267 219 q 366 153 316 153 q 487 244 439 153 q 534 472 534 335 q 509 571 534 537 q 437 606 484 606 m 924 625 q 811 572 864 625 q 742 439 759 519 l 772 439 q 936 472 878 439 q 994 561 994 505 q 924 625 994 625 z "},"Ŕ":{"ha":846,"x_min":36,"x_max":815,"o":"m 359 551 l 412 551 q 551 590 501 551 q 600 708 600 629 q 568 791 600 764 q 467 819 536 819 l 416 819 l 359 551 m 323 380 l 243 0 l 36 0 l 245 991 l 489 991 q 730 922 650 991 q 811 720 811 853 q 755 535 811 612 q 593 421 699 458 l 770 0 l 545 0 l 404 380 l 323 380 m 437 1088 q 588 1293 491 1147 l 815 1293 l 815 1282 q 711 1178 784 1244 q 579 1071 637 1113 l 437 1071 l 437 1088 z "},"ŕ":{"ha":585,"x_min":25,"x_max":689,"o":"m 571 772 q 636 765 611 772 l 591 568 q 524 579 561 579 q 386 517 445 579 q 301 339 326 455 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 571 772 431 772 m 311 859 q 462 1064 365 918 l 689 1064 l 689 1053 q 585 949 658 1015 q 453 842 511 884 l 311 842 l 311 859 z "},"Ŗ":{"ha":846,"x_min":36,"x_max":811,"o":"m 359 551 l 412 551 q 551 590 501 551 q 600 708 600 629 q 568 791 600 764 q 467 819 536 819 l 416 819 l 359 551 m 323 380 l 243 0 l 36 0 l 245 991 l 489 991 q 730 922 650 991 q 811 720 811 853 q 755 535 811 612 q 593 421 699 458 l 770 0 l 545 0 l 404 380 l 323 380 m 203 -289 q 247 -189 220 -254 q 288 -85 275 -123 l 479 -85 l 479 -98 q 414 -198 456 -140 q 325 -307 372 -255 l 203 -307 l 203 -289 z "},"ŗ":{"ha":585,"x_min":-64,"x_max":636,"o":"m 571 772 q 636 765 611 772 l 591 568 q 524 579 561 579 q 386 517 445 579 q 301 339 326 455 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 571 772 431 772 m -64 -289 q -20 -189 -47 -254 q 20 -85 7 -123 l 212 -85 l 212 -98 q 147 -198 189 -140 q 58 -307 104 -255 l -64 -307 l -64 -289 z "},"Ř":{"ha":846,"x_min":36,"x_max":849,"o":"m 359 551 l 412 551 q 551 590 501 551 q 600 708 600 629 q 568 791 600 764 q 467 819 536 819 l 416 819 l 359 551 m 323 380 l 243 0 l 36 0 l 245 991 l 489 991 q 730 922 650 991 q 811 720 811 853 q 755 535 811 612 q 593 421 699 458 l 770 0 l 545 0 l 404 380 l 323 380 m 300 1293 l 435 1293 q 545 1179 477 1257 q 702 1293 623 1243 l 849 1293 l 849 1276 q 649 1071 705 1142 l 420 1071 q 370 1167 405 1107 q 300 1276 334 1227 l 300 1293 z "},"ř":{"ha":585,"x_min":25,"x_max":724,"o":"m 571 772 q 636 765 611 772 l 591 568 q 524 579 561 579 q 386 517 445 579 q 301 339 326 455 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 571 772 431 772 m 176 1064 l 310 1064 q 420 950 353 1028 q 577 1064 498 1014 l 724 1064 l 724 1047 q 524 842 581 913 l 295 842 q 245 938 280 878 q 176 1047 210 998 l 176 1064 z "},"Ś":{"ha":736,"x_min":28,"x_max":776,"o":"m 642 293 q 541 69 642 151 q 269 -14 441 -14 q 28 47 119 -14 l 28 233 q 271 160 159 160 q 389 189 347 160 q 432 268 432 218 q 423 319 432 297 q 397 360 414 341 q 313 429 380 379 q 181 562 219 496 q 143 704 143 628 q 185 860 143 791 q 305 967 227 929 q 484 1006 382 1006 q 753 939 631 1006 l 679 781 q 484 831 573 831 q 391 800 427 831 q 355 720 355 770 q 378 647 355 678 q 478 566 400 616 q 601 446 560 511 q 642 293 642 380 m 398 1088 q 549 1293 452 1147 l 776 1293 l 776 1282 q 671 1178 745 1244 q 540 1071 598 1113 l 398 1071 l 398 1088 z "},"ś":{"ha":657,"x_min":16,"x_max":678,"o":"m 562 250 q 478 55 562 123 q 243 -14 393 -14 q 116 -3 170 -14 q 16 31 62 7 l 16 199 q 232 138 122 138 q 321 160 286 138 q 355 220 355 182 q 330 272 355 249 q 241 330 305 295 q 127 422 159 376 q 94 530 94 468 q 169 709 94 646 q 383 772 244 772 q 629 708 519 772 l 562 562 q 387 619 467 619 q 325 602 349 619 q 301 555 301 585 q 323 509 301 529 q 404 458 345 489 q 525 366 488 416 q 562 250 562 315 m 300 859 q 451 1064 354 918 l 678 1064 l 678 1053 q 574 949 647 1015 q 442 842 500 884 l 300 842 l 300 859 z "},"Ŝ":{"ha":736,"x_min":28,"x_max":762,"o":"m 642 293 q 541 69 642 151 q 269 -14 441 -14 q 28 47 119 -14 l 28 233 q 271 160 159 160 q 389 189 347 160 q 432 268 432 218 q 423 319 432 297 q 397 360 414 341 q 313 429 380 379 q 181 562 219 496 q 143 704 143 628 q 185 860 143 791 q 305 967 227 929 q 484 1006 382 1006 q 753 939 631 1006 l 679 781 q 484 831 573 831 q 391 800 427 831 q 355 720 355 770 q 378 647 355 678 q 478 566 400 616 q 601 446 560 511 q 642 293 642 380 m 762 1071 l 628 1071 q 518 1185 585 1107 q 361 1071 447 1125 l 214 1071 l 214 1088 q 317 1187 256 1126 q 414 1293 378 1249 l 643 1293 q 693 1197 658 1257 q 762 1088 728 1137 l 762 1071 z "},"ŝ":{"ha":657,"x_min":16,"x_max":665,"o":"m 562 250 q 478 55 562 123 q 243 -14 393 -14 q 116 -3 170 -14 q 16 31 62 7 l 16 199 q 232 138 122 138 q 321 160 286 138 q 355 220 355 182 q 330 272 355 249 q 241 330 305 295 q 127 422 159 376 q 94 530 94 468 q 169 709 94 646 q 383 772 244 772 q 629 708 519 772 l 562 562 q 387 619 467 619 q 325 602 349 619 q 301 555 301 585 q 323 509 301 529 q 404 458 345 489 q 525 366 488 416 q 562 250 562 315 m 665 842 l 530 842 q 420 956 488 878 q 263 842 349 896 l 116 842 l 116 859 q 220 958 159 897 q 316 1064 281 1019 l 545 1064 q 595 967 560 1027 q 665 859 631 907 l 665 842 z "},"Ş":{"ha":736,"x_min":28,"x_max":753,"o":"m 642 293 q 541 69 642 151 q 269 -14 441 -14 q 28 47 119 -14 l 28 233 q 271 160 159 160 q 389 189 347 160 q 432 268 432 218 q 423 319 432 297 q 397 360 414 341 q 313 429 380 379 q 181 562 219 496 q 143 704 143 628 q 185 860 143 791 q 305 967 227 929 q 484 1006 382 1006 q 753 939 631 1006 l 679 781 q 484 831 573 831 q 391 800 427 831 q 355 720 355 770 q 378 647 355 678 q 478 566 400 616 q 601 446 560 511 q 642 293 642 380 m 419 -170 q 363 -291 419 -248 q 204 -334 307 -334 q 101 -318 146 -334 l 101 -204 q 186 -220 144 -220 q 255 -164 255 -220 q 234 -126 255 -141 q 159 -104 213 -111 l 224 0 l 350 0 l 323 -49 q 419 -170 419 -82 z "},"ş":{"ha":657,"x_min":16,"x_max":629,"o":"m 562 250 q 478 55 562 123 q 243 -14 393 -14 q 116 -3 170 -14 q 16 31 62 7 l 16 199 q 232 138 122 138 q 321 160 286 138 q 355 220 355 182 q 330 272 355 249 q 241 330 305 295 q 127 422 159 376 q 94 530 94 468 q 169 709 94 646 q 383 772 244 772 q 629 708 519 772 l 562 562 q 387 619 467 619 q 325 602 349 619 q 301 555 301 585 q 323 509 301 529 q 404 458 345 489 q 525 366 488 416 q 562 250 562 315 m 383 -170 q 327 -291 383 -248 q 168 -334 271 -334 q 65 -318 110 -334 l 65 -204 q 150 -220 108 -220 q 219 -164 219 -220 q 198 -126 219 -141 q 123 -104 177 -111 l 189 0 l 314 0 l 288 -49 q 383 -170 383 -82 z "},"Š":{"ha":736,"x_min":28,"x_max":794,"o":"m 642 293 q 541 69 642 151 q 269 -14 441 -14 q 28 47 119 -14 l 28 233 q 271 160 159 160 q 389 189 347 160 q 432 268 432 218 q 423 319 432 297 q 397 360 414 341 q 313 429 380 379 q 181 562 219 496 q 143 704 143 628 q 185 860 143 791 q 305 967 227 929 q 484 1006 382 1006 q 753 939 631 1006 l 679 781 q 484 831 573 831 q 391 800 427 831 q 355 720 355 770 q 378 647 355 678 q 478 566 400 616 q 601 446 560 511 q 642 293 642 380 m 245 1293 l 380 1293 q 490 1179 422 1257 q 647 1293 568 1243 l 794 1293 l 794 1276 q 594 1071 650 1142 l 365 1071 q 315 1167 350 1107 q 245 1276 279 1227 l 245 1293 z "},"š":{"ha":657,"x_min":16,"x_max":718,"o":"m 562 250 q 478 55 562 123 q 243 -14 393 -14 q 116 -3 170 -14 q 16 31 62 7 l 16 199 q 232 138 122 138 q 321 160 286 138 q 355 220 355 182 q 330 272 355 249 q 241 330 305 295 q 127 422 159 376 q 94 530 94 468 q 169 709 94 646 q 383 772 244 772 q 629 708 519 772 l 562 562 q 387 619 467 619 q 325 602 349 619 q 301 555 301 585 q 323 509 301 529 q 404 458 345 489 q 525 366 488 416 q 562 250 562 315 m 169 1064 l 303 1064 q 413 950 346 1028 q 570 1064 491 1014 l 718 1064 l 718 1047 q 517 842 574 913 l 288 842 q 238 938 273 878 q 169 1047 203 998 l 169 1064 z "},"Ț":{"ha":737,"x_min":86,"x_max":836,"o":"m 387 0 l 180 0 l 353 817 l 114 817 l 151 991 l 836 991 l 799 817 l 559 817 l 387 0 m 86 -289 q 131 -189 103 -254 q 171 -85 158 -123 l 362 -85 l 362 -98 q 297 -198 340 -140 q 208 -307 255 -255 l 86 -307 l 86 -289 z "},"ț":{"ha":570,"x_min":38,"x_max":596,"o":"m 349 151 q 458 175 393 151 l 458 22 q 278 -14 383 -14 q 129 29 176 -14 q 81 161 81 72 q 89 237 81 195 l 167 603 l 64 603 l 83 703 l 216 760 l 306 920 l 437 920 l 404 758 l 596 758 l 562 603 l 371 603 l 293 237 q 289 201 289 217 q 349 151 289 151 m 38 -289 q 82 -189 55 -254 q 123 -85 110 -123 l 314 -85 l 314 -98 q 249 -198 292 -140 q 160 -307 207 -255 l 38 -307 l 38 -289 z "},"Ť":{"ha":737,"x_min":114,"x_max":836,"o":"m 387 0 l 180 0 l 353 817 l 114 817 l 151 991 l 836 991 l 799 817 l 559 817 l 387 0 m 269 1293 l 404 1293 q 513 1179 446 1257 q 671 1293 591 1243 l 818 1293 l 818 1276 q 618 1071 674 1142 l 389 1071 q 338 1167 374 1107 q 269 1276 303 1227 l 269 1293 z "},"ť":{"ha":570,"x_min":64,"x_max":786,"o":"m 349 151 q 458 175 393 151 l 458 22 q 278 -14 383 -14 q 129 29 176 -14 q 81 161 81 72 q 89 237 81 195 l 167 603 l 64 603 l 83 703 l 216 760 l 306 920 l 437 920 l 404 758 l 596 758 l 562 603 l 371 603 l 293 237 q 289 201 289 217 q 349 151 289 151 m 510 865 q 594 1069 566 985 l 786 1069 l 786 1055 q 721 955 766 1017 q 632 847 675 894 l 510 847 l 510 865 z "},"Ŧ":{"ha":737,"x_min":113,"x_max":836,"o":"m 509 576 l 668 576 l 631 404 l 472 404 l 387 0 l 180 0 l 265 404 l 113 404 l 150 576 l 301 576 l 353 817 l 114 817 l 151 991 l 836 991 l 799 817 l 559 817 l 509 576 z "},"ŧ":{"ha":570,"x_min":21,"x_max":596,"o":"m 349 151 q 458 175 393 151 l 458 22 q 278 -14 383 -14 q 129 29 176 -14 q 81 161 81 72 q 89 237 81 195 l 111 338 l 21 338 l 49 472 l 139 472 l 167 603 l 64 603 l 83 703 l 216 760 l 306 920 l 437 920 l 404 758 l 596 758 l 562 603 l 371 603 l 343 472 l 501 472 l 473 338 l 314 338 l 293 237 q 289 201 289 217 q 349 151 289 151 z "},"Ũ":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 726 1071 q 668 1082 693 1071 q 621 1106 642 1093 q 579 1131 599 1120 q 536 1142 559 1142 q 499 1123 515 1142 q 473 1069 482 1104 l 353 1069 q 543 1279 393 1279 q 603 1268 576 1279 q 651 1243 629 1257 q 693 1219 673 1230 q 734 1208 713 1208 q 773 1226 757 1208 q 804 1280 789 1243 l 921 1280 q 726 1071 876 1071 z "},"ũ":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 621 842 q 562 853 587 842 q 515 877 536 864 q 473 902 493 890 q 431 913 453 913 q 393 894 410 913 q 367 840 376 875 l 247 840 q 437 1050 287 1050 q 497 1039 471 1050 q 545 1014 523 1027 q 587 990 568 1001 q 628 979 607 979 q 667 997 651 979 q 699 1051 684 1014 l 815 1051 q 621 842 770 842 z "},"Ū":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 439 1214 l 859 1214 l 828 1071 l 408 1071 l 439 1214 z "},"ū":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 330 985 l 750 985 l 720 842 l 300 842 l 330 985 z "},"Ŭ":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 888 1300 q 621 1071 850 1071 q 459 1120 517 1071 q 401 1255 401 1170 q 406 1300 401 1281 l 524 1300 q 548 1236 524 1256 q 628 1215 573 1215 q 714 1234 681 1215 q 760 1300 748 1252 l 888 1300 z "},"ŭ":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 787 1071 q 521 842 750 842 q 359 891 417 842 q 301 1026 301 941 q 305 1071 301 1052 l 423 1071 q 448 1006 423 1027 q 528 986 473 986 q 614 1004 581 986 q 659 1071 648 1023 l 787 1071 z "},"Ů":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 810 1232 q 762 1115 810 1160 q 637 1069 715 1069 q 516 1113 563 1069 q 469 1231 469 1156 q 516 1348 469 1305 q 637 1392 562 1392 q 761 1348 712 1392 q 810 1232 810 1303 m 703 1231 q 685 1279 703 1261 q 637 1296 666 1296 q 591 1279 609 1296 q 572 1231 572 1261 q 589 1183 572 1200 q 637 1165 605 1165 q 685 1183 666 1165 q 703 1231 703 1200 z "},"ů":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 701 1003 q 654 885 701 930 q 529 840 606 840 q 408 883 454 840 q 361 1002 361 926 q 407 1119 361 1076 q 529 1162 454 1162 q 652 1118 604 1162 q 701 1003 701 1074 m 595 1002 q 576 1049 595 1032 q 529 1067 557 1067 q 482 1049 500 1067 q 464 1002 464 1032 q 480 954 464 971 q 529 936 496 936 q 576 954 557 936 q 595 1002 595 971 z "},"Ű":{"ha":960,"x_min":96,"x_max":1038,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 406 1088 q 562 1293 483 1175 l 769 1293 l 769 1282 q 666 1182 740 1246 q 526 1071 591 1118 l 406 1071 l 406 1088 m 675 1088 q 831 1293 752 1175 l 1038 1293 l 1038 1282 q 935 1182 1009 1246 q 795 1071 861 1118 l 675 1071 l 675 1088 z "},"ű":{"ha":839,"x_min":75,"x_max":924,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 291 859 q 448 1064 368 945 l 654 1064 l 654 1053 q 551 952 625 1017 q 412 842 477 888 l 291 842 l 291 859 m 560 859 q 717 1064 637 945 l 924 1064 l 924 1053 q 820 952 895 1017 q 681 842 746 888 l 560 842 l 560 859 z "},"Ų":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 585 0 q 480 -100 505 -65 q 456 -170 456 -136 q 467 -199 456 -189 q 496 -210 477 -210 q 566 -197 526 -210 l 566 -317 q 454 -334 509 -334 q 345 -297 385 -334 q 304 -201 304 -261 q 337 -99 304 -146 q 450 0 369 -52 l 585 0 z "},"ų":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 633 0 q 528 -100 553 -65 q 504 -170 504 -136 q 515 -199 504 -189 q 545 -210 526 -210 q 614 -197 574 -210 l 614 -317 q 503 -334 557 -334 q 393 -297 433 -334 q 353 -201 353 -261 q 385 -99 353 -146 q 498 0 417 -52 l 633 0 z "},"Ŵ":{"ha":1242,"x_min":125,"x_max":1372,"o":"m 682 690 q 604 488 651 591 l 385 0 l 155 0 l 125 991 l 319 991 l 323 450 q 321 333 323 415 q 314 215 318 251 l 318 215 q 363 337 333 258 q 404 436 394 416 l 654 991 l 838 991 l 852 399 q 846 215 852 300 l 850 215 q 939 452 879 302 l 1162 991 l 1372 991 l 933 0 l 699 0 l 684 489 l 682 583 q 685 690 682 643 l 682 690 m 1030 1071 l 896 1071 q 786 1185 853 1107 q 629 1071 715 1125 l 481 1071 l 481 1088 q 585 1187 524 1126 q 682 1293 646 1249 l 911 1293 q 961 1197 926 1257 q 1030 1088 996 1137 l 1030 1071 z "},"ŵ":{"ha":1095,"x_min":85,"x_max":1165,"o":"m 581 583 q 497 367 538 463 l 339 0 l 119 0 l 85 758 l 275 758 l 278 422 l 275 309 l 271 193 l 273 193 q 283 221 277 207 q 317 314 288 236 q 349 395 347 392 l 505 758 l 728 758 l 728 395 q 721 193 728 298 l 725 193 l 744 248 q 808 422 793 389 l 957 758 l 1165 758 l 806 0 l 582 0 l 578 353 q 585 583 578 458 l 581 583 m 896 842 l 762 842 q 652 956 719 878 q 494 842 581 896 l 347 842 l 347 859 q 451 958 390 897 q 547 1064 512 1019 l 777 1064 q 827 967 791 1027 q 896 859 862 907 l 896 842 z "},"Ŷ":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 m 781 1071 l 646 1071 q 536 1185 604 1107 q 379 1071 465 1125 l 232 1071 l 232 1088 q 336 1187 275 1126 q 432 1293 397 1249 l 661 1293 q 711 1197 676 1257 q 781 1088 747 1137 l 781 1071 z "},"ŷ":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 701 842 l 566 842 q 456 956 524 878 q 299 842 385 896 l 152 842 l 152 859 q 256 958 195 897 q 352 1064 317 1019 l 581 1064 q 631 967 596 1027 q 701 859 667 907 l 701 842 z "},"Ÿ":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 m 293 1166 q 322 1246 293 1219 q 403 1274 351 1274 q 493 1200 493 1274 q 467 1121 493 1151 q 385 1092 440 1092 q 293 1166 293 1092 m 566 1166 q 594 1246 566 1219 q 675 1274 623 1274 q 743 1255 720 1274 q 766 1200 766 1236 q 739 1121 766 1151 q 657 1092 712 1092 q 566 1166 566 1092 z "},"Ź":{"ha":745,"x_min":-41,"x_max":814,"o":"m 624 0 l -41 0 l -16 136 l 511 818 l 143 818 l 179 991 l 814 991 l 786 854 l 256 174 l 660 174 l 624 0 m 399 1088 q 550 1293 453 1147 l 777 1293 l 777 1282 q 673 1178 746 1244 q 541 1071 600 1113 l 399 1071 l 399 1088 z "},"ź":{"ha":632,"x_min":-32,"x_max":701,"o":"m 507 0 l -32 0 l -8 122 l 382 600 l 113 600 l 147 758 l 656 758 l 627 623 l 243 158 l 541 158 l 507 0 m 323 859 q 473 1064 376 918 l 701 1064 l 701 1053 q 596 949 669 1015 q 465 842 523 884 l 323 842 l 323 859 z "},"Ż":{"ha":745,"x_min":-41,"x_max":814,"o":"m 624 0 l -41 0 l -16 136 l 511 818 l 143 818 l 179 991 l 814 991 l 786 854 l 256 174 l 660 174 l 624 0 m 403 1165 q 435 1254 403 1224 q 526 1284 467 1284 q 602 1263 576 1284 q 627 1203 627 1242 q 597 1115 627 1149 q 505 1082 568 1082 q 403 1165 403 1082 z "},"ż":{"ha":632,"x_min":-32,"x_max":656,"o":"m 507 0 l -32 0 l -8 122 l 382 600 l 113 600 l 147 758 l 656 758 l 627 623 l 243 158 l 541 158 l 507 0 m 309 936 q 341 1025 309 995 q 432 1055 373 1055 q 507 1034 481 1055 q 533 974 533 1013 q 503 886 533 920 q 411 852 473 852 q 309 936 309 852 z "},"Ž":{"ha":745,"x_min":-41,"x_max":814,"o":"m 624 0 l -41 0 l -16 136 l 511 818 l 143 818 l 179 991 l 814 991 l 786 854 l 256 174 l 660 174 l 624 0 m 262 1293 l 397 1293 q 507 1179 439 1257 q 664 1293 585 1243 l 811 1293 l 811 1276 q 611 1071 667 1142 l 382 1071 q 332 1167 367 1107 q 262 1276 296 1227 l 262 1293 z "},"ž":{"ha":632,"x_min":-32,"x_max":728,"o":"m 507 0 l -32 0 l -8 122 l 382 600 l 113 600 l 147 758 l 656 758 l 627 623 l 243 158 l 541 158 l 507 0 m 180 1064 l 314 1064 q 424 950 357 1028 q 581 1064 502 1014 l 728 1064 l 728 1047 q 528 842 585 913 l 299 842 q 249 938 284 878 q 180 1047 214 998 l 180 1064 z "},"ſ":{"ha":497,"x_min":-167,"x_max":652,"o":"m -49 -334 q -167 -317 -119 -334 l -167 -153 q -89 -167 -125 -167 q 28 -52 3 -167 l 212 815 q 307 1004 241 945 q 492 1063 373 1063 q 652 1029 579 1063 l 597 878 q 507 899 551 899 q 445 871 469 899 q 412 800 422 844 l 225 -82 q -49 -334 173 -334 z "},"ƒ":{"ha":765,"x_min":-21,"x_max":785,"o":"m 97 -334 q -21 -317 26 -334 l -21 -153 q 57 -167 20 -167 q 174 -52 149 -167 l 300 546 l 186 546 l 205 647 l 334 701 l 346 758 q 440 946 374 887 q 625 1006 506 1006 q 785 972 714 1006 l 730 821 q 640 842 684 842 q 578 814 602 842 q 546 743 554 787 l 538 701 l 686 701 l 653 546 l 504 546 l 371 -82 q 97 -334 319 -334 z "},"Ǻ":{"ha":872,"x_min":-83,"x_max":896,"o":"m 736 991 q 684 869 736 916 l 789 0 l 587 0 l 567 224 l 249 224 l 134 0 l -83 0 l 412 913 q 396 990 396 945 q 442 1108 396 1065 q 564 1152 488 1152 q 687 1107 638 1152 q 736 991 736 1063 m 521 1198 q 590 1258 545 1217 q 664 1331 635 1299 l 896 1331 l 896 1324 q 790 1253 857 1291 q 667 1189 724 1215 l 521 1189 l 521 1198 m 629 990 q 611 1038 629 1021 q 564 1055 592 1055 q 517 1038 535 1055 q 498 990 498 1021 q 515 942 498 960 q 564 925 531 925 q 611 942 592 925 q 629 990 629 960 m 521 779 q 456 632 492 704 l 338 400 l 557 400 l 539 610 q 529 779 532 667 l 521 779 z "},"ǻ":{"ha":818,"x_min":61,"x_max":836,"o":"m 461 1198 q 533 1261 488 1219 q 604 1331 578 1302 l 836 1331 l 836 1324 q 730 1253 797 1291 q 607 1189 664 1215 l 461 1189 l 461 1198 m 675 975 q 627 858 675 903 q 503 812 580 812 q 381 856 427 812 q 335 974 335 900 q 381 1091 335 1047 q 503 1135 427 1135 q 626 1090 577 1135 q 675 975 675 1046 m 568 974 q 550 1022 568 1004 q 503 1039 531 1039 q 456 1022 474 1039 q 437 974 437 1004 q 454 926 437 943 q 503 908 470 908 q 550 926 531 908 q 568 974 568 943 m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 z "},"Ǽ":{"ha":1243,"x_min":-83,"x_max":1291,"o":"m 1080 0 l 526 0 l 576 236 l 288 236 l 139 0 l -83 0 l 542 991 l 1291 991 l 1254 819 l 907 819 l 861 602 l 1185 602 l 1147 429 l 823 429 l 770 174 l 1117 174 l 1080 0 m 614 412 l 700 819 l 646 819 l 399 412 l 614 412 m 765 1088 q 916 1293 819 1147 l 1143 1293 l 1143 1282 q 1038 1178 1112 1244 q 907 1071 965 1113 l 765 1071 l 765 1088 z "},"ǽ":{"ha":1211,"x_min":61,"x_max":1177,"o":"m 818 -14 q 696 5 744 -14 q 616 64 648 23 l 606 0 l 478 0 l 488 98 l 484 98 q 384 13 435 39 q 271 -14 333 -14 q 116 60 172 -14 q 61 261 61 134 q 107 516 61 397 q 233 704 154 635 q 408 772 312 772 q 517 746 473 772 q 595 661 561 720 l 599 661 l 637 758 l 765 758 l 753 697 q 834 751 783 730 q 949 772 886 772 q 1116 716 1055 772 q 1177 566 1177 659 q 1063 370 1177 439 q 741 301 950 301 l 705 301 l 704 288 l 704 275 q 742 175 704 210 q 850 140 779 140 q 953 156 895 140 q 1063 199 1011 172 l 1063 45 q 818 -14 941 -14 m 351 151 q 442 197 400 151 q 509 322 484 243 q 534 488 534 401 q 512 574 534 542 q 443 607 490 607 q 356 560 397 607 q 292 434 315 513 q 268 271 268 355 q 290 182 268 214 q 351 151 312 151 m 909 625 q 797 571 850 625 q 728 439 744 517 l 758 439 q 922 472 863 439 q 981 561 981 505 q 909 625 981 625 m 643 859 q 793 1064 696 918 l 1021 1064 l 1021 1053 q 916 949 989 1015 q 785 842 843 884 l 643 842 l 643 859 z "},"Ǿ":{"ha":1014,"x_min":68,"x_max":989,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 245 35 330 -14 l 172 -58 l 68 20 l 150 122 q 83 364 83 216 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 815 956 732 1007 l 886 1044 l 989 965 l 909 867 q 971 636 971 776 m 590 836 q 435 774 505 836 q 326 603 365 712 q 288 364 288 494 q 293 296 288 342 l 697 807 q 590 836 650 836 m 768 631 l 765 685 l 366 183 q 469 158 406 158 q 623 218 553 158 q 730 386 692 279 q 768 631 768 494 m 511 1088 q 661 1293 564 1147 l 888 1293 l 888 1282 q 784 1178 857 1244 q 652 1071 711 1113 l 511 1071 l 511 1088 z "},"ǿ":{"ha":812,"x_min":29,"x_max":764,"o":"m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 199 22 268 -14 l 125 -69 l 29 4 l 110 104 q 61 278 61 177 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 618 734 553 772 l 665 794 l 764 720 l 707 648 q 751 472 751 576 m 449 612 q 351 570 394 612 q 284 455 308 528 q 261 297 261 382 l 261 289 l 509 596 q 449 612 485 612 m 368 146 q 499 236 446 146 q 553 452 553 326 l 553 463 l 310 161 q 334 151 317 156 q 368 146 351 146 m 376 859 q 527 1064 430 918 l 754 1064 l 754 1053 q 650 949 723 1015 q 518 842 576 884 l 376 842 l 376 859 z "},"Ș":{"ha":736,"x_min":28,"x_max":753,"o":"m 642 293 q 541 69 642 151 q 269 -14 441 -14 q 28 47 119 -14 l 28 233 q 271 160 159 160 q 389 189 347 160 q 432 268 432 218 q 423 319 432 297 q 397 360 414 341 q 313 429 380 379 q 181 562 219 496 q 143 704 143 628 q 185 860 143 791 q 305 967 227 929 q 484 1006 382 1006 q 753 939 631 1006 l 679 781 q 484 831 573 831 q 391 800 427 831 q 355 720 355 770 q 378 647 355 678 q 478 566 400 616 q 601 446 560 511 q 642 293 642 380 m 102 -289 q 146 -189 119 -254 q 186 -85 174 -123 l 378 -85 l 378 -98 q 313 -198 355 -140 q 224 -307 271 -255 l 102 -307 l 102 -289 z "},"ș":{"ha":657,"x_min":16,"x_max":629,"o":"m 562 250 q 478 55 562 123 q 243 -14 393 -14 q 116 -3 170 -14 q 16 31 62 7 l 16 199 q 232 138 122 138 q 321 160 286 138 q 355 220 355 182 q 330 272 355 249 q 241 330 305 295 q 127 422 159 376 q 94 530 94 468 q 169 709 94 646 q 383 772 244 772 q 629 708 519 772 l 562 562 q 387 619 467 619 q 325 602 349 619 q 301 555 301 585 q 323 509 301 529 q 404 458 345 489 q 525 366 488 416 q 562 250 562 315 m 73 -289 q 118 -189 90 -254 q 158 -85 145 -123 l 349 -85 l 349 -98 q 284 -198 327 -140 q 195 -307 242 -255 l 73 -307 l 73 -289 z "},"ˆ":{"ha":770,"x_min":211,"x_max":760,"o":"m 760 842 l 625 842 q 515 956 583 878 q 358 842 444 896 l 211 842 l 211 859 q 315 958 254 897 q 411 1064 376 1019 l 640 1064 q 690 967 655 1027 q 760 859 726 907 l 760 842 z "},"ˇ":{"ha":770,"x_min":256,"x_max":804,"o":"m 256 1064 l 390 1064 q 500 950 433 1028 q 657 1064 578 1014 l 804 1064 l 804 1047 q 604 842 661 913 l 375 842 q 325 938 360 878 q 256 1047 290 998 l 256 1064 z "},"ˉ":{"ha":743,"x_min":261,"x_max":711,"o":"m 292 985 l 711 985 l 681 842 l 261 842 l 292 985 z "},"˘":{"ha":770,"x_min":292,"x_max":778,"o":"m 778 1071 q 511 842 741 842 q 350 891 408 842 q 292 1026 292 941 q 296 1071 292 1052 l 414 1071 q 438 1006 414 1027 q 518 986 463 986 q 605 1004 571 986 q 650 1071 638 1023 l 778 1071 z "},"˙":{"ha":412,"x_min":218,"x_max":443,"o":"m 218 936 q 251 1025 218 995 q 342 1055 283 1055 q 417 1034 391 1055 q 443 974 443 1013 q 413 886 443 920 q 321 852 383 852 q 218 936 218 852 z "},"˚":{"ha":802,"x_min":361,"x_max":701,"o":"m 701 1003 q 654 885 701 930 q 529 840 606 840 q 408 883 454 840 q 361 1002 361 926 q 407 1119 361 1076 q 529 1162 454 1162 q 652 1118 604 1162 q 701 1003 701 1074 m 595 1002 q 576 1049 595 1032 q 529 1067 557 1067 q 482 1049 500 1067 q 464 1002 464 1032 q 480 954 464 971 q 529 936 496 936 q 576 954 557 936 q 595 1002 595 971 z "},"˛":{"ha":286,"x_min":-117,"x_max":164,"o":"m 164 0 q 59 -100 83 -65 q 35 -170 35 -136 q 45 -199 35 -189 q 75 -210 56 -210 q 144 -197 105 -210 l 144 -317 q 33 -334 87 -334 q -76 -297 -36 -334 q -117 -201 -117 -261 q -84 -99 -117 -146 q 29 0 -52 -52 l 164 0 z "},"˜":{"ha":770,"x_min":214,"x_max":782,"o":"m 587 842 q 529 853 554 842 q 481 877 503 864 q 440 902 460 890 q 397 913 420 913 q 360 894 376 913 q 334 840 343 875 l 214 840 q 404 1050 254 1050 q 464 1039 437 1050 q 512 1014 490 1027 q 554 990 534 1001 q 595 979 574 979 q 634 997 618 979 q 665 1051 650 1014 l 782 1051 q 587 842 737 842 z "},"˝":{"ha":770,"x_min":189,"x_max":822,"o":"m 189 859 q 346 1064 267 945 l 553 1064 l 553 1053 q 449 952 524 1017 q 310 842 375 888 l 189 842 l 189 859 m 458 859 q 615 1064 536 945 l 822 1064 l 822 1053 q 719 952 793 1017 q 579 842 644 888 l 458 842 l 458 859 z "},"΄":{"ha":770,"x_min":383,"x_max":677,"o":"m 383 863 q 485 1105 435 966 l 677 1105 l 677 1089 q 505 842 596 955 l 383 842 l 383 863 z "},"΅":{"ha":770,"x_min":232,"x_max":786,"o":"m 437 960 q 476 1050 452 988 q 518 1164 501 1113 l 694 1164 l 694 1150 q 533 942 633 1053 l 437 942 l 437 960 m 232 937 q 258 1017 232 990 q 330 1044 284 1044 q 392 1025 371 1044 q 412 971 412 1006 q 388 892 412 922 q 314 863 364 863 q 232 937 232 863 m 606 937 q 632 1017 606 990 q 704 1044 658 1044 q 765 1025 745 1044 q 786 971 786 1006 q 762 892 786 922 q 688 863 738 863 q 606 937 606 863 z "},"Ά":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 50 791 q 152 1034 102 895 l 345 1034 l 345 1018 q 172 770 263 884 l 50 770 l 50 791 z "},"·":{"ha":396,"x_min":89,"x_max":329,"o":"m 89 471 q 125 569 89 532 q 227 606 161 606 q 301 580 273 606 q 329 507 329 554 q 292 412 329 448 q 194 375 254 375 q 117 400 144 375 q 89 471 89 426 z "},"Έ":{"ha":875,"x_min":23,"x_max":900,"o":"m 690 0 l 136 0 l 345 991 l 900 991 l 863 819 l 516 819 l 471 602 l 794 602 l 757 429 l 433 429 l 379 174 l 726 174 l 690 0 m 23 791 q 125 1034 75 895 l 317 1034 l 317 1018 q 145 770 236 884 l 23 770 l 23 791 z "},"Ή":{"ha":1072,"x_min":23,"x_max":1079,"o":"m 869 0 l 662 0 l 753 428 l 433 428 l 342 0 l 136 0 l 345 991 l 553 991 l 471 603 l 790 603 l 872 991 l 1079 991 l 869 0 m 23 791 q 125 1034 75 895 l 317 1034 l 317 1018 q 145 770 236 884 l 23 770 l 23 791 z "},"Ό":{"ha":1095,"x_min":42,"x_max":1052,"o":"m 1052 636 q 985 293 1052 444 q 801 64 918 141 q 532 -14 684 -14 q 261 86 359 -14 q 164 364 164 186 q 231 695 164 544 q 416 926 298 846 q 689 1007 534 1007 q 957 909 862 1007 q 1052 636 1052 812 m 672 832 q 522 770 590 832 q 414 600 453 708 q 375 364 375 491 q 420 214 375 264 q 547 163 465 163 q 697 222 629 163 q 802 389 764 281 q 840 631 840 496 q 796 780 840 727 q 672 832 752 832 m 42 791 q 144 1034 94 895 l 336 1034 l 336 1018 q 164 770 255 884 l 42 770 l 42 791 z "},"Ύ":{"ha":994,"x_min":23,"x_max":1122,"o":"m 636 590 l 890 991 l 1122 991 l 703 379 l 622 0 l 416 0 l 497 379 l 337 991 l 549 991 l 636 590 m 23 791 q 125 1034 75 895 l 317 1034 l 317 1018 q 145 770 236 884 l 23 770 l 23 791 z "},"Ώ":{"ha":1109,"x_min":42,"x_max":1068,"o":"m 682 832 q 547 789 607 832 q 449 662 487 747 q 412 482 412 578 q 437 308 412 378 q 517 187 463 238 l 477 0 l 63 0 l 99 176 l 352 176 q 243 302 283 219 q 203 488 203 385 q 266 760 203 639 q 440 944 329 881 q 697 1007 551 1007 q 969 913 871 1007 q 1068 654 1068 820 q 995 365 1068 488 q 785 176 922 243 l 1032 176 l 995 0 l 555 0 l 595 187 q 857 629 857 341 q 812 780 857 728 q 682 832 766 832 m 42 791 q 144 1034 94 895 l 336 1034 l 336 1018 q 164 770 255 884 l 42 770 l 42 791 z "},"ΐ":{"ha":510,"x_min":48,"x_max":602,"o":"m 334 151 q 443 175 378 151 l 443 22 q 262 -14 368 -14 q 114 29 162 -14 q 65 161 65 71 q 81 268 65 197 l 184 758 l 389 758 l 283 256 q 275 200 275 216 q 334 151 275 151 m 254 960 q 293 1050 268 988 q 334 1164 317 1113 l 511 1164 l 511 1150 q 349 942 450 1053 l 254 942 l 254 960 m 48 937 q 74 1017 48 990 q 146 1044 100 1044 q 208 1025 187 1044 q 229 971 229 1006 q 204 892 229 922 q 130 863 180 863 q 48 937 48 863 m 422 937 q 448 1017 422 990 q 520 1044 474 1044 q 582 1025 561 1044 q 602 971 602 1006 q 578 892 602 922 q 504 863 554 863 q 422 937 422 863 z "},"Α":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 z "},"Β":{"ha":861,"x_min":36,"x_max":848,"o":"m 534 991 q 769 936 690 991 q 848 771 848 881 q 792 603 848 669 q 632 515 736 537 l 632 511 q 740 446 700 494 q 781 323 781 398 q 677 84 781 168 q 390 0 573 0 l 36 0 l 245 991 l 534 991 m 370 599 l 471 599 q 594 632 553 599 q 635 726 635 665 q 519 819 635 819 l 416 819 l 370 599 m 279 174 l 401 174 q 526 213 481 174 q 571 322 571 252 q 447 432 571 432 l 335 432 l 279 174 z "},"Γ":{"ha":699,"x_min":36,"x_max":798,"o":"m 240 0 l 36 0 l 245 991 l 798 991 l 761 819 l 414 819 l 240 0 z "},"Δ":{"ha":840,"x_min":-36,"x_max":761,"o":"m 427 996 l 665 996 l 761 118 l 734 0 l -36 0 l -12 122 l 427 996 m 510 796 q 471 700 499 759 l 216 175 l 567 175 l 515 689 q 510 796 510 754 z "},"Ε":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 z "},"Ζ":{"ha":745,"x_min":-41,"x_max":814,"o":"m 624 0 l -41 0 l -16 136 l 511 818 l 143 818 l 179 991 l 814 991 l 786 854 l 256 174 l 660 174 l 624 0 z "},"Η":{"ha":972,"x_min":36,"x_max":979,"o":"m 770 0 l 562 0 l 653 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 979 991 l 770 0 z "},"Θ":{"ha":1031,"x_min":83,"x_max":987,"o":"m 705 590 l 669 418 l 368 418 l 404 590 l 705 590 m 987 612 q 924 285 987 429 q 744 63 861 140 q 469 -14 626 -14 q 185 91 288 -14 q 83 376 83 195 q 152 707 83 560 q 339 931 220 854 q 612 1007 458 1007 q 889 903 791 1007 q 987 612 987 799 m 600 832 q 442 775 511 832 q 334 610 373 718 q 294 371 294 502 q 344 219 294 275 q 478 163 393 163 q 637 220 570 163 q 741 383 705 277 q 777 623 777 489 q 729 775 777 719 q 600 832 682 832 z "},"Κ":{"ha":851,"x_min":36,"x_max":979,"o":"m 774 0 l 545 0 l 401 401 l 317 354 l 243 0 l 36 0 l 245 991 l 453 991 l 350 515 l 457 654 l 734 991 l 979 991 l 576 517 l 774 0 z "},"Λ":{"ha":833,"x_min":-83,"x_max":750,"o":"m -83 0 l 424 996 l 656 996 l 750 0 l 550 0 l 510 567 q 504 796 504 644 l 484 743 q 424 597 452 656 l 134 0 l -83 0 z "},"Μ":{"ha":1222,"x_min":36,"x_max":1229,"o":"m 568 250 l 942 991 l 1229 991 l 1019 0 l 829 0 l 928 469 q 999 768 964 637 l 996 768 l 610 0 l 419 0 l 378 768 l 375 768 q 349 612 368 709 q 222 0 331 515 l 36 0 l 245 991 l 519 991 l 566 250 l 568 250 z "},"Ν":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 846 0 l 614 0 l 372 750 l 368 750 l 366 728 q 321 467 344 582 l 222 0 l 36 0 l 245 991 l 488 991 l 718 261 l 721 261 q 747 408 729 313 q 869 991 766 504 l 1055 991 l 846 0 z "},"Ξ":{"ha":724,"x_min":-29,"x_max":765,"o":"m 178 602 l 631 602 l 593 429 l 140 429 l 178 602 m 207 991 l 765 991 l 729 819 l 171 819 l 207 991 m 618 174 l 582 0 l -29 0 l 5 174 l 618 174 z "},"Ο":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 z "},"Π":{"ha":965,"x_min":36,"x_max":972,"o":"m 762 0 l 555 0 l 729 817 l 416 817 l 243 0 l 36 0 l 245 991 l 972 991 l 762 0 z "},"Ρ":{"ha":806,"x_min":36,"x_max":807,"o":"m 354 525 l 392 525 q 544 572 488 525 q 599 697 599 618 q 467 819 599 819 l 416 819 l 354 525 m 807 703 q 692 446 807 539 q 375 353 577 353 l 317 353 l 243 0 l 36 0 l 245 991 l 475 991 q 723 919 639 991 q 807 703 807 847 z "},"Σ":{"ha":754,"x_min":-29,"x_max":802,"o":"m -29 0 l 4 164 l 372 507 l 154 833 l 187 991 l 802 991 l 765 819 l 386 819 l 602 493 l 262 174 l 667 174 l 631 0 l -29 0 z "},"Τ":{"ha":737,"x_min":114,"x_max":836,"o":"m 387 0 l 180 0 l 353 817 l 114 817 l 151 991 l 836 991 l 799 817 l 559 817 l 387 0 z "},"Υ":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 z "},"Φ":{"ha":1133,"x_min":83,"x_max":1090,"o":"m 378 -14 l 411 138 q 238 184 311 145 q 124 297 164 224 q 83 468 83 370 q 210 767 83 659 q 570 884 336 875 l 595 1006 l 787 1006 l 762 884 q 1005 785 920 870 q 1090 557 1090 700 q 962 252 1090 362 q 604 139 833 142 l 571 -14 l 378 -14 m 639 301 q 821 377 758 309 q 884 557 884 444 q 844 674 884 631 q 728 720 804 717 l 639 301 m 534 720 q 355 647 420 713 q 290 467 290 581 q 330 347 290 391 q 446 301 370 304 l 534 720 z "},"Χ":{"ha":842,"x_min":-79,"x_max":950,"o":"m 762 0 l 538 0 l 421 368 l 153 0 l -79 0 l 311 518 l 150 991 l 367 991 l 471 640 l 717 991 l 950 991 l 581 500 l 762 0 z "},"Ψ":{"ha":1133,"x_min":121,"x_max":1185,"o":"m 656 294 l 642 294 l 579 0 l 386 0 l 450 294 l 440 294 q 205 365 290 294 q 121 559 121 435 q 136 693 121 620 l 200 991 l 400 991 l 332 667 q 322 587 322 621 q 360 493 322 521 q 473 465 397 465 l 485 465 l 596 991 l 789 991 l 677 465 l 689 465 q 840 512 789 465 q 914 664 891 559 l 983 991 l 1185 991 l 1109 640 q 656 294 1036 294 z "},"Ω":{"ha":1006,"x_min":-41,"x_max":964,"o":"m 578 832 q 443 789 503 832 q 345 662 382 747 q 307 482 307 578 q 333 308 307 378 q 412 187 359 238 l 372 0 l -41 0 l -5 176 l 248 176 q 139 302 179 219 q 98 488 98 385 q 161 760 98 639 q 336 944 224 881 q 593 1007 447 1007 q 865 913 766 1007 q 964 654 964 820 q 890 365 964 488 q 681 176 817 243 l 928 176 l 890 0 l 450 0 l 490 187 q 753 629 753 341 q 707 780 753 728 q 578 832 662 832 z "},"Ϋ":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 m 293 1166 q 322 1246 293 1219 q 403 1274 351 1274 q 493 1200 493 1274 q 467 1121 493 1151 q 385 1092 440 1092 q 293 1166 293 1092 m 566 1166 q 594 1246 566 1219 q 675 1274 623 1274 q 743 1255 720 1274 q 766 1200 766 1236 q 739 1121 766 1151 q 657 1092 712 1092 q 566 1166 566 1092 z "},"ά":{"ha":842,"x_min":61,"x_max":842,"o":"m 602 656 q 634 713 614 684 q 669 758 654 743 l 842 758 q 780 620 811 702 q 730 457 748 538 l 685 240 q 681 204 681 220 q 722 160 681 160 q 766 168 747 160 l 766 7 q 654 -14 724 -14 q 488 98 518 -14 l 484 98 q 379 10 429 34 q 268 -14 330 -14 q 115 59 170 -14 q 61 261 61 131 q 106 523 61 405 q 234 706 152 640 q 418 772 316 772 q 520 746 478 772 q 597 656 563 720 l 602 656 m 358 151 q 450 199 410 151 q 512 338 489 247 q 534 488 534 429 q 513 574 534 542 q 447 607 491 607 q 358 561 399 607 q 292 438 317 515 q 268 281 268 362 q 290 182 268 214 q 358 151 312 151 m 429 863 q 531 1105 481 966 l 724 1105 l 724 1089 q 551 842 642 955 l 429 842 l 429 863 z "},"έ":{"ha":713,"x_min":26,"x_max":726,"o":"m 517 323 l 416 323 q 288 297 335 323 q 241 225 241 271 q 272 166 241 187 q 361 146 302 146 q 480 160 423 146 q 600 207 536 174 l 600 40 q 328 -14 492 -14 q 107 39 188 -14 q 26 186 26 92 q 249 397 26 361 l 249 401 q 165 461 195 422 q 136 547 136 499 q 220 713 136 654 q 453 772 303 772 q 726 714 619 772 l 664 564 q 554 607 602 595 q 458 619 507 619 q 357 597 393 619 q 322 534 322 576 q 355 483 322 499 q 456 467 388 467 l 547 467 l 517 323 m 381 863 q 483 1105 433 966 l 675 1105 l 675 1089 q 503 842 594 955 l 381 842 l 381 863 z "},"ή":{"ha":839,"x_min":25,"x_max":768,"o":"m 591 -334 l 387 -334 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 591 -334 m 428 863 q 530 1105 479 966 l 722 1105 l 722 1089 q 550 842 641 955 l 428 842 l 428 863 z "},"ί":{"ha":510,"x_min":65,"x_max":520,"o":"m 334 151 q 443 175 378 151 l 443 22 q 262 -14 368 -14 q 114 29 162 -14 q 65 161 65 71 q 81 268 65 197 l 184 758 l 389 758 l 283 256 q 275 200 275 216 q 334 151 275 151 m 226 863 q 328 1105 277 966 l 520 1105 l 520 1089 q 348 842 439 955 l 226 842 l 226 863 z "},"ΰ":{"ha":856,"x_min":81,"x_max":794,"o":"m 361 -14 q 153 54 224 -14 q 81 244 81 121 q 92 346 81 292 l 179 758 l 382 758 l 294 340 q 285 258 285 299 q 380 153 285 153 q 590 758 590 153 l 794 758 q 767 393 794 534 q 687 165 740 252 q 553 32 635 78 q 361 -14 471 -14 m 446 960 q 485 1050 460 988 q 526 1164 509 1113 l 703 1164 l 703 1150 q 541 942 642 1053 l 446 942 l 446 960 m 240 937 q 266 1017 240 990 q 338 1044 292 1044 q 400 1025 379 1044 q 420 971 420 1006 q 396 892 420 922 q 322 863 372 863 q 240 937 240 863 m 614 937 q 640 1017 614 990 q 712 1044 666 1044 q 773 1025 753 1044 q 794 971 794 1006 q 770 892 794 922 q 696 863 746 863 q 614 937 614 863 z "},"α":{"ha":842,"x_min":61,"x_max":842,"o":"m 602 656 q 634 713 614 684 q 669 758 654 743 l 842 758 q 780 620 811 702 q 730 457 748 538 l 685 240 q 681 204 681 220 q 722 160 681 160 q 766 168 747 160 l 766 7 q 654 -14 724 -14 q 488 98 518 -14 l 484 98 q 379 10 429 34 q 268 -14 330 -14 q 115 59 170 -14 q 61 261 61 131 q 106 523 61 405 q 234 706 152 640 q 418 772 316 772 q 520 746 478 772 q 597 656 563 720 l 602 656 m 358 151 q 450 199 410 151 q 512 338 489 247 q 534 488 534 429 q 513 574 534 542 q 447 607 491 607 q 358 561 399 607 q 292 438 317 515 q 268 281 268 362 q 290 182 268 214 q 358 151 312 151 z "},"β":{"ha":861,"x_min":-45,"x_max":835,"o":"m 545 1063 q 759 1000 683 1063 q 835 825 835 937 q 772 639 835 706 q 596 553 709 572 q 729 479 681 537 q 778 330 778 420 q 734 148 778 229 q 614 27 690 67 q 436 -14 538 -14 q 336 -2 382 -14 q 239 37 290 9 l 161 -334 l -45 -334 l 189 775 q 306 993 220 924 q 545 1063 392 1063 m 533 901 q 442 861 477 901 q 390 736 408 820 l 272 193 q 326 163 290 175 q 397 151 361 151 q 518 202 474 151 q 562 339 562 254 q 527 433 562 401 q 424 464 491 464 l 392 464 l 427 628 l 467 628 q 583 674 541 628 q 625 804 625 720 q 600 876 625 850 q 533 901 575 901 z "},"γ":{"ha":711,"x_min":40,"x_max":791,"o":"m 258 -334 l 40 -334 q 164 9 75 -159 l 69 758 l 269 758 q 295 431 286 545 q 302 205 304 317 l 306 205 q 331 269 316 233 q 362 337 347 304 q 572 758 377 369 l 791 758 l 418 72 q 315 -144 351 -51 q 258 -334 279 -237 z "},"δ":{"ha":817,"x_min":37,"x_max":835,"o":"m 359 628 q 257 821 257 713 q 338 998 257 933 q 558 1063 420 1063 q 701 1045 634 1063 q 835 986 768 1027 l 754 840 q 559 909 648 909 q 487 888 514 909 q 460 828 460 866 q 467 791 460 808 q 489 758 473 775 q 575 684 505 741 q 733 387 733 557 q 627 95 733 203 q 335 -14 522 -14 q 118 58 198 -14 q 37 253 37 130 q 121 490 37 391 q 359 628 205 589 m 358 153 q 472 217 427 153 q 518 382 518 281 q 449 536 518 481 q 308 435 363 507 q 253 273 253 362 q 279 184 253 216 q 358 153 305 153 z "},"ε":{"ha":713,"x_min":26,"x_max":726,"o":"m 517 323 l 416 323 q 288 297 335 323 q 241 225 241 271 q 272 166 241 187 q 361 146 302 146 q 480 160 423 146 q 600 207 536 174 l 600 40 q 328 -14 492 -14 q 107 39 188 -14 q 26 186 26 92 q 249 397 26 361 l 249 401 q 165 461 195 422 q 136 547 136 499 q 220 713 136 654 q 453 772 303 772 q 726 714 619 772 l 664 564 q 554 607 602 595 q 458 619 507 619 q 357 597 393 619 q 322 534 322 576 q 355 483 322 499 q 456 467 388 467 l 547 467 l 517 323 z "},"ζ":{"ha":643,"x_min":61,"x_max":779,"o":"m 61 297 q 103 496 61 403 q 229 680 146 589 q 500 913 313 770 q 378 904 447 904 l 216 904 l 250 1055 l 779 1055 l 753 932 q 461 678 562 779 q 314 494 360 577 q 268 326 268 410 q 297 238 268 275 q 389 174 326 202 q 493 113 460 140 q 543 53 526 86 q 559 -25 559 20 q 530 -141 559 -87 q 433 -257 500 -195 l 220 -257 q 327 -137 300 -176 q 353 -66 353 -97 q 334 -26 353 -43 q 260 17 315 -8 q 108 132 155 64 q 61 297 61 199 z "},"η":{"ha":839,"x_min":25,"x_max":768,"o":"m 591 -334 l 387 -334 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 591 -334 z "},"θ":{"ha":812,"x_min":68,"x_max":789,"o":"m 334 -14 q 136 65 203 -14 q 68 293 68 144 q 88 505 68 387 q 149 740 109 623 q 242 928 190 858 q 365 1034 294 998 q 529 1071 435 1071 q 723 991 658 1071 q 789 761 789 911 q 731 377 789 581 q 575 79 673 172 q 334 -14 476 -14 m 349 136 q 454 215 410 136 q 536 456 498 293 l 290 456 q 269 262 269 342 q 349 136 269 136 m 513 921 q 323 610 397 921 l 568 610 q 587 802 587 717 q 569 888 587 856 q 513 921 551 921 z "},"ι":{"ha":510,"x_min":65,"x_max":443,"o":"m 334 151 q 443 175 378 151 l 443 22 q 262 -14 368 -14 q 114 29 162 -14 q 65 161 65 71 q 81 268 65 197 l 184 758 l 389 758 l 283 256 q 275 200 275 216 q 334 151 275 151 z "},"κ":{"ha":789,"x_min":25,"x_max":857,"o":"m 624 758 l 857 758 l 519 416 l 713 0 l 485 0 l 361 285 l 279 236 l 229 0 l 25 0 l 186 758 l 390 758 q 331 501 342 542 q 311 432 320 460 l 314 432 l 624 758 z "},"λ":{"ha":794,"x_min":-62,"x_max":732,"o":"m 353 720 l 346 782 q 319 866 340 842 q 256 890 298 890 q 187 882 226 890 l 163 1048 q 293 1064 222 1064 q 462 1005 403 1064 q 539 817 522 945 l 608 297 q 636 190 618 219 q 686 160 653 160 q 732 167 708 160 l 732 8 q 603 -14 682 -14 q 484 31 525 -14 q 429 171 443 76 l 410 307 q 397 469 402 357 q 365 394 382 437 q 326 311 348 352 l 160 0 l -62 0 l 353 720 z "},"μ":{"ha":847,"x_min":-46,"x_max":823,"o":"m 288 236 q 309 173 288 195 q 363 151 330 151 q 473 223 424 151 q 553 440 522 296 l 619 758 l 823 758 l 663 0 l 507 0 l 519 119 l 515 119 q 335 -14 436 -14 q 274 0 300 -14 q 235 32 248 13 l 231 32 q 216 -62 225 -13 q 160 -334 207 -112 l -46 -334 l 186 758 l 390 758 l 298 321 q 288 236 288 273 z "},"ν":{"ha":764,"x_min":69,"x_max":777,"o":"m 69 758 l 269 758 l 311 340 q 318 184 318 275 q 467 426 408 291 q 568 758 526 560 l 777 758 q 633 335 732 516 q 366 0 534 153 l 164 0 l 69 758 z "},"ξ":{"ha":643,"x_min":62,"x_max":733,"o":"m 575 478 l 528 478 q 337 434 406 478 q 268 313 268 391 q 292 238 268 267 q 389 174 315 209 q 499 107 470 133 q 544 49 529 81 q 559 -25 559 17 q 530 -141 559 -87 q 433 -257 500 -195 l 220 -257 q 323 -139 296 -180 q 350 -66 350 -98 q 330 -23 350 -41 q 260 17 310 -6 q 110 127 157 64 q 62 278 62 191 q 309 557 62 493 l 309 561 q 207 615 243 576 q 171 708 171 654 q 223 834 171 784 q 390 913 276 884 q 225 904 264 904 l 189 904 l 222 1055 l 733 1055 l 703 913 l 686 913 q 523 891 595 913 q 415 829 451 869 q 379 732 379 788 q 419 649 379 677 q 536 621 458 621 l 606 621 l 575 478 z "},"ο":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 z "},"π":{"ha":993,"x_min":64,"x_max":1018,"o":"m 796 149 q 885 171 840 149 l 885 24 q 717 -14 817 -14 q 581 30 628 -14 q 533 155 533 73 q 537 197 533 174 q 618 603 541 221 l 432 603 l 304 0 l 97 0 l 227 603 l 64 603 l 83 703 l 216 758 l 1018 758 l 986 603 l 823 603 l 750 236 q 745 197 745 209 q 796 149 745 149 z "},"ρ":{"ha":827,"x_min":-45,"x_max":765,"o":"m 765 478 q 721 223 765 336 q 595 48 677 111 q 410 -14 514 -14 q 235 71 299 -14 q 218 -45 229 15 q 158 -334 207 -104 l -45 -334 l 110 400 q 186 622 141 547 q 304 735 232 697 q 484 772 377 772 q 690 694 616 772 q 765 478 765 616 m 471 607 q 376 554 412 607 q 317 390 340 500 l 279 211 q 380 151 313 151 q 467 195 427 151 q 532 323 507 239 q 558 481 558 407 q 536 574 558 541 q 471 607 513 607 z "},"ς":{"ha":643,"x_min":61,"x_max":685,"o":"m 268 330 q 294 240 268 276 q 389 174 321 204 q 493 113 460 140 q 543 53 526 86 q 559 -25 559 20 q 530 -141 559 -87 q 433 -257 500 -195 l 220 -257 q 323 -139 296 -180 q 350 -66 350 -98 q 329 -21 350 -39 q 260 20 308 -2 q 107 135 153 68 q 61 302 61 202 q 116 544 61 431 q 262 714 172 656 q 468 772 353 772 q 685 724 583 772 l 623 568 q 471 607 537 607 q 368 569 414 607 q 295 466 321 531 q 268 330 268 401 z "},"σ":{"ha":859,"x_min":61,"x_max":908,"o":"m 745 400 q 715 244 745 326 q 635 105 686 162 q 514 17 585 48 q 355 -14 444 -14 q 140 66 219 -14 q 61 288 61 146 q 115 537 61 431 q 273 701 170 644 q 517 758 376 758 l 908 758 l 876 607 l 684 607 q 727 523 709 576 q 745 400 745 470 m 498 607 q 375 566 427 607 q 294 453 322 526 q 267 292 267 381 q 368 153 267 153 q 496 241 447 153 q 546 463 546 330 q 518 607 546 538 l 498 607 z "},"τ":{"ha":693,"x_min":64,"x_max":720,"o":"m 437 151 q 547 175 481 151 l 547 22 q 367 -14 472 -14 q 218 29 267 -14 q 170 161 170 71 q 178 237 170 195 l 256 603 l 64 603 l 83 703 l 212 758 l 720 758 l 686 603 l 460 603 l 382 237 q 378 201 378 217 q 437 151 378 151 z "},"υ":{"ha":856,"x_min":81,"x_max":794,"o":"m 361 -14 q 153 54 224 -14 q 81 244 81 121 q 92 346 81 292 l 179 758 l 382 758 l 294 340 q 285 258 285 299 q 380 153 285 153 q 590 758 590 153 l 794 758 q 767 393 794 534 q 687 165 740 252 q 553 32 635 78 q 361 -14 471 -14 z "},"φ":{"ha":1061,"x_min":61,"x_max":1000,"o":"m 567 154 q 687 212 636 165 q 765 335 738 260 q 793 498 793 410 q 729 619 793 619 q 642 500 669 619 l 567 154 m 269 -334 l 340 -7 q 137 94 212 10 q 61 313 61 178 q 119 564 61 450 q 309 786 178 677 l 439 667 q 309 491 349 575 q 269 319 269 407 q 298 205 269 245 q 372 153 326 164 l 447 503 q 548 709 479 645 q 736 772 617 772 q 930 694 861 772 q 1000 481 1000 616 q 943 229 1000 339 q 779 57 886 119 q 532 -12 672 -6 l 467 -334 l 269 -334 z "},"χ":{"ha":766,"x_min":-176,"x_max":854,"o":"m 208 772 q 335 725 292 772 q 395 567 378 677 l 412 443 l 629 758 l 854 758 l 465 233 l 515 -81 q 538 -140 522 -120 q 587 -160 554 -160 q 657 -150 618 -160 l 657 -311 q 525 -334 591 -334 q 395 -287 439 -334 q 335 -131 351 -239 l 307 60 l 46 -334 l -176 -334 l 257 272 l 221 498 q 198 573 212 551 q 155 595 184 595 q 106 585 132 595 l 71 746 q 208 772 139 772 z "},"ψ":{"ha":1122,"x_min":81,"x_max":1061,"o":"m 794 1054 l 602 146 q 796 314 734 168 q 857 758 857 461 l 1061 758 q 1008 318 1061 476 q 846 77 956 159 q 567 -20 737 -5 l 500 -334 l 304 -334 l 371 -20 q 155 62 229 -5 q 81 244 81 129 q 92 346 81 292 l 179 758 l 382 758 l 294 340 q 285 258 285 299 q 316 176 285 206 q 406 143 347 146 l 599 1054 l 794 1054 z "},"ω":{"ha":1139,"x_min":61,"x_max":1078,"o":"m 297 -14 q 123 58 184 -14 q 61 258 61 130 q 228 758 61 493 l 433 758 q 304 508 352 639 q 257 264 257 376 q 334 147 257 147 q 410 187 381 147 q 457 317 438 227 l 500 517 l 693 517 q 651 322 665 389 q 637 225 637 256 q 705 147 637 147 q 795 200 754 147 q 860 354 836 254 q 885 564 885 454 q 864 758 885 666 l 1057 758 q 1078 579 1078 673 q 981 145 1078 304 q 710 -14 884 -14 q 524 123 562 -14 q 424 18 479 50 q 297 -14 369 -14 z "},"ϊ":{"ha":510,"x_min":65,"x_max":574,"o":"m 334 151 q 443 175 378 151 l 443 22 q 262 -14 368 -14 q 114 29 162 -14 q 65 161 65 71 q 81 268 65 197 l 184 758 l 389 758 l 283 256 q 275 200 275 216 q 334 151 275 151 m 102 937 q 131 1017 102 990 q 212 1044 159 1044 q 302 971 302 1044 q 275 892 302 922 q 193 863 249 863 q 102 937 102 863 m 374 937 q 403 1017 374 990 q 484 1044 431 1044 q 551 1025 528 1044 q 574 971 574 1006 q 548 892 574 922 q 466 863 521 863 q 374 937 374 863 z "},"ϋ":{"ha":856,"x_min":81,"x_max":794,"o":"m 361 -14 q 153 54 224 -14 q 81 244 81 121 q 92 346 81 292 l 179 758 l 382 758 l 294 340 q 285 258 285 299 q 380 153 285 153 q 590 758 590 153 l 794 758 q 767 393 794 534 q 687 165 740 252 q 553 32 635 78 q 361 -14 471 -14 m 272 937 q 301 1017 272 990 q 382 1044 330 1044 q 472 971 472 1044 q 446 892 472 922 q 363 863 419 863 q 272 937 272 863 m 545 937 q 573 1017 545 990 q 654 1044 602 1044 q 722 1025 699 1044 q 745 971 745 1006 q 718 892 745 922 q 636 863 691 863 q 545 937 545 863 z "},"ό":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 404 863 q 506 1105 456 966 l 699 1105 l 699 1089 q 526 842 617 955 l 404 842 l 404 863 z "},"ύ":{"ha":856,"x_min":81,"x_max":794,"o":"m 361 -14 q 153 54 224 -14 q 81 244 81 121 q 92 346 81 292 l 179 758 l 382 758 l 294 340 q 285 258 285 299 q 380 153 285 153 q 590 758 590 153 l 794 758 q 767 393 794 534 q 687 165 740 252 q 553 32 635 78 q 361 -14 471 -14 m 416 863 q 518 1105 468 966 l 711 1105 l 711 1089 q 538 842 629 955 l 416 842 l 416 863 z "},"ώ":{"ha":1139,"x_min":61,"x_max":1078,"o":"m 297 -14 q 123 58 184 -14 q 61 258 61 130 q 228 758 61 493 l 433 758 q 304 508 352 639 q 257 264 257 376 q 334 147 257 147 q 410 187 381 147 q 457 317 438 227 l 500 517 l 693 517 q 651 322 665 389 q 637 225 637 256 q 705 147 637 147 q 795 200 754 147 q 860 354 836 254 q 885 564 885 454 q 864 758 885 666 l 1057 758 q 1078 579 1078 673 q 981 145 1078 304 q 710 -14 884 -14 q 524 123 562 -14 q 424 18 479 50 q 297 -14 369 -14 m 570 863 q 672 1105 622 966 l 865 1105 l 865 1089 q 692 842 783 955 l 570 842 l 570 863 z "},"Ё":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 309 1166 q 338 1246 309 1219 q 419 1274 367 1274 q 509 1200 509 1274 q 483 1121 509 1151 q 401 1092 456 1092 q 309 1166 309 1092 m 582 1166 q 610 1246 582 1219 q 692 1274 639 1274 q 759 1255 736 1274 q 782 1200 782 1236 q 755 1121 782 1151 q 673 1092 728 1092 q 582 1166 582 1092 z "},"Ђ":{"ha":1031,"x_min":114,"x_max":940,"o":"m 632 -14 q 500 12 553 -14 l 500 184 q 600 158 554 158 q 675 184 650 158 q 714 267 701 210 q 730 348 726 324 q 732 379 733 372 q 710 439 732 420 q 642 457 689 457 l 484 457 l 386 0 l 179 0 l 353 817 l 114 817 l 151 991 l 829 991 l 791 817 l 559 817 l 521 632 l 685 632 q 873 573 806 632 q 940 408 940 514 q 938 359 940 382 q 918 242 936 337 q 867 94 901 148 q 780 14 834 39 q 632 -14 726 -12 z "},"Ѓ":{"ha":699,"x_min":36,"x_max":798,"o":"m 240 0 l 36 0 l 245 991 l 798 991 l 761 819 l 414 819 l 240 0 m 412 1088 q 563 1293 466 1147 l 790 1293 l 790 1282 q 686 1178 759 1244 q 554 1071 612 1113 l 412 1071 l 412 1088 z "},"Є":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 440 767 515 832 q 328 586 366 703 l 689 586 l 653 414 l 296 414 l 294 393 l 294 372 q 489 163 294 163 q 718 215 588 163 l 718 39 q 447 -14 591 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 766 990 696 1007 q 905 936 835 974 l 825 766 q 725 813 777 794 q 614 832 673 832 z "},"Ѕ":{"ha":736,"x_min":28,"x_max":753,"o":"m 642 293 q 541 69 642 151 q 269 -14 441 -14 q 28 47 119 -14 l 28 233 q 271 160 159 160 q 389 189 347 160 q 432 268 432 218 q 423 319 432 297 q 397 360 414 341 q 313 429 380 379 q 181 562 219 496 q 143 704 143 628 q 185 860 143 791 q 305 967 227 929 q 484 1006 382 1006 q 753 939 631 1006 l 679 781 q 484 831 573 831 q 391 800 427 831 q 355 720 355 770 q 378 647 355 678 q 478 566 400 616 q 601 446 560 511 q 642 293 642 380 z "},"Ј":{"ha":460,"x_min":-218,"x_max":468,"o":"m -92 -292 q -218 -273 -155 -292 l -218 -102 q -107 -115 -159 -115 q 2 -74 -40 -115 q 62 56 43 -33 l 261 991 l 468 991 l 262 26 q 143 -216 227 -140 q -92 -292 60 -292 z "},"Љ":{"ha":1331,"x_min":-41,"x_max":1258,"o":"m 880 611 l 926 611 q 1173 541 1087 611 q 1258 340 1258 471 q 1151 88 1258 176 q 842 0 1044 0 l 545 0 l 717 817 l 545 817 q 435 425 491 600 q 330 158 380 251 q 219 26 280 66 q 56 -14 157 -14 q -41 3 1 -14 l -41 175 q 26 161 -5 161 q 99 183 71 161 q 155 252 127 204 q 217 399 182 299 q 297 651 253 499 q 389 991 340 803 l 961 991 l 880 611 m 787 172 l 868 172 q 1002 213 956 172 q 1048 334 1048 254 q 1016 411 1048 384 q 918 439 984 439 l 844 439 l 787 172 z "},"Њ":{"ha":1303,"x_min":36,"x_max":1231,"o":"m 1231 343 q 1125 89 1231 178 q 821 0 1019 0 l 517 0 l 610 439 l 336 439 l 243 0 l 36 0 l 245 991 l 453 991 l 372 611 l 644 611 l 726 991 l 933 991 l 852 611 l 911 611 q 1149 542 1067 611 q 1231 343 1231 473 m 760 172 l 846 172 q 976 213 930 172 q 1021 329 1021 254 q 890 439 1021 439 l 817 439 l 760 172 z "},"Ћ":{"ha":1031,"x_min":114,"x_max":939,"o":"m 732 374 q 707 438 732 420 q 631 457 682 457 l 484 457 l 386 0 l 179 0 l 353 817 l 114 817 l 151 991 l 829 991 l 791 817 l 559 817 l 521 632 l 673 632 q 872 571 806 632 q 939 401 939 510 q 924 283 939 359 l 867 0 l 657 0 l 725 319 q 732 374 732 353 z "},"Ќ":{"ha":827,"x_min":36,"x_max":954,"o":"m 760 0 l 530 0 l 346 488 l 243 0 l 36 0 l 245 991 l 453 991 l 354 528 l 721 991 l 954 991 l 559 501 l 760 0 m 476 1088 q 627 1293 530 1147 l 854 1293 l 854 1282 q 749 1178 823 1244 q 618 1071 676 1113 l 476 1071 l 476 1088 z "},"Ў":{"ha":831,"x_min":21,"x_max":958,"o":"m 164 -14 q 21 8 80 -14 l 21 189 q 155 163 76 163 q 213 174 188 163 q 259 208 238 186 q 314 285 281 230 l 121 991 l 329 991 l 433 564 q 453 461 449 500 q 498 562 484 536 l 732 991 l 958 991 l 550 293 q 411 88 460 140 q 303 11 361 36 q 164 -14 245 -14 m 884 1314 q 818 1173 861 1223 q 703 1097 774 1122 q 528 1071 631 1071 q 319 1123 392 1071 q 247 1282 247 1175 q 250 1314 247 1298 l 431 1314 l 429 1296 l 429 1282 q 545 1187 429 1187 q 648 1217 612 1187 q 700 1314 684 1247 l 884 1314 z "},"Џ":{"ha":965,"x_min":36,"x_max":972,"o":"m 245 991 l 454 991 l 281 175 l 593 175 l 766 991 l 972 991 l 762 0 l 503 0 l 440 -289 l 235 -289 l 297 0 l 36 0 l 245 991 z "},"А":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 z "},"Б":{"ha":822,"x_min":36,"x_max":803,"o":"m 415 611 q 662 540 576 611 q 747 334 747 469 q 640 86 747 173 q 330 0 533 0 l 36 0 l 245 991 l 803 991 l 766 819 l 414 819 l 370 611 l 415 611 m 345 172 q 488 212 439 172 q 538 323 538 252 q 407 439 538 439 l 334 439 l 277 172 l 345 172 z "},"В":{"ha":861,"x_min":36,"x_max":848,"o":"m 534 991 q 769 936 690 991 q 848 771 848 881 q 792 603 848 669 q 632 515 736 537 l 632 511 q 740 446 700 494 q 781 323 781 398 q 677 84 781 168 q 390 0 573 0 l 36 0 l 245 991 l 534 991 m 370 599 l 471 599 q 594 632 553 599 q 635 726 635 665 q 519 819 635 819 l 416 819 l 370 599 m 279 174 l 401 174 q 526 213 481 174 q 571 322 571 252 q 447 432 571 432 l 335 432 l 279 174 z "},"Г":{"ha":699,"x_min":36,"x_max":798,"o":"m 240 0 l 36 0 l 245 991 l 798 991 l 761 819 l 414 819 l 240 0 z "},"Д":{"ha":1000,"x_min":-134,"x_max":954,"o":"m -36 175 l 52 175 q 260 543 168 342 q 435 991 353 743 l 954 991 l 781 175 l 907 175 l 808 -289 l 603 -289 l 665 0 l 134 0 l 71 -289 l -134 -289 l -36 175 m 570 817 q 281 175 424 399 l 568 175 l 705 817 l 570 817 z "},"Е":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 z "},"Ж":{"ha":1204,"x_min":-85,"x_max":1317,"o":"m 335 529 l 146 991 l 351 991 l 532 528 l 631 991 l 829 991 l 730 528 l 1095 991 l 1317 991 l 922 501 l 1122 0 l 908 0 l 722 488 l 619 0 l 421 0 l 524 486 l 147 0 l -85 0 l 335 529 z "},"З":{"ha":828,"x_min":28,"x_max":814,"o":"m 814 775 q 740 594 814 661 q 532 519 665 528 l 532 517 q 685 448 629 505 q 742 302 742 391 q 633 68 742 151 q 315 -14 524 -14 q 151 -1 221 -14 q 28 40 81 11 l 28 218 q 298 151 151 151 q 472 192 414 151 q 530 311 530 233 q 478 404 530 374 q 314 433 426 433 l 218 433 l 253 597 l 339 597 q 599 733 599 597 q 567 810 599 782 q 471 838 534 838 q 227 754 355 838 l 153 896 q 335 982 250 958 q 522 1006 420 1006 q 673 976 606 1006 q 777 893 740 946 q 814 775 814 840 z "},"И":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 286 283 l 804 991 l 1055 991 l 846 0 l 659 0 q 756 463 722 302 q 814 720 790 623 l 808 721 l 290 0 l 36 0 l 245 991 l 436 991 l 336 522 q 279 283 292 331 l 286 283 z "},"Й":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 286 283 l 804 991 l 1055 991 l 846 0 l 659 0 q 756 463 722 302 q 814 720 790 623 l 808 721 l 290 0 l 36 0 l 245 991 l 436 991 l 336 522 q 279 283 292 331 l 286 283 m 1005 1314 q 939 1173 982 1223 q 823 1097 895 1122 q 648 1071 751 1071 q 440 1123 513 1071 q 368 1282 368 1175 q 371 1314 368 1298 l 551 1314 l 550 1296 l 550 1282 q 665 1187 550 1187 q 769 1217 732 1187 q 821 1314 805 1247 l 1005 1314 z "},"К":{"ha":827,"x_min":36,"x_max":954,"o":"m 760 0 l 530 0 l 346 488 l 243 0 l 36 0 l 245 991 l 453 991 l 354 528 l 721 991 l 954 991 l 559 501 l 760 0 z "},"Л":{"ha":965,"x_min":-41,"x_max":972,"o":"m 545 817 q 435 425 491 600 q 330 158 380 251 q 219 26 280 66 q 56 -14 157 -14 q -41 3 1 -14 l -41 175 q 26 161 -5 161 q 99 183 71 161 q 155 252 127 204 q 217 399 182 299 q 297 651 253 499 q 389 991 340 803 l 972 991 l 761 0 l 555 0 l 729 817 l 545 817 z "},"М":{"ha":1222,"x_min":36,"x_max":1229,"o":"m 568 250 l 942 991 l 1229 991 l 1019 0 l 829 0 l 928 469 q 999 768 964 637 l 996 768 l 610 0 l 419 0 l 378 768 l 375 768 q 349 612 368 709 q 222 0 331 515 l 36 0 l 245 991 l 519 991 l 566 250 l 568 250 z "},"Н":{"ha":972,"x_min":36,"x_max":979,"o":"m 770 0 l 562 0 l 653 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 979 991 l 770 0 z "},"О":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 z "},"П":{"ha":965,"x_min":36,"x_max":972,"o":"m 762 0 l 555 0 l 729 817 l 416 817 l 243 0 l 36 0 l 245 991 l 972 991 l 762 0 z "},"Р":{"ha":806,"x_min":36,"x_max":807,"o":"m 354 525 l 392 525 q 544 572 488 525 q 599 697 599 618 q 467 819 599 819 l 416 819 l 354 525 m 807 703 q 692 446 807 539 q 375 353 577 353 l 317 353 l 243 0 l 36 0 l 245 991 l 475 991 q 723 919 639 991 q 807 703 807 847 z "},"С":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 453 777 524 832 q 338 615 381 722 q 294 386 294 509 q 341 218 294 273 q 489 163 387 163 q 718 215 588 163 l 718 39 q 447 -14 583 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 764 992 699 1007 q 905 936 830 977 l 825 766 q 707 819 753 806 q 614 832 660 832 z "},"Т":{"ha":737,"x_min":114,"x_max":836,"o":"m 387 0 l 180 0 l 353 817 l 114 817 l 151 991 l 836 991 l 799 817 l 559 817 l 387 0 z "},"У":{"ha":831,"x_min":21,"x_max":958,"o":"m 164 -14 q 21 8 80 -14 l 21 189 q 155 163 76 163 q 213 174 188 163 q 259 208 238 186 q 314 285 281 230 l 121 991 l 329 991 l 433 564 q 453 461 449 500 q 498 562 484 536 l 732 991 l 958 991 l 550 293 q 411 88 460 140 q 303 11 361 36 q 164 -14 245 -14 z "},"Ф":{"ha":1133,"x_min":83,"x_max":1090,"o":"m 378 -14 l 411 138 q 238 184 311 145 q 124 297 164 224 q 83 468 83 370 q 210 767 83 659 q 570 884 336 875 l 595 1006 l 787 1006 l 762 884 q 1005 785 920 870 q 1090 557 1090 700 q 962 252 1090 362 q 604 139 833 142 l 571 -14 l 378 -14 m 639 301 q 821 377 758 309 q 884 557 884 444 q 844 674 884 631 q 728 720 804 717 l 639 301 m 534 720 q 355 647 420 713 q 290 467 290 581 q 330 347 290 391 q 446 301 370 304 l 534 720 z "},"Х":{"ha":842,"x_min":-79,"x_max":950,"o":"m 762 0 l 538 0 l 421 368 l 153 0 l -79 0 l 311 518 l 150 991 l 367 991 l 471 640 l 717 991 l 950 991 l 581 500 l 762 0 z "},"Ц":{"ha":1018,"x_min":36,"x_max":972,"o":"m 939 167 l 842 -289 l 636 -289 l 699 0 l 36 0 l 245 991 l 454 991 l 281 175 l 593 175 l 766 991 l 972 991 l 798 167 l 939 167 z "},"Ч":{"ha":935,"x_min":125,"x_max":942,"o":"m 525 0 l 606 380 q 370 322 479 322 q 191 380 256 322 q 125 541 125 437 q 134 619 125 579 l 210 991 l 416 991 l 343 642 q 336 586 336 610 q 440 497 336 497 q 640 547 529 497 l 734 991 l 942 991 l 732 0 l 525 0 z "},"Ш":{"ha":1394,"x_min":36,"x_max":1401,"o":"m 36 0 l 245 991 l 458 991 l 285 175 l 543 175 l 717 991 l 930 991 l 757 175 l 1015 175 l 1189 991 l 1401 991 l 1192 0 l 36 0 z "},"Щ":{"ha":1447,"x_min":36,"x_max":1401,"o":"m 1368 167 l 1271 -289 l 1065 -289 l 1128 0 l 36 0 l 245 991 l 458 991 l 285 175 l 543 175 l 717 991 l 930 991 l 757 175 l 1015 175 l 1189 991 l 1401 991 l 1226 167 l 1368 167 z "},"Ъ":{"ha":966,"x_min":114,"x_max":895,"o":"m 517 611 l 562 611 q 810 540 725 611 q 895 334 895 469 q 787 86 895 173 q 478 0 680 0 l 180 0 l 353 817 l 114 817 l 151 991 l 597 991 l 517 611 m 424 172 l 492 172 q 635 212 586 172 q 685 323 685 252 q 554 439 685 439 l 481 439 l 424 172 z "},"Ы":{"ha":1187,"x_min":36,"x_max":1194,"o":"m 985 0 l 772 0 l 982 991 l 1194 991 l 985 0 m 729 334 q 622 86 729 173 q 313 0 515 0 l 36 0 l 245 991 l 453 991 l 372 611 l 397 611 q 645 540 560 611 q 729 334 729 469 m 279 172 l 326 172 q 470 212 420 172 q 519 323 519 252 q 389 439 519 439 l 336 439 l 279 172 z "},"Ь":{"ha":822,"x_min":36,"x_max":750,"o":"m 750 334 q 643 86 750 173 q 334 0 536 0 l 36 0 l 245 991 l 453 991 l 372 611 l 418 611 q 665 540 581 611 q 750 334 750 469 m 279 172 l 347 172 q 491 212 441 172 q 541 323 541 252 q 410 439 541 439 l 336 439 l 279 172 z "},"Э":{"ha":850,"x_min":18,"x_max":807,"o":"m 264 161 q 452 223 378 161 q 567 414 526 286 l 201 414 l 237 586 l 595 586 l 596 603 l 596 621 q 421 832 596 832 q 335 823 377 832 q 203 779 292 814 l 149 946 q 447 1007 290 1007 q 714 908 622 1007 q 807 624 807 808 q 740 292 807 442 q 557 64 673 142 q 288 -14 441 -14 q 140 -1 205 -14 q 18 43 75 12 l 18 227 q 264 161 136 161 z "},"Ю":{"ha":1397,"x_min":36,"x_max":1354,"o":"m 1354 636 q 1295 296 1354 447 q 1125 66 1235 146 q 867 -14 1016 -14 q 611 86 703 -14 q 518 364 518 186 q 521 428 518 398 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 549 603 q 724 903 603 798 q 1011 1007 845 1007 q 1264 909 1175 1007 q 1354 636 1354 812 m 993 832 q 859 770 920 832 q 764 600 798 708 q 729 364 729 491 q 769 214 729 264 q 882 163 810 163 q 1015 222 954 163 q 1109 388 1075 281 q 1143 631 1143 494 q 1105 779 1143 725 q 993 832 1066 832 z "},"Я":{"ha":851,"x_min":-85,"x_max":859,"o":"m 443 380 l 161 0 l -85 0 l 264 446 q 161 545 191 492 q 131 671 131 598 q 235 907 131 822 q 529 991 339 991 l 859 991 l 648 0 l 441 0 l 522 380 l 443 380 m 615 819 l 524 819 q 392 781 437 819 q 347 667 347 742 q 384 582 347 613 q 485 551 421 551 l 558 551 l 615 819 z "},"а":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 z "},"б":{"ha":812,"x_min":74,"x_max":860,"o":"m 74 313 q 163 723 74 537 q 406 978 252 908 q 545 1019 454 1000 q 839 1065 636 1038 l 860 890 q 573 844 652 860 q 449 799 494 828 q 373 720 404 769 q 322 591 342 670 l 323 591 q 426 677 368 648 q 549 707 484 707 q 697 643 645 707 q 750 457 750 578 q 700 213 750 323 q 560 45 650 103 q 354 -14 470 -14 q 146 70 218 -14 q 74 313 74 153 m 374 154 q 457 195 418 154 q 520 307 496 236 q 545 450 545 378 q 467 554 545 554 q 383 524 429 554 q 297 437 338 493 q 281 306 281 359 q 374 154 281 154 z "},"в":{"ha":796,"x_min":61,"x_max":755,"o":"m 482 772 q 682 717 609 772 q 755 568 755 662 q 714 447 755 492 q 591 383 673 402 l 591 380 q 682 325 652 363 q 713 229 713 286 q 673 102 713 157 q 559 17 633 47 q 385 -14 485 -14 q 146 65 231 -14 q 61 293 61 144 q 113 539 61 430 q 261 711 165 649 q 482 772 357 772 m 267 322 l 265 301 l 265 279 q 296 169 265 208 q 387 129 327 129 q 476 158 445 129 q 507 233 507 187 q 474 300 507 278 q 366 322 441 322 l 267 322 m 473 625 q 368 581 416 625 q 294 463 321 537 l 431 463 q 522 486 490 463 q 554 557 554 510 q 532 607 554 589 q 473 625 509 625 z "},"г":{"ha":665,"x_min":14,"x_max":631,"o":"m 113 713 q 378 772 237 772 q 565 719 499 772 q 631 567 631 666 q 608 461 631 503 q 548 391 586 419 q 460 342 510 362 q 354 302 410 322 q 264 267 286 279 q 232 240 242 254 q 221 205 221 226 q 318 138 221 138 q 539 199 410 138 l 539 45 q 414 0 475 13 q 275 -14 353 -14 q 82 43 151 -14 q 14 201 14 100 q 37 307 14 264 q 99 377 61 349 q 184 423 136 405 q 278 457 231 441 q 387 498 367 487 q 416 525 406 510 q 425 561 425 540 q 343 619 425 619 q 163 568 266 619 l 113 713 z "},"д":{"ha":835,"x_min":61,"x_max":790,"o":"m 790 629 q 736 288 790 437 q 584 63 682 140 q 354 -14 487 -14 q 137 65 214 -14 q 61 286 61 144 q 102 509 61 412 q 218 660 143 606 q 389 713 293 713 q 579 589 514 713 l 583 589 l 585 613 l 585 633 q 543 838 585 774 q 406 903 500 903 q 268 875 334 903 l 225 1036 q 437 1069 311 1069 q 790 629 790 1069 m 366 153 q 487 229 437 153 q 559 452 537 304 q 516 526 546 496 q 437 555 486 555 q 313 480 359 555 q 267 279 267 406 q 292 186 267 220 q 366 153 318 153 z "},"е":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 z "},"ж":{"ha":1333,"x_min":-14,"x_max":1348,"o":"m 550 306 l 447 306 q 312 71 408 155 q 78 -14 215 -14 q -14 -5 26 -14 l 18 157 q 72 151 54 151 q 173 195 129 151 q 242 313 218 238 q 267 476 267 389 q 242 574 267 541 q 174 607 218 607 q 92 589 143 607 l 92 754 q 212 772 143 772 q 399 695 331 772 q 468 479 468 618 l 468 461 l 467 443 l 579 443 l 647 758 l 843 758 l 775 443 l 882 443 q 1019 685 920 597 q 1255 772 1118 772 q 1348 764 1303 772 l 1312 602 q 1258 607 1276 607 q 1119 515 1173 607 q 1064 282 1064 422 q 1088 184 1064 217 q 1157 151 1113 151 q 1239 170 1187 151 l 1239 4 q 1118 -14 1190 -14 q 930 62 998 -14 q 863 275 863 138 l 863 306 l 746 306 l 681 0 l 485 0 l 550 306 z "},"з":{"ha":728,"x_min":17,"x_max":692,"o":"m 314 467 q 448 487 409 467 q 488 553 488 507 q 465 602 488 584 q 383 619 441 619 q 279 604 336 619 q 170 566 222 589 l 121 714 q 419 772 273 772 q 621 724 550 772 q 692 585 692 676 q 649 467 692 514 q 515 396 606 420 l 515 392 q 644 239 644 354 q 547 52 644 117 q 269 -14 450 -14 q 132 0 201 -14 q 17 37 64 14 l 17 205 q 262 146 136 146 q 437 244 437 146 q 318 323 437 323 l 199 323 l 229 467 l 314 467 z "},"и":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 z "},"й":{"ha":839,"x_min":75,"x_max":858,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 858 1084 q 791 944 835 994 q 676 867 748 893 q 501 842 604 842 q 293 893 366 842 q 220 1053 220 945 q 224 1084 220 1069 l 404 1084 l 403 1067 l 403 1053 q 518 958 403 958 q 622 988 585 958 q 673 1084 658 1018 l 858 1084 z "},"к":{"ha":803,"x_min":25,"x_max":848,"o":"m 615 758 l 848 758 l 524 378 l 711 0 l 482 0 l 309 370 l 229 0 l 25 0 l 187 758 l 392 758 l 317 406 l 615 758 z "},"л":{"ha":854,"x_min":-40,"x_max":823,"o":"m 669 0 l 465 0 l 593 600 q 550 606 566 606 q 474 584 505 606 q 418 516 444 563 q 345 323 393 469 q 298 192 321 254 q 244 85 275 131 q 170 13 214 39 q 61 -14 126 -14 q -40 3 1 -14 l -40 171 q 17 160 -15 160 q 78 196 51 160 q 130 307 104 231 q 237 583 199 512 q 320 694 275 654 q 431 753 366 734 q 589 772 496 772 q 712 762 648 772 q 823 733 777 751 l 669 0 z "},"м":{"ha":1099,"x_min":16,"x_max":1076,"o":"m 835 547 q 788 455 816 505 q 732 351 760 405 l 545 0 l 387 0 l 345 342 q 323 550 328 479 l 208 0 l 16 0 l 178 758 l 453 758 l 493 435 q 504 329 500 378 q 510 232 507 280 q 550 324 528 273 q 603 429 572 376 l 786 758 l 1076 758 l 917 0 l 718 0 l 835 547 z "},"н":{"ha":856,"x_min":25,"x_max":832,"o":"m 393 758 l 330 467 l 567 467 l 628 758 l 832 758 l 671 0 l 467 0 l 532 313 l 297 313 l 231 0 l 25 0 l 187 758 l 393 758 z "},"о":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 z "},"п":{"ha":839,"x_min":25,"x_max":768,"o":"m 663 0 l 458 0 l 551 443 q 562 524 562 489 q 489 607 562 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 q 717 716 666 772 q 768 554 768 659 q 753 432 768 505 l 663 0 z "},"р":{"ha":827,"x_min":-46,"x_max":765,"o":"m 551 772 q 708 700 650 772 q 765 496 765 627 q 719 247 765 366 q 591 57 672 127 q 414 -14 511 -14 q 317 12 357 -14 q 241 97 276 37 l 236 97 q 207 -103 228 -11 l 158 -334 l -46 -334 l 186 758 l 342 758 l 330 643 l 336 643 q 551 772 430 772 m 469 607 q 380 561 423 607 q 311 439 337 515 q 285 271 285 363 q 310 184 285 216 q 379 151 335 151 q 466 198 425 151 q 533 327 507 245 q 558 488 558 408 q 469 607 558 607 z "},"с":{"ha":671,"x_min":61,"x_max":685,"o":"m 343 -14 q 134 59 207 -14 q 61 265 61 132 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 299 184 268 217 q 385 151 330 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 z "},"т":{"ha":1257,"x_min":25,"x_max":1186,"o":"m 572 772 q 750 618 721 772 l 754 618 q 863 732 800 692 q 997 772 926 772 q 1138 715 1089 772 q 1186 554 1186 657 q 1171 432 1186 503 l 1080 0 l 876 0 l 970 443 q 981 524 981 489 q 914 607 981 607 q 801 531 852 607 q 721 315 751 455 l 656 0 l 452 0 l 545 443 q 555 524 555 489 q 489 607 555 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 z "},"у":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 z "},"ф":{"ha":1060,"x_min":61,"x_max":999,"o":"m 711 762 q 924 659 850 742 q 999 446 999 575 q 944 215 999 315 q 788 58 889 115 q 546 -12 688 2 l 481 -334 l 283 -334 l 354 -5 q 139 95 217 10 q 61 307 61 179 q 118 539 61 437 q 277 699 176 642 q 517 764 378 755 l 578 1055 l 772 1055 l 711 762 m 269 323 q 298 208 269 254 q 386 153 328 161 l 484 606 q 373 566 420 602 q 297 464 325 530 q 269 323 269 397 m 581 153 q 690 197 644 161 q 764 299 736 233 q 791 441 791 364 q 761 550 791 507 q 676 603 730 593 l 581 153 z "},"х":{"ha":737,"x_min":-68,"x_max":806,"o":"m 257 389 l 104 758 l 322 758 l 400 532 l 566 758 l 806 758 l 489 378 l 654 0 l 433 0 l 349 232 l 170 0 l -68 0 l 257 389 z "},"ц":{"ha":861,"x_min":72,"x_max":815,"o":"m 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 705 240 q 701 204 701 220 q 743 160 701 160 q 804 170 770 160 l 711 -272 l 522 -272 l 587 0 q 500 122 522 31 l 498 122 q 268 -14 402 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 z "},"ч":{"ha":827,"x_min":111,"x_max":803,"o":"m 165 758 l 370 758 l 328 561 q 317 481 317 515 q 338 416 317 438 q 397 395 359 395 q 507 461 464 395 q 581 672 550 528 l 599 758 l 803 758 l 642 0 l 437 0 l 481 205 l 510 328 l 505 328 q 307 232 418 232 q 163 290 216 232 q 111 450 111 349 q 131 595 111 504 l 165 758 z "},"ш":{"ha":1257,"x_min":72,"x_max":1234,"o":"m 807 758 l 714 315 q 703 235 703 268 q 770 151 703 151 q 883 229 833 151 q 962 444 933 307 l 1029 758 l 1234 758 l 1072 0 l 917 0 l 930 140 l 926 140 q 686 -14 828 -14 q 509 140 538 -14 l 504 140 q 261 -14 406 -14 q 121 43 171 -14 q 72 204 72 99 q 87 326 72 254 l 178 758 l 382 758 l 289 315 q 278 235 278 269 q 345 151 278 151 q 456 226 407 151 q 538 443 506 301 l 603 758 l 807 758 z "},"щ":{"ha":1279,"x_min":72,"x_max":1234,"o":"m 807 758 l 714 315 q 703 235 703 268 q 770 151 703 151 q 883 229 833 151 q 962 444 933 307 l 1029 758 l 1234 758 l 1124 240 q 1120 204 1120 220 q 1161 160 1120 160 q 1222 170 1189 160 l 1129 -272 l 940 -272 l 1006 0 q 918 125 936 32 l 917 125 q 686 -14 819 -14 q 509 140 538 -14 l 504 140 q 261 -14 406 -14 q 121 43 171 -14 q 72 204 72 99 q 87 326 72 254 l 178 758 l 382 758 l 289 315 q 278 235 278 269 q 345 151 278 151 q 456 226 407 151 q 538 443 506 301 l 603 758 l 807 758 z "},"ъ":{"ha":936,"x_min":62,"x_max":859,"o":"m 538 758 l 471 450 q 618 465 530 465 q 794 409 730 465 q 859 260 859 353 q 816 117 859 178 q 693 21 774 55 q 496 -14 612 -14 q 294 43 363 -14 q 225 208 225 99 q 241 330 225 256 l 301 603 l 62 603 l 96 758 l 538 758 m 428 215 q 454 151 428 174 q 525 129 479 129 q 618 159 583 129 q 653 239 653 189 q 551 322 653 322 q 443 310 504 322 q 433 262 438 288 q 428 215 428 235 z "},"ы":{"ha":1116,"x_min":72,"x_max":1092,"o":"m 383 758 l 317 450 q 454 465 383 465 q 608 410 549 465 q 667 264 667 354 q 628 119 667 182 q 514 22 589 57 q 336 -14 439 -14 q 72 207 72 -14 q 87 335 72 266 l 179 758 l 383 758 m 378 322 q 289 310 339 322 q 277 247 279 264 q 275 212 275 229 q 296 150 275 171 q 353 129 317 129 q 432 160 402 129 q 463 241 463 192 q 378 322 463 322 m 930 0 l 726 0 l 888 758 l 1092 758 l 930 0 z "},"ь":{"ha":782,"x_min":71,"x_max":704,"o":"m 317 450 q 464 465 375 465 q 640 409 576 465 q 704 260 704 353 q 662 116 704 178 q 539 21 620 55 q 342 -14 458 -14 q 140 43 210 -14 q 71 208 71 100 q 87 330 71 252 l 179 758 l 383 758 l 317 450 m 397 322 q 289 310 350 322 q 273 215 273 240 q 300 151 273 173 q 371 129 326 129 q 464 159 429 129 q 498 239 498 190 q 397 322 498 322 z "},"э":{"ha":671,"x_min":21,"x_max":610,"o":"m 332 772 q 537 693 464 772 q 610 468 610 614 q 561 214 610 323 q 418 46 511 105 q 195 -14 324 -14 q 21 24 92 -14 l 21 195 q 97 164 56 178 q 191 151 138 151 q 315 191 267 151 q 385 314 362 231 l 132 314 l 161 452 l 403 452 l 404 465 l 404 478 q 375 573 404 540 q 290 607 345 607 q 220 596 252 607 q 150 567 189 585 l 96 717 q 332 772 207 772 z "},"ю":{"ha":1160,"x_min":25,"x_max":1099,"o":"m 1099 472 q 1053 218 1099 329 q 921 47 1007 108 q 715 -14 834 -14 q 511 63 584 -14 q 437 277 437 140 l 437 313 l 297 313 l 231 0 l 25 0 l 187 758 l 393 758 l 330 467 l 461 467 q 593 692 500 612 q 822 772 687 772 q 1026 693 954 772 q 1099 472 1099 614 m 804 606 q 721 562 758 606 q 661 439 684 517 q 637 278 637 360 q 730 153 637 153 q 811 195 774 153 q 871 313 848 237 q 893 472 893 389 q 804 606 893 606 z "},"я":{"ha":808,"x_min":-14,"x_max":783,"o":"m 439 282 q 372 255 400 282 q 313 161 345 229 q 216 26 269 65 q 89 -14 164 -14 q -14 3 27 -14 l -14 171 q 39 160 14 160 q 85 175 67 160 q 117 214 103 191 l 138 248 q 245 342 181 322 q 139 501 139 386 q 225 690 139 622 q 467 758 312 758 l 783 758 l 624 0 l 419 0 l 481 282 l 439 282 m 464 612 q 379 583 410 612 q 347 504 347 553 q 371 444 347 467 q 447 421 395 421 l 510 421 l 550 612 l 464 612 z "},"ё":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 241 937 q 270 1017 241 990 q 351 1044 298 1044 q 441 971 441 1044 q 414 892 441 922 q 332 863 388 863 q 241 937 241 863 m 513 937 q 542 1017 513 990 q 623 1044 570 1044 q 690 1025 667 1044 q 713 971 713 1006 q 687 892 713 922 q 605 863 660 863 q 513 937 513 863 z "},"ђ":{"ha":839,"x_min":25,"x_max":760,"o":"m 431 946 l 633 946 l 604 811 l 403 811 q 347 615 377 684 l 353 615 q 445 699 395 668 q 564 730 496 730 q 709 673 659 730 q 760 513 760 616 q 745 390 760 459 l 646 -79 q 550 -272 618 -210 q 371 -334 481 -334 q 253 -317 300 -334 l 253 -153 q 330 -167 294 -167 q 403 -139 372 -167 q 447 -52 435 -112 l 543 401 q 554 482 554 448 q 482 566 554 566 q 369 489 420 566 q 289 272 319 412 l 229 0 l 25 0 l 196 811 l 87 811 l 117 946 l 225 946 l 249 1055 l 453 1055 l 431 946 z "},"ѓ":{"ha":665,"x_min":14,"x_max":707,"o":"m 113 713 q 378 772 237 772 q 565 719 499 772 q 631 567 631 666 q 608 461 631 503 q 548 391 586 419 q 460 342 510 362 q 354 302 410 322 q 264 267 286 279 q 232 240 242 254 q 221 205 221 226 q 318 138 221 138 q 539 199 410 138 l 539 45 q 414 0 475 13 q 275 -14 353 -14 q 82 43 151 -14 q 14 201 14 100 q 37 307 14 264 q 99 377 61 349 q 184 423 136 405 q 278 457 231 441 q 387 498 367 487 q 416 525 406 510 q 425 561 425 540 q 343 619 425 619 q 163 568 266 619 l 113 713 m 329 859 q 479 1064 382 918 l 707 1064 l 707 1053 q 602 949 675 1015 q 471 842 529 884 l 329 842 l 329 859 z "},"є":{"ha":671,"x_min":61,"x_max":685,"o":"m 343 -14 q 134 60 208 -14 q 61 267 61 133 q 112 533 61 416 q 254 711 163 650 q 463 772 344 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 362 568 409 607 q 292 452 315 529 l 541 452 l 511 314 l 268 314 l 267 298 l 267 282 q 385 151 267 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 z "},"ѕ":{"ha":657,"x_min":16,"x_max":629,"o":"m 562 250 q 478 55 562 123 q 243 -14 393 -14 q 116 -3 170 -14 q 16 31 62 7 l 16 199 q 232 138 122 138 q 321 160 286 138 q 355 220 355 182 q 330 272 355 249 q 241 330 305 295 q 127 422 159 376 q 94 530 94 468 q 169 709 94 646 q 383 772 244 772 q 629 708 519 772 l 562 562 q 387 619 467 619 q 325 602 349 619 q 301 555 301 585 q 323 509 301 529 q 404 458 345 489 q 525 366 488 416 q 562 250 562 315 z "},"і":{"ha":412,"x_min":25,"x_max":443,"o":"m 218 936 q 251 1025 218 995 q 342 1055 283 1055 q 417 1034 391 1055 q 443 974 443 1013 q 413 886 443 920 q 321 852 383 852 q 218 936 218 852 m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 z "},"ї":{"ha":412,"x_min":25,"x_max":558,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 85 937 q 114 1017 85 990 q 195 1044 143 1044 q 286 971 286 1044 q 259 892 286 922 q 177 863 233 863 q 85 937 85 863 m 358 937 q 387 1017 358 990 q 468 1044 415 1044 q 535 1025 512 1044 q 558 971 558 1006 q 531 892 558 922 q 450 863 505 863 q 358 937 358 863 z "},"ј":{"ha":412,"x_min":-179,"x_max":444,"o":"m -61 -334 q -179 -317 -132 -334 l -179 -153 q -102 -167 -138 -167 q 16 -52 -9 -167 l 187 758 l 392 758 l 212 -82 q -61 -334 160 -334 m 220 936 q 252 1025 220 995 q 343 1055 284 1055 q 418 1034 393 1055 q 444 974 444 1013 q 414 886 444 920 q 322 852 385 852 q 220 936 220 852 z "},"љ":{"ha":1198,"x_min":-40,"x_max":1125,"o":"m 737 450 q 885 465 810 465 q 1061 409 997 465 q 1125 260 1125 353 q 1083 116 1125 178 q 960 21 1041 55 q 762 -14 879 -14 q 561 43 630 -14 q 492 208 492 99 q 509 330 492 258 l 570 603 l 539 606 q 464 584 494 606 q 409 516 433 562 q 339 323 385 471 q 255 107 290 166 q 173 17 220 48 q 57 -14 125 -14 q 2 -9 22 -14 q -40 3 -18 -5 l -40 171 q 17 160 -15 160 q 78 195 52 160 q 127 306 104 230 l 157 397 q 260 639 212 568 q 377 741 308 710 q 553 772 446 772 q 799 733 692 772 l 737 450 m 818 322 q 710 310 771 322 q 695 236 696 248 q 694 215 694 224 q 720 151 694 174 q 791 129 746 129 q 885 159 850 129 q 920 239 920 189 q 818 322 920 322 z "},"њ":{"ha":1198,"x_min":33,"x_max":1125,"o":"m 737 450 q 885 465 816 465 q 1061 409 997 465 q 1125 260 1125 353 q 1083 116 1125 178 q 960 21 1041 55 q 762 -14 879 -14 q 561 43 630 -14 q 492 208 492 99 q 505 313 492 250 l 306 313 l 239 0 l 33 0 l 196 758 l 401 758 l 339 467 l 539 467 l 600 758 l 804 758 l 737 450 m 818 322 q 710 310 771 322 q 695 236 696 248 q 694 215 694 224 q 720 151 694 174 q 791 129 746 129 q 885 159 850 129 q 920 239 920 189 q 818 322 920 322 z "},"ћ":{"ha":839,"x_min":25,"x_max":760,"o":"m 663 0 l 458 0 l 543 401 q 554 482 554 448 q 482 566 554 566 q 368 487 419 566 q 288 272 317 409 l 229 0 l 25 0 l 197 811 l 87 811 l 117 946 l 225 946 l 249 1055 l 453 1055 l 431 946 l 633 946 l 604 811 l 401 811 q 347 615 376 700 l 353 615 q 445 699 395 668 q 564 730 496 730 q 709 673 659 730 q 760 513 760 616 q 745 390 760 459 l 663 0 z "},"ќ":{"ha":803,"x_min":25,"x_max":848,"o":"m 615 758 l 848 758 l 524 378 l 711 0 l 482 0 l 309 370 l 229 0 l 25 0 l 187 758 l 392 758 l 317 406 l 615 758 m 423 859 q 574 1064 477 918 l 801 1064 l 801 1053 q 696 949 770 1015 q 565 842 623 884 l 423 842 l 423 859 z "},"ў":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 784 1084 q 718 944 761 994 q 602 867 674 893 q 427 842 530 842 q 219 893 292 842 q 146 1053 146 945 q 150 1084 146 1069 l 330 1084 l 329 1067 l 329 1053 q 444 958 329 958 q 548 988 511 958 q 600 1084 584 1018 l 784 1084 z "},"џ":{"ha":839,"x_min":72,"x_max":815,"o":"m 404 -28 l 437 -28 l 372 -334 l 182 -334 l 233 -100 l 404 -28 m 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 z "},"Ґ":{"ha":699,"x_min":36,"x_max":840,"o":"m 611 991 l 656 1202 l 840 1202 l 761 819 l 414 819 l 240 0 l 36 0 l 245 991 l 611 991 z "},"ґ":{"ha":643,"x_min":25,"x_max":730,"o":"m 652 590 l 354 590 l 229 0 l 25 0 l 186 758 l 498 758 l 542 965 l 730 965 l 652 590 z "},"Ẁ":{"ha":1242,"x_min":125,"x_max":1372,"o":"m 682 690 q 604 488 651 591 l 385 0 l 155 0 l 125 991 l 319 991 l 323 450 q 321 333 323 415 q 314 215 318 251 l 318 215 q 363 337 333 258 q 404 436 394 416 l 654 991 l 838 991 l 852 399 q 846 215 852 300 l 850 215 q 939 452 879 302 l 1162 991 l 1372 991 l 933 0 l 699 0 l 684 489 l 682 583 q 685 690 682 643 l 682 690 m 832 1071 l 707 1071 q 613 1175 659 1118 q 543 1279 568 1232 l 543 1293 l 754 1293 q 832 1088 779 1193 l 832 1071 z "},"ẁ":{"ha":1095,"x_min":85,"x_max":1165,"o":"m 581 583 q 497 367 538 463 l 339 0 l 119 0 l 85 758 l 275 758 l 278 422 l 275 309 l 271 193 l 273 193 q 283 221 277 207 q 317 314 288 236 q 349 395 347 392 l 505 758 l 728 758 l 728 395 q 721 193 728 298 l 725 193 l 744 248 q 808 422 793 389 l 957 758 l 1165 758 l 806 0 l 582 0 l 578 353 q 585 583 578 458 l 581 583 m 711 842 l 587 842 q 493 946 538 888 q 422 1050 447 1003 l 422 1064 l 633 1064 q 711 859 658 964 l 711 842 z "},"Ẃ":{"ha":1242,"x_min":125,"x_max":1372,"o":"m 682 690 q 604 488 651 591 l 385 0 l 155 0 l 125 991 l 319 991 l 323 450 q 321 333 323 415 q 314 215 318 251 l 318 215 q 363 337 333 258 q 404 436 394 416 l 654 991 l 838 991 l 852 399 q 846 215 852 300 l 850 215 q 939 452 879 302 l 1162 991 l 1372 991 l 933 0 l 699 0 l 684 489 l 682 583 q 685 690 682 643 l 682 690 m 647 1088 q 798 1293 701 1147 l 1025 1293 l 1025 1282 q 920 1178 994 1244 q 789 1071 847 1113 l 647 1071 l 647 1088 z "},"ẃ":{"ha":1095,"x_min":85,"x_max":1165,"o":"m 581 583 q 497 367 538 463 l 339 0 l 119 0 l 85 758 l 275 758 l 278 422 l 275 309 l 271 193 l 273 193 q 283 221 277 207 q 317 314 288 236 q 349 395 347 392 l 505 758 l 728 758 l 728 395 q 721 193 728 298 l 725 193 l 744 248 q 808 422 793 389 l 957 758 l 1165 758 l 806 0 l 582 0 l 578 353 q 585 583 578 458 l 581 583 m 541 859 q 692 1064 595 918 l 919 1064 l 919 1053 q 814 949 888 1015 q 683 842 741 884 l 541 842 l 541 859 z "},"Ẅ":{"ha":1242,"x_min":125,"x_max":1372,"o":"m 682 690 q 604 488 651 591 l 385 0 l 155 0 l 125 991 l 319 991 l 323 450 q 321 333 323 415 q 314 215 318 251 l 318 215 q 363 337 333 258 q 404 436 394 416 l 654 991 l 838 991 l 852 399 q 846 215 852 300 l 850 215 q 939 452 879 302 l 1162 991 l 1372 991 l 933 0 l 699 0 l 684 489 l 682 583 q 685 690 682 643 l 682 690 m 528 1166 q 556 1246 528 1219 q 637 1274 585 1274 q 728 1200 728 1274 q 701 1121 728 1151 q 619 1092 675 1092 q 528 1166 528 1092 m 800 1166 q 829 1246 800 1219 q 910 1274 857 1274 q 977 1255 954 1274 q 1000 1200 1000 1236 q 974 1121 1000 1151 q 892 1092 947 1092 q 800 1166 800 1092 z "},"ẅ":{"ha":1095,"x_min":85,"x_max":1165,"o":"m 581 583 q 497 367 538 463 l 339 0 l 119 0 l 85 758 l 275 758 l 278 422 l 275 309 l 271 193 l 273 193 q 283 221 277 207 q 317 314 288 236 q 349 395 347 392 l 505 758 l 728 758 l 728 395 q 721 193 728 298 l 725 193 l 744 248 q 808 422 793 389 l 957 758 l 1165 758 l 806 0 l 582 0 l 578 353 q 585 583 578 458 l 581 583 m 397 937 q 426 1017 397 990 q 507 1044 454 1044 q 597 971 597 1044 q 570 892 597 922 q 488 863 544 863 q 397 937 397 863 m 669 937 q 698 1017 669 990 q 779 1044 726 1044 q 846 1025 823 1044 q 869 971 869 1006 q 843 892 869 922 q 761 863 816 863 q 669 937 669 863 z "},"Ỳ":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 m 587 1071 l 462 1071 q 368 1175 414 1118 q 298 1279 322 1232 l 298 1293 l 509 1293 q 587 1088 533 1193 l 587 1071 z "},"ỳ":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 512 842 l 387 842 q 293 946 339 888 q 223 1050 248 1003 l 223 1064 l 434 1064 q 512 859 458 964 l 512 842 z "},"–":{"ha":667,"x_min":28,"x_max":639,"o":"m 28 296 l 61 452 l 639 452 l 606 296 l 28 296 z "},"—":{"ha":1333,"x_min":28,"x_max":1305,"o":"m 28 296 l 61 452 l 1305 452 l 1272 296 l 28 296 z "},"―":{"ha":1333,"x_min":28,"x_max":1305,"o":"m 28 296 l 61 452 l 1305 452 l 1272 296 l 28 296 z "},"‗":{"ha":555,"x_min":-144,"x_max":471,"o":"m 450 -125 l -106 -125 l -86 -31 l 471 -31 l 450 -125 m 413 -313 l -144 -313 l -123 -218 l 434 -218 l 413 -313 z "},"‘":{"ha":298,"x_min":78,"x_max":408,"o":"m 83 652 l 78 667 q 256 991 148 821 l 408 991 q 277 652 347 847 l 83 652 z "},"’":{"ha":298,"x_min":72,"x_max":403,"o":"m 397 991 l 403 977 q 225 652 333 823 l 72 652 q 204 991 132 791 l 397 991 z "},"‚":{"ha":386,"x_min":-69,"x_max":261,"o":"m 256 161 l 261 146 q 83 -179 191 -8 l -69 -179 q 62 161 -9 -39 l 256 161 z "},"‛":{"ha":298,"x_min":151,"x_max":346,"o":"m 342 991 q 339 850 339 921 q 346 652 339 748 l 204 652 q 151 977 159 834 l 160 991 l 342 991 z "},"“":{"ha":602,"x_min":78,"x_max":711,"o":"m 386 652 l 380 667 q 558 991 450 821 l 711 991 q 579 652 646 838 l 386 652 m 83 652 l 78 667 q 256 991 148 821 l 408 991 q 277 652 347 847 l 83 652 z "},"”":{"ha":602,"x_min":72,"x_max":705,"o":"m 397 991 l 403 977 q 225 652 333 823 l 72 652 q 204 991 132 791 l 397 991 m 700 991 l 705 977 q 528 652 635 823 l 375 652 q 407 727 391 688 q 507 991 422 766 l 700 991 z "},"„":{"ha":690,"x_min":-69,"x_max":566,"o":"m 256 161 l 261 146 q 83 -179 191 -8 l -69 -179 q 62 161 -9 -39 l 256 161 m 559 161 l 566 146 q 387 -179 498 -4 l 235 -179 q 268 -99 251 -140 q 367 161 285 -57 l 559 161 z "},"†":{"ha":703,"x_min":129,"x_max":703,"o":"m 668 629 l 457 650 l 354 0 l 163 0 l 336 648 l 129 629 l 164 793 l 364 774 l 387 1055 l 579 1055 l 484 774 l 703 793 l 668 629 z "},"‡":{"ha":717,"x_min":40,"x_max":717,"o":"m 407 379 l 627 399 l 591 235 l 380 254 l 363 0 l 170 0 l 260 254 l 40 235 l 75 399 l 286 379 l 289 533 l 350 676 l 131 657 l 165 821 l 376 802 l 395 1055 l 587 1055 l 497 802 l 717 821 l 682 657 l 471 676 l 471 533 l 407 379 z "},"•":{"ha":501,"x_min":71,"x_max":471,"o":"m 71 465 q 99 597 71 537 q 181 689 128 656 q 304 722 233 722 q 428 677 386 722 q 471 547 471 631 q 409 359 471 427 q 240 292 347 292 q 116 337 161 292 q 71 465 71 382 z "},"…":{"ha":1157,"x_min":17,"x_max":1018,"o":"m 17 78 q 53 176 17 139 q 155 212 90 212 q 229 186 201 212 q 257 114 257 161 q 220 18 257 55 q 122 -18 182 -18 q 45 7 73 -18 q 17 78 17 33 m 397 78 q 434 176 397 139 q 536 212 470 212 q 610 186 582 212 q 637 114 637 161 q 600 18 637 55 q 503 -18 563 -18 q 425 7 453 -18 q 397 78 397 33 m 778 78 q 814 176 778 139 q 916 212 850 212 q 990 186 962 212 q 1018 114 1018 161 q 981 18 1018 55 q 883 -18 943 -18 q 806 7 833 -18 q 778 78 778 33 z "},"‰":{"ha":1691,"x_min":78,"x_max":1642,"o":"m 351 864 q 276 777 309 864 q 244 589 244 690 q 282 524 244 524 q 358 612 326 524 q 390 799 390 701 q 351 864 390 864 m 557 790 q 519 580 557 677 q 416 433 481 482 q 269 383 352 383 q 126 440 175 383 q 78 600 78 496 q 116 811 78 715 q 216 957 153 908 q 363 1006 279 1006 q 506 951 456 1006 q 557 790 557 897 m 1054 991 l 319 0 l 157 0 l 895 991 l 1054 991 m 1436 468 q 1385 430 1410 468 q 1345 324 1360 392 q 1329 193 1329 256 q 1367 127 1329 127 q 1443 216 1411 127 q 1475 403 1475 305 q 1436 468 1475 468 m 1642 400 q 1604 187 1642 287 q 1503 38 1567 87 q 1358 -12 1440 -12 q 1212 41 1261 -12 q 1162 192 1162 94 q 1198 411 1162 313 q 1299 559 1234 509 q 1447 610 1363 610 q 1591 556 1540 610 q 1642 400 1642 503 m 933 468 q 882 430 907 468 q 842 326 858 392 q 827 193 827 259 q 864 127 827 127 q 916 165 892 127 q 957 270 941 202 q 972 403 972 337 q 933 468 972 468 m 1139 400 q 1102 188 1139 287 q 1002 38 1065 88 q 856 -12 938 -12 q 709 41 758 -12 q 660 192 660 94 q 696 411 660 312 q 796 559 732 509 q 945 610 861 610 q 1088 556 1038 610 q 1139 400 1139 503 z "},"′":{"ha":354,"x_min":136,"x_max":372,"o":"m 372 991 l 269 633 l 136 633 l 184 991 l 372 991 z "},"″":{"ha":629,"x_min":136,"x_max":647,"o":"m 372 991 l 269 633 l 136 633 l 184 991 l 372 991 m 647 991 l 545 633 l 410 633 l 460 991 l 647 991 z "},"‹":{"ha":450,"x_min":49,"x_max":450,"o":"m 49 386 l 321 700 l 450 595 l 261 368 l 353 131 l 186 61 l 49 374 l 49 386 z "},"›":{"ha":450,"x_min":0,"x_max":401,"o":"m 401 363 l 129 49 l 0 154 l 189 380 l 97 618 l 264 688 l 401 375 l 401 363 z "},"‼":{"ha":779,"x_min":17,"x_max":821,"o":"m 265 329 l 102 329 l 208 991 l 439 991 l 265 329 m 17 78 q 53 176 17 139 q 155 212 90 212 q 229 186 201 212 q 257 114 257 161 q 220 18 257 55 q 122 -18 182 -18 q 45 7 73 -18 q 17 78 17 33 m 647 329 l 484 329 l 590 991 l 821 991 l 647 329 m 399 78 q 435 176 399 139 q 537 212 471 212 q 611 186 583 212 q 639 114 639 161 q 602 18 639 55 q 504 -18 564 -18 q 427 7 454 -18 q 399 78 399 33 z "},"⁄":{"ha":174,"x_min":-361,"x_max":536,"o":"m 536 991 l -199 0 l -361 0 l 376 991 l 536 991 z "},"ⁿ":{"ha":538,"x_min":90,"x_max":581,"o":"m 374 518 l 431 790 q 436 835 436 812 q 392 885 436 885 q 320 838 351 885 q 271 707 289 791 l 229 518 l 90 518 l 191 991 l 306 991 l 294 909 q 447 1003 362 1003 q 547 965 513 1003 q 581 864 581 928 q 575 810 581 833 l 515 518 l 374 518 z "},"₣":{"ha":765,"x_min":0,"x_max":821,"o":"m 325 298 l 504 298 l 479 178 l 300 178 l 264 0 l 60 0 l 97 178 l 0 178 l 25 298 l 122 298 l 269 991 l 821 991 l 785 819 l 437 819 l 389 591 l 713 591 l 675 419 l 351 419 l 325 298 z "},"₤":{"ha":765,"x_min":-8,"x_max":842,"o":"m 252 644 l 269 733 q 379 937 297 867 q 591 1007 462 1007 q 842 949 724 1007 l 765 791 q 604 838 669 838 q 522 811 555 838 q 475 721 488 785 l 458 644 l 661 644 l 635 525 l 433 525 l 416 447 l 618 447 l 593 326 l 390 326 q 257 176 361 223 l 703 176 l 665 0 l -8 0 l 25 167 q 131 227 94 189 q 184 326 168 264 l 54 326 l 79 447 l 210 447 l 227 525 l 96 525 l 122 644 l 252 644 z "},"₧":{"ha":1189,"x_min":39,"x_max":1173,"o":"m 345 525 l 379 525 q 528 575 475 525 q 582 714 582 625 q 549 792 582 765 q 453 819 517 819 l 407 819 l 345 525 m 783 718 q 672 449 783 546 q 364 353 560 353 l 309 353 l 233 0 l 39 0 l 250 991 l 465 991 q 700 920 617 991 q 783 718 783 848 m 986 138 q 1034 145 1012 138 q 1084 165 1055 153 l 1084 22 q 930 -14 1014 -14 q 793 30 842 -14 q 743 151 743 73 q 755 241 743 183 l 798 432 l 722 432 l 737 504 l 843 582 l 926 734 l 1043 734 l 1008 574 l 1173 574 l 1141 432 l 978 432 l 933 224 q 929 189 929 206 q 945 151 929 165 q 986 138 960 138 z "},"€":{"ha":765,"x_min":28,"x_max":844,"o":"m 610 839 q 490 788 544 839 q 399 644 437 738 l 635 644 l 608 525 l 364 525 q 347 447 357 502 l 550 447 l 525 326 l 335 326 q 365 203 335 245 q 465 161 395 161 q 657 204 555 161 l 657 29 q 433 -14 572 -14 q 131 326 131 -14 l 28 326 l 53 447 l 139 447 q 154 525 145 492 l 69 525 l 96 644 l 187 644 q 357 911 246 815 q 611 1007 468 1007 q 732 991 679 1007 q 844 937 786 976 l 760 786 q 671 829 701 819 q 610 839 641 839 z "},"℅":{"ha":1063,"x_min":83,"x_max":996,"o":"m 289 510 q 153 560 202 510 q 104 694 104 610 q 173 916 104 829 q 355 1003 241 1003 q 496 975 429 1003 l 458 868 q 361 892 401 892 q 301 865 327 892 q 260 793 275 838 q 245 705 245 749 q 264 643 245 665 q 317 621 282 621 q 360 626 339 621 q 424 653 380 631 l 424 543 q 289 510 359 510 m 981 991 l 245 0 l 83 0 l 821 991 l 981 991 m 996 286 q 927 68 996 151 q 741 -14 859 -14 q 606 36 656 -14 q 557 174 557 86 q 626 395 557 311 q 812 479 695 479 q 947 428 899 479 q 996 286 996 377 m 802 368 q 749 341 772 368 q 712 266 726 313 q 699 172 699 218 q 713 116 699 136 q 753 97 727 97 q 824 155 795 97 q 852 296 852 213 q 802 368 852 368 z "},"ℓ":{"ha":694,"x_min":28,"x_max":644,"o":"m 422 129 q 479 162 457 129 q 504 265 500 196 l 644 265 q 578 52 637 116 q 400 -12 519 -12 q 217 58 283 -12 q 151 261 151 128 l 151 347 q 28 314 74 325 l 28 447 q 151 484 94 465 l 151 762 q 211 945 151 885 q 399 1004 270 1004 q 564 946 503 1004 q 624 785 624 887 q 597 644 624 705 q 517 534 571 583 q 350 428 463 486 l 350 254 q 422 129 350 129 m 446 781 q 399 875 446 875 q 360 849 370 875 q 350 781 350 823 l 350 574 q 446 781 446 627 z "},"№":{"ha":1360,"x_min":17,"x_max":1318,"o":"m 715 0 l 511 0 l 339 704 l 336 704 q 317 577 332 671 q 289 427 301 482 l 199 0 l 17 0 l 227 991 l 431 991 l 604 283 l 606 283 q 652 559 621 417 l 743 991 l 925 991 l 715 0 m 817 0 l 843 127 l 1243 127 l 1217 0 l 817 0 m 1318 485 q 1287 333 1318 403 q 1198 225 1255 264 q 1063 186 1141 186 q 927 235 976 186 q 879 370 879 283 q 912 532 879 458 q 1003 642 946 605 q 1136 679 1061 679 q 1269 627 1219 679 q 1318 485 1318 575 m 1178 497 q 1166 548 1178 528 q 1128 568 1154 568 q 1075 542 1099 568 q 1036 464 1051 515 q 1021 364 1021 413 q 1071 297 1021 297 q 1123 322 1099 297 q 1162 400 1147 348 q 1178 497 1178 452 z "},"™":{"ha":1040,"x_min":72,"x_max":1039,"o":"m 319 503 l 205 503 l 205 890 l 72 890 l 72 991 l 454 991 l 454 890 l 319 890 l 319 503 m 710 503 l 597 861 l 593 861 l 596 786 l 596 503 l 485 503 l 485 991 l 653 991 l 761 646 l 876 991 l 1039 991 l 1039 503 l 925 503 l 925 779 l 928 861 l 924 861 l 806 503 l 710 503 z "},"Ω":{"ha":1006,"x_min":-41,"x_max":964,"o":"m 578 832 q 443 789 503 832 q 345 662 382 747 q 307 482 307 578 q 333 308 307 378 q 412 187 359 238 l 372 0 l -41 0 l -5 176 l 248 176 q 139 302 179 219 q 98 488 98 385 q 161 760 98 639 q 336 944 224 881 q 593 1007 447 1007 q 865 913 766 1007 q 964 654 964 820 q 890 365 964 488 q 681 176 817 243 l 928 176 l 890 0 l 450 0 l 490 187 q 753 629 753 341 q 707 780 753 728 q 578 832 662 832 z "},"℮":{"ha":860,"x_min":74,"x_max":793,"o":"m 433 -24 q 245 26 327 -24 q 118 164 163 76 q 74 359 74 253 q 117 555 74 469 q 245 692 160 642 q 433 743 330 743 q 619 695 536 743 q 747 559 701 647 q 793 359 793 471 l 232 359 l 232 118 q 321 58 265 82 q 433 35 378 35 q 584 70 523 35 q 701 193 646 105 l 750 165 q 610 18 684 60 q 433 -24 536 -24 m 636 418 l 636 606 q 547 664 602 642 q 432 686 492 686 q 232 607 315 686 l 232 418 l 636 418 z "},"⅛":{"ha":1223,"x_min":66,"x_max":1136,"o":"m 939 606 q 1084 568 1033 606 q 1136 465 1136 530 q 1102 369 1136 405 q 1008 312 1068 334 q 1079 254 1052 288 q 1105 172 1105 221 q 1038 33 1105 83 q 855 -16 971 -16 q 702 27 759 -16 q 644 142 644 71 q 685 247 644 206 q 800 313 726 288 q 746 367 765 337 q 726 438 726 396 q 786 559 726 513 q 939 606 846 606 m 887 246 q 801 153 801 216 q 819 108 801 125 q 867 91 837 91 q 922 112 902 91 q 943 163 943 134 q 928 212 943 193 q 887 246 913 231 m 937 499 q 897 482 913 499 q 880 438 880 465 q 924 372 880 400 q 987 450 987 399 q 973 486 987 473 q 937 499 959 499 m 336 991 l 477 991 l 351 397 l 184 397 l 241 667 q 278 807 257 741 q 224 766 267 797 l 135 711 l 66 823 l 336 991 m 1017 991 l 282 0 l 120 0 l 857 991 l 1017 991 z "},"⅜":{"ha":1223,"x_min":62,"x_max":1190,"o":"m 551 861 q 517 763 551 802 q 404 703 482 723 l 404 700 q 509 581 509 677 q 436 439 509 492 q 243 386 363 386 q 144 396 192 386 q 62 424 96 407 l 62 554 q 235 505 147 505 q 319 526 286 505 q 353 586 353 547 q 335 628 353 611 q 275 646 317 646 l 189 646 l 212 754 l 273 754 q 363 773 330 754 q 396 831 396 792 q 378 871 396 858 q 330 885 361 885 q 203 840 272 885 l 147 942 q 359 1004 243 1004 q 499 967 448 1004 q 551 861 551 929 m 1085 991 l 350 0 l 188 0 l 925 991 l 1085 991 m 993 606 q 1139 568 1087 606 q 1190 465 1190 530 q 1156 369 1190 405 q 1062 312 1122 334 q 1133 254 1106 288 q 1160 172 1160 221 q 1093 33 1160 83 q 909 -16 1025 -16 q 756 27 813 -16 q 699 142 699 71 q 739 247 699 206 q 854 313 780 288 q 800 367 819 337 q 781 438 781 396 q 840 559 781 513 q 993 606 900 606 m 941 246 q 855 153 855 216 q 873 108 855 125 q 921 91 891 91 q 977 112 956 91 q 997 163 997 134 q 982 212 997 193 q 941 246 968 231 m 991 499 q 951 482 968 499 q 935 438 935 465 q 978 372 935 400 q 1042 450 1042 399 q 1027 486 1042 473 q 991 499 1013 499 z "},"⅝":{"ha":1223,"x_min":69,"x_max":1179,"o":"m 337 781 q 462 735 414 781 q 511 618 511 690 q 437 449 511 513 q 241 386 363 386 q 69 422 132 386 l 69 546 q 146 513 104 525 q 227 501 188 501 q 320 528 287 501 q 354 602 354 554 q 265 676 354 676 q 175 663 222 676 l 123 708 l 204 991 l 562 991 l 534 867 l 294 867 l 265 772 q 337 781 290 781 m 1074 991 l 339 0 l 177 0 l 914 991 l 1074 991 m 982 606 q 1128 568 1076 606 q 1179 465 1179 530 q 1145 369 1179 405 q 1051 312 1112 334 q 1122 254 1095 288 q 1149 172 1149 221 q 1082 33 1149 83 q 899 -16 1015 -16 q 745 27 802 -16 q 688 142 688 71 q 728 247 688 206 q 843 313 769 288 q 789 367 808 337 q 770 438 770 396 q 829 559 770 513 q 982 606 889 606 m 930 246 q 844 153 844 216 q 862 108 844 125 q 910 91 880 91 q 966 112 945 91 q 986 163 986 134 q 971 212 986 193 q 930 246 957 231 m 981 499 q 940 482 957 499 q 924 438 924 465 q 967 372 924 400 q 1031 450 1031 399 q 1017 486 1031 473 q 981 499 1002 499 z "},"⅞":{"ha":1223,"x_min":100,"x_max":1137,"o":"m 100 397 l 414 867 l 139 867 l 165 991 l 612 991 l 591 890 l 275 397 l 100 397 m 1019 991 l 283 0 l 121 0 l 859 991 l 1019 991 m 940 606 q 1086 568 1034 606 q 1137 465 1137 530 q 1103 369 1137 405 q 1009 312 1069 334 q 1080 254 1053 288 q 1107 172 1107 221 q 1040 33 1107 83 q 857 -16 972 -16 q 703 27 760 -16 q 646 142 646 71 q 686 247 646 206 q 801 313 727 288 q 747 367 766 337 q 728 438 728 396 q 787 559 728 513 q 940 606 847 606 m 888 246 q 802 153 802 216 q 820 108 802 125 q 868 91 838 91 q 924 112 903 91 q 944 163 944 134 q 929 212 944 193 q 888 246 915 231 m 939 499 q 898 482 915 499 q 882 438 882 465 q 925 372 882 400 q 989 450 989 399 q 975 486 989 473 q 939 499 960 499 z "},"∂":{"ha":807,"x_min":52,"x_max":772,"o":"m 772 624 q 715 294 772 446 q 558 65 657 143 q 329 -14 458 -14 q 123 58 194 -14 q 52 271 52 130 q 100 491 52 386 q 228 650 149 597 q 410 704 308 704 q 559 659 503 704 q 514 795 552 754 q 407 836 477 836 q 222 775 314 836 l 222 950 q 450 1006 326 1006 q 689 909 605 1006 q 772 624 772 812 m 340 151 q 467 241 411 151 q 549 486 522 330 q 508 532 535 513 q 444 550 480 550 q 358 513 397 550 q 294 404 319 477 q 269 254 269 330 q 340 151 269 151 z "},"∆":{"ha":840,"x_min":-36,"x_max":761,"o":"m 427 996 l 665 996 l 761 118 l 734 0 l -36 0 l -12 122 l 427 996 m 510 796 q 471 700 499 759 l 216 175 l 567 175 l 515 689 q 510 796 510 754 z "},"∏":{"ha":1029,"x_min":131,"x_max":935,"o":"m 720 -310 l 720 817 l 346 817 l 346 -310 l 131 -310 l 131 991 l 935 991 l 935 -310 l 720 -310 z "},"∑":{"ha":876,"x_min":83,"x_max":925,"o":"m 83 -310 l 83 -195 l 473 371 l 94 879 l 94 991 l 885 991 l 885 821 l 372 821 l 707 375 l 355 -138 l 925 -138 l 925 -310 l 83 -310 z "},"−":{"ha":765,"x_min":74,"x_max":720,"o":"m 74 415 l 74 564 l 720 564 l 720 415 l 74 415 z "},"√":{"ha":762,"x_min":66,"x_max":907,"o":"m 492 -9 l 368 -9 l 186 490 l 66 490 l 66 635 l 288 635 l 427 250 l 758 1192 l 907 1192 l 492 -9 z "},"∞":{"ha":982,"x_min":90,"x_max":920,"o":"m 920 486 q 858 323 920 390 q 704 257 796 257 q 501 376 585 257 q 410 292 460 322 q 309 261 361 261 q 151 323 212 261 q 90 490 90 386 q 152 653 90 588 q 309 718 213 718 q 505 600 429 718 q 704 715 590 715 q 859 653 799 715 q 920 486 920 591 m 315 399 q 428 490 375 399 q 314 582 377 582 q 252 555 275 582 q 229 489 229 529 q 253 424 229 448 q 315 399 276 399 m 694 578 q 581 488 635 578 q 696 395 635 395 q 758 422 735 395 q 781 488 781 450 q 756 553 781 528 q 694 578 732 578 z "},"∫":{"ha":572,"x_min":0,"x_max":572,"o":"m 465 882 q 410 857 431 882 q 390 789 390 833 l 390 -77 q 323 -269 390 -203 q 132 -334 257 -334 q 0 -306 58 -334 l 0 -134 q 107 -160 62 -160 q 182 -64 182 -160 l 182 799 q 248 990 182 924 q 440 1055 313 1055 q 572 1028 514 1055 l 572 856 q 465 882 512 882 z "},"≈":{"ha":765,"x_min":74,"x_max":720,"o":"m 232 589 q 156 568 197 589 q 74 507 115 547 l 74 664 q 248 737 142 737 q 321 729 288 737 q 421 694 355 722 q 496 667 465 676 q 561 657 528 657 q 637 678 595 657 q 720 739 678 699 l 720 582 q 546 509 650 509 q 472 516 506 509 q 372 551 438 524 q 292 581 319 574 q 232 589 264 589 m 232 318 q 156 298 197 318 q 74 236 115 277 l 74 393 q 248 467 143 467 q 321 459 288 467 q 421 424 355 451 q 499 394 471 403 q 561 386 528 386 q 720 468 634 386 l 720 311 q 546 237 650 237 q 467 247 503 237 q 372 281 431 256 q 292 311 319 303 q 232 318 264 318 z "},"≠":{"ha":765,"x_min":74,"x_max":720,"o":"m 380 283 l 294 97 l 158 154 l 218 283 l 74 283 l 74 432 l 288 432 l 342 547 l 74 547 l 74 694 l 410 694 l 498 885 l 635 827 l 572 694 l 720 694 l 720 547 l 504 547 l 450 432 l 720 432 l 720 283 l 380 283 z "},"≤":{"ha":765,"x_min":74,"x_max":721,"o":"m 74 0 l 74 149 l 720 149 l 720 0 l 74 0 m 721 179 l 75 476 l 75 574 l 721 909 l 721 747 l 285 532 l 721 342 l 721 179 z "},"≥":{"ha":765,"x_min":74,"x_max":720,"o":"m 74 0 l 74 149 l 720 149 l 720 0 l 74 0 m 74 342 l 510 532 l 74 747 l 74 909 l 720 574 l 720 476 l 74 179 l 74 342 z "},"◊":{"ha":810,"x_min":77,"x_max":765,"o":"m 765 498 l 460 0 l 382 0 l 77 498 l 382 999 l 460 999 l 765 498 m 586 498 l 421 777 l 256 498 l 421 221 l 586 498 z "},"ﬁ":{"ha":917,"x_min":-149,"x_max":947,"o":"m -31 -334 q -149 -317 -101 -334 l -149 -153 q -71 -167 -107 -167 q 2 -140 -29 -167 q 46 -52 33 -113 l 184 603 l 74 603 l 94 701 l 218 758 l 231 815 q 325 1003 258 944 q 510 1063 391 1063 q 669 1029 599 1063 l 615 878 q 525 899 568 899 q 463 871 486 899 q 431 800 439 844 l 422 758 l 571 758 l 538 603 l 389 603 l 243 -82 q -31 -334 191 -334 m 722 936 q 754 1025 722 995 q 846 1055 787 1055 q 921 1034 895 1055 q 947 974 947 1013 q 917 886 947 920 q 825 852 887 852 q 722 936 722 852 m 733 0 l 529 0 l 690 758 l 894 758 l 733 0 z "},"ﬂ":{"ha":917,"x_min":-149,"x_max":957,"o":"m -31 -334 q -149 -317 -101 -334 l -149 -153 q -71 -167 -107 -167 q 2 -140 -29 -167 q 46 -52 33 -113 l 184 603 l 74 603 l 94 701 l 218 758 l 231 815 q 325 1003 258 944 q 510 1063 391 1063 q 669 1029 599 1063 l 615 878 q 525 899 568 899 q 463 871 486 899 q 431 800 439 844 l 422 758 l 571 758 l 538 603 l 389 603 l 243 -82 q -31 -334 191 -334 m 733 0 l 529 0 l 753 1055 l 957 1055 l 733 0 z "},"ȷ":{"ha":412,"x_min":-178,"x_max":393,"o":"m -60 -334 q -178 -317 -130 -334 l -178 -153 q -100 -167 -136 -167 q -27 -140 -58 -167 q 17 -52 4 -113 l 189 758 l 393 758 l 214 -82 q -60 -334 161 -334 z "},"⁰":{"ha":526,"x_min":66,"x_max":546,"o":"m 340 864 q 266 777 298 864 q 233 589 233 690 q 271 524 233 524 q 347 612 315 524 q 379 799 379 701 q 340 864 379 864 m 546 796 q 510 582 546 676 q 409 435 475 487 q 258 383 344 383 q 118 437 170 383 q 66 587 66 491 q 102 809 66 711 q 201 956 138 907 q 351 1006 264 1006 q 495 952 444 1006 q 546 796 546 899 z "},"⁴":{"ha":526,"x_min":32,"x_max":551,"o":"m 526 500 l 446 500 l 424 397 l 262 397 l 285 500 l 32 500 l 53 618 l 375 996 l 551 996 l 469 614 l 550 614 l 526 500 m 309 614 l 348 770 l 363 821 q 334 781 354 807 q 191 614 313 755 l 309 614 z "},"⁵":{"ha":526,"x_min":64,"x_max":557,"o":"m 332 781 q 457 735 408 781 q 505 618 505 690 q 431 449 505 513 q 236 386 357 386 q 64 422 127 386 l 64 546 q 140 513 98 525 q 221 501 182 501 q 315 528 281 501 q 349 602 349 554 q 260 676 349 676 q 170 663 217 676 l 118 708 l 199 991 l 557 991 l 529 867 l 289 867 l 260 772 q 332 781 284 781 z "},"⁶":{"ha":526,"x_min":61,"x_max":545,"o":"m 225 725 q 358 785 279 785 q 470 743 429 785 q 511 627 511 701 q 444 454 511 522 q 268 386 377 386 q 112 444 163 386 q 61 606 61 503 q 108 815 61 723 q 238 956 155 908 q 437 1004 322 1004 q 496 1000 462 1004 q 545 990 531 995 l 515 867 q 418 882 477 882 q 293 841 344 882 q 221 725 242 801 l 225 725 m 271 503 q 337 533 312 503 q 363 612 363 564 q 346 664 363 645 q 300 682 328 682 q 234 656 258 682 q 210 581 210 630 q 225 525 210 547 q 271 503 241 503 z "},"⁷":{"ha":526,"x_min":83,"x_max":595,"o":"m 83 397 l 397 867 l 122 867 l 149 991 l 595 991 l 574 890 l 258 397 l 83 397 z "},"⁸":{"ha":526,"x_min":56,"x_max":547,"o":"m 350 1006 q 496 968 444 1006 q 547 864 547 930 q 513 769 547 804 q 419 711 479 733 q 490 654 463 687 q 517 571 517 621 q 450 433 517 482 q 267 383 382 383 q 113 427 170 383 q 56 542 56 471 q 96 646 56 606 q 211 713 137 687 q 157 766 176 736 q 138 838 138 795 q 197 959 138 912 q 350 1006 257 1006 m 298 646 q 212 553 212 616 q 230 507 212 524 q 278 490 248 490 q 334 512 313 490 q 354 562 354 533 q 339 611 354 592 q 298 646 325 630 m 349 899 q 308 882 325 899 q 292 838 292 865 q 335 771 292 800 q 399 850 399 799 q 385 886 399 873 q 349 899 370 899 z "},"⁹":{"ha":526,"x_min":61,"x_max":536,"o":"m 536 793 q 491 576 536 669 q 360 435 446 484 q 160 386 275 386 q 61 399 100 386 l 61 525 q 111 513 80 517 q 164 509 142 509 q 299 546 247 509 q 378 667 352 583 q 239 606 317 606 q 127 647 168 606 q 86 764 86 689 q 153 937 86 870 q 329 1004 220 1004 q 483 950 429 1004 q 536 793 536 895 m 326 888 q 261 858 287 888 q 236 781 236 827 q 253 730 236 748 q 298 711 270 711 q 364 737 339 711 q 389 814 389 762 q 374 867 389 846 q 326 888 359 888 z "}," ":{"ha":694,"x_min":0,"x_max":0,"o":""}," ":{"ha":1389,"x_min":0,"x_max":0,"o":""}," ":{"ha":694,"x_min":0,"x_max":0,"o":""}," ":{"ha":1389,"x_min":0,"x_max":0,"o":""}," ":{"ha":463,"x_min":0,"x_max":0,"o":""}," ":{"ha":347,"x_min":0,"x_max":0,"o":""}," ":{"ha":232,"x_min":0,"x_max":0,"o":""}," ":{"ha":777,"x_min":0,"x_max":0,"o":""}," ":{"ha":396,"x_min":0,"x_max":0,"o":""}," ":{"ha":278,"x_min":0,"x_max":0,"o":""}," ":{"ha":139,"x_min":0,"x_max":0,"o":""},"​":{"ha":0,"x_min":0,"x_max":0,"o":""},"\ufeff":{"ha":0,"x_min":0,"x_max":0,"o":""},"￼":{"ha":1389,"x_min":57,"x_max":1346,"o":"m 57 823 l 57 1029 l 262 1029 l 262 954 l 132 954 l 132 823 l 57 823 m 1140 954 l 1140 1029 l 1346 1029 l 1346 823 l 1272 823 l 1272 954 l 1140 954 m 57 -260 l 57 -54 l 132 -54 l 132 -186 l 262 -186 l 262 -260 l 57 -260 m 1140 -260 l 1140 -186 l 1272 -186 l 1272 -54 l 1346 -54 l 1346 -260 l 1140 -260 m 875 -260 l 875 -186 l 1060 -186 l 1060 -260 l 875 -260 m 345 -260 l 345 -186 l 528 -186 l 528 -260 l 345 -260 m 345 954 l 345 1029 l 528 1029 l 528 954 l 345 954 m 1346 26 l 1272 26 l 1272 210 l 1346 210 l 1346 26 m 1346 558 l 1272 558 l 1272 742 l 1346 742 l 1346 558 m 610 -260 l 610 -186 l 794 -186 l 794 -260 l 610 -260 m 132 26 l 57 26 l 57 210 l 132 210 l 132 26 m 610 954 l 610 1029 l 794 1029 l 794 954 l 610 954 m 875 954 l 875 1029 l 1060 1029 l 1060 954 l 875 954 m 132 292 l 57 292 l 57 476 l 132 476 l 132 292 m 132 558 l 57 558 l 57 742 l 132 742 l 132 558 m 1346 292 l 1272 292 l 1272 476 l 1346 476 l 1346 292 m 586 427 q 540 275 586 328 q 408 222 494 222 q 276 275 322 222 q 231 427 231 328 q 276 578 231 526 q 408 631 322 631 q 540 578 494 631 q 586 427 586 526 m 317 427 q 408 293 317 293 q 500 427 500 293 q 408 559 500 559 q 317 427 317 559 m 643 625 l 760 625 q 871 603 833 625 q 909 524 909 580 q 894 467 909 490 q 848 439 878 444 l 848 436 q 905 404 888 427 q 921 343 921 381 q 884 258 921 288 q 783 228 847 228 l 643 228 l 643 625 m 726 468 l 771 468 q 814 479 802 468 q 827 513 827 491 q 812 546 827 536 q 766 555 798 555 l 726 555 l 726 468 m 726 401 l 726 297 l 777 297 q 822 312 810 297 q 835 351 835 326 q 774 401 835 401 l 726 401 m 1011 224 q 957 231 976 224 l 957 300 q 1003 294 986 294 q 1061 353 1061 294 l 1061 625 l 1146 625 l 1146 355 q 1111 257 1146 291 q 1011 224 1075 224 z "},"�":{"ha":1389,"x_min":57,"x_max":1331,"o":"m 693 1055 l 1331 419 l 693 -216 l 57 419 l 693 1055 m 737 249 l 737 281 q 752 337 737 315 q 811 392 767 359 q 906 490 881 448 q 930 593 930 533 q 867 736 930 684 q 692 789 804 789 q 575 770 638 789 q 464 722 512 751 l 519 602 q 689 656 628 656 q 753 636 732 656 q 774 585 774 616 q 757 523 774 549 q 692 461 741 498 q 615 377 635 415 q 595 289 595 339 l 595 249 l 737 249 m 576 62 q 601 -5 576 20 q 672 -29 625 -29 q 742 -4 717 -29 q 766 62 766 20 q 742 131 766 106 q 672 155 718 155 q 600 131 623 155 q 576 62 576 106 z "},"ǰ":{"ha":412,"x_min":-178,"x_max":614,"o":"m -60 -334 q -178 -317 -130 -334 l -178 -153 q -100 -167 -136 -167 q -27 -140 -58 -167 q 17 -52 4 -113 l 189 758 l 393 758 l 214 -82 q -60 -334 161 -334 m 66 1064 l 200 1064 q 310 950 243 1028 q 467 1064 388 1014 l 614 1064 l 614 1047 q 414 842 471 913 l 185 842 q 135 938 170 878 q 66 1047 100 998 l 66 1064 z "},"ʼ":{"ha":298,"x_min":72,"x_max":403,"o":"m 397 991 l 403 977 q 225 652 333 823 l 72 652 q 204 991 132 791 l 397 991 z "},"ϑ":{"ha":962,"x_min":79,"x_max":990,"o":"m 507 803 q 553 708 507 743 q 684 672 600 674 q 688 746 688 706 q 663 871 688 828 q 596 914 639 914 q 529 883 551 914 q 507 803 507 852 m 867 517 q 767 209 830 323 q 613 40 704 94 q 401 -14 522 -14 q 210 39 280 -14 q 140 182 140 91 q 161 292 140 229 q 178 364 178 344 q 139 403 178 403 q 79 386 110 403 l 79 532 q 232 562 158 562 q 339 528 301 562 q 376 432 376 494 q 353 302 376 382 q 335 216 335 246 q 419 147 335 147 q 562 237 502 147 q 661 514 621 327 q 470 556 551 519 q 348 655 390 593 q 306 794 306 717 q 387 995 306 921 q 607 1069 469 1069 q 818 979 745 1069 q 890 721 890 889 l 890 696 l 889 672 l 990 672 l 957 517 l 867 517 z "},"ϒ":{"ha":799,"x_min":125,"x_max":917,"o":"m 424 590 l 469 673 q 647 934 576 868 q 807 1000 718 1000 q 917 982 863 1000 l 879 825 q 832 835 858 835 q 749 781 792 835 q 489 372 656 667 l 410 0 l 204 0 l 285 379 l 125 991 l 336 991 l 424 590 z "},"ϖ":{"ha":1303,"x_min":64,"x_max":1329,"o":"m 375 -14 q 201 58 262 -14 q 139 258 139 130 q 169 438 139 345 q 249 603 199 532 l 64 603 l 83 703 l 216 758 l 1329 758 l 1297 603 l 1132 603 q 1143 468 1143 543 q 1095 219 1143 334 q 966 45 1046 104 q 787 -14 886 -14 q 668 19 714 -14 q 602 123 622 52 q 502 18 557 50 q 375 -14 447 -14 m 951 521 q 947 603 951 570 l 432 603 q 335 264 335 412 q 411 147 335 147 q 486 185 458 147 q 534 317 514 222 l 555 410 l 749 410 l 728 317 q 715 225 715 259 q 783 147 715 147 q 906 249 861 147 q 951 521 951 350 z "},"Ḿ":{"ha":1222,"x_min":36,"x_max":1229,"o":"m 568 250 l 942 991 l 1229 991 l 1019 0 l 829 0 l 928 469 q 999 768 964 637 l 996 768 l 610 0 l 419 0 l 378 768 l 375 768 q 349 612 368 709 q 222 0 331 515 l 36 0 l 245 991 l 519 991 l 566 250 l 568 250 m 629 1089 q 779 1295 682 1149 l 1006 1295 l 1006 1283 q 902 1180 975 1245 q 770 1072 829 1114 l 629 1072 l 629 1089 z "},"ḿ":{"ha":1257,"x_min":25,"x_max":1186,"o":"m 572 772 q 750 618 721 772 l 754 618 q 863 732 800 692 q 997 772 926 772 q 1138 715 1089 772 q 1186 554 1186 657 q 1171 432 1186 503 l 1080 0 l 876 0 l 970 443 q 981 524 981 489 q 914 607 981 607 q 801 531 852 607 q 721 315 751 455 l 656 0 l 452 0 l 545 443 q 555 524 555 489 q 489 607 555 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 m 640 859 q 791 1064 694 918 l 1018 1064 l 1018 1053 q 913 949 987 1015 q 782 842 840 884 l 640 842 l 640 859 z "},"Ḁ":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 508 -244 q 460 -362 508 -317 q 336 -407 413 -407 q 214 -363 260 -407 q 168 -245 168 -319 q 214 -129 168 -172 q 336 -85 260 -85 q 459 -129 410 -85 q 508 -244 508 -173 m 401 -245 q 383 -198 401 -215 q 336 -180 364 -180 q 289 -198 307 -180 q 271 -245 271 -215 q 287 -294 271 -276 q 336 -311 303 -311 q 383 -294 364 -311 q 401 -245 401 -276 z "},"ḁ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 489 -244 q 441 -362 489 -317 q 317 -407 394 -407 q 195 -363 241 -407 q 149 -245 149 -319 q 195 -129 149 -172 q 317 -85 241 -85 q 440 -129 391 -85 q 489 -244 489 -173 m 382 -245 q 364 -198 382 -215 q 317 -180 345 -180 q 270 -198 288 -180 q 252 -245 252 -215 q 268 -294 252 -276 q 317 -311 284 -311 q 364 -294 345 -311 q 382 -245 382 -276 z "},"Ὅ":{"ha":1082,"x_min":-186,"x_max":1039,"o":"m 1039 636 q 972 293 1039 444 q 788 64 905 141 q 519 -14 671 -14 q 249 86 346 -14 q 151 364 151 186 q 218 695 151 544 q 404 926 286 846 q 676 1007 522 1007 q 944 909 849 1007 q 1039 636 1039 812 m 659 832 q 509 770 577 832 q 401 600 440 708 q 362 364 362 491 q 407 214 362 264 q 534 163 452 163 q 684 222 616 163 q 789 389 751 281 q 827 631 827 496 q 783 780 827 727 q 659 832 739 832 m 26 789 q 123 993 67 871 l 300 993 l 300 979 q 130 771 219 863 l 26 771 l 26 789 m -186 844 q -135 947 -186 908 q 26 1004 -84 987 l 26 954 q -48 929 -21 943 q -75 889 -75 915 q -68 875 -75 880 q -52 865 -62 871 q -28 849 -37 858 q -19 821 -19 840 q -38 780 -19 795 q -94 765 -57 765 q -159 785 -132 765 q -186 844 -186 806 z "},"˳":{"ha":463,"x_min":-69,"x_max":271,"o":"m 271 -244 q 223 -362 271 -317 q 98 -407 176 -407 q -23 -363 22 -407 q -69 -245 -69 -319 q -23 -129 -69 -172 q 98 -85 22 -85 q 222 -129 173 -85 q 271 -244 271 -173 m 164 -245 q 145 -198 164 -215 q 98 -180 127 -180 q 52 -198 70 -180 q 33 -245 33 -215 q 50 -294 33 -276 q 98 -311 66 -311 q 145 -294 127 -311 q 164 -245 164 -276 z "},"ﬃ":{"ha":1389,"x_min":-149,"x_max":1419,"o":"m -31 -334 q -149 -317 -101 -334 l -149 -153 q -71 -167 -107 -167 q 2 -140 -29 -167 q 46 -52 33 -113 l 184 603 l 74 603 l 94 701 l 218 758 l 231 815 q 325 1003 258 944 q 510 1063 391 1063 q 669 1029 599 1063 l 615 878 q 525 899 568 899 q 463 871 486 899 q 431 800 439 844 l 422 758 l 690 758 l 703 815 q 797 1003 730 944 q 982 1063 863 1063 q 1141 1029 1071 1063 l 1088 878 q 997 899 1041 899 q 935 871 958 899 q 903 800 911 844 l 895 758 l 1043 758 l 1010 603 l 861 603 l 715 -82 q 441 -334 663 -334 q 323 -317 371 -334 l 323 -153 q 401 -167 365 -167 q 518 -52 494 -167 l 657 603 l 389 603 l 243 -82 q -31 -334 191 -334 m 1206 0 l 1002 0 l 1162 758 l 1367 758 l 1206 0 m 1194 936 q 1227 1025 1194 995 q 1318 1055 1259 1055 q 1394 1034 1368 1055 q 1419 974 1419 1013 q 1390 886 1419 920 q 1297 852 1360 852 q 1194 936 1194 852 z "},"ﬄ":{"ha":1389,"x_min":-149,"x_max":1429,"o":"m -31 -334 q -149 -317 -101 -334 l -149 -153 q -71 -167 -107 -167 q 2 -140 -29 -167 q 46 -52 33 -113 l 184 603 l 74 603 l 94 701 l 218 758 l 231 815 q 325 1003 258 944 q 510 1063 391 1063 q 669 1029 599 1063 l 615 878 q 525 899 568 899 q 463 871 486 899 q 431 800 439 844 l 422 758 l 690 758 l 703 815 q 797 1003 730 944 q 982 1063 863 1063 q 1141 1029 1071 1063 l 1088 878 q 997 899 1041 899 q 935 871 958 899 q 903 800 911 844 l 895 758 l 1043 758 l 1010 603 l 861 603 l 715 -82 q 441 -334 663 -334 q 323 -317 371 -334 l 323 -153 q 401 -167 365 -167 q 518 -52 494 -167 l 657 603 l 389 603 l 243 -82 q -31 -334 191 -334 m 1206 0 l 1002 0 l 1225 1055 l 1429 1055 l 1206 0 z "},"Ơ":{"ha":1072,"x_min":83,"x_max":1219,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 909 867 816 1007 q 1007 1055 985 917 l 1213 1055 l 1219 1039 q 1124 860 1187 931 q 958 750 1061 789 q 971 636 971 693 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 z "},"ơ":{"ha":893,"x_min":61,"x_max":1015,"o":"m 464 772 q 690 673 612 772 q 765 739 736 692 q 808 872 793 785 l 1008 872 l 1015 856 q 920 667 983 734 q 742 559 857 600 q 751 472 751 525 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 z "},"Ư":{"ha":1076,"x_min":96,"x_max":1280,"o":"m 972 991 l 946 867 q 1026 925 998 883 q 1068 1055 1055 968 l 1274 1055 l 1280 1039 q 1147 824 1240 901 q 918 739 1054 748 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 z "},"ư":{"ha":987,"x_min":72,"x_max":1135,"o":"m 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 799 682 q 857 712 833 691 q 894 766 880 733 q 922 871 909 799 l 1128 871 l 1135 854 q 1003 642 1095 718 q 772 554 911 565 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 z "},"̀":{"ha":0,"x_min":-532,"x_max":-243,"o":"m -243 842 l -368 842 q -462 946 -416 888 q -532 1050 -508 1003 l -532 1064 l -321 1064 q -243 859 -297 964 l -243 842 z "},"́":{"ha":0,"x_min":-402,"x_max":-24,"o":"m -402 859 q -252 1064 -349 918 l -24 1064 l -24 1053 q -129 949 -56 1015 q -260 842 -202 884 l -402 842 l -402 859 z "},"̃":{"ha":0,"x_min":-608,"x_max":-39,"o":"m -234 842 q -293 853 -267 842 q -340 877 -318 864 q -381 902 -361 890 q -424 913 -401 913 q -461 894 -445 913 q -488 840 -478 875 l -608 840 q -417 1050 -568 1050 q -358 1039 -384 1050 q -309 1014 -332 1027 q -267 990 -287 1001 q -227 979 -248 979 q -187 997 -203 979 q -156 1051 -171 1014 l -39 1051 q -234 842 -84 842 z "},"̉":{"ha":0,"x_min":-410,"x_max":-118,"o":"m -118 1028 q -252 875 -118 916 l -265 827 l -389 827 l -379 926 q -304 955 -326 936 q -282 1003 -282 973 q -293 1029 -282 1019 q -325 1039 -304 1039 q -410 1025 -359 1039 l -410 1136 q -292 1153 -360 1153 q -163 1121 -209 1153 q -118 1028 -118 1088 z "},"̣":{"ha":0,"x_min":-628,"x_max":-403,"o":"m -628 -208 q -595 -119 -628 -150 q -504 -89 -563 -89 q -430 -110 -456 -89 q -403 -171 -403 -130 q -433 -258 -403 -225 q -525 -292 -463 -292 q -628 -208 -628 -292 z "},"Ѐ":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 614 1071 l 490 1071 q 396 1175 441 1118 q 326 1279 350 1232 l 326 1293 l 536 1293 q 614 1088 561 1193 l 614 1071 z "},"Ѝ":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 286 283 l 804 991 l 1055 991 l 846 0 l 659 0 q 756 463 722 302 q 814 720 790 623 l 808 721 l 290 0 l 36 0 l 245 991 l 436 991 l 336 522 q 279 283 292 331 l 286 283 m 735 1071 l 610 1071 q 516 1175 562 1118 q 446 1279 471 1232 l 446 1293 l 657 1293 q 735 1088 682 1193 l 735 1071 z "},"ѐ":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 549 842 l 425 842 q 331 946 376 888 q 260 1050 285 1003 l 260 1064 l 471 1064 q 549 859 496 964 l 549 842 z "},"ѝ":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 573 842 l 448 842 q 354 946 400 888 q 284 1050 309 1003 l 284 1064 l 495 1064 q 573 859 519 964 l 573 842 z "},"Ѡ":{"ha":1422,"x_min":87,"x_max":1378,"o":"m 1050 838 q 985 824 1015 838 q 921 786 956 810 l 850 933 q 1084 1004 961 1004 q 1303 918 1227 1004 q 1378 668 1378 832 q 1316 314 1378 472 q 1149 71 1254 156 q 890 -14 1044 -14 q 654 111 722 -14 q 550 14 605 41 q 408 -14 495 -14 q 172 87 256 -14 q 87 366 87 187 q 212 820 87 635 q 557 1004 337 1004 q 676 984 623 1004 q 765 935 730 964 l 675 787 l 650 805 q 555 838 604 838 q 426 773 485 838 q 332 601 366 709 q 298 366 298 492 q 431 163 298 163 q 528 199 491 163 q 585 317 566 236 l 621 485 l 827 485 l 800 354 q 787 258 787 296 q 812 189 787 216 q 886 163 837 163 q 1030 223 968 163 q 1129 405 1092 283 q 1166 663 1166 526 q 1050 838 1166 838 z "},"ѡ":{"ha":1153,"x_min":69,"x_max":1165,"o":"m 164 0 l 69 758 l 269 758 l 309 351 q 318 184 314 294 l 504 518 l 482 758 l 679 758 l 701 311 q 705 184 705 236 q 855 428 798 295 q 956 758 913 562 l 1165 758 q 1019 332 1120 517 q 753 0 918 146 l 555 0 l 530 282 l 528 282 l 380 0 l 164 0 z "},"Ѣ":{"ha":872,"x_min":83,"x_max":800,"o":"m 800 334 q 693 86 800 173 q 383 0 586 0 l 86 0 l 249 762 l 83 762 l 117 918 l 281 918 l 310 1055 l 517 1055 l 488 918 l 685 918 l 652 762 l 454 762 l 422 611 l 468 611 q 715 540 629 611 q 800 334 800 469 m 329 172 l 397 172 q 541 212 492 172 q 590 323 590 252 q 460 439 590 439 l 386 439 l 329 172 z "},"ѣ":{"ha":838,"x_min":41,"x_max":760,"o":"m 602 603 l 406 603 l 372 450 q 519 465 431 465 q 695 409 631 465 q 760 260 760 353 q 718 116 760 178 q 594 21 675 55 q 397 -14 513 -14 q 196 43 265 -14 q 126 208 126 100 q 143 334 126 254 l 201 603 l 41 603 l 74 758 l 236 758 l 265 895 l 469 895 l 439 758 l 633 758 l 602 603 m 453 322 q 345 310 406 322 q 329 215 329 240 q 355 151 329 173 q 427 129 382 129 q 519 159 485 129 q 554 239 554 190 q 453 322 554 322 z "},"Ѥ":{"ha":1232,"x_min":36,"x_max":1287,"o":"m 996 832 q 827 772 901 832 q 715 603 753 711 l 1075 603 l 1039 431 l 681 431 q 676 372 676 407 q 723 217 676 271 q 854 163 770 163 q 958 174 905 163 q 1100 215 1011 184 l 1100 39 q 825 -14 973 -14 q 559 88 653 -14 q 465 370 465 189 l 468 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 498 603 q 685 900 554 793 q 996 1007 815 1007 q 1147 990 1078 1007 q 1287 936 1217 974 l 1207 766 q 996 832 1093 832 z "},"ѥ":{"ha":1042,"x_min":25,"x_max":1055,"o":"m 714 -14 q 505 60 578 -14 q 432 267 432 133 q 435 314 432 292 l 297 314 l 231 0 l 25 0 l 187 758 l 393 758 l 330 467 l 460 467 q 603 692 505 611 q 833 772 702 772 q 1055 724 956 772 l 993 568 q 922 595 957 583 q 842 607 886 607 q 742 570 787 607 q 671 467 697 533 l 914 467 l 882 314 l 639 314 l 637 298 l 637 282 q 669 184 637 217 q 755 151 701 151 q 839 163 797 151 q 942 207 880 175 l 942 40 q 714 -14 838 -14 z "},"Ѧ":{"ha":929,"x_min":-83,"x_max":846,"o":"m 489 0 l 298 0 l 390 428 l 358 428 l 135 0 l -83 0 l 465 996 l 718 996 l 846 0 l 654 0 l 608 428 l 575 428 l 489 0 m 590 589 q 567 839 572 753 q 447 589 531 755 l 590 589 z "},"ѧ":{"ha":806,"x_min":-85,"x_max":734,"o":"m 607 758 l 734 0 l 546 0 l 507 286 l 482 286 l 428 0 l 244 0 l 310 286 l 282 286 l 123 0 l -85 0 l 361 758 l 607 758 m 490 427 q 464 623 471 554 l 364 427 l 490 427 z "},"Ѩ":{"ha":1283,"x_min":36,"x_max":1200,"o":"m 1008 0 l 962 428 l 929 428 l 843 0 l 653 0 l 745 428 l 713 428 l 489 0 l 271 0 l 505 428 l 328 428 l 237 0 l 36 0 l 245 991 l 447 991 l 366 603 l 603 603 l 819 996 l 1072 996 l 1200 0 l 1008 0 m 802 589 l 945 589 q 921 839 926 736 q 802 589 892 772 z "},"ѩ":{"ha":1161,"x_min":25,"x_max":1090,"o":"m 859 313 l 842 313 l 783 0 l 600 0 l 671 313 l 652 313 l 479 0 l 271 0 l 454 313 l 275 313 l 208 0 l 25 0 l 186 758 l 371 758 l 309 467 l 545 467 l 717 758 l 962 758 l 1090 0 l 901 0 l 859 313 m 840 467 l 819 623 l 741 467 l 840 467 z "},"Ѫ":{"ha":1014,"x_min":-58,"x_max":1042,"o":"m -58 0 l 113 367 q 217 513 159 465 q 371 578 275 560 l 220 899 l 239 991 l 1042 991 l 1023 895 l 725 568 q 845 481 807 544 q 892 301 884 419 l 914 0 l 711 0 l 696 309 q 676 402 692 374 q 629 431 661 431 l 624 431 l 539 0 l 329 0 l 418 431 l 412 431 q 346 404 375 431 q 289 313 316 377 l 157 0 l -58 0 m 551 597 l 728 817 l 453 817 l 551 597 z "},"ѫ":{"ha":804,"x_min":-69,"x_max":825,"o":"m -69 0 l 56 252 q 144 379 97 336 q 273 440 191 422 l 140 688 l 155 758 l 825 758 l 811 688 l 571 437 q 653 370 625 416 q 694 216 681 324 l 720 0 l 547 0 l 532 208 q 516 279 528 258 q 484 306 505 301 l 421 0 l 240 0 l 310 309 q 259 288 278 307 q 222 231 240 269 l 114 0 l -69 0 m 421 461 l 547 618 l 350 618 l 421 461 z "},"Ѭ":{"ha":1368,"x_min":36,"x_max":1396,"o":"m 905 597 l 1080 817 l 807 817 l 905 597 m 893 0 l 684 0 l 772 431 l 766 431 q 701 405 728 431 q 646 315 673 378 l 511 0 l 296 0 l 440 310 q 514 428 474 385 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 715 603 l 574 899 l 593 991 l 1396 991 l 1378 895 l 1079 568 q 1174 512 1143 543 q 1223 432 1206 481 q 1246 301 1240 382 l 1268 0 l 1065 0 l 1050 309 q 1031 402 1046 374 q 983 431 1015 431 l 978 431 l 893 0 z "},"ѭ":{"ha":1150,"x_min":25,"x_max":1171,"o":"m 277 0 l 387 225 q 450 313 416 285 l 275 313 l 208 0 l 25 0 l 186 758 l 371 758 l 309 467 l 606 467 l 486 688 l 501 758 l 1171 758 l 1157 688 l 917 437 q 1000 368 973 416 q 1040 216 1027 321 l 1065 0 l 893 0 l 878 208 q 862 279 874 257 q 829 306 850 301 l 766 0 l 586 0 l 656 309 q 605 288 624 307 q 568 231 586 269 l 460 0 l 277 0 m 766 461 l 893 618 l 696 618 l 766 461 z "},"Ѯ":{"ha":828,"x_min":-54,"x_max":814,"o":"m 814 775 q 740 594 814 661 q 532 519 665 528 l 532 517 q 686 448 631 505 q 742 302 742 391 q 702 149 742 213 q 575 46 661 85 q 330 -12 488 7 q 210 -32 241 -23 q 164 -55 178 -41 q 150 -89 150 -68 q 231 -139 150 -139 q 338 -136 279 -139 q 435 -132 397 -132 q 538 -160 517 -132 l 538 -315 q 502 -296 527 -304 q 439 -288 477 -288 l 186 -293 q 10 -241 74 -293 q -54 -100 -54 -190 q -22 29 -54 -20 q 83 107 11 77 q 304 160 155 138 q 436 191 387 172 q 508 239 486 211 q 530 315 530 268 q 479 405 530 377 q 314 433 428 433 l 218 433 l 253 597 l 339 597 q 599 733 599 597 q 567 810 599 782 q 471 838 534 838 q 227 754 355 838 l 153 896 q 271 959 211 933 q 406 997 331 985 q 302 1168 372 1067 l 302 1185 l 415 1185 q 519 1067 488 1109 q 606 1153 574 1127 q 672 1191 639 1178 q 745 1204 705 1204 q 814 1193 785 1204 l 814 1092 q 765 1099 791 1099 q 708 1076 740 1099 q 621 994 675 1053 q 761 912 709 972 q 814 775 814 853 z "},"ѯ":{"ha":728,"x_min":-62,"x_max":722,"o":"m 318 467 q 451 487 414 467 q 488 553 488 507 q 465 602 488 584 q 383 619 441 619 q 279 604 336 619 q 170 566 222 589 l 121 714 q 296 762 216 749 q 211 900 268 817 l 211 917 l 323 917 q 428 799 396 841 q 515 885 483 860 q 582 923 547 909 q 653 936 616 936 q 722 925 695 936 l 722 823 q 673 831 697 831 q 623 814 649 831 q 554 755 596 798 q 692 585 692 713 q 649 467 692 514 q 515 396 606 420 l 515 392 q 644 239 644 354 q 604 107 644 159 q 484 26 564 56 q 248 -20 405 -3 q 143 -43 172 -28 q 114 -87 114 -58 q 138 -128 114 -117 q 204 -139 162 -139 q 299 -136 251 -139 q 392 -132 348 -132 q 460 -139 438 -132 q 493 -160 483 -146 l 493 -315 q 456 -296 481 -304 q 395 -288 430 -288 q 280 -290 336 -288 q 161 -293 224 -293 q -6 -240 50 -293 q -62 -96 -62 -188 q 8 65 -62 7 q 229 140 78 123 q 363 163 324 151 q 420 195 402 175 q 437 249 437 215 q 408 304 437 284 q 318 323 378 323 l 199 323 l 229 467 l 318 467 z "},"Ѱ":{"ha":1133,"x_min":121,"x_max":1185,"o":"m 656 294 l 642 294 l 579 0 l 386 0 l 450 294 l 440 294 q 205 365 290 294 q 121 559 121 435 q 136 693 121 620 l 200 991 l 400 991 l 332 667 q 322 587 322 621 q 360 493 322 521 q 473 465 397 465 l 485 465 l 596 991 l 789 991 l 677 465 l 689 465 q 840 512 789 465 q 914 664 891 559 l 983 991 l 1185 991 l 1109 640 q 656 294 1036 294 z "},"ѱ":{"ha":1122,"x_min":81,"x_max":1061,"o":"m 794 1054 l 602 146 q 796 314 734 168 q 857 758 857 461 l 1061 758 q 1008 318 1061 476 q 846 77 956 159 q 567 -20 737 -5 l 500 -334 l 304 -334 l 371 -20 q 155 62 229 -5 q 81 244 81 129 q 92 346 81 292 l 179 758 l 382 758 l 294 340 q 285 258 285 299 q 316 176 285 206 q 406 143 347 146 l 599 1054 l 794 1054 z "},"Ѳ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 467 163 q 626 231 554 163 q 733 421 698 299 l 296 421 q 293 364 293 402 q 339 214 293 264 q 467 163 385 163 m 591 832 q 441 770 510 832 q 330 596 372 708 l 760 596 l 761 631 q 717 779 761 725 q 591 832 673 832 z "},"ѳ":{"ha":812,"x_min":61,"x_max":751,"o":"m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 368 149 q 463 191 420 149 q 528 310 505 233 l 264 310 l 262 290 l 262 277 q 290 182 262 215 q 368 149 317 149 m 449 611 q 356 569 398 611 q 290 453 315 528 l 550 453 l 550 472 q 524 575 550 540 q 449 611 498 611 z "},"Ѵ":{"ha":903,"x_min":125,"x_max":999,"o":"m 364 207 q 402 309 377 246 q 439 395 427 372 l 595 721 q 697 901 657 850 q 784 976 737 951 q 896 1000 831 1000 q 999 981 951 1000 l 999 812 q 933 825 964 825 q 859 795 890 825 q 794 697 829 764 l 437 0 l 211 0 l 125 991 l 325 991 l 359 416 q 363 295 363 350 q 359 207 363 249 l 364 207 z "},"ѵ":{"ha":758,"x_min":69,"x_max":807,"o":"m 309 210 q 371 355 330 270 l 464 546 q 543 681 509 639 q 620 744 578 724 q 718 764 661 764 q 807 746 769 764 l 807 585 q 753 597 779 597 q 708 581 729 597 q 672 537 688 565 q 382 0 657 509 l 163 0 l 69 758 l 269 758 l 302 329 l 305 250 l 304 210 l 309 210 z "},"Ѷ":{"ha":903,"x_min":125,"x_max":999,"o":"m 364 207 q 402 309 377 246 q 439 395 427 372 l 595 721 q 697 901 657 850 q 784 976 737 951 q 896 1000 831 1000 q 999 981 951 1000 l 999 812 q 933 825 964 825 q 859 795 890 825 q 794 697 829 764 l 437 0 l 211 0 l 125 991 l 325 991 l 359 416 q 363 295 363 350 q 359 207 363 249 l 364 207 m 393 1071 q 299 1175 345 1118 q 229 1279 254 1232 l 229 1293 l 421 1293 q 499 1088 447 1187 l 499 1071 l 393 1071 m 652 1071 q 558 1175 604 1118 q 488 1279 512 1232 l 488 1293 l 680 1293 q 757 1088 705 1190 l 757 1071 l 652 1071 z "},"ѷ":{"ha":758,"x_min":69,"x_max":807,"o":"m 309 210 q 371 355 330 270 l 464 546 q 543 681 509 639 q 620 744 578 724 q 718 764 661 764 q 807 746 769 764 l 807 585 q 753 597 779 597 q 708 581 729 597 q 672 537 688 565 q 382 0 657 509 l 163 0 l 69 758 l 269 758 l 302 329 l 305 250 l 304 210 l 309 210 m 281 842 q 187 946 233 888 q 117 1050 141 1003 l 117 1064 l 309 1064 q 387 859 334 958 l 387 842 l 281 842 m 539 842 q 445 946 491 888 q 375 1050 399 1003 l 375 1064 l 567 1064 q 644 859 592 961 l 644 842 l 539 842 z "},"Ѹ":{"ha":1724,"x_min":83,"x_max":1796,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 1072 758 l 1272 758 l 1310 407 q 1320 208 1320 324 l 1324 208 q 1354 289 1337 243 q 1398 393 1370 336 l 1574 758 l 1796 758 l 1335 -109 q 1007 -334 1215 -334 q 907 -321 946 -334 l 907 -158 q 986 -167 954 -167 q 1086 -134 1043 -167 q 1166 -33 1129 -102 l 1183 0 l 1072 758 z "},"ѹ":{"ha":1474,"x_min":61,"x_max":1546,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 822 758 l 1022 758 l 1060 407 q 1069 208 1069 324 l 1074 208 q 1103 289 1087 243 q 1147 393 1120 336 l 1324 758 l 1546 758 l 1084 -109 q 757 -334 964 -334 q 657 -321 696 -334 l 657 -158 q 736 -167 703 -167 q 836 -134 793 -167 q 916 -33 879 -102 l 933 0 l 822 758 z "},"Ѻ":{"ha":1051,"x_min":83,"x_max":1008,"o":"m 1008 599 q 953 303 1008 436 q 798 91 898 170 q 566 -7 699 12 q 534 -65 557 -45 q 468 -85 512 -85 q 405 -64 427 -85 q 383 -5 383 -43 q 161 130 239 22 q 83 404 83 238 q 141 691 83 559 q 298 902 198 823 q 529 1000 397 981 q 561 1056 538 1037 q 628 1075 584 1075 q 690 1055 668 1075 q 713 999 711 1036 q 930 869 852 972 q 1008 599 1008 765 m 498 222 q 575 178 552 222 q 738 326 677 214 q 798 593 798 438 q 769 732 798 675 q 686 815 741 790 q 596 768 652 768 q 517 817 538 768 q 355 665 415 779 q 294 408 294 551 q 325 258 294 316 q 410 178 355 201 q 498 222 446 222 z "},"ѻ":{"ha":879,"x_min":61,"x_max":818,"o":"m 818 446 q 728 140 818 260 q 475 -7 638 20 q 385 -75 458 -75 q 328 -57 348 -75 q 306 -5 307 -38 q 126 100 192 18 q 61 306 61 182 q 154 617 61 495 q 410 765 246 740 q 494 817 429 817 q 571 765 557 817 q 752 659 686 743 q 818 446 818 574 m 612 446 q 554 586 612 550 q 468 530 525 530 q 392 583 411 530 q 301 474 335 550 q 267 306 267 397 q 330 168 267 203 q 365 200 346 189 q 412 211 384 211 q 485 168 465 211 q 578 271 544 196 q 612 446 612 345 z "},"Ѽ":{"ha":1422,"x_min":87,"x_max":1378,"o":"m 1139 1402 l 1111 1271 l 1076 1271 q 987 1282 1028 1271 q 910 1308 945 1294 q 845 1333 875 1321 q 789 1344 815 1344 q 742 1327 760 1344 q 715 1270 725 1310 l 585 1270 q 647 1430 594 1375 q 789 1485 701 1485 q 871 1472 831 1485 q 951 1443 911 1459 q 1031 1415 991 1428 q 1116 1402 1072 1402 l 1139 1402 m 935 1190 q 881 1066 935 1114 q 714 1013 827 1019 l 714 1075 q 784 1101 763 1084 q 806 1146 806 1118 q 800 1163 806 1158 q 781 1174 793 1168 q 753 1192 764 1182 q 743 1225 743 1202 q 765 1272 743 1255 q 828 1289 786 1289 q 905 1262 876 1289 q 935 1190 935 1234 m 1050 838 q 985 824 1015 838 q 921 786 956 810 l 850 933 q 1084 1004 961 1004 q 1303 918 1227 1004 q 1378 668 1378 832 q 1317 306 1378 460 q 1146 69 1256 151 q 890 -14 1036 -14 q 749 13 806 -14 q 650 90 692 39 q 535 9 591 32 q 408 -14 479 -14 q 172 87 256 -14 q 87 366 87 187 q 144 700 87 554 q 308 925 201 845 q 557 1004 414 1004 q 676 984 623 1004 q 765 935 730 964 l 675 787 l 650 805 q 555 838 604 838 q 429 777 488 838 q 334 605 370 716 q 298 366 298 494 q 437 163 298 163 q 560 201 496 163 q 685 315 623 239 q 740 226 713 256 q 803 180 766 197 q 886 163 840 163 q 1029 228 966 163 q 1129 410 1093 293 q 1166 663 1166 526 q 1050 838 1166 838 z "},"ѽ":{"ha":1160,"x_min":61,"x_max":1099,"o":"m 721 -14 q 526 61 597 -14 q 326 -14 435 -14 q 129 63 197 -14 q 61 285 61 139 q 110 542 61 427 q 242 715 159 658 q 437 772 326 772 q 603 730 534 772 l 545 591 q 454 619 504 619 q 361 578 404 619 q 292 461 317 536 q 267 292 267 387 q 370 140 267 140 q 450 162 408 140 q 546 236 492 183 q 697 140 606 140 q 839 237 785 140 q 893 481 893 333 q 871 587 893 554 q 806 619 848 619 q 707 591 766 619 l 667 730 q 851 772 756 772 q 1036 697 973 772 q 1099 481 1099 623 q 1050 219 1099 336 q 917 44 1002 102 q 721 -14 831 -14 m 985 1189 l 957 1057 l 922 1057 q 832 1069 873 1057 q 756 1094 791 1080 q 691 1119 721 1107 q 635 1131 661 1131 q 588 1113 606 1131 q 561 1055 570 1095 l 431 1055 q 493 1216 440 1161 q 635 1271 547 1271 q 717 1258 677 1271 q 797 1230 757 1245 q 877 1202 837 1215 q 961 1189 918 1189 l 985 1189 m 781 977 q 724 850 781 896 q 559 799 667 804 l 559 861 q 630 887 609 871 q 652 932 652 903 q 645 949 652 943 q 627 960 639 954 q 599 978 610 968 q 589 1011 589 988 q 673 1075 589 1075 q 751 1047 722 1075 q 781 977 781 1019 z "},"Ѿ":{"ha":1422,"x_min":87,"x_max":1378,"o":"m 1050 838 q 985 824 1015 838 q 921 786 956 810 l 850 933 q 1084 1004 961 1004 q 1303 918 1227 1004 q 1378 668 1378 832 q 1316 314 1378 472 q 1149 71 1254 156 q 890 -14 1044 -14 q 654 111 722 -14 q 550 14 605 41 q 408 -14 495 -14 q 172 87 256 -14 q 87 366 87 187 q 212 820 87 635 q 557 1004 337 1004 q 676 984 623 1004 q 765 935 730 964 l 675 787 l 650 805 q 555 838 604 838 q 426 773 485 838 q 332 601 366 709 q 298 366 298 492 q 431 163 298 163 q 528 199 491 163 q 585 317 566 236 l 621 485 l 827 485 l 800 354 q 787 258 787 296 q 812 189 787 216 q 886 163 837 163 q 1030 223 968 163 q 1129 405 1092 283 q 1166 663 1166 526 q 1050 838 1166 838 m 1145 1260 l 1132 1200 l 1054 1083 l 1007 1083 l 989 1153 l 900 1153 l 854 1083 l 807 1083 l 789 1153 l 700 1153 l 654 1083 l 607 1083 l 579 1200 l 591 1260 l 1145 1260 z "},"ѿ":{"ha":1153,"x_min":69,"x_max":1165,"o":"m 164 0 l 69 758 l 269 758 l 309 351 q 318 184 314 294 l 504 518 l 482 758 l 679 758 l 701 311 q 705 184 705 236 q 855 428 798 295 q 956 758 913 562 l 1165 758 q 1019 332 1120 517 q 753 0 918 146 l 555 0 l 530 282 l 528 282 l 380 0 l 164 0 m 951 1025 l 939 965 l 861 848 l 814 848 l 798 918 l 708 918 l 661 848 l 614 848 l 597 918 l 509 918 l 461 848 l 414 848 l 387 965 l 400 1025 l 951 1025 z "},"Ҁ":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 450 775 522 832 q 336 608 378 718 q 294 372 294 498 q 341 215 294 267 q 486 163 389 163 q 660 187 561 163 l 550 -334 l 343 -334 l 412 -12 q 169 97 255 -3 q 83 370 83 197 q 153 700 83 549 q 341 929 223 850 q 614 1007 459 1007 q 766 990 696 1007 q 905 936 835 974 l 825 766 q 725 813 777 794 q 614 832 673 832 z "},"ҁ":{"ha":671,"x_min":61,"x_max":685,"o":"m 416 -334 l 212 -334 l 285 -11 q 120 75 179 3 q 61 265 61 148 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 387 151 268 151 q 526 182 455 151 l 416 -334 z "},"҂":{"ha":846,"x_min":71,"x_max":777,"o":"m 399 293 l 591 180 l 543 97 l 350 208 l 228 -4 l 140 46 l 262 260 l 71 371 l 118 454 l 313 343 l 447 578 l 254 689 l 302 774 l 496 663 l 619 875 l 705 825 l 582 611 l 777 500 l 726 416 l 534 528 l 399 293 z "},"҃":{"ha":743,"x_min":204,"x_max":743,"o":"m 354 842 q 271 778 331 778 q 221 798 238 778 q 204 848 204 818 q 229 916 204 889 q 296 943 253 943 l 595 943 q 676 1007 616 1007 q 727 989 711 1007 q 743 942 743 971 q 719 869 743 897 q 653 842 694 842 l 354 842 z "},"҄":{"ha":771,"x_min":216,"x_max":750,"o":"m 260 974 q 435 1015 338 974 q 593 1055 532 1055 q 708 1015 666 1055 q 750 899 750 974 q 745 840 750 865 l 621 840 l 623 861 q 570 916 623 916 q 511 904 541 916 q 443 879 481 892 q 357 853 405 865 q 245 842 309 842 l 216 842 l 244 974 l 260 974 z "},"҅":{"ha":770,"x_min":408,"x_max":614,"o":"m 408 977 q 444 1065 408 1029 q 536 1101 479 1101 q 595 1083 577 1101 q 614 1039 614 1065 q 602 1006 614 1019 q 566 981 591 992 q 539 964 549 973 q 529 937 529 955 q 591 884 529 899 l 591 827 q 458 873 507 832 q 408 977 408 914 z "},"҆":{"ha":770,"x_min":387,"x_max":616,"o":"m 616 1003 q 387 825 616 837 l 387 888 q 462 913 437 897 q 488 958 488 930 q 481 975 488 970 q 463 986 475 981 q 435 1004 446 994 q 425 1038 425 1015 q 510 1101 425 1101 q 587 1074 558 1101 q 616 1003 616 1046 z "},"҈":{"ha":1373,"x_min":28,"x_max":1346,"o":"m 679 966 q 780 932 742 966 q 823 835 819 898 l 770 835 q 746 880 766 865 q 679 895 726 895 q 609 881 626 895 q 589 835 592 867 l 538 835 q 679 966 545 966 m 679 -85 q 780 -119 741 -85 q 823 -216 819 -154 l 770 -216 q 746 -172 766 -186 q 679 -157 726 -157 q 609 -171 626 -157 q 589 -216 592 -184 l 538 -216 q 575 -120 541 -156 q 679 -85 609 -85 m 1072 104 q 1174 70 1135 104 q 1217 -28 1213 35 l 1162 -28 q 1139 17 1159 3 q 1072 32 1118 32 q 1002 19 1019 32 q 982 -28 985 5 l 930 -28 q 968 69 934 33 q 1072 104 1002 104 m 290 104 q 392 70 353 104 q 435 -28 431 35 l 380 -28 q 357 17 377 3 q 290 32 336 32 q 220 19 237 32 q 200 -28 203 5 l 149 -28 q 186 69 152 33 q 290 104 220 104 m 1072 774 q 1174 739 1135 774 q 1217 642 1213 705 l 1162 642 q 1139 687 1159 672 q 1072 701 1118 701 q 1002 688 1019 701 q 982 642 985 675 l 930 642 q 968 738 934 703 q 1072 774 1002 774 m 290 774 q 392 739 353 774 q 435 642 431 705 l 380 642 q 357 687 377 672 q 290 701 336 701 q 220 688 237 701 q 200 642 203 675 l 149 642 q 186 738 152 703 q 290 774 220 774 m 1202 443 q 1303 408 1264 443 q 1346 311 1342 372 l 1292 311 q 1268 356 1289 341 q 1202 371 1248 371 q 1132 357 1149 371 q 1111 311 1114 344 l 1060 311 q 1202 443 1067 443 m 170 443 q 271 408 232 443 q 314 311 310 374 l 260 311 q 236 356 256 342 q 170 371 216 371 q 100 358 117 371 q 79 311 83 345 l 28 311 q 65 408 31 372 q 170 443 100 443 z "},"҉":{"ha":1328,"x_min":28,"x_max":1300,"o":"m 739 -33 q 704 -143 728 -78 q 656 -261 680 -208 l 590 -261 q 637 -24 626 -111 l 732 -24 l 739 -33 m 590 783 q 628 899 603 831 q 673 1011 652 967 l 739 1011 q 692 774 704 862 l 597 774 l 590 783 m 1072 449 q 1188 411 1120 436 q 1300 366 1256 387 l 1300 300 q 1063 347 1150 336 l 1063 441 l 1072 449 m 256 300 q 146 335 211 311 q 28 383 81 359 l 28 449 q 265 401 178 413 l 265 307 l 256 300 m 1120 804 l 1166 758 q 965 624 1046 684 l 899 690 l 900 701 q 1010 758 945 728 q 1120 804 1074 787 m 208 -83 l 161 -37 q 363 97 281 37 l 429 31 l 428 20 q 208 -83 323 -41 m 220 815 l 265 863 q 400 661 349 728 l 334 595 l 322 596 q 220 815 267 691 m 1107 -96 l 1061 -143 q 996 -43 1040 -109 q 926 58 952 23 l 993 125 l 1004 123 q 1061 11 1031 77 q 1107 -96 1092 -55 z "},"Ҋ":{"ha":1140,"x_min":36,"x_max":1090,"o":"m 245 991 l 436 991 l 336 522 q 279 283 292 331 l 286 283 l 804 991 l 1055 991 l 884 180 l 1090 180 l 879 -289 l 644 -289 l 822 0 l 659 0 q 756 463 722 302 q 814 720 790 623 l 808 721 l 290 0 l 36 0 l 245 991 m 1019 1310 q 953 1169 996 1219 q 838 1093 909 1118 q 663 1067 766 1067 q 454 1119 527 1067 q 382 1278 382 1171 q 385 1310 382 1295 l 566 1310 l 564 1278 q 679 1183 564 1183 q 783 1214 747 1183 q 835 1310 820 1245 l 1019 1310 z "},"ҋ":{"ha":873,"x_min":72,"x_max":859,"o":"m 486 0 l 500 122 l 498 122 q 268 -14 402 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 686 151 l 857 151 l 672 -272 l 467 -272 l 614 0 l 486 0 m 859 1084 q 738 897 825 953 q 501 842 652 842 q 294 894 366 842 q 221 1053 221 946 q 224 1084 221 1069 l 404 1084 l 403 1067 l 403 1053 q 518 958 403 958 q 622 988 585 958 q 673 1084 658 1018 l 859 1084 z "},"Ҍ":{"ha":822,"x_min":36,"x_max":750,"o":"m 750 334 q 643 86 750 173 q 334 0 536 0 l 36 0 l 189 717 l 87 717 l 125 889 l 224 889 l 245 991 l 453 991 l 431 889 l 599 889 l 561 717 l 395 717 l 372 611 l 418 611 q 665 540 581 611 q 750 334 750 469 m 279 172 l 347 172 q 491 212 441 172 q 541 323 541 252 q 410 439 541 439 l 336 439 l 279 172 z "},"ҍ":{"ha":785,"x_min":78,"x_max":711,"o":"m 421 904 l 627 904 l 599 770 l 392 770 l 323 450 q 471 465 383 465 q 647 409 583 465 q 711 260 711 353 q 669 117 711 178 q 546 21 627 55 q 349 -14 465 -14 q 147 43 216 -14 q 78 208 78 99 q 94 330 78 256 l 189 770 l 82 770 l 110 904 l 218 904 l 250 1055 l 454 1055 l 421 904 m 404 322 q 296 310 357 322 q 286 262 291 288 q 281 215 281 235 q 307 151 281 174 q 378 129 332 129 q 471 159 436 129 q 505 239 505 190 q 404 322 505 322 z "},"Ҏ":{"ha":806,"x_min":36,"x_max":807,"o":"m 807 703 q 766 532 807 606 q 646 414 724 458 l 688 326 l 570 271 l 524 368 q 375 353 454 353 l 317 353 l 243 0 l 36 0 l 245 991 l 475 991 q 723 919 639 991 q 807 703 807 847 m 354 525 l 392 525 q 449 529 421 525 l 414 606 l 529 661 l 562 590 q 599 697 599 633 q 467 819 599 819 l 416 819 l 354 525 z "},"ҏ":{"ha":827,"x_min":-46,"x_max":765,"o":"m 551 772 q 708 700 650 772 q 765 496 765 627 q 712 230 765 356 q 571 40 659 103 l 608 -46 l 490 -102 l 449 -12 l 414 -14 q 317 12 357 -14 q 241 97 276 37 l 236 97 q 207 -103 228 -11 l 158 -334 l -46 -334 l 186 758 l 342 758 l 330 643 l 336 643 q 551 772 430 772 m 469 607 q 380 563 422 607 q 311 437 338 519 q 285 271 285 355 q 308 180 285 210 q 364 151 332 151 l 372 151 l 335 233 l 450 289 l 484 218 q 538 342 519 269 q 558 488 558 414 q 469 607 558 607 z "},"Ғ":{"ha":699,"x_min":20,"x_max":798,"o":"m 363 576 l 572 576 l 534 404 l 325 404 l 240 0 l 36 0 l 122 404 l 20 404 l 57 576 l 158 576 l 245 991 l 798 991 l 761 819 l 414 819 l 363 576 z "},"ғ":{"ha":643,"x_min":-8,"x_max":688,"o":"m 688 758 l 652 590 l 354 590 l 322 443 l 500 443 l 467 283 l 289 283 l 229 0 l 25 0 l 86 283 l -8 283 l 25 443 l 119 443 l 186 758 l 688 758 z "},"Ҕ":{"ha":925,"x_min":36,"x_max":807,"o":"m 406 379 q 319 371 356 379 l 240 0 l 36 0 l 245 991 l 798 991 l 761 819 l 414 819 l 355 542 q 469 555 410 555 q 650 507 572 555 q 768 373 729 458 q 807 174 807 288 q 750 -100 807 22 q 593 -284 694 -222 q 364 -347 493 -347 q 167 -314 250 -347 l 167 -138 q 350 -172 254 -172 q 528 -82 460 -172 q 596 151 596 8 q 547 321 596 263 q 406 379 498 379 z "},"ҕ":{"ha":796,"x_min":25,"x_max":688,"o":"m 665 125 q 616 -125 665 -17 q 476 -287 566 -234 q 264 -340 386 -340 q 107 -311 163 -340 l 107 -127 q 257 -164 172 -164 q 406 -91 353 -164 q 458 110 458 -18 q 428 228 458 186 q 339 269 398 269 q 283 260 307 269 l 229 0 l 25 0 l 186 758 l 688 758 l 652 590 l 354 590 l 318 422 q 407 435 353 435 q 597 352 528 435 q 665 125 665 269 z "},"Җ":{"ha":1276,"x_min":-85,"x_max":1317,"o":"m 908 0 l 722 488 l 619 0 l 421 0 l 524 486 l 147 0 l -85 0 l 335 529 l 146 991 l 351 991 l 532 528 l 631 991 l 829 991 l 730 528 l 1095 991 l 1317 991 l 922 501 l 1055 167 l 1197 167 l 1100 -289 l 895 -289 l 957 0 l 908 0 z "},"җ":{"ha":1333,"x_min":-14,"x_max":1348,"o":"m 212 772 q 399 695 331 772 q 468 479 468 618 l 468 461 l 467 443 l 579 443 l 647 758 l 843 758 l 775 443 l 882 443 q 1019 685 920 597 q 1255 772 1118 772 q 1348 764 1303 772 l 1312 602 q 1258 607 1276 607 q 1119 515 1173 607 q 1064 282 1064 422 q 1090 184 1064 217 q 1164 151 1117 151 q 1274 174 1219 151 l 1181 -272 l 991 -272 l 1054 -7 q 913 84 963 12 q 863 275 863 157 l 863 306 l 746 306 l 681 0 l 485 0 l 550 306 l 447 306 q 312 71 408 155 q 78 -14 215 -14 q -14 -5 26 -14 l 18 157 q 72 151 54 151 q 173 195 129 151 q 242 313 218 238 q 267 476 267 389 q 242 574 267 541 q 174 607 218 607 q 92 589 143 607 l 92 754 q 212 772 143 772 z "},"Ҙ":{"ha":828,"x_min":28,"x_max":814,"o":"m 814 775 q 740 594 814 661 q 532 519 665 528 l 532 517 q 685 448 629 505 q 742 302 742 391 q 633 68 742 151 q 315 -14 524 -14 q 151 -1 221 -14 q 28 40 81 11 l 28 218 q 298 151 151 151 q 472 192 414 151 q 530 311 530 233 q 478 404 530 374 q 314 433 426 433 l 218 433 l 253 597 l 339 597 q 599 733 599 597 q 567 810 599 782 q 471 838 534 838 q 227 754 355 838 l 153 896 q 335 982 250 958 q 522 1006 420 1006 q 673 976 606 1006 q 777 893 740 946 q 814 775 814 840 m 247 -210 q 321 -140 321 -210 q 304 -72 321 -104 q 257 0 288 -39 l 379 0 q 465 -172 465 -80 q 414 -292 465 -250 q 275 -334 363 -334 q 171 -317 212 -334 l 171 -195 q 247 -210 210 -210 z "},"ҙ":{"ha":728,"x_min":17,"x_max":692,"o":"m 314 467 q 448 487 409 467 q 488 553 488 507 q 465 602 488 584 q 383 619 441 619 q 279 604 336 619 q 170 566 222 589 l 121 714 q 419 772 273 772 q 621 724 550 772 q 692 585 692 676 q 649 467 692 514 q 515 396 606 420 l 515 392 q 644 239 644 354 q 547 52 644 117 q 269 -14 450 -14 q 132 0 201 -14 q 17 37 64 14 l 17 205 q 262 146 136 146 q 437 244 437 146 q 318 323 437 323 l 199 323 l 229 467 l 314 467 m 200 -210 q 274 -140 274 -210 q 257 -72 274 -104 q 210 0 241 -39 l 332 0 q 418 -172 418 -80 q 368 -292 418 -250 q 228 -334 317 -334 q 124 -317 165 -334 l 124 -195 q 200 -210 163 -210 z "},"Қ":{"ha":954,"x_min":36,"x_max":954,"o":"m 694 167 l 892 167 l 794 -289 l 589 -289 l 652 0 l 530 0 l 346 488 l 243 0 l 36 0 l 245 991 l 453 991 l 354 528 l 721 991 l 954 991 l 559 501 l 694 167 z "},"қ":{"ha":850,"x_min":25,"x_max":848,"o":"m 615 758 l 848 758 l 524 378 l 627 170 l 793 170 l 700 -272 l 511 -272 l 576 0 l 482 0 l 309 370 l 229 0 l 25 0 l 187 758 l 392 758 l 317 406 l 615 758 z "},"Ҝ":{"ha":827,"x_min":36,"x_max":974,"o":"m 760 0 l 539 0 l 456 227 l 439 131 l 342 131 l 400 411 l 318 354 l 243 0 l 36 0 l 245 991 l 453 991 l 354 528 l 453 653 l 504 896 l 602 896 l 581 800 l 741 991 l 974 991 l 558 503 l 760 0 z "},"ҝ":{"ha":817,"x_min":61,"x_max":885,"o":"m 265 0 l 61 0 l 224 758 l 428 758 l 353 406 l 411 473 l 457 688 l 547 688 l 530 611 l 657 758 l 885 758 l 561 382 l 559 374 l 747 0 l 524 0 l 439 180 l 415 61 l 323 61 l 376 302 l 345 371 l 265 0 z "},"Ҟ":{"ha":851,"x_min":36,"x_max":989,"o":"m 774 0 l 545 0 l 401 401 l 317 354 l 243 0 l 36 0 l 191 728 l 103 728 l 139 900 l 227 900 l 245 991 l 453 991 l 433 900 l 524 900 l 488 728 l 396 728 l 350 515 l 745 991 l 989 991 l 576 510 l 774 0 z "},"ҟ":{"ha":789,"x_min":25,"x_max":857,"o":"m 118 946 l 227 946 l 249 1055 l 453 1055 l 429 946 l 636 946 l 607 811 l 400 811 l 353 585 q 314 437 335 503 l 318 437 l 624 758 l 857 758 l 519 416 l 713 0 l 485 0 l 361 285 l 279 236 l 229 0 l 25 0 l 197 811 l 89 811 l 118 946 z "},"Ҡ":{"ha":951,"x_min":114,"x_max":1079,"o":"m 885 0 l 656 0 l 471 488 l 368 0 l 161 0 l 334 817 l 114 817 l 150 991 l 578 991 l 479 528 l 846 991 l 1079 991 l 685 501 l 885 0 z "},"ҡ":{"ha":900,"x_min":50,"x_max":968,"o":"m 734 758 l 968 758 l 643 378 l 831 0 l 602 0 l 428 370 l 349 0 l 144 0 l 273 603 l 50 603 l 83 758 l 511 758 l 436 406 l 734 758 z "},"Ң":{"ha":1064,"x_min":36,"x_max":997,"o":"m 804 167 l 997 167 l 900 -289 l 694 -289 l 757 0 l 562 0 l 653 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 979 991 l 804 167 z "},"ң":{"ha":917,"x_min":25,"x_max":860,"o":"m 393 758 l 330 467 l 567 467 l 628 758 l 832 758 l 707 170 l 860 170 l 766 -272 l 578 -272 l 642 0 l 467 0 l 532 313 l 297 313 l 231 0 l 25 0 l 187 758 l 393 758 z "},"Ҥ":{"ha":1069,"x_min":36,"x_max":1189,"o":"m 942 817 l 770 0 l 562 0 l 653 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 1189 991 l 1153 817 l 942 817 z "},"ҥ":{"ha":987,"x_min":25,"x_max":1064,"o":"m 393 758 l 330 467 l 567 467 l 628 758 l 1064 758 l 1031 603 l 799 603 l 671 0 l 467 0 l 532 313 l 297 313 l 231 0 l 25 0 l 187 758 l 393 758 z "},"Ҧ":{"ha":1434,"x_min":36,"x_max":1315,"o":"m 864 542 q 978 555 913 555 q 1158 507 1079 555 q 1276 372 1236 458 q 1315 174 1315 287 q 1259 -97 1315 24 q 1104 -283 1203 -219 q 875 -347 1004 -347 q 675 -314 758 -347 l 675 -138 q 859 -172 762 -172 q 1036 -82 968 -172 q 1104 151 1104 7 q 1055 320 1104 262 q 914 379 1006 379 q 828 371 862 379 l 749 0 l 543 0 l 717 817 l 416 817 l 243 0 l 36 0 l 245 991 l 958 991 l 864 542 z "},"ҧ":{"ha":1200,"x_min":25,"x_max":1093,"o":"m 818 758 l 746 422 q 835 435 781 435 q 1025 352 956 435 q 1093 125 1093 269 q 1044 -125 1093 -17 q 904 -287 994 -234 q 692 -340 814 -340 q 534 -311 593 -340 l 534 -127 q 685 -164 601 -164 q 833 -91 781 -164 q 886 110 886 -18 q 856 228 886 187 q 766 269 825 269 q 711 260 735 269 l 657 0 l 453 0 l 579 603 l 358 603 l 231 0 l 25 0 l 187 758 l 818 758 z "},"Ҩ":{"ha":1014,"x_min":83,"x_max":958,"o":"m 958 533 q 905 301 958 412 q 762 117 852 191 q 812 109 779 109 q 907 126 855 109 l 907 -39 q 854 -52 888 -46 q 786 -57 820 -57 q 600 8 677 -57 q 452 -14 535 -14 q 182 85 280 -14 q 83 359 83 184 q 151 695 83 543 q 335 927 218 847 q 606 1007 452 1007 q 775 977 697 1007 l 718 814 q 606 835 663 835 q 447 776 517 835 q 336 605 377 717 q 294 364 294 492 q 340 213 294 267 q 465 158 386 158 l 473 158 q 431 361 431 239 q 469 576 431 484 q 577 720 507 669 q 736 770 647 770 q 900 708 842 770 q 958 533 958 646 m 640 222 q 734 366 697 274 q 771 543 771 458 q 729 612 771 612 q 650 537 682 612 q 618 343 618 462 q 640 222 618 277 z "},"ҩ":{"ha":851,"x_min":61,"x_max":790,"o":"m 790 380 q 749 218 790 298 q 647 100 708 139 q 685 96 662 96 q 765 110 727 96 l 765 -32 q 660 -49 718 -49 q 493 12 566 -49 q 343 -14 428 -14 q 134 68 208 -14 q 61 294 61 149 q 113 546 61 435 q 256 715 165 657 q 469 772 347 772 q 551 764 510 772 q 614 746 592 755 l 566 597 q 476 611 522 611 q 367 572 414 611 q 293 456 320 532 q 267 296 267 380 q 295 180 267 218 q 370 142 323 142 l 386 142 q 362 210 371 167 q 353 286 353 252 q 418 494 353 418 q 595 571 483 571 q 739 522 688 571 q 790 380 790 472 m 539 183 q 600 271 576 213 q 624 380 624 329 q 615 418 624 404 q 590 432 607 432 q 539 388 558 432 q 519 285 519 344 q 525 231 519 260 q 539 183 530 201 z "},"Ҫ":{"ha":850,"x_min":83,"x_max":905,"o":"m 614 832 q 453 777 524 832 q 338 615 381 722 q 294 386 294 509 q 341 218 294 273 q 489 163 387 163 q 718 215 588 163 l 718 39 q 447 -14 583 -14 q 179 88 275 -14 q 83 375 83 189 q 154 702 83 553 q 342 929 224 852 q 614 1007 460 1007 q 764 992 699 1007 q 905 936 830 977 l 825 766 q 707 819 753 806 q 614 832 660 832 m 337 -210 q 411 -140 411 -210 q 394 -72 411 -104 q 347 0 378 -39 l 469 0 q 555 -172 555 -80 q 505 -292 555 -250 q 365 -334 454 -334 q 261 -317 302 -334 l 261 -195 q 337 -210 300 -210 z "},"ҫ":{"ha":671,"x_min":61,"x_max":685,"o":"m 343 -14 q 134 59 207 -14 q 61 265 61 132 q 112 527 61 409 q 254 708 162 644 q 463 772 345 772 q 685 724 586 772 l 623 568 q 551 595 586 584 q 471 607 515 607 q 367 564 413 607 q 294 445 320 520 q 268 282 268 369 q 299 184 268 217 q 385 151 330 151 q 480 167 436 151 q 571 207 524 183 l 571 40 q 343 -14 468 -14 m 247 -210 q 321 -140 321 -210 q 304 -72 321 -104 q 257 0 288 -39 l 379 0 q 465 -172 465 -80 q 414 -292 465 -250 q 275 -334 363 -334 q 171 -317 212 -334 l 171 -195 q 247 -210 210 -210 z "},"Ҭ":{"ha":737,"x_min":114,"x_max":836,"o":"m 180 0 l 353 817 l 114 817 l 151 991 l 836 991 l 799 817 l 559 817 l 422 167 l 615 167 l 518 -289 l 313 -289 l 375 0 l 180 0 z "},"ҭ":{"ha":1286,"x_min":25,"x_max":1229,"o":"m 572 772 q 750 618 721 772 l 754 618 q 863 732 800 692 q 997 772 926 772 q 1138 715 1089 772 q 1186 554 1186 657 q 1171 433 1186 504 l 1131 240 q 1126 204 1126 220 q 1168 160 1126 160 q 1229 170 1196 160 l 1136 -272 l 947 -272 l 1013 0 q 917 151 917 33 q 926 237 917 193 l 970 443 q 981 524 981 489 q 914 607 981 607 q 801 531 852 607 q 721 315 751 455 l 656 0 l 452 0 l 545 443 q 555 524 555 489 q 489 607 555 607 q 376 530 427 607 q 296 314 325 452 l 229 0 l 25 0 l 186 758 l 342 758 l 328 618 l 332 618 q 572 772 431 772 z "},"Ү":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 z "},"ү":{"ha":711,"x_min":69,"x_max":791,"o":"m 310 210 q 371 355 336 287 l 572 758 l 791 758 l 378 0 l 307 -334 l 96 -334 l 167 0 l 69 758 l 269 758 l 302 330 q 306 210 306 275 l 310 210 z "},"Ұ":{"ha":783,"x_min":52,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 488 358 l 688 358 l 652 183 l 450 183 l 411 0 l 205 0 l 244 183 l 52 183 l 87 358 l 282 358 l 286 379 l 126 991 l 338 991 l 425 590 z "},"ұ":{"ha":711,"x_min":-41,"x_max":791,"o":"m 307 207 q 371 355 332 281 l 572 758 l 791 758 l 378 0 l 564 0 l 530 -155 l 345 -155 l 307 -334 l 96 -334 l 134 -155 l -41 -155 l -8 0 l 167 0 l 69 758 l 269 758 l 300 361 q 302 207 302 322 l 307 207 z "},"Ҳ":{"ha":960,"x_min":-79,"x_max":950,"o":"m 538 0 l 421 368 l 153 0 l -79 0 l 311 518 l 150 991 l 367 991 l 471 640 l 717 991 l 950 991 l 581 500 l 701 167 l 880 167 l 783 -289 l 578 -289 l 640 0 l 538 0 z "},"ҳ":{"ha":817,"x_min":-68,"x_max":806,"o":"m 257 389 l 104 758 l 322 758 l 400 532 l 566 758 l 806 758 l 489 378 l 579 170 l 760 170 l 667 -272 l 478 -272 l 542 0 l 433 0 l 349 232 l 170 0 l -68 0 l 257 389 z "},"Ҵ":{"ha":1162,"x_min":114,"x_max":1117,"o":"m 1086 180 l 986 -289 l 781 -289 l 843 0 l 180 0 l 353 817 l 114 817 l 151 991 l 815 991 l 779 817 l 559 817 l 425 175 l 737 175 l 911 991 l 1117 991 l 945 180 l 1086 180 z "},"ҵ":{"ha":947,"x_min":62,"x_max":901,"o":"m 435 603 l 375 315 q 364 231 364 269 q 433 151 364 151 q 550 229 499 151 q 631 444 602 307 l 697 758 l 901 758 l 791 240 q 787 204 787 220 q 829 160 787 160 q 890 170 856 160 l 798 -272 l 608 -272 l 673 0 q 586 122 608 31 l 585 122 q 354 -14 488 -14 q 210 41 261 -14 q 158 195 158 96 q 178 347 158 256 l 232 603 l 62 603 l 96 758 l 636 758 l 603 603 l 435 603 z "},"Ҷ":{"ha":1039,"x_min":125,"x_max":960,"o":"m 525 0 l 606 380 q 370 322 479 322 q 191 380 256 322 q 125 541 125 437 q 134 619 125 579 l 210 991 l 416 991 l 343 642 q 336 586 336 610 q 440 497 336 497 q 640 547 529 497 l 734 991 l 942 991 l 766 167 l 960 167 l 863 -289 l 657 -289 l 720 0 l 525 0 z "},"ҷ":{"ha":888,"x_min":111,"x_max":831,"o":"m 437 0 l 481 205 l 510 328 l 505 328 q 307 232 418 232 q 163 290 216 232 q 111 450 111 349 q 131 595 111 504 l 165 758 l 370 758 l 328 561 q 317 481 317 515 q 338 416 317 438 q 397 395 359 395 q 507 461 464 395 q 581 672 550 528 l 599 758 l 803 758 l 677 170 l 831 170 l 737 -272 l 549 -272 l 614 0 l 437 0 z "},"Ҹ":{"ha":935,"x_min":125,"x_max":942,"o":"m 732 0 l 525 0 l 606 380 q 485 336 536 349 l 437 117 l 339 117 l 383 322 l 370 322 q 191 380 256 322 q 125 541 125 437 q 134 619 125 579 l 210 991 l 416 991 l 343 642 q 336 586 336 610 q 421 497 336 506 l 468 720 l 567 720 l 521 505 q 640 547 576 517 l 734 991 l 942 991 l 732 0 z "},"ҹ":{"ha":839,"x_min":111,"x_max":815,"o":"m 370 758 l 328 561 q 317 481 317 515 q 366 400 317 417 l 399 555 l 492 555 l 460 408 q 538 498 507 432 q 593 672 569 564 l 611 758 l 815 758 l 654 0 l 450 0 l 493 205 l 522 328 l 518 328 q 427 257 476 281 l 390 87 l 297 87 l 329 232 q 168 289 225 232 q 111 450 111 346 q 131 595 111 504 l 165 758 l 370 758 z "},"Һ":{"ha":935,"x_min":36,"x_max":852,"o":"m 245 991 l 453 991 l 372 611 q 608 669 499 669 q 787 612 722 669 q 852 452 852 554 q 844 372 852 416 l 768 0 l 561 0 l 635 350 q 642 406 642 381 q 538 494 642 494 q 338 444 449 494 l 243 0 l 36 0 l 245 991 z "},"һ":{"ha":839,"x_min":25,"x_max":717,"o":"m 663 0 l 458 0 l 500 197 q 511 278 511 245 q 490 342 511 321 q 431 364 469 364 q 321 297 364 364 q 248 86 278 231 l 229 0 l 25 0 l 186 758 l 390 758 l 347 553 l 318 431 l 322 431 q 521 526 409 526 q 665 468 612 526 q 717 309 717 410 q 697 164 717 262 l 663 0 z "},"Ҽ":{"ha":1082,"x_min":41,"x_max":1082,"o":"m 294 589 q 484 898 354 789 q 799 1007 614 1007 q 1008 940 935 1007 q 1082 751 1082 873 q 948 503 1082 587 q 553 419 814 419 l 481 419 l 479 404 l 479 386 q 527 218 479 273 q 673 163 575 163 q 917 214 783 163 l 917 39 q 639 -14 797 -14 q 365 86 461 -14 q 268 370 268 186 l 271 428 q 100 477 158 433 q 41 597 41 521 q 92 743 41 677 l 262 743 q 227 647 227 688 q 242 605 227 621 q 288 589 257 589 l 294 589 m 781 832 q 620 764 694 832 q 514 589 547 696 l 576 589 q 799 629 725 589 q 873 746 873 669 q 850 809 873 786 q 781 832 827 832 z "},"ҽ":{"ha":918,"x_min":14,"x_max":884,"o":"m 505 -14 q 284 63 363 -14 q 205 279 205 140 l 205 307 q 14 468 14 328 q 53 591 14 536 l 197 591 q 168 500 168 548 q 182 456 168 471 q 218 440 196 440 l 227 440 q 375 685 267 597 q 629 772 482 772 q 817 717 749 772 q 884 566 884 662 q 770 370 884 439 q 447 301 657 301 l 412 301 l 411 287 l 411 273 q 446 176 411 212 q 546 140 481 140 q 653 153 605 140 q 770 199 701 166 l 770 45 q 505 -14 653 -14 m 616 625 q 504 571 557 625 q 435 439 451 517 l 465 439 q 629 472 570 439 q 688 561 688 505 q 616 625 688 625 z "},"Ҿ":{"ha":1082,"x_min":41,"x_max":1082,"o":"m 781 832 q 620 764 694 832 q 514 589 547 696 l 576 589 q 799 629 725 589 q 873 746 873 669 q 850 809 873 786 q 781 832 827 832 m 41 597 q 92 743 41 677 l 262 743 q 227 647 227 688 q 242 605 227 621 q 288 589 257 589 l 294 589 q 488 900 358 792 q 799 1007 617 1007 q 1008 940 935 1007 q 1082 751 1082 873 q 948 503 1082 587 q 553 419 814 419 l 481 419 l 479 404 l 479 386 q 527 218 479 273 q 673 163 575 163 q 917 214 783 163 l 917 39 q 701 -11 826 -3 l 643 -289 l 437 -289 l 501 4 q 328 132 388 38 q 268 370 268 227 l 271 428 q 100 477 158 433 q 41 597 41 521 z "},"ҿ":{"ha":918,"x_min":14,"x_max":884,"o":"m 616 625 q 504 571 557 625 q 435 439 451 517 l 465 439 q 629 472 570 439 q 688 561 688 505 q 616 625 688 625 m 227 440 q 375 685 267 597 q 629 772 482 772 q 817 717 749 772 q 884 566 884 662 q 770 370 884 439 q 447 301 657 301 l 412 301 l 411 287 l 411 273 q 446 176 411 212 q 546 140 481 140 q 653 153 605 140 q 770 199 701 166 l 770 45 q 571 -11 680 -1 l 517 -272 l 328 -272 l 390 1 q 253 99 301 28 q 205 279 205 170 l 205 307 q 14 468 14 328 q 53 591 14 536 l 197 591 q 168 500 168 548 q 182 456 168 471 q 218 440 196 440 l 227 440 z "},"Ӂ":{"ha":1204,"x_min":-85,"x_max":1317,"o":"m 335 529 l 146 991 l 351 991 l 532 528 l 631 991 l 829 991 l 730 528 l 1095 991 l 1317 991 l 922 501 l 1122 0 l 908 0 l 722 488 l 619 0 l 421 0 l 524 486 l 147 0 l -85 0 l 335 529 m 1091 1314 q 1025 1173 1068 1223 q 909 1097 981 1122 q 734 1071 838 1071 q 526 1123 599 1071 q 454 1282 454 1175 q 457 1314 454 1298 l 637 1314 l 636 1296 l 636 1282 q 751 1187 636 1187 q 855 1217 819 1187 q 907 1314 891 1247 l 1091 1314 z "},"ӂ":{"ha":1333,"x_min":-14,"x_max":1348,"o":"m 550 306 l 447 306 q 312 71 408 155 q 78 -14 215 -14 q -14 -5 26 -14 l 18 157 q 72 151 54 151 q 173 195 129 151 q 242 313 218 238 q 267 476 267 389 q 242 574 267 541 q 174 607 218 607 q 92 589 143 607 l 92 754 q 212 772 143 772 q 399 695 331 772 q 468 479 468 618 l 468 461 l 467 443 l 579 443 l 647 758 l 843 758 l 775 443 l 882 443 q 1019 685 920 597 q 1255 772 1118 772 q 1348 764 1303 772 l 1312 602 q 1258 607 1276 607 q 1119 515 1173 607 q 1064 282 1064 422 q 1088 184 1064 217 q 1157 151 1113 151 q 1239 170 1187 151 l 1239 4 q 1118 -14 1190 -14 q 930 62 998 -14 q 863 275 863 138 l 863 306 l 746 306 l 681 0 l 485 0 l 550 306 m 1108 1084 q 1042 944 1085 994 q 926 867 998 893 q 751 842 854 842 q 543 893 616 842 q 471 1053 471 945 q 474 1084 471 1069 l 654 1084 l 653 1067 l 653 1053 q 768 958 653 958 q 872 988 836 958 q 924 1084 908 1018 l 1108 1084 z "},"Ӄ":{"ha":961,"x_min":36,"x_max":954,"o":"m 425 370 q 317 353 369 370 l 243 0 l 36 0 l 245 991 l 453 991 l 354 528 l 721 991 l 954 991 l 578 526 q 717 466 658 512 q 810 343 777 419 q 843 168 843 267 q 787 -100 843 21 q 632 -284 730 -220 q 400 -347 533 -347 q 203 -314 286 -347 l 203 -138 q 386 -172 286 -172 q 564 -82 496 -172 q 632 151 632 8 q 425 370 632 370 z "},"ӄ":{"ha":860,"x_min":25,"x_max":848,"o":"m 615 758 l 848 758 l 532 396 q 682 303 629 377 q 736 104 736 229 q 688 -128 736 -26 q 550 -285 640 -229 q 335 -340 459 -340 q 178 -311 241 -340 l 178 -127 q 328 -164 244 -164 q 475 -96 420 -164 q 529 94 529 -28 q 487 218 529 173 q 370 262 445 262 q 282 245 322 262 l 229 0 l 25 0 l 186 758 l 390 758 l 315 406 l 615 758 z "},"Ӆ":{"ha":1055,"x_min":-41,"x_max":1006,"o":"m 972 991 l 799 180 l 1006 180 l 794 -289 l 559 -289 l 737 0 l 555 0 l 729 817 l 545 817 q 435 425 491 600 q 330 158 380 251 q 219 26 280 66 q 56 -14 157 -14 q -41 3 1 -14 l -41 175 q 26 161 -5 161 q 99 183 71 161 q 155 252 127 204 q 217 399 182 299 q 297 651 253 499 q 389 991 340 803 l 972 991 z "},"ӆ":{"ha":916,"x_min":-40,"x_max":873,"o":"m 701 151 l 873 151 l 689 -272 l 484 -272 l 631 0 l 465 0 l 593 600 q 550 606 566 606 q 474 584 505 606 q 418 516 444 563 q 345 323 393 469 q 298 192 321 254 q 244 85 275 131 q 170 13 214 39 q 61 -14 126 -14 q -40 3 1 -14 l -40 171 q 17 160 -15 160 q 78 196 51 160 q 130 307 104 231 q 237 583 199 512 q 320 694 275 654 q 431 753 366 734 q 589 772 496 772 q 712 762 648 772 q 823 733 777 751 l 701 151 z "},"Ӈ":{"ha":972,"x_min":36,"x_max":979,"o":"m 368 -347 q 170 -314 253 -347 l 170 -129 q 354 -163 254 -163 q 500 -102 446 -163 q 581 85 554 -42 l 653 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 979 991 l 778 39 q 637 -252 736 -157 q 368 -347 538 -347 z "},"ӈ":{"ha":856,"x_min":25,"x_max":832,"o":"m 393 758 l 330 467 l 567 467 l 628 758 l 832 758 l 671 0 q 551 -255 635 -169 q 323 -340 467 -340 q 149 -301 218 -340 l 149 -123 q 301 -164 226 -164 q 408 -120 368 -164 q 472 26 449 -77 l 532 313 l 297 313 l 231 0 l 25 0 l 187 758 l 393 758 z "},"Ӊ":{"ha":1064,"x_min":36,"x_max":1014,"o":"m 562 0 l 653 428 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 979 991 l 807 180 l 1014 180 l 803 -289 l 568 -289 l 746 0 l 562 0 z "},"ӊ":{"ha":917,"x_min":25,"x_max":875,"o":"m 467 0 l 532 313 l 297 313 l 231 0 l 25 0 l 187 758 l 393 758 l 330 467 l 567 467 l 628 758 l 832 758 l 703 151 l 875 151 l 690 -272 l 485 -272 l 632 0 l 467 0 z "},"Ӌ":{"ha":935,"x_min":125,"x_max":942,"o":"m 538 0 l 476 -289 l 271 -289 l 371 167 l 559 167 l 606 380 q 370 322 479 322 q 191 380 256 322 q 125 541 125 437 q 134 619 125 579 l 210 991 l 416 991 l 343 642 q 336 586 336 610 q 440 497 336 497 q 640 547 529 497 l 734 991 l 942 991 l 732 0 l 538 0 z "},"ӌ":{"ha":827,"x_min":111,"x_max":803,"o":"m 370 758 l 328 561 q 317 481 317 515 q 338 416 317 438 q 397 395 359 395 q 507 461 464 395 q 581 672 550 528 l 599 758 l 803 758 l 642 0 l 450 0 l 393 -272 l 204 -272 l 307 170 l 472 170 l 481 207 q 496 277 486 237 q 510 328 506 317 l 505 328 q 307 232 418 232 q 163 290 216 232 q 111 450 111 349 q 131 595 111 504 l 165 758 l 370 758 z "},"Ӎ":{"ha":1314,"x_min":36,"x_max":1264,"o":"m 419 0 l 378 768 l 375 768 q 350 617 368 720 q 319 461 332 515 l 222 0 l 36 0 l 245 991 l 519 991 l 566 250 l 568 250 l 942 991 l 1229 991 l 1057 180 l 1264 180 l 1053 -289 l 818 -289 l 996 0 l 829 0 l 928 469 q 999 768 967 651 l 996 768 l 610 0 l 419 0 z "},"ӎ":{"ha":1162,"x_min":16,"x_max":1121,"o":"m 718 0 l 835 547 q 788 455 816 505 q 732 351 760 405 l 545 0 l 387 0 l 345 342 q 323 550 328 479 l 208 0 l 16 0 l 178 758 l 453 758 l 493 435 q 504 329 500 378 q 510 232 507 280 q 603 429 570 370 l 786 758 l 1076 758 l 949 151 l 1121 151 l 936 -272 l 730 -272 l 878 0 l 718 0 z "},"Ӑ":{"ha":872,"x_min":-83,"x_max":932,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 932 1314 q 865 1173 909 1223 q 750 1097 822 1122 q 575 1071 678 1071 q 367 1123 439 1071 q 294 1282 294 1175 q 298 1314 294 1298 l 478 1314 l 477 1296 l 477 1282 q 592 1187 477 1187 q 695 1217 659 1187 q 747 1314 732 1247 l 932 1314 z "},"ӑ":{"ha":825,"x_min":61,"x_max":866,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 866 1084 q 800 944 843 994 q 684 867 756 893 q 509 842 612 842 q 301 893 374 842 q 229 1053 229 945 q 232 1084 229 1069 l 412 1084 l 411 1067 l 411 1053 q 526 958 411 958 q 630 988 593 958 q 682 1084 666 1018 l 866 1084 z "},"Ӓ":{"ha":872,"x_min":-83,"x_max":819,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 346 1166 q 375 1246 346 1219 q 456 1274 404 1274 q 546 1200 546 1274 q 519 1121 546 1151 q 437 1092 493 1092 q 346 1166 346 1092 m 618 1166 q 647 1246 618 1219 q 728 1274 675 1274 q 795 1255 772 1274 q 819 1200 819 1236 q 792 1121 819 1151 q 710 1092 765 1092 q 618 1166 618 1092 z "},"ӓ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 271 937 q 299 1017 271 990 q 380 1044 328 1044 q 471 971 471 1044 q 444 892 471 922 q 362 863 418 863 q 271 937 271 863 m 543 937 q 572 1017 543 990 q 653 1044 600 1044 q 720 1025 697 1044 q 743 971 743 1006 q 716 892 743 922 q 635 863 690 863 q 543 937 543 863 z "},"Ӕ":{"ha":1243,"x_min":-83,"x_max":1291,"o":"m 1080 0 l 526 0 l 576 236 l 288 236 l 139 0 l -83 0 l 542 991 l 1291 991 l 1254 819 l 907 819 l 861 602 l 1185 602 l 1147 429 l 823 429 l 770 174 l 1117 174 l 1080 0 m 614 412 l 700 819 l 646 819 l 399 412 l 614 412 z "},"ӕ":{"ha":1211,"x_min":61,"x_max":1177,"o":"m 818 -14 q 696 5 744 -14 q 616 64 648 23 l 606 0 l 478 0 l 488 98 l 484 98 q 384 13 435 39 q 271 -14 333 -14 q 116 60 172 -14 q 61 261 61 134 q 107 516 61 397 q 233 704 154 635 q 408 772 312 772 q 517 746 473 772 q 595 661 561 720 l 599 661 l 637 758 l 765 758 l 753 697 q 834 751 783 730 q 949 772 886 772 q 1116 716 1055 772 q 1177 566 1177 659 q 1063 370 1177 439 q 741 301 950 301 l 705 301 l 704 288 l 704 275 q 742 175 704 210 q 850 140 779 140 q 953 156 895 140 q 1063 199 1011 172 l 1063 45 q 818 -14 941 -14 m 351 151 q 442 197 400 151 q 509 322 484 243 q 534 488 534 401 q 512 574 534 542 q 443 607 490 607 q 356 560 397 607 q 292 434 315 513 q 268 271 268 355 q 290 182 268 214 q 351 151 312 151 m 909 625 q 797 571 850 625 q 728 439 744 517 l 758 439 q 922 472 863 439 q 981 561 981 505 q 909 625 981 625 z "},"Ӗ":{"ha":753,"x_min":36,"x_max":879,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 879 1314 q 812 1173 856 1223 q 697 1097 769 1122 q 522 1071 625 1071 q 314 1123 387 1071 q 241 1282 241 1175 q 245 1314 241 1298 l 425 1314 l 424 1296 l 424 1282 q 539 1187 424 1187 q 643 1217 606 1187 q 694 1314 679 1247 l 879 1314 z "},"ӗ":{"ha":774,"x_min":61,"x_max":848,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 848 1084 q 781 944 825 994 q 666 867 738 893 q 491 842 594 842 q 283 893 355 842 q 210 1053 210 945 q 214 1084 210 1069 l 394 1084 l 393 1067 l 393 1053 q 508 958 393 958 q 611 988 575 958 q 663 1084 648 1018 l 848 1084 z "},"Ә":{"ha":917,"x_min":46,"x_max":873,"o":"m 471 831 q 336 816 397 831 q 218 779 275 801 l 218 954 q 496 1007 340 1007 q 775 907 677 1007 q 873 618 873 806 q 805 294 873 444 q 617 65 736 144 q 347 -14 498 -14 q 125 53 203 -14 q 46 241 46 119 q 184 491 46 409 q 589 574 321 574 l 661 574 q 664 618 664 590 q 616 774 664 718 q 471 831 568 831 m 349 161 q 514 222 443 161 q 629 404 586 283 l 525 404 q 324 364 394 404 q 254 249 254 323 q 281 185 254 208 q 349 161 307 161 z "},"ә":{"ha":774,"x_min":35,"x_max":713,"o":"m 301 134 q 414 187 361 134 q 484 319 467 240 l 453 319 q 289 287 348 319 q 231 197 231 254 q 301 134 231 134 m 412 772 q 634 695 555 772 q 713 479 713 618 q 658 226 713 341 q 508 48 604 111 q 289 -14 412 -14 q 102 42 169 -14 q 35 193 35 97 q 148 388 35 319 q 471 457 260 457 l 505 457 l 507 485 q 472 582 507 547 q 372 618 437 618 q 265 605 313 618 q 149 559 217 592 l 149 714 q 280 760 218 747 q 412 772 341 772 z "},"Ӛ":{"ha":917,"x_min":46,"x_max":873,"o":"m 471 831 q 336 816 397 831 q 218 779 275 801 l 218 954 q 496 1007 340 1007 q 775 907 677 1007 q 873 618 873 806 q 805 294 873 444 q 617 65 736 144 q 347 -14 498 -14 q 125 53 203 -14 q 46 241 46 119 q 184 491 46 409 q 589 574 321 574 l 661 574 q 664 618 664 590 q 616 774 664 718 q 471 831 568 831 m 349 161 q 514 222 443 161 q 629 404 586 283 l 525 404 q 324 364 394 404 q 254 249 254 323 q 281 185 254 208 q 349 161 307 161 m 354 1166 q 383 1246 354 1219 q 464 1274 412 1274 q 554 1200 554 1274 q 528 1121 554 1151 q 446 1092 501 1092 q 354 1166 354 1092 m 627 1166 q 655 1246 627 1219 q 736 1274 684 1274 q 804 1255 781 1274 q 827 1200 827 1236 q 800 1121 827 1151 q 718 1092 773 1092 q 627 1166 627 1092 z "},"ӛ":{"ha":774,"x_min":35,"x_max":715,"o":"m 301 134 q 414 187 361 134 q 484 319 467 240 l 453 319 q 289 287 348 319 q 231 197 231 254 q 301 134 231 134 m 412 772 q 634 695 555 772 q 713 479 713 618 q 658 226 713 341 q 508 48 604 111 q 289 -14 412 -14 q 102 42 169 -14 q 35 193 35 97 q 148 388 35 319 q 471 457 260 457 l 505 457 l 507 485 q 472 582 507 547 q 372 618 437 618 q 265 605 313 618 q 149 559 217 592 l 149 714 q 280 760 218 747 q 412 772 341 772 m 242 937 q 271 1017 242 990 q 352 1044 300 1044 q 442 971 442 1044 q 416 892 442 922 q 334 863 389 863 q 242 937 242 863 m 515 937 q 543 1017 515 990 q 625 1044 572 1044 q 692 1025 669 1044 q 715 971 715 1006 q 688 892 715 922 q 606 863 661 863 q 515 937 515 863 z "},"Ӝ":{"ha":1204,"x_min":-85,"x_max":1317,"o":"m 335 529 l 146 991 l 351 991 l 532 528 l 631 991 l 829 991 l 730 528 l 1095 991 l 1317 991 l 922 501 l 1122 0 l 908 0 l 722 488 l 619 0 l 421 0 l 524 486 l 147 0 l -85 0 l 335 529 m 519 1166 q 548 1246 519 1219 q 629 1274 577 1274 q 720 1200 720 1274 q 693 1121 720 1151 q 611 1092 667 1092 q 519 1166 519 1092 m 792 1166 q 821 1246 792 1219 q 902 1274 849 1274 q 969 1255 946 1274 q 992 1200 992 1236 q 965 1121 992 1151 q 884 1092 939 1092 q 792 1166 792 1092 z "},"ӝ":{"ha":1333,"x_min":-14,"x_max":1348,"o":"m 550 306 l 447 306 q 312 71 408 155 q 78 -14 215 -14 q -14 -5 26 -14 l 18 157 q 72 151 54 151 q 173 195 129 151 q 242 313 218 238 q 267 476 267 389 q 242 574 267 541 q 174 607 218 607 q 92 589 143 607 l 92 754 q 212 772 143 772 q 399 695 331 772 q 468 479 468 618 l 468 461 l 467 443 l 579 443 l 647 758 l 843 758 l 775 443 l 882 443 q 1019 685 920 597 q 1255 772 1118 772 q 1348 764 1303 772 l 1312 602 q 1258 607 1276 607 q 1119 515 1173 607 q 1064 282 1064 422 q 1088 184 1064 217 q 1157 151 1113 151 q 1239 170 1187 151 l 1239 4 q 1118 -14 1190 -14 q 930 62 998 -14 q 863 275 863 138 l 863 306 l 746 306 l 681 0 l 485 0 l 550 306 m 540 937 q 569 1017 540 990 q 650 1044 597 1044 q 740 971 740 1044 q 713 892 740 922 q 631 863 687 863 q 540 937 540 863 m 812 937 q 841 1017 812 990 q 922 1044 869 1044 q 989 1025 966 1044 q 1013 971 1013 1006 q 986 892 1013 922 q 904 863 959 863 q 812 937 812 863 z "},"Ӟ":{"ha":828,"x_min":28,"x_max":814,"o":"m 814 775 q 740 594 814 661 q 532 519 665 528 l 532 517 q 685 448 629 505 q 742 302 742 391 q 633 68 742 151 q 315 -14 524 -14 q 151 -1 221 -14 q 28 40 81 11 l 28 218 q 298 151 151 151 q 472 192 414 151 q 530 311 530 233 q 478 404 530 374 q 314 433 426 433 l 218 433 l 253 597 l 339 597 q 599 733 599 597 q 567 810 599 782 q 471 838 534 838 q 227 754 355 838 l 153 896 q 335 982 250 958 q 522 1006 420 1006 q 673 976 606 1006 q 777 893 740 946 q 814 775 814 840 m 300 1166 q 329 1246 300 1219 q 410 1274 357 1274 q 500 1200 500 1274 q 473 1121 500 1151 q 391 1092 447 1092 q 300 1166 300 1092 m 572 1166 q 601 1246 572 1219 q 682 1274 629 1274 q 749 1255 726 1274 q 772 1200 772 1236 q 746 1121 772 1151 q 664 1092 719 1092 q 572 1166 572 1092 z "},"ӟ":{"ha":728,"x_min":17,"x_max":692,"o":"m 314 467 q 448 487 409 467 q 488 553 488 507 q 465 602 488 584 q 383 619 441 619 q 279 604 336 619 q 170 566 222 589 l 121 714 q 419 772 273 772 q 621 724 550 772 q 692 585 692 676 q 649 467 692 514 q 515 396 606 420 l 515 392 q 644 239 644 354 q 547 52 644 117 q 269 -14 450 -14 q 132 0 201 -14 q 17 37 64 14 l 17 205 q 262 146 136 146 q 437 244 437 146 q 318 323 437 323 l 199 323 l 229 467 l 314 467 m 220 937 q 249 1017 220 990 q 330 1044 277 1044 q 420 971 420 1044 q 393 892 420 922 q 311 863 367 863 q 220 937 220 863 m 492 937 q 521 1017 492 990 q 602 1044 549 1044 q 669 1025 646 1044 q 692 971 692 1006 q 666 892 692 922 q 584 863 639 863 q 492 937 492 863 z "},"Ӡ":{"ha":771,"x_min":-3,"x_max":787,"o":"m 440 572 q 621 496 556 559 q 685 321 685 432 q 573 74 685 162 q 261 -14 460 -14 q -3 40 97 -14 l -3 218 q 121 171 48 190 q 244 151 194 151 q 413 195 353 151 q 473 317 473 238 q 430 413 473 382 q 298 443 387 443 l 195 443 l 225 582 l 482 818 l 168 818 l 205 991 l 787 991 l 758 859 l 440 572 z "},"ӡ":{"ha":760,"x_min":-61,"x_max":725,"o":"m 441 600 l 113 600 l 146 758 l 725 758 l 697 625 l 371 321 q 554 240 487 310 q 621 62 621 171 q 568 -147 621 -56 q 418 -287 515 -238 q 195 -336 321 -336 q -61 -282 49 -336 l -61 -102 q 51 -147 -14 -129 q 170 -165 116 -165 q 344 -109 279 -165 q 408 43 408 -52 q 362 154 408 114 q 232 193 316 193 l 140 193 l 171 339 l 441 600 z "},"Ӣ":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 286 283 l 804 991 l 1055 991 l 846 0 l 659 0 q 756 463 722 302 q 814 720 790 623 l 808 721 l 290 0 l 36 0 l 245 991 l 436 991 l 336 522 q 279 283 292 331 l 286 283 m 473 1214 l 893 1214 l 863 1071 l 443 1071 l 473 1214 z "},"ӣ":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 326 985 l 746 985 l 715 842 l 296 842 l 326 985 z "},"Ӥ":{"ha":1048,"x_min":36,"x_max":1055,"o":"m 286 283 l 804 991 l 1055 991 l 846 0 l 659 0 q 756 463 722 302 q 814 720 790 623 l 808 721 l 290 0 l 36 0 l 245 991 l 436 991 l 336 522 q 279 283 292 331 l 286 283 m 433 1166 q 462 1246 433 1219 q 543 1274 491 1274 q 633 1200 633 1274 q 607 1121 633 1151 q 525 1092 581 1092 q 433 1166 433 1092 m 706 1166 q 734 1246 706 1219 q 816 1274 763 1274 q 883 1255 860 1274 q 906 1200 906 1236 q 879 1121 906 1151 q 798 1092 852 1092 q 706 1166 706 1092 z "},"ӥ":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 279 937 q 308 1017 279 990 q 389 1044 336 1044 q 479 971 479 1044 q 452 892 479 922 q 370 863 426 863 q 279 937 279 863 m 551 937 q 580 1017 551 990 q 661 1044 608 1044 q 728 1025 705 1044 q 751 971 751 1006 q 725 892 751 922 q 643 863 698 863 q 551 937 551 863 z "},"Ӧ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 397 1166 q 426 1246 397 1219 q 507 1274 454 1274 q 597 1200 597 1274 q 570 1121 597 1151 q 488 1092 544 1092 q 397 1166 397 1092 m 669 1166 q 698 1246 669 1219 q 779 1274 726 1274 q 846 1255 823 1274 q 869 1200 869 1236 q 843 1121 869 1151 q 761 1092 816 1092 q 669 1166 669 1092 z "},"ӧ":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 254 937 q 283 1017 254 990 q 364 1044 312 1044 q 454 971 454 1044 q 428 892 454 922 q 346 863 401 863 q 254 937 254 863 m 527 937 q 555 1017 527 990 q 637 1044 584 1044 q 704 1025 681 1044 q 727 971 727 1006 q 700 892 727 922 q 618 863 673 863 q 527 937 527 863 z "},"Ө":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 467 163 q 626 231 554 163 q 733 421 698 299 l 296 421 q 293 364 293 402 q 339 214 293 264 q 467 163 385 163 m 591 832 q 441 770 510 832 q 330 596 372 708 l 760 596 l 761 631 q 717 779 761 725 q 591 832 673 832 z "},"ө":{"ha":812,"x_min":61,"x_max":751,"o":"m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 368 149 q 463 191 420 149 q 528 310 505 233 l 264 310 l 262 290 l 262 277 q 290 182 262 215 q 368 149 317 149 m 449 611 q 356 569 398 611 q 290 453 315 528 l 550 453 l 550 472 q 524 575 550 540 q 449 611 498 611 z "},"Ӫ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 467 163 q 626 231 554 163 q 733 421 698 299 l 296 421 q 293 364 293 402 q 339 214 293 264 q 467 163 385 163 m 591 832 q 441 770 510 832 q 330 596 372 708 l 760 596 l 761 631 q 717 779 761 725 q 591 832 673 832 m 397 1166 q 426 1246 397 1219 q 507 1274 454 1274 q 597 1200 597 1274 q 570 1121 597 1151 q 488 1092 544 1092 q 397 1166 397 1092 m 669 1166 q 698 1246 669 1219 q 779 1274 726 1274 q 846 1255 823 1274 q 869 1200 869 1236 q 843 1121 869 1151 q 761 1092 816 1092 q 669 1166 669 1092 z "},"ӫ":{"ha":812,"x_min":61,"x_max":751,"o":"m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 368 149 q 463 191 420 149 q 528 310 505 233 l 264 310 l 262 290 l 262 277 q 290 182 262 215 q 368 149 317 149 m 449 611 q 356 569 398 611 q 290 453 315 528 l 550 453 l 550 472 q 524 575 550 540 q 449 611 498 611 m 254 937 q 283 1017 254 990 q 364 1044 312 1044 q 454 971 454 1044 q 428 892 454 922 q 346 863 401 863 q 254 937 254 863 m 527 937 q 555 1017 527 990 q 637 1044 584 1044 q 704 1025 681 1044 q 727 971 727 1006 q 700 892 727 922 q 618 863 673 863 q 527 937 527 863 z "},"Ӭ":{"ha":850,"x_min":18,"x_max":807,"o":"m 264 161 q 452 223 378 161 q 567 414 526 286 l 201 414 l 237 586 l 595 586 l 596 603 l 596 621 q 421 832 596 832 q 335 823 377 832 q 203 779 292 814 l 149 946 q 447 1007 290 1007 q 714 908 622 1007 q 807 624 807 808 q 740 292 807 442 q 557 64 673 142 q 288 -14 441 -14 q 140 -1 205 -14 q 18 43 75 12 l 18 227 q 264 161 136 161 m 269 1166 q 298 1246 269 1219 q 379 1274 327 1274 q 469 1200 469 1274 q 443 1121 469 1151 q 361 1092 416 1092 q 269 1166 269 1092 m 542 1166 q 570 1246 542 1219 q 652 1274 599 1274 q 719 1255 696 1274 q 742 1200 742 1236 q 715 1121 742 1151 q 633 1092 688 1092 q 542 1166 542 1092 z "},"ӭ":{"ha":671,"x_min":21,"x_max":622,"o":"m 332 772 q 537 693 464 772 q 610 468 610 614 q 561 214 610 323 q 418 46 511 105 q 195 -14 324 -14 q 21 24 92 -14 l 21 195 q 97 164 56 178 q 191 151 138 151 q 315 191 267 151 q 385 314 362 231 l 132 314 l 161 452 l 403 452 l 404 465 l 404 478 q 375 573 404 540 q 290 607 345 607 q 220 596 252 607 q 150 567 189 585 l 96 717 q 332 772 207 772 m 149 937 q 178 1017 149 990 q 259 1044 207 1044 q 349 971 349 1044 q 323 892 349 922 q 241 863 296 863 q 149 937 149 863 m 422 937 q 450 1017 422 990 q 532 1044 479 1044 q 599 1025 576 1044 q 622 971 622 1006 q 595 892 622 922 q 513 863 568 863 q 422 937 422 863 z "},"Ӯ":{"ha":831,"x_min":21,"x_max":958,"o":"m 164 -14 q 21 8 80 -14 l 21 189 q 155 163 76 163 q 213 174 188 163 q 259 208 238 186 q 314 285 281 230 l 121 991 l 329 991 l 433 564 q 453 461 449 500 q 498 562 484 536 l 732 991 l 958 991 l 550 293 q 411 88 460 140 q 303 11 361 36 q 164 -14 245 -14 m 366 1214 l 785 1214 l 755 1071 l 335 1071 l 366 1214 z "},"ӯ":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 256 985 l 676 985 l 646 842 l 226 842 l 256 985 z "},"Ӱ":{"ha":831,"x_min":21,"x_max":958,"o":"m 164 -14 q 21 8 80 -14 l 21 189 q 155 163 76 163 q 213 174 188 163 q 259 208 238 186 q 314 285 281 230 l 121 991 l 329 991 l 433 564 q 453 461 449 500 q 498 562 484 536 l 732 991 l 958 991 l 550 293 q 411 88 460 140 q 303 11 361 36 q 164 -14 245 -14 m 302 1166 q 331 1246 302 1219 q 412 1274 360 1274 q 503 1200 503 1274 q 476 1121 503 1151 q 394 1092 450 1092 q 302 1166 302 1092 m 575 1166 q 604 1246 575 1219 q 685 1274 632 1274 q 752 1255 729 1274 q 775 1200 775 1236 q 748 1121 775 1151 q 667 1092 722 1092 q 575 1166 575 1092 z "},"ӱ":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 205 937 q 234 1017 205 990 q 315 1044 262 1044 q 405 971 405 1044 q 378 892 405 922 q 296 863 352 863 q 205 937 205 863 m 477 937 q 506 1017 477 990 q 587 1044 534 1044 q 654 1025 631 1044 q 677 971 677 1006 q 651 892 677 922 q 569 863 624 863 q 477 937 477 863 z "},"Ӳ":{"ha":831,"x_min":21,"x_max":958,"o":"m 164 -14 q 21 8 80 -14 l 21 189 q 155 163 76 163 q 213 174 188 163 q 259 208 238 186 q 314 285 281 230 l 121 991 l 329 991 l 433 564 q 453 461 449 500 q 498 562 484 536 l 732 991 l 958 991 l 550 293 q 411 88 460 140 q 303 11 361 36 q 164 -14 245 -14 m 323 1088 q 479 1293 400 1175 l 686 1293 l 686 1282 q 583 1182 657 1246 q 444 1071 509 1118 l 323 1071 l 323 1088 m 592 1088 q 749 1293 669 1175 l 956 1293 l 956 1282 q 852 1182 926 1246 q 713 1071 778 1118 l 592 1071 l 592 1088 z "},"ӳ":{"ha":721,"x_min":-96,"x_max":839,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 206 859 q 363 1064 283 945 l 570 1064 l 570 1053 q 466 952 541 1017 q 327 842 392 888 l 206 842 l 206 859 m 475 859 q 632 1064 553 945 l 839 1064 l 839 1053 q 735 952 810 1017 q 596 842 661 888 l 475 842 l 475 859 z "},"Ӵ":{"ha":935,"x_min":125,"x_max":942,"o":"m 525 0 l 606 380 q 370 322 479 322 q 191 380 256 322 q 125 541 125 437 q 134 619 125 579 l 210 991 l 416 991 l 343 642 q 336 586 336 610 q 440 497 336 497 q 640 547 529 497 l 734 991 l 942 991 l 732 0 l 525 0 m 362 1166 q 391 1246 362 1219 q 472 1274 420 1274 q 562 1200 562 1274 q 536 1121 562 1151 q 454 1092 509 1092 q 362 1166 362 1092 m 635 1166 q 663 1246 635 1219 q 745 1274 692 1274 q 812 1255 789 1274 q 835 1200 835 1236 q 808 1121 835 1151 q 726 1092 781 1092 q 635 1166 635 1092 z "},"ӵ":{"ha":827,"x_min":111,"x_max":803,"o":"m 165 758 l 370 758 l 328 561 q 317 481 317 515 q 338 416 317 438 q 397 395 359 395 q 507 461 464 395 q 581 672 550 528 l 599 758 l 803 758 l 642 0 l 437 0 l 481 205 l 510 328 l 505 328 q 307 232 418 232 q 163 290 216 232 q 111 450 111 349 q 131 595 111 504 l 165 758 m 273 937 q 302 1017 273 990 q 383 1044 331 1044 q 473 971 473 1044 q 447 892 473 922 q 365 863 420 863 q 273 937 273 863 m 546 937 q 574 1017 546 990 q 656 1044 603 1044 q 723 1025 700 1044 q 746 971 746 1006 q 719 892 746 922 q 637 863 692 863 q 546 937 546 863 z "},"Ӷ":{"ha":699,"x_min":36,"x_max":798,"o":"m 36 0 l 245 991 l 798 991 l 761 819 l 414 819 l 275 167 l 468 167 l 371 -289 l 165 -289 l 228 0 l 36 0 z "},"ӷ":{"ha":643,"x_min":25,"x_max":686,"o":"m 25 0 l 186 758 l 686 758 l 652 590 l 354 590 l 265 170 l 418 170 l 325 -272 l 136 -272 l 201 0 l 25 0 z "},"Ӹ":{"ha":1187,"x_min":36,"x_max":1194,"o":"m 985 0 l 772 0 l 982 991 l 1194 991 l 985 0 m 729 334 q 622 86 729 173 q 313 0 515 0 l 36 0 l 245 991 l 453 991 l 372 611 l 397 611 q 645 540 560 611 q 729 334 729 469 m 279 172 l 326 172 q 470 212 420 172 q 519 323 519 252 q 389 439 519 439 l 336 439 l 279 172 m 498 1166 q 527 1246 498 1219 q 608 1274 556 1274 q 699 1200 699 1274 q 672 1121 699 1151 q 590 1092 646 1092 q 498 1166 498 1092 m 771 1166 q 800 1246 771 1219 q 881 1274 828 1274 q 948 1255 925 1274 q 971 1200 971 1236 q 944 1121 971 1151 q 863 1092 918 1092 q 771 1166 771 1092 z "},"ӹ":{"ha":1116,"x_min":72,"x_max":1092,"o":"m 383 758 l 317 450 q 454 465 383 465 q 608 410 549 465 q 667 264 667 354 q 628 119 667 182 q 514 22 589 57 q 336 -14 439 -14 q 72 207 72 -14 q 87 335 72 266 l 179 758 l 383 758 m 378 322 q 289 310 339 322 q 277 247 279 264 q 275 212 275 229 q 296 150 275 171 q 353 129 317 129 q 432 160 402 129 q 463 241 463 192 q 378 322 463 322 m 930 0 l 726 0 l 888 758 l 1092 758 l 930 0 m 410 937 q 438 1017 410 990 q 519 1044 467 1044 q 610 971 610 1044 q 583 892 610 922 q 501 863 557 863 q 410 937 410 863 m 682 937 q 711 1017 682 990 q 792 1044 739 1044 q 859 1025 836 1044 q 882 971 882 1006 q 856 892 882 922 q 774 863 829 863 q 682 937 682 863 z "},"Ӻ":{"ha":699,"x_min":20,"x_max":798,"o":"m 160 -336 q 40 -318 89 -336 l 40 -155 q 118 -170 77 -170 q 190 -141 163 -170 q 228 -54 216 -113 l 239 0 l 36 0 l 122 404 l 20 404 l 57 576 l 158 576 l 245 991 l 798 991 l 761 819 l 414 819 l 363 576 l 572 576 l 534 404 l 325 404 l 283 205 l 485 205 l 425 -85 q 335 -275 399 -214 q 160 -336 272 -336 z "},"ӻ":{"ha":643,"x_min":-8,"x_max":688,"o":"m 149 -336 q 29 -318 78 -336 l 29 -155 q 107 -170 66 -170 q 178 -141 153 -170 q 216 -54 204 -113 l 228 0 l 25 0 l 86 283 l -8 283 l 25 443 l 119 443 l 186 758 l 688 758 l 652 590 l 354 590 l 322 443 l 500 443 l 467 283 l 289 283 l 267 178 l 467 178 l 414 -85 q 323 -276 387 -216 q 149 -336 260 -336 z "},"Ӽ":{"ha":960,"x_min":-79,"x_max":950,"o":"m 564 -336 q 444 -318 493 -336 l 444 -155 q 522 -170 481 -170 q 594 -141 568 -170 q 632 -54 620 -113 l 643 0 l 538 0 l 421 368 l 153 0 l -79 0 l 311 518 l 150 991 l 367 991 l 471 640 l 717 991 l 950 991 l 581 500 l 688 205 l 889 205 l 829 -85 q 739 -275 803 -214 q 564 -336 675 -336 z "},"ӽ":{"ha":832,"x_min":-68,"x_max":806,"o":"m 458 -336 q 339 -318 388 -336 l 339 -155 q 416 -170 376 -170 q 488 -141 462 -170 q 526 -54 514 -113 l 538 0 l 433 0 l 349 232 l 170 0 l -68 0 l 257 389 l 104 758 l 322 758 l 400 532 l 566 758 l 806 758 l 489 378 l 576 178 l 777 178 l 724 -85 q 633 -276 697 -216 q 458 -336 570 -336 z "},"Ӿ":{"ha":842,"x_min":-79,"x_max":950,"o":"m 608 419 l 762 0 l 538 0 l 421 368 l 153 0 l -79 0 l 237 419 l 82 419 l 118 591 l 288 591 l 150 991 l 367 991 l 471 640 l 717 991 l 950 991 l 647 591 l 814 591 l 778 419 l 608 419 z "},"ӿ":{"ha":737,"x_min":-68,"x_max":806,"o":"m 189 306 l 60 306 l 93 461 l 228 461 l 104 758 l 322 758 l 400 532 l 566 758 l 806 758 l 557 461 l 692 461 l 659 306 l 519 306 l 654 0 l 433 0 l 349 232 l 170 0 l -68 0 l 189 306 z "},"Ԁ":{"ha":806,"x_min":41,"x_max":812,"o":"m 41 281 q 152 524 41 436 q 457 611 262 611 l 526 611 l 606 991 l 812 991 l 603 0 l 372 0 q 126 72 211 0 q 41 281 41 144 m 489 439 l 437 439 q 299 401 347 439 q 250 288 250 363 q 285 200 250 229 q 382 172 320 172 l 432 172 l 489 439 z "},"ԁ":{"ha":825,"x_min":61,"x_max":864,"o":"m 275 -14 q 118 59 176 -14 q 61 262 61 132 q 110 516 61 395 q 237 705 158 637 q 412 772 317 772 q 508 747 468 772 q 585 661 549 722 l 590 661 l 591 680 q 608 812 595 755 l 660 1055 l 864 1055 l 640 0 l 485 0 l 494 98 l 492 98 q 391 13 444 39 q 275 -14 338 -14 m 361 151 q 448 198 406 151 q 516 321 490 244 q 542 488 542 399 q 516 574 542 542 q 447 607 491 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 361 151 268 151 z "},"Ԃ":{"ha":1200,"x_min":41,"x_max":1124,"o":"m 1124 575 l 1057 258 q 947 52 1026 117 q 730 -14 867 -14 q 606 9 663 -14 q 522 74 549 32 q 411 5 460 23 q 302 -12 362 -12 q 111 55 180 -12 q 41 240 41 122 q 93 437 41 352 q 241 566 145 522 q 461 611 336 611 l 526 611 l 607 991 l 812 991 l 663 283 q 657 239 657 260 q 679 180 657 200 q 737 160 700 160 q 813 195 785 160 q 857 306 842 229 l 914 575 l 1124 575 m 489 439 l 453 439 q 303 392 357 439 q 249 260 249 345 q 274 184 249 209 q 340 160 300 160 q 453 267 429 160 l 489 439 z "},"ԃ":{"ha":1215,"x_min":61,"x_max":1137,"o":"m 549 102 q 314 -14 454 -14 q 124 61 188 -14 q 61 271 61 135 q 108 522 61 399 q 233 708 155 644 q 404 772 311 772 q 585 661 519 772 l 590 661 q 592 703 590 677 q 599 759 595 728 q 660 1055 604 790 l 864 1055 l 701 289 q 694 231 694 255 q 716 172 694 193 q 772 151 738 151 q 850 185 823 151 q 895 306 876 218 l 930 475 l 1137 475 l 1092 258 q 986 52 1061 117 q 782 -14 910 -14 q 645 16 704 -14 q 557 102 587 45 l 549 102 m 364 151 q 454 197 414 151 q 518 323 494 243 q 542 488 542 404 q 519 574 542 542 q 447 607 496 607 q 359 563 400 607 q 293 438 319 519 q 268 271 268 358 q 294 181 268 211 q 364 151 319 151 z "},"Ԅ":{"ha":1194,"x_min":134,"x_max":1118,"o":"m 741 772 q 679 605 741 675 q 503 507 616 535 l 503 504 q 616 441 577 484 q 656 323 656 398 l 653 239 q 736 160 653 160 q 808 193 781 160 q 851 306 835 225 l 908 575 l 1118 575 l 1051 258 q 942 52 1021 117 q 721 -14 863 -14 q 520 45 590 -14 q 450 214 450 104 q 454 266 450 239 q 457 322 457 292 q 420 405 457 376 q 310 433 383 433 l 154 433 l 186 582 l 293 582 q 465 622 404 582 q 525 741 525 663 q 497 810 525 783 q 416 836 470 836 q 211 765 321 836 l 134 908 q 461 1006 275 1006 q 664 941 588 1006 q 741 772 741 876 z "},"ԅ":{"ha":1133,"x_min":93,"x_max":1055,"o":"m 612 252 l 612 224 q 634 169 612 187 q 690 151 656 151 q 766 182 740 151 q 807 283 792 212 l 848 475 l 1055 475 l 1010 258 q 903 53 981 120 q 685 -14 825 -14 q 487 41 557 -14 q 416 196 416 96 l 416 224 q 385 300 416 277 q 269 323 354 323 l 171 323 l 201 467 l 290 467 q 426 486 388 467 q 464 553 464 506 q 439 604 464 589 q 359 619 414 619 q 252 604 312 619 q 142 566 192 588 l 93 714 q 387 772 243 772 q 589 724 518 772 q 660 585 660 676 q 618 467 660 513 q 488 396 576 420 l 488 392 q 612 252 612 369 z "},"Ԇ":{"ha":913,"x_min":89,"x_max":833,"o":"m 393 0 l 447 248 q 458 321 458 290 q 310 435 458 435 l 154 435 l 189 597 l 275 597 q 534 733 534 597 q 503 810 534 782 q 407 838 471 838 q 163 754 292 838 l 89 896 q 271 982 186 958 q 458 1006 356 1006 q 609 976 542 1006 q 713 893 676 946 q 750 775 750 840 q 676 594 750 661 q 468 519 602 528 l 468 517 q 613 458 560 507 q 667 328 667 408 q 663 280 667 307 q 642 167 660 254 l 833 167 l 736 -289 l 530 -289 l 593 0 l 393 0 z "},"ԇ":{"ha":838,"x_min":121,"x_max":781,"o":"m 399 0 l 436 170 q 446 235 446 216 q 414 303 446 283 q 318 323 382 323 l 199 323 l 229 467 l 314 467 q 448 487 409 467 q 488 553 488 507 q 465 602 488 584 q 383 619 441 619 q 279 604 336 619 q 170 566 222 589 l 121 714 q 419 772 273 772 q 621 724 550 772 q 692 585 692 676 q 648 465 692 511 q 515 396 605 418 l 515 392 q 640 254 640 357 q 628 170 640 229 l 781 170 l 688 -272 l 498 -272 l 564 0 l 399 0 z "},"Ԉ":{"ha":1360,"x_min":-41,"x_max":1283,"o":"m 972 991 l 827 301 q 817 237 817 260 q 837 181 817 203 q 897 160 857 160 q 972 195 944 160 q 1017 306 1001 229 l 1074 575 l 1283 575 l 1217 258 q 1108 53 1187 119 q 890 -14 1029 -14 q 683 46 757 -14 q 610 215 610 106 q 627 334 610 257 l 729 817 l 545 817 q 435 425 491 600 q 330 158 380 251 q 219 26 280 66 q 56 -14 157 -14 q -41 3 1 -14 l -41 175 q 26 161 -5 161 q 99 183 71 161 q 155 252 127 204 q 217 399 182 299 q 297 651 253 499 q 389 991 340 803 l 972 991 z "},"ԉ":{"ha":1244,"x_min":-40,"x_max":1166,"o":"m 724 231 q 745 172 724 193 q 802 151 767 151 q 879 185 852 151 q 924 306 905 218 l 960 475 l 1166 475 l 1121 258 q 1012 52 1090 118 q 794 -14 934 -14 q 590 46 661 -14 q 518 212 518 105 q 526 289 518 249 l 593 600 q 550 606 566 606 q 474 584 505 606 q 418 516 444 563 q 345 323 393 469 q 298 192 321 254 q 244 85 275 131 q 170 13 214 39 q 61 -14 126 -14 q -40 3 1 -14 l -40 171 q 17 160 -15 160 q 78 196 51 160 q 130 307 104 231 q 237 583 199 512 q 320 694 275 654 q 431 753 366 734 q 589 772 496 772 q 712 762 648 772 q 823 733 777 751 l 730 289 q 724 231 724 255 z "},"Ԋ":{"ha":1367,"x_min":36,"x_max":1291,"o":"m 979 991 l 833 301 q 823 237 823 260 q 844 181 823 203 q 904 160 864 160 q 979 195 951 160 q 1023 306 1008 229 l 1080 575 l 1291 575 l 1223 258 q 1115 53 1194 119 q 897 -14 1036 -14 q 693 47 767 -14 q 619 220 619 109 q 625 287 619 250 q 653 428 631 323 l 334 428 l 243 0 l 36 0 l 245 991 l 453 991 l 371 603 l 690 603 l 772 991 l 979 991 z "},"ԋ":{"ha":1247,"x_min":25,"x_max":1169,"o":"m 393 758 l 330 467 l 567 467 l 628 758 l 832 758 l 733 296 q 726 235 726 260 q 749 179 726 198 q 808 160 772 160 q 881 193 854 160 q 926 306 909 225 l 962 475 l 1169 475 l 1124 258 q 1015 52 1093 118 q 798 -14 937 -14 q 593 45 666 -14 q 521 212 521 104 q 529 289 521 249 l 533 313 l 297 313 l 231 0 l 25 0 l 187 758 l 393 758 z "},"Ԍ":{"ha":1022,"x_min":83,"x_max":978,"o":"m 511 557 l 978 557 l 954 433 q 794 91 908 196 q 473 -14 680 -14 q 186 90 288 -14 q 83 376 83 193 q 157 701 83 554 q 360 928 230 848 q 660 1007 490 1007 q 942 940 821 1007 l 864 770 q 747 818 795 806 q 648 829 699 829 q 468 772 548 829 q 341 610 387 715 q 294 380 294 505 q 486 161 294 161 q 639 217 579 161 q 721 382 699 273 l 473 382 l 511 557 z "},"ԍ":{"ha":876,"x_min":61,"x_max":818,"o":"m 433 449 l 818 449 l 796 342 q 659 74 758 161 q 385 -14 559 -14 q 146 65 232 -14 q 61 288 61 143 q 117 542 61 431 q 277 712 173 652 q 519 772 380 772 q 659 755 593 772 q 771 713 725 739 l 697 557 q 515 606 609 606 q 334 519 402 606 q 267 289 267 433 q 302 186 267 223 q 399 150 337 150 q 516 186 470 150 q 578 294 562 222 l 401 294 l 433 449 z "},"Ԏ":{"ha":983,"x_min":114,"x_max":907,"o":"m 114 817 l 151 991 l 844 991 l 807 817 l 558 817 l 450 301 q 440 237 440 260 q 460 181 440 203 q 521 160 481 160 q 596 195 568 160 q 640 306 625 229 l 697 575 l 907 575 l 840 258 q 732 53 811 119 q 514 -14 652 -14 q 307 46 380 -14 q 233 215 233 106 q 250 334 233 257 l 354 817 l 114 817 z "},"ԏ":{"ha":935,"x_min":64,"x_max":857,"o":"m 414 231 q 435 172 414 193 q 492 151 457 151 q 569 185 543 151 q 614 306 595 218 l 650 475 l 857 475 l 811 258 q 703 53 782 119 q 485 -14 623 -14 q 282 46 354 -14 q 210 216 210 106 q 228 342 210 263 l 285 603 l 64 603 l 96 758 l 745 758 l 711 603 l 486 603 l 421 289 q 414 231 414 252 z "},"Ԑ":{"ha":819,"x_min":46,"x_max":865,"o":"m 545 1006 q 705 985 631 1006 q 865 909 780 964 l 770 757 q 666 810 726 789 q 536 832 606 832 q 423 800 465 832 q 382 715 382 768 q 430 626 382 654 q 578 597 478 597 l 672 597 l 637 433 l 554 433 q 331 394 400 433 q 262 277 262 354 q 309 188 262 214 q 439 161 355 161 q 573 179 502 161 q 697 227 644 197 l 697 45 q 392 -14 571 -14 q 138 54 231 -14 q 46 243 46 122 q 119 431 46 362 q 342 521 193 499 l 342 524 q 178 726 178 572 q 279 931 178 857 q 545 1006 381 1006 z "},"ԑ":{"ha":713,"x_min":26,"x_max":726,"o":"m 517 323 l 416 323 q 288 297 335 323 q 241 225 241 271 q 272 166 241 187 q 361 146 302 146 q 480 160 423 146 q 600 207 536 174 l 600 40 q 328 -14 492 -14 q 107 39 188 -14 q 26 186 26 92 q 249 397 26 361 l 249 401 q 165 461 195 422 q 136 547 136 499 q 220 713 136 654 q 453 772 303 772 q 726 714 619 772 l 664 564 q 554 607 602 595 q 458 619 507 619 q 357 597 393 619 q 322 534 322 576 q 355 483 322 499 q 456 467 388 467 l 547 467 l 517 323 z "},"Ԓ":{"ha":1078,"x_min":-41,"x_max":1007,"o":"m 972 991 l 804 205 l 1007 205 l 947 -85 q 858 -275 921 -214 q 682 -336 794 -336 q 562 -318 611 -336 l 562 -155 q 640 -170 600 -170 q 712 -141 686 -170 q 750 -54 738 -113 l 761 0 l 555 0 l 729 817 l 545 817 q 435 425 491 600 q 330 158 380 251 q 219 26 280 66 q 56 -14 157 -14 q -41 3 1 -14 l -41 175 q 26 161 -5 161 q 99 183 71 161 q 155 252 127 204 q 217 399 182 299 q 297 651 253 499 q 389 991 340 803 l 972 991 z "},"ԓ":{"ha":962,"x_min":-40,"x_max":907,"o":"m 707 178 l 907 178 l 854 -85 q 764 -275 828 -214 q 589 -336 700 -336 q 469 -318 518 -336 l 469 -155 q 547 -170 507 -170 q 619 -141 593 -170 q 657 -54 645 -113 l 668 0 l 465 0 l 593 600 q 550 606 566 606 q 474 584 505 606 q 418 516 444 563 q 345 323 393 469 q 298 192 321 254 q 244 85 275 131 q 170 13 214 39 q 61 -14 126 -14 q -40 3 1 -14 l -40 171 q 17 160 -15 160 q 78 196 51 160 q 130 307 104 231 q 237 583 199 512 q 320 694 275 654 q 431 753 366 734 q 589 772 496 772 q 712 762 648 772 q 823 733 777 751 l 707 178 z "},"Ạ":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 224 -208 q 257 -119 224 -150 q 349 -89 290 -89 q 423 -110 396 -89 q 450 -171 450 -130 q 420 -258 450 -225 q 328 -292 390 -292 q 224 -208 224 -292 z "},"ạ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 214 -208 q 246 -119 214 -150 q 338 -89 279 -89 q 412 -110 385 -89 q 439 -171 439 -130 q 409 -258 439 -225 q 317 -292 379 -292 q 214 -208 214 -292 z "},"Ả":{"ha":872,"x_min":-83,"x_max":789,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 768 1257 q 635 1104 768 1145 l 621 1056 l 498 1056 l 507 1156 q 582 1184 560 1165 q 604 1232 604 1202 q 593 1258 604 1249 q 562 1268 583 1268 q 477 1254 527 1268 l 477 1365 q 595 1382 526 1382 q 723 1350 677 1382 q 768 1257 768 1318 z "},"ả":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 701 1028 q 568 875 701 916 l 554 827 l 431 827 l 440 926 q 515 955 493 936 q 537 1003 537 973 q 526 1029 537 1019 q 494 1039 515 1039 q 410 1025 460 1039 l 410 1136 q 528 1153 459 1153 q 656 1121 610 1153 q 701 1028 701 1088 z "},"Ấ":{"ha":872,"x_min":-83,"x_max":1061,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 694 1071 q 591 1178 644 1116 q 444 1071 530 1126 l 306 1071 l 306 1086 l 351 1129 q 493 1279 448 1221 l 709 1279 q 821 1086 749 1187 l 821 1071 l 694 1071 m 782 1203 l 782 1215 q 893 1357 814 1248 l 1061 1357 l 1061 1350 q 990 1283 1044 1330 q 888 1203 936 1236 l 782 1203 z "},"ấ":{"ha":825,"x_min":61,"x_max":975,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 608 842 q 505 949 557 886 q 357 842 444 897 l 220 842 l 220 857 l 264 900 q 407 1050 361 992 l 623 1050 q 735 857 663 958 l 735 842 l 608 842 m 696 974 l 696 986 q 807 1128 728 1019 l 975 1128 l 975 1121 q 904 1054 958 1101 q 802 974 850 1006 l 696 974 z "},"Ầ":{"ha":872,"x_min":-83,"x_max":821,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 694 1071 q 591 1178 644 1116 q 444 1071 530 1126 l 306 1071 l 306 1086 l 351 1129 q 493 1279 448 1221 l 709 1279 q 821 1086 749 1187 l 821 1071 l 694 1071 m 295 1204 q 221 1281 255 1241 q 174 1349 187 1322 l 174 1358 l 331 1358 q 388 1215 347 1294 l 388 1204 l 295 1204 z "},"ầ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 623 842 q 519 949 572 886 q 372 842 458 897 l 235 842 l 235 857 l 279 900 q 422 1050 376 992 l 637 1050 q 750 857 678 958 l 750 842 l 623 842 m 224 975 q 150 1052 184 1012 q 102 1120 116 1093 l 102 1129 l 260 1129 q 317 986 275 1065 l 317 975 l 224 975 z "},"Ẩ":{"ha":872,"x_min":-83,"x_max":994,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 994 1341 q 889 1236 994 1260 l 880 1200 l 796 1200 l 806 1279 q 892 1331 892 1283 q 854 1356 892 1356 q 798 1346 825 1356 l 798 1428 q 877 1439 829 1439 q 963 1412 932 1439 q 994 1341 994 1385 m 694 1071 q 591 1178 644 1116 q 444 1071 530 1126 l 306 1071 l 306 1086 l 351 1129 q 493 1279 448 1221 l 709 1279 q 821 1086 749 1187 l 821 1071 l 694 1071 z "},"ẩ":{"ha":825,"x_min":61,"x_max":920,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 920 1112 q 815 1007 920 1031 l 806 971 l 722 971 l 732 1050 q 818 1101 818 1054 q 781 1126 818 1126 q 724 1117 751 1126 l 724 1198 q 803 1210 755 1210 q 889 1183 858 1210 q 920 1112 920 1156 m 621 842 q 517 949 570 886 q 370 842 456 897 l 232 842 l 232 857 l 277 900 q 419 1050 374 992 l 635 1050 q 747 857 675 958 l 747 842 l 621 842 z "},"Ẫ":{"ha":872,"x_min":-83,"x_max":856,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 514 1346 q 477 1330 489 1346 q 458 1291 466 1314 l 367 1291 q 421 1413 380 1373 q 517 1454 462 1454 q 597 1437 559 1454 q 647 1415 635 1421 q 707 1398 677 1398 q 744 1412 731 1398 q 767 1455 756 1425 l 856 1455 q 705 1291 820 1291 q 657 1296 680 1291 q 599 1320 635 1301 q 544 1343 557 1339 q 514 1346 530 1346 m 694 1071 q 585 1164 613 1136 l 444 1071 l 306 1071 l 306 1086 l 350 1127 q 488 1265 447 1213 l 703 1265 q 791 1127 728 1210 l 821 1086 l 821 1071 l 694 1071 z "},"ẫ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 437 1117 q 401 1101 412 1117 q 382 1061 389 1085 l 290 1061 q 344 1184 303 1143 q 440 1225 385 1225 q 520 1208 482 1225 q 570 1185 559 1192 q 631 1169 600 1169 q 667 1182 654 1169 q 690 1226 680 1196 l 779 1226 q 628 1061 743 1061 q 581 1067 603 1061 q 522 1090 559 1072 q 467 1114 481 1110 q 437 1117 453 1117 m 618 842 q 509 935 536 907 l 367 842 l 229 842 l 229 857 l 273 898 q 411 1036 370 984 l 627 1036 q 715 898 651 981 l 745 857 l 745 842 l 618 842 z "},"Ậ":{"ha":872,"x_min":-83,"x_max":838,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 838 1071 l 703 1071 q 593 1185 661 1107 q 436 1071 522 1125 l 289 1071 l 289 1088 q 393 1187 332 1126 q 489 1293 454 1249 l 718 1293 q 768 1197 733 1257 q 838 1088 804 1137 l 838 1071 m 224 -208 q 257 -119 224 -150 q 349 -89 290 -89 q 423 -110 396 -89 q 450 -171 450 -130 q 420 -258 450 -225 q 328 -292 390 -292 q 224 -208 224 -292 z "},"ậ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 755 842 l 621 842 q 511 956 578 878 q 353 842 439 896 l 206 842 l 206 859 q 310 958 249 897 q 406 1064 371 1019 l 635 1064 q 686 967 650 1027 q 755 859 721 907 l 755 842 m 214 -208 q 246 -119 214 -150 q 338 -89 279 -89 q 412 -110 385 -89 q 439 -171 439 -130 q 409 -258 439 -225 q 317 -292 379 -292 q 214 -208 214 -292 z "},"Ắ":{"ha":872,"x_min":-83,"x_max":836,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 836 1300 q 742 1130 813 1189 q 564 1071 671 1071 q 411 1120 465 1071 q 358 1263 358 1170 q 361 1300 358 1284 l 458 1300 l 458 1288 q 574 1185 458 1185 q 734 1300 690 1185 l 836 1300 m 513 1247 l 513 1260 q 625 1402 556 1303 l 772 1402 l 772 1394 q 701 1327 755 1374 q 598 1247 646 1280 l 513 1247 z "},"ắ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 779 1071 q 685 901 756 960 q 507 842 614 842 q 354 891 408 842 q 301 1034 301 941 q 304 1071 301 1055 l 401 1071 l 401 1059 q 517 956 401 956 q 677 1071 633 956 l 779 1071 m 456 1018 l 456 1031 q 568 1173 499 1074 l 715 1173 l 715 1165 q 644 1098 698 1145 q 541 1018 589 1050 l 456 1018 z "},"Ằ":{"ha":872,"x_min":-83,"x_max":844,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 844 1300 q 750 1130 821 1189 q 571 1071 679 1071 q 419 1120 472 1071 q 366 1263 366 1170 q 368 1300 366 1284 l 466 1300 l 466 1288 q 581 1185 466 1185 q 742 1300 697 1185 l 844 1300 m 581 1247 q 460 1392 496 1325 l 460 1402 l 603 1402 q 660 1259 622 1330 l 660 1247 l 581 1247 z "},"ằ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 778 1071 q 684 901 755 960 q 505 842 613 842 q 353 891 406 842 q 300 1034 300 941 q 302 1071 300 1055 l 400 1071 l 400 1059 q 515 956 400 956 q 676 1071 631 956 l 778 1071 m 515 1018 q 394 1162 430 1096 l 394 1173 l 537 1173 q 594 1029 556 1101 l 594 1018 l 515 1018 z "},"Ẳ":{"ha":872,"x_min":-83,"x_max":836,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 836 1300 q 742 1130 813 1189 q 564 1071 671 1071 q 411 1120 465 1071 q 358 1263 358 1170 q 361 1300 358 1284 l 458 1300 l 458 1288 q 574 1185 458 1185 q 734 1300 690 1185 l 836 1300 m 699 1364 q 676 1302 699 1327 q 607 1267 653 1276 l 598 1238 l 528 1238 l 536 1312 q 590 1328 572 1318 q 607 1360 607 1339 q 576 1379 607 1379 q 526 1371 548 1379 l 526 1439 q 595 1449 555 1449 q 671 1425 644 1449 q 699 1364 699 1402 z "},"ẳ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 777 1071 q 683 901 753 960 q 504 842 612 842 q 352 891 405 842 q 298 1034 298 941 q 301 1071 298 1055 l 399 1071 l 399 1059 q 514 956 399 956 q 675 1071 630 956 l 777 1071 m 639 1135 q 616 1073 639 1098 q 547 1038 593 1047 l 538 1008 l 468 1008 l 476 1083 q 530 1099 513 1088 q 547 1131 547 1109 q 517 1150 547 1150 q 467 1141 488 1150 l 467 1210 q 536 1219 495 1219 q 612 1196 585 1219 q 639 1135 639 1173 z "},"Ẵ":{"ha":872,"x_min":-83,"x_max":851,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 830 1272 q 738 1123 807 1175 q 564 1071 669 1071 q 409 1115 465 1071 q 354 1239 354 1159 q 357 1272 354 1257 l 454 1272 l 453 1263 q 574 1185 453 1185 q 670 1204 633 1185 q 730 1272 707 1223 l 830 1272 m 513 1356 q 457 1304 471 1356 l 366 1304 q 421 1417 381 1380 q 515 1454 460 1454 q 580 1444 551 1454 q 642 1417 608 1435 q 705 1397 680 1397 q 742 1413 729 1397 q 764 1455 755 1428 l 851 1455 q 701 1304 815 1304 q 652 1310 673 1304 q 595 1333 631 1316 q 554 1351 570 1346 q 513 1356 538 1356 z "},"ẵ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 766 1043 q 674 893 743 945 q 500 842 605 842 q 346 886 401 842 q 290 1010 290 930 q 293 1043 290 1028 l 390 1043 l 389 1034 q 510 956 389 956 q 606 975 570 956 q 667 1043 643 994 l 766 1043 m 450 1126 q 393 1075 408 1126 l 302 1075 q 357 1188 317 1151 q 452 1225 397 1225 q 516 1215 488 1225 q 578 1188 545 1206 q 642 1168 616 1168 q 679 1183 665 1168 q 700 1226 692 1199 l 787 1226 q 637 1075 751 1075 q 589 1081 610 1075 q 532 1104 568 1086 q 490 1122 507 1117 q 450 1126 474 1126 z "},"Ặ":{"ha":872,"x_min":-83,"x_max":840,"o":"m 571 236 l 250 236 l 134 0 l -83 0 l 436 996 l 689 996 l 789 0 l 587 0 l 571 236 m 561 412 l 543 650 q 536 821 536 739 l 536 846 q 463 673 507 764 l 335 412 l 561 412 m 840 1300 q 574 1071 803 1071 q 412 1120 470 1071 q 354 1255 354 1170 q 358 1300 354 1281 l 476 1300 q 501 1236 476 1256 q 581 1215 526 1215 q 667 1234 633 1215 q 712 1300 701 1252 l 840 1300 m 224 -208 q 257 -119 224 -150 q 349 -89 290 -89 q 423 -110 396 -89 q 450 -171 450 -130 q 420 -258 450 -225 q 328 -292 390 -292 q 224 -208 224 -292 z "},"ặ":{"ha":825,"x_min":61,"x_max":802,"o":"m 275 -14 q 118 59 176 -14 q 61 261 61 131 q 110 517 61 395 q 238 706 159 639 q 412 772 317 772 q 526 744 478 772 q 600 661 574 715 l 606 661 l 644 758 l 802 758 l 640 0 l 485 0 l 494 98 l 492 98 q 275 -14 401 -14 m 355 151 q 446 197 402 151 q 515 320 489 242 q 542 496 542 397 q 516 575 542 544 q 447 607 490 607 q 359 558 401 607 q 293 429 317 509 q 268 271 268 349 q 291 181 268 211 q 355 151 313 151 m 782 1071 q 515 842 745 842 q 354 891 412 842 q 296 1026 296 941 q 300 1071 296 1052 l 418 1071 q 443 1006 418 1027 q 522 986 467 986 q 609 1004 575 986 q 654 1071 642 1023 l 782 1071 m 214 -208 q 246 -119 214 -150 q 338 -89 279 -89 q 412 -110 385 -89 q 439 -171 439 -130 q 409 -258 439 -225 q 317 -292 379 -292 q 214 -208 214 -292 z "},"Ẹ":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 175 -208 q 208 -119 175 -150 q 299 -89 240 -89 q 373 -110 347 -89 q 400 -171 400 -130 q 370 -258 400 -225 q 278 -292 340 -292 q 175 -208 175 -292 z "},"ẹ":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 191 -208 q 224 -119 191 -150 q 315 -89 256 -89 q 390 -110 363 -89 q 416 -171 416 -130 q 387 -258 416 -225 q 294 -292 357 -292 q 191 -208 191 -292 z "},"Ẻ":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 721 1257 q 587 1104 721 1145 l 574 1056 l 450 1056 l 460 1156 q 535 1184 513 1165 q 557 1232 557 1202 q 546 1258 557 1249 q 514 1268 535 1268 q 429 1254 479 1268 l 429 1365 q 547 1382 479 1382 q 675 1350 630 1382 q 721 1257 721 1318 z "},"ẻ":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 681 1028 q 547 875 681 916 l 534 827 l 410 827 l 420 926 q 495 955 473 936 q 517 1003 517 973 q 506 1029 517 1019 q 474 1039 495 1039 q 389 1025 439 1039 l 389 1136 q 507 1153 439 1153 q 635 1121 590 1153 q 681 1028 681 1088 z "},"Ẽ":{"ha":753,"x_min":36,"x_max":835,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 640 1071 q 582 1082 607 1071 q 534 1106 556 1093 q 493 1131 513 1120 q 450 1142 473 1142 q 413 1123 429 1142 q 387 1069 396 1104 l 267 1069 q 457 1279 307 1279 q 516 1268 490 1279 q 565 1243 543 1257 q 607 1219 587 1230 q 648 1208 627 1208 q 687 1226 671 1208 q 718 1280 703 1243 l 835 1280 q 640 1071 790 1071 z "},"ẽ":{"ha":774,"x_min":61,"x_max":787,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 593 842 q 534 853 559 842 q 487 877 509 864 q 445 902 465 890 q 403 913 425 913 q 365 894 382 913 q 339 840 349 875 l 219 840 q 410 1050 259 1050 q 469 1039 443 1050 q 517 1014 495 1027 q 559 990 540 1001 q 600 979 579 979 q 640 997 623 979 q 671 1051 656 1014 l 787 1051 q 593 842 743 842 z "},"Ế":{"ha":753,"x_min":36,"x_max":1025,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 658 1071 q 554 1178 607 1116 q 407 1071 493 1126 l 269 1071 l 269 1086 l 314 1129 q 456 1279 411 1221 l 672 1279 q 785 1086 713 1187 l 785 1071 l 658 1071 m 745 1203 l 745 1215 q 857 1357 778 1248 l 1025 1357 l 1025 1350 q 954 1283 1008 1330 q 851 1203 899 1236 l 745 1203 z "},"ế":{"ha":774,"x_min":61,"x_max":966,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 600 842 q 496 949 549 886 q 349 842 435 897 l 211 842 l 211 857 l 256 900 q 398 1050 353 992 l 614 1050 q 726 857 654 958 l 726 842 l 600 842 m 687 974 l 687 986 q 798 1128 720 1019 l 966 1128 l 966 1121 q 895 1054 949 1101 q 793 974 841 1006 l 687 974 z "},"Ề":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 658 1071 q 554 1178 607 1116 q 407 1071 493 1126 l 269 1071 l 269 1086 l 314 1129 q 456 1279 411 1221 l 672 1279 q 785 1086 713 1187 l 785 1071 l 658 1071 m 258 1204 q 184 1281 218 1241 q 137 1349 151 1322 l 137 1358 l 294 1358 q 351 1215 310 1294 l 351 1204 l 258 1204 z "},"ề":{"ha":774,"x_min":61,"x_max":739,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 600 842 q 496 949 549 886 q 349 842 435 897 l 211 842 l 211 857 l 256 900 q 398 1050 353 992 l 614 1050 q 726 857 654 958 l 726 842 l 600 842 m 200 975 q 126 1052 160 1012 q 79 1120 92 1093 l 79 1129 l 236 1129 q 293 986 252 1065 l 293 975 l 200 975 z "},"Ể":{"ha":753,"x_min":36,"x_max":957,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 957 1341 q 852 1236 957 1260 l 843 1200 l 760 1200 l 769 1279 q 855 1331 855 1283 q 818 1356 855 1356 q 761 1346 788 1356 l 761 1428 q 840 1439 793 1439 q 926 1412 895 1439 q 957 1341 957 1385 m 658 1071 q 554 1178 607 1116 q 407 1071 493 1126 l 269 1071 l 269 1086 l 314 1129 q 456 1279 411 1221 l 672 1279 q 785 1086 713 1187 l 785 1071 l 658 1071 z "},"ể":{"ha":774,"x_min":61,"x_max":899,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 899 1112 q 794 1007 899 1031 l 785 971 l 701 971 l 711 1050 q 797 1101 797 1054 q 760 1126 797 1126 q 703 1117 730 1126 l 703 1198 q 782 1210 734 1210 q 868 1183 837 1210 q 899 1112 899 1156 m 600 842 q 496 949 549 886 q 349 842 435 897 l 211 842 l 211 857 l 256 900 q 398 1050 353 992 l 614 1050 q 726 857 654 958 l 726 842 l 600 842 z "},"Ễ":{"ha":753,"x_min":36,"x_max":819,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 477 1346 q 441 1330 452 1346 q 422 1291 429 1314 l 330 1291 q 384 1413 343 1373 q 480 1454 425 1454 q 561 1437 522 1454 q 610 1415 599 1421 q 671 1398 640 1398 q 707 1412 694 1398 q 730 1455 720 1425 l 819 1455 q 668 1291 783 1291 q 621 1296 643 1291 q 562 1320 599 1301 q 507 1343 521 1339 q 477 1346 493 1346 m 658 1071 q 549 1164 576 1136 l 407 1071 l 269 1071 l 269 1086 l 313 1127 q 451 1265 410 1213 l 667 1265 q 755 1127 691 1210 l 785 1086 l 785 1071 l 658 1071 z "},"ễ":{"ha":774,"x_min":61,"x_max":761,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 419 1117 q 382 1101 394 1117 q 363 1061 371 1085 l 272 1061 q 326 1184 285 1143 q 422 1225 367 1225 q 502 1208 464 1225 q 552 1185 541 1192 q 612 1169 582 1169 q 649 1182 636 1169 q 672 1226 661 1196 l 761 1226 q 610 1061 725 1061 q 563 1067 585 1061 q 504 1090 541 1072 q 449 1114 463 1110 q 419 1117 435 1117 m 600 842 q 490 935 518 907 l 349 842 l 211 842 l 211 857 l 255 898 q 393 1036 352 984 l 608 1036 q 696 898 633 981 l 726 857 l 726 842 l 600 842 z "},"Ệ":{"ha":753,"x_min":36,"x_max":800,"o":"m 590 0 l 36 0 l 245 991 l 800 991 l 764 819 l 416 819 l 371 602 l 694 602 l 657 429 l 334 429 l 279 174 l 627 174 l 590 0 m 798 1071 l 664 1071 q 554 1185 621 1107 q 397 1071 483 1125 l 250 1071 l 250 1088 q 353 1187 292 1126 q 450 1293 414 1249 l 679 1293 q 729 1197 694 1257 q 798 1088 764 1137 l 798 1071 m 175 -208 q 208 -119 175 -150 q 299 -89 240 -89 q 373 -110 347 -89 q 400 -171 400 -130 q 370 -258 400 -225 q 278 -292 340 -292 q 175 -208 175 -292 z "},"ệ":{"ha":774,"x_min":61,"x_max":742,"o":"m 472 625 q 359 571 412 625 q 290 439 307 517 l 321 439 q 485 472 426 439 q 543 561 543 505 q 472 625 543 625 m 361 -14 q 140 63 218 -14 q 61 279 61 140 q 117 535 61 420 q 269 712 173 651 q 485 772 364 772 q 672 717 605 772 q 739 566 739 662 q 626 370 739 439 q 302 301 513 301 l 268 301 l 267 287 l 267 273 q 301 176 267 212 q 401 140 336 140 q 509 153 460 140 q 625 199 557 166 l 625 45 q 361 -14 509 -14 m 742 842 l 608 842 q 498 956 565 878 q 340 842 427 896 l 193 842 l 193 859 q 297 958 236 897 q 393 1064 358 1019 l 623 1064 q 673 967 637 1027 q 742 859 708 907 l 742 842 m 191 -208 q 224 -119 191 -150 q 315 -89 256 -89 q 390 -110 363 -89 q 416 -171 416 -130 q 387 -258 416 -225 q 294 -292 357 -292 q 191 -208 191 -292 z "},"ỉ":{"ha":412,"x_min":25,"x_max":505,"o":"m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m 505 1028 q 371 875 505 916 l 357 827 l 234 827 l 243 926 q 318 955 296 936 q 340 1003 340 973 q 330 1029 340 1019 q 298 1039 319 1039 q 213 1025 263 1039 l 213 1136 q 331 1153 262 1153 q 459 1121 414 1153 q 505 1028 505 1088 z "},"ị":{"ha":412,"x_min":-22,"x_max":443,"o":"m 218 936 q 251 1025 218 995 q 342 1055 283 1055 q 417 1034 391 1055 q 443 974 443 1013 q 413 886 443 920 q 321 852 383 852 q 218 936 218 852 m 229 0 l 25 0 l 186 758 l 390 758 l 229 0 m -22 -208 q 10 -119 -22 -150 q 102 -89 43 -89 q 176 -110 149 -89 q 203 -171 203 -130 q 173 -258 203 -225 q 81 -292 143 -292 q -22 -208 -22 -292 z "},"Ọ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 294 -208 q 327 -119 294 -150 q 418 -89 359 -89 q 493 -110 466 -89 q 519 -171 519 -130 q 490 -258 519 -225 q 397 -292 460 -292 q 294 -208 294 -292 z "},"ọ":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 208 -208 q 241 -119 208 -150 q 332 -89 273 -89 q 407 -110 380 -89 q 433 -171 433 -130 q 404 -258 433 -225 q 311 -292 374 -292 q 208 -208 208 -292 z "},"Ỏ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 836 1257 q 703 1104 836 1145 l 689 1056 l 566 1056 l 575 1156 q 650 1184 628 1165 q 672 1232 672 1202 q 661 1258 672 1249 q 629 1268 650 1268 q 545 1254 595 1268 l 545 1365 q 663 1382 594 1382 q 791 1350 745 1382 q 836 1257 836 1318 z "},"ỏ":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 678 1028 q 545 875 678 916 l 531 827 l 408 827 l 417 926 q 492 955 470 936 q 514 1003 514 973 q 503 1029 514 1019 q 471 1039 492 1039 q 387 1025 437 1039 l 387 1136 q 505 1153 436 1153 q 633 1121 587 1153 q 678 1028 678 1088 z "},"Ố":{"ha":1014,"x_min":83,"x_max":1114,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 747 1071 q 643 1178 696 1116 q 496 1071 582 1126 l 358 1071 l 358 1086 l 403 1129 q 545 1279 500 1221 l 761 1279 q 873 1086 802 1187 l 873 1071 l 747 1071 m 834 1203 l 834 1215 q 945 1357 867 1248 l 1114 1357 l 1114 1350 q 1042 1283 1097 1330 q 940 1203 988 1236 l 834 1203 z "},"ố":{"ha":812,"x_min":61,"x_max":977,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 610 842 q 506 949 559 886 q 359 842 445 897 l 221 842 l 221 857 l 266 900 q 408 1050 363 992 l 624 1050 q 736 857 665 958 l 736 842 l 610 842 m 697 974 l 697 986 q 808 1128 730 1019 l 977 1128 l 977 1121 q 905 1054 960 1101 q 803 974 851 1006 l 697 974 z "},"Ồ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 747 1071 q 643 1178 696 1116 q 496 1071 582 1126 l 358 1071 l 358 1086 l 403 1129 q 545 1279 500 1221 l 761 1279 q 873 1086 802 1187 l 873 1071 l 747 1071 m 347 1204 q 273 1281 307 1241 q 226 1349 239 1322 l 226 1358 l 383 1358 q 440 1215 399 1294 l 440 1204 l 347 1204 z "},"ồ":{"ha":812,"x_min":61,"x_max":751,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 610 842 q 506 949 559 886 q 359 842 445 897 l 221 842 l 221 857 l 266 900 q 408 1050 363 992 l 624 1050 q 736 857 665 958 l 736 842 l 610 842 m 210 975 q 136 1052 170 1012 q 89 1120 102 1093 l 89 1129 l 246 1129 q 303 986 262 1065 l 303 975 l 210 975 z "},"Ổ":{"ha":1014,"x_min":83,"x_max":1046,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 1046 1341 q 941 1236 1046 1260 l 932 1200 l 848 1200 l 858 1279 q 944 1331 944 1283 q 907 1356 944 1356 q 850 1346 877 1356 l 850 1428 q 929 1439 882 1439 q 1015 1412 984 1439 q 1046 1341 1046 1385 m 747 1071 q 643 1178 696 1116 q 496 1071 582 1126 l 358 1071 l 358 1086 l 403 1129 q 545 1279 500 1221 l 761 1279 q 873 1086 802 1187 l 873 1071 l 747 1071 z "},"ổ":{"ha":812,"x_min":61,"x_max":909,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 909 1112 q 804 1007 909 1031 l 795 971 l 711 971 l 721 1050 q 807 1101 807 1054 q 770 1126 807 1126 q 713 1117 740 1126 l 713 1198 q 792 1210 745 1210 q 878 1183 847 1210 q 909 1112 909 1156 m 610 842 q 506 949 559 886 q 359 842 445 897 l 221 842 l 221 857 l 266 900 q 408 1050 363 992 l 624 1050 q 736 857 665 958 l 736 842 l 610 842 z "},"Ỗ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 566 1346 q 530 1330 541 1346 q 511 1291 518 1314 l 419 1291 q 473 1413 432 1373 q 569 1454 514 1454 q 649 1437 611 1454 q 699 1415 688 1421 q 760 1398 729 1398 q 796 1412 783 1398 q 819 1455 808 1425 l 908 1455 q 757 1291 872 1291 q 710 1296 732 1291 q 651 1320 688 1301 q 596 1343 610 1339 q 566 1346 582 1346 m 747 1071 q 637 1164 665 1136 l 496 1071 l 358 1071 l 358 1086 l 402 1127 q 540 1265 499 1213 l 755 1265 q 844 1127 780 1210 l 873 1086 l 873 1071 l 747 1071 z "},"ỗ":{"ha":812,"x_min":61,"x_max":771,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 429 1117 q 393 1101 404 1117 q 374 1061 381 1085 l 282 1061 q 336 1184 295 1143 q 432 1225 377 1225 q 512 1208 474 1225 q 562 1185 551 1192 q 623 1169 592 1169 q 659 1182 646 1169 q 682 1226 671 1196 l 771 1226 q 620 1061 735 1061 q 573 1067 595 1061 q 514 1090 551 1072 q 459 1114 473 1110 q 429 1117 445 1117 m 610 842 q 500 935 528 907 l 359 842 l 221 842 l 221 857 l 265 898 q 403 1036 362 984 l 618 1036 q 707 898 643 981 l 736 857 l 736 842 l 610 842 z "},"Ộ":{"ha":1014,"x_min":83,"x_max":971,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 876 909 781 1007 q 971 636 971 812 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 887 1071 l 753 1071 q 643 1185 710 1107 q 486 1071 572 1125 l 338 1071 l 338 1088 q 442 1187 381 1126 q 538 1293 503 1249 l 768 1293 q 818 1197 783 1257 q 887 1088 853 1137 l 887 1071 m 294 -208 q 327 -119 294 -150 q 418 -89 359 -89 q 493 -110 466 -89 q 519 -171 519 -130 q 490 -258 519 -225 q 397 -292 460 -292 q 294 -208 294 -292 z "},"ộ":{"ha":812,"x_min":61,"x_max":752,"o":"m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 751 472 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 q 674 692 597 772 q 751 472 751 612 m 752 842 l 618 842 q 508 956 575 878 q 351 842 437 896 l 203 842 l 203 859 q 307 958 246 897 q 404 1064 368 1019 l 633 1064 q 683 967 648 1027 q 752 859 718 907 l 752 842 m 208 -208 q 241 -119 208 -150 q 332 -89 273 -89 q 407 -110 380 -89 q 433 -171 433 -130 q 404 -258 433 -225 q 311 -292 374 -292 q 208 -208 208 -292 z "},"Ớ":{"ha":1072,"x_min":83,"x_max":1219,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 909 867 816 1007 q 1007 1055 985 917 l 1213 1055 l 1219 1039 q 1124 860 1187 931 q 958 750 1061 789 q 971 636 971 693 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 511 1088 q 661 1293 564 1147 l 888 1293 l 888 1282 q 784 1178 857 1244 q 652 1071 711 1113 l 511 1071 l 511 1088 z "},"ớ":{"ha":893,"x_min":61,"x_max":1015,"o":"m 464 772 q 690 673 612 772 q 765 739 736 692 q 808 872 793 785 l 1008 872 l 1015 856 q 920 667 983 734 q 742 559 857 600 q 751 472 751 525 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 376 859 q 527 1064 430 918 l 754 1064 l 754 1053 q 650 949 723 1015 q 518 842 576 884 l 376 842 l 376 859 z "},"Ờ":{"ha":1072,"x_min":83,"x_max":1219,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 909 867 816 1007 q 1007 1055 985 917 l 1213 1055 l 1219 1039 q 1124 860 1187 931 q 958 750 1061 789 q 971 636 971 693 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 714 1071 l 589 1071 q 495 1175 541 1118 q 425 1279 450 1232 l 425 1293 l 636 1293 q 714 1088 661 1193 l 714 1071 z "},"ờ":{"ha":893,"x_min":61,"x_max":1015,"o":"m 464 772 q 690 673 612 772 q 765 739 736 692 q 808 872 793 785 l 1008 872 l 1015 856 q 920 667 983 734 q 742 559 857 600 q 751 472 751 525 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 568 842 l 443 842 q 349 946 395 888 q 279 1050 303 1003 l 279 1064 l 490 1064 q 568 859 514 964 l 568 842 z "},"Ở":{"ha":1072,"x_min":83,"x_max":1219,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 909 867 816 1007 q 1007 1055 985 917 l 1213 1055 l 1219 1039 q 1124 860 1187 931 q 958 750 1061 789 q 971 636 971 693 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 836 1257 q 703 1104 836 1145 l 689 1056 l 566 1056 l 575 1156 q 650 1184 628 1165 q 672 1232 672 1202 q 661 1258 672 1249 q 629 1268 650 1268 q 545 1254 595 1268 l 545 1365 q 663 1382 594 1382 q 791 1350 745 1382 q 836 1257 836 1318 z "},"ở":{"ha":893,"x_min":61,"x_max":1015,"o":"m 464 772 q 690 673 612 772 q 765 739 736 692 q 808 872 793 785 l 1008 872 l 1015 856 q 920 667 983 734 q 742 559 857 600 q 751 472 751 525 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 678 1028 q 545 875 678 916 l 531 827 l 408 827 l 417 926 q 492 955 470 936 q 514 1003 514 973 q 503 1029 514 1019 q 471 1039 492 1039 q 387 1025 437 1039 l 387 1136 q 505 1153 436 1153 q 633 1121 587 1153 q 678 1028 678 1088 z "},"Ỡ":{"ha":1072,"x_min":83,"x_max":1219,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 909 867 816 1007 q 1007 1055 985 917 l 1213 1055 l 1219 1039 q 1124 860 1187 931 q 958 750 1061 789 q 971 636 971 693 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 726 1071 q 668 1082 693 1071 q 621 1106 642 1093 q 579 1131 599 1120 q 536 1142 559 1142 q 499 1123 515 1142 q 473 1069 482 1104 l 353 1069 q 543 1279 393 1279 q 603 1268 576 1279 q 651 1243 629 1257 q 693 1219 673 1230 q 734 1208 713 1208 q 773 1226 757 1208 q 804 1280 789 1243 l 921 1280 q 726 1071 876 1071 z "},"ỡ":{"ha":893,"x_min":61,"x_max":1015,"o":"m 464 772 q 690 673 612 772 q 765 739 736 692 q 808 872 793 785 l 1008 872 l 1015 856 q 920 667 983 734 q 742 559 857 600 q 751 472 751 525 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 580 842 q 521 853 547 842 q 474 877 496 864 q 432 902 452 890 q 390 913 412 913 q 352 894 369 913 q 326 840 336 875 l 206 840 q 397 1050 246 1050 q 456 1039 430 1050 q 505 1014 482 1027 q 547 990 527 1001 q 587 979 566 979 q 627 997 610 979 q 658 1051 643 1014 l 774 1051 q 580 842 730 842 z "},"Ợ":{"ha":1072,"x_min":83,"x_max":1219,"o":"m 971 636 q 904 293 971 444 q 720 64 837 141 q 452 -14 604 -14 q 181 86 278 -14 q 83 364 83 186 q 151 695 83 544 q 336 926 218 846 q 608 1007 454 1007 q 909 867 816 1007 q 1007 1055 985 917 l 1213 1055 l 1219 1039 q 1124 860 1187 931 q 958 750 1061 789 q 971 636 971 693 m 591 832 q 441 770 509 832 q 333 600 372 708 q 294 364 294 491 q 339 214 294 264 q 467 163 385 163 q 616 222 549 163 q 722 389 684 281 q 760 631 760 496 q 715 780 760 727 q 591 832 671 832 m 294 -208 q 327 -119 294 -150 q 418 -89 359 -89 q 493 -110 466 -89 q 519 -171 519 -130 q 490 -258 519 -225 q 397 -292 460 -292 q 294 -208 294 -292 z "},"ợ":{"ha":893,"x_min":61,"x_max":1015,"o":"m 464 772 q 690 673 612 772 q 765 739 736 692 q 808 872 793 785 l 1008 872 l 1015 856 q 920 667 983 734 q 742 559 857 600 q 751 472 751 525 q 704 218 751 329 q 566 47 656 108 q 351 -14 475 -14 q 140 66 219 -14 q 61 278 61 146 q 110 535 61 422 q 250 710 158 648 q 464 772 341 772 m 546 472 q 449 606 546 606 q 358 564 398 606 q 292 443 317 523 q 267 278 267 363 q 368 153 267 153 q 460 194 419 153 q 523 310 500 236 q 546 472 546 385 m 208 -208 q 241 -119 208 -150 q 332 -89 273 -89 q 407 -110 380 -89 q 433 -171 433 -130 q 404 -258 433 -225 q 311 -292 374 -292 q 208 -208 208 -292 z "},"Ụ":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 273 -208 q 306 -119 273 -150 q 397 -89 338 -89 q 472 -110 445 -89 q 498 -171 498 -130 q 469 -258 498 -225 q 376 -292 439 -292 q 273 -208 273 -292 z "},"ụ":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 220 -208 q 253 -119 220 -150 q 345 -89 286 -89 q 419 -110 392 -89 q 446 -171 446 -130 q 416 -258 446 -225 q 323 -292 386 -292 q 220 -208 220 -292 z "},"Ủ":{"ha":960,"x_min":96,"x_max":972,"o":"m 972 991 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 815 1257 q 682 1104 815 1145 l 668 1056 l 545 1056 l 554 1156 q 629 1184 607 1165 q 651 1232 651 1202 q 640 1258 651 1249 q 608 1268 629 1268 q 524 1254 574 1268 l 524 1365 q 642 1382 573 1382 q 770 1350 724 1382 q 815 1257 815 1318 z "},"ủ":{"ha":839,"x_min":75,"x_max":815,"o":"m 178 758 l 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 125 42 174 -14 q 75 204 75 98 q 92 349 75 267 l 178 758 m 704 1028 q 570 875 704 916 l 557 827 l 433 827 l 443 926 q 518 955 496 936 q 540 1003 540 973 q 529 1029 540 1019 q 497 1039 518 1039 q 412 1025 463 1039 l 412 1136 q 530 1153 462 1153 q 659 1121 613 1153 q 704 1028 704 1088 z "},"Ứ":{"ha":1076,"x_min":96,"x_max":1280,"o":"m 972 991 l 946 867 q 1026 925 998 883 q 1068 1055 1055 968 l 1274 1055 l 1280 1039 q 1147 824 1240 901 q 918 739 1054 748 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 513 1088 q 664 1293 567 1147 l 891 1293 l 891 1282 q 787 1178 860 1244 q 655 1071 713 1113 l 513 1071 l 513 1088 z "},"ứ":{"ha":987,"x_min":72,"x_max":1135,"o":"m 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 799 682 q 857 712 833 691 q 894 766 880 733 q 922 871 909 799 l 1128 871 l 1135 854 q 1003 642 1095 718 q 772 554 911 565 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 m 404 859 q 555 1064 458 918 l 782 1064 l 782 1053 q 677 949 751 1015 q 546 842 604 884 l 404 842 l 404 859 z "},"Ừ":{"ha":1076,"x_min":96,"x_max":1280,"o":"m 972 991 l 946 867 q 1026 925 998 883 q 1068 1055 1055 968 l 1274 1055 l 1280 1039 q 1147 824 1240 901 q 918 739 1054 748 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 680 1071 l 555 1071 q 461 1175 507 1118 q 391 1279 415 1232 l 391 1293 l 602 1293 q 680 1088 626 1193 l 680 1071 z "},"ừ":{"ha":987,"x_min":72,"x_max":1135,"o":"m 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 799 682 q 857 712 833 691 q 894 766 880 733 q 922 871 909 799 l 1128 871 l 1135 854 q 1003 642 1095 718 q 772 554 911 565 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 m 573 842 l 448 842 q 354 946 400 888 q 284 1050 309 1003 l 284 1064 l 495 1064 q 573 859 519 964 l 573 842 z "},"Ử":{"ha":1076,"x_min":96,"x_max":1280,"o":"m 972 991 l 946 867 q 1026 925 998 883 q 1068 1055 1055 968 l 1274 1055 l 1280 1039 q 1147 824 1240 901 q 918 739 1054 748 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 815 1257 q 682 1104 815 1145 l 668 1056 l 545 1056 l 554 1156 q 629 1184 607 1165 q 651 1232 651 1202 q 640 1258 651 1249 q 608 1268 629 1268 q 524 1254 574 1268 l 524 1365 q 642 1382 573 1382 q 770 1350 724 1382 q 815 1257 815 1318 z "},"ử":{"ha":987,"x_min":72,"x_max":1135,"o":"m 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 799 682 q 857 712 833 691 q 894 766 880 733 q 922 871 909 799 l 1128 871 l 1135 854 q 1003 642 1095 718 q 772 554 911 565 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 m 704 1028 q 570 875 704 916 l 557 827 l 433 827 l 443 926 q 518 955 496 936 q 540 1003 540 973 q 529 1029 540 1019 q 497 1039 518 1039 q 412 1025 463 1039 l 412 1136 q 530 1153 462 1153 q 659 1121 613 1153 q 704 1028 704 1088 z "},"Ữ":{"ha":1076,"x_min":96,"x_max":1280,"o":"m 972 991 l 946 867 q 1026 925 998 883 q 1068 1055 1055 968 l 1274 1055 l 1280 1039 q 1147 824 1240 901 q 918 739 1054 748 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 720 1071 q 661 1082 686 1071 q 614 1106 635 1093 q 572 1131 592 1120 q 530 1142 552 1142 q 492 1123 509 1142 q 466 1069 475 1104 l 346 1069 q 536 1279 386 1279 q 596 1268 570 1279 q 644 1243 622 1257 q 686 1219 667 1230 q 727 1208 706 1208 q 766 1226 750 1208 q 798 1280 783 1243 l 914 1280 q 720 1071 869 1071 z "},"ữ":{"ha":987,"x_min":72,"x_max":1135,"o":"m 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 799 682 q 857 712 833 691 q 894 766 880 733 q 922 871 909 799 l 1128 871 l 1135 854 q 1003 642 1095 718 q 772 554 911 565 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 m 621 842 q 562 853 587 842 q 515 877 536 864 q 473 902 493 890 q 431 913 453 913 q 393 894 410 913 q 367 840 376 875 l 247 840 q 437 1050 287 1050 q 497 1039 471 1050 q 545 1014 523 1027 q 587 990 568 1001 q 628 979 607 979 q 667 997 651 979 q 699 1051 684 1014 l 815 1051 q 621 842 770 842 z "},"Ự":{"ha":1076,"x_min":96,"x_max":1280,"o":"m 972 991 l 946 867 q 1026 925 998 883 q 1068 1055 1055 968 l 1274 1055 l 1280 1039 q 1147 824 1240 901 q 918 739 1054 748 l 836 350 q 688 78 798 170 q 404 -14 579 -14 q 178 63 260 -14 q 96 272 96 140 q 106 366 96 321 l 239 991 l 446 991 l 314 368 q 302 283 302 318 q 431 163 302 163 q 563 215 514 163 q 633 370 612 267 l 765 991 l 972 991 m 273 -208 q 306 -119 273 -150 q 397 -89 338 -89 q 472 -110 445 -89 q 498 -171 498 -130 q 469 -258 498 -225 q 376 -292 439 -292 q 273 -208 273 -292 z "},"ự":{"ha":987,"x_min":72,"x_max":1135,"o":"m 382 758 l 289 315 q 278 235 278 269 q 351 151 278 151 q 465 229 414 151 q 545 444 515 306 l 611 758 l 815 758 l 799 682 q 857 712 833 691 q 894 766 880 733 q 922 871 909 799 l 1128 871 l 1135 854 q 1003 642 1095 718 q 772 554 911 565 l 654 0 l 498 0 l 513 140 l 509 140 q 268 -14 410 -14 q 123 42 175 -14 q 72 204 72 98 q 92 349 72 250 l 178 758 l 382 758 m 220 -208 q 253 -119 220 -150 q 345 -89 286 -89 q 419 -110 392 -89 q 446 -171 446 -130 q 416 -258 446 -225 q 323 -292 386 -292 q 220 -208 220 -292 z "},"Ỵ":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 m 161 -208 q 193 -119 161 -150 q 285 -89 226 -89 q 359 -110 332 -89 q 386 -171 386 -130 q 356 -258 386 -225 q 264 -292 326 -292 q 161 -208 161 -292 z "},"ỵ":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 393 -208 q 425 -119 393 -150 q 517 -89 458 -89 q 591 -110 564 -89 q 618 -171 618 -130 q 588 -258 618 -225 q 496 -292 558 -292 q 393 -208 393 -292 z "},"Ỷ":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 m 694 1257 q 561 1104 694 1145 l 547 1056 l 424 1056 l 433 1156 q 508 1184 486 1165 q 530 1232 530 1202 q 519 1258 530 1249 q 488 1268 509 1268 q 403 1254 453 1268 l 403 1365 q 521 1382 452 1382 q 649 1350 604 1382 q 694 1257 694 1318 z "},"ỷ":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 625 1028 q 492 875 625 916 l 478 827 l 355 827 l 364 926 q 439 955 417 936 q 461 1003 461 973 q 450 1029 461 1019 q 418 1039 439 1039 q 334 1025 384 1039 l 334 1136 q 452 1153 383 1153 q 580 1121 534 1153 q 625 1028 625 1088 z "},"Ỹ":{"ha":783,"x_min":126,"x_max":911,"o":"m 425 590 l 679 991 l 911 991 l 492 379 l 411 0 l 205 0 l 286 379 l 126 991 l 338 991 l 425 590 m 615 1071 q 556 1082 582 1071 q 509 1106 531 1093 q 468 1131 488 1120 q 425 1142 448 1142 q 388 1123 404 1142 q 361 1069 371 1104 l 241 1069 q 432 1279 281 1279 q 491 1268 465 1279 q 540 1243 517 1257 q 582 1219 562 1230 q 623 1208 602 1208 q 662 1226 646 1208 q 693 1280 678 1243 l 810 1280 q 615 1071 765 1071 z "},"ỹ":{"ha":721,"x_min":-96,"x_max":793,"o":"m 69 758 l 269 758 l 307 407 q 317 208 317 324 l 321 208 q 351 289 334 243 q 395 393 367 336 l 571 758 l 793 758 l 332 -109 q 4 -334 212 -334 q -96 -321 -57 -334 l -96 -158 q -17 -167 -50 -167 q 83 -134 40 -167 q 163 -33 126 -102 l 180 0 l 69 758 m 536 842 q 478 853 503 842 q 431 877 452 864 q 389 902 409 890 q 347 913 369 913 q 309 894 326 913 q 283 840 292 875 l 163 840 q 353 1050 203 1050 q 413 1039 387 1050 q 461 1014 439 1027 q 503 990 484 1001 q 544 979 523 979 q 583 997 567 979 q 614 1051 600 1014 l 731 1051 q 536 842 686 842 z "},"₫":{"ha":825,"x_min":37,"x_max":945,"o":"m 404 730 q 506 707 464 730 q 579 629 549 684 l 585 629 q 588 684 585 648 q 608 811 592 721 l 408 811 l 436 946 l 636 946 l 660 1055 l 864 1055 l 840 946 l 945 946 l 917 811 l 811 811 l 640 0 l 485 0 l 494 98 l 492 98 q 390 12 439 37 q 282 -14 340 -14 q 120 58 179 -14 q 61 262 61 130 q 109 498 61 385 q 233 671 156 612 q 404 730 309 730 m 364 151 q 450 192 410 151 q 515 308 489 232 q 541 457 541 384 q 518 536 541 506 q 447 566 496 566 q 357 524 399 566 q 292 414 316 483 q 268 271 268 346 q 294 181 268 211 q 364 151 319 151 m 593 -220 l 37 -220 l 57 -125 l 614 -125 l 593 -220 z "},"̏":{"ha":0,"x_min":-629,"x_max":-102,"o":"m -465 842 q -559 946 -513 888 q -629 1050 -605 1003 l -629 1064 l -437 1064 q -359 859 -412 958 l -359 842 l -465 842 m -207 842 q -301 946 -255 888 q -371 1050 -347 1003 l -371 1064 l -179 1064 q -102 859 -154 961 l -102 842 l -207 842 z "},"ﬀ":{"ha":990,"x_min":-149,"x_max":1141,"o":"m -31 -334 q -149 -317 -101 -334 l -149 -153 q -71 -167 -107 -167 q 2 -140 -29 -167 q 46 -52 33 -113 l 184 603 l 74 603 l 94 701 l 218 758 l 231 815 q 325 1003 258 944 q 510 1063 391 1063 q 669 1029 599 1063 l 615 878 q 525 899 568 899 q 463 871 486 899 q 431 800 439 844 l 422 758 l 690 758 l 703 815 q 797 1003 730 944 q 982 1063 863 1063 q 1141 1029 1071 1063 l 1088 878 q 997 899 1041 899 q 935 871 958 899 q 903 800 911 844 l 895 758 l 1043 758 l 1010 603 l 861 603 l 715 -82 q 441 -334 663 -334 q 323 -317 371 -334 l 323 -153 q 401 -167 365 -167 q 518 -52 494 -167 l 657 603 l 389 603 l 243 -82 q -31 -334 191 -334 z "},"℠":{"ha":1021,"x_min":107,"x_max":1010,"o":"m 415 642 q 368 535 415 574 q 241 497 321 497 q 107 526 167 497 l 107 624 q 244 587 185 587 q 291 601 275 587 q 307 637 307 614 q 295 669 307 656 q 258 694 283 682 l 224 711 q 134 779 157 745 q 110 859 110 813 q 153 960 110 922 q 273 999 197 999 q 414 964 338 999 l 379 879 q 321 903 341 897 q 273 908 300 908 q 218 863 218 908 q 234 825 218 841 q 297 787 250 810 q 391 722 367 753 q 415 642 415 690 m 681 503 l 568 861 l 564 861 l 567 786 l 567 503 l 456 503 l 456 991 l 624 991 l 732 646 l 847 991 l 1010 991 l 1010 503 l 896 503 l 896 779 l 899 861 l 895 861 l 777 503 l 681 503 z "},"Ţ":{"ha":737,"x_min":96,"x_max":836,"o":"m 387 0 l 180 0 l 353 817 l 114 817 l 151 991 l 836 991 l 799 817 l 559 817 l 387 0 m 414 -170 q 357 -291 414 -248 q 199 -334 301 -334 q 96 -318 140 -334 l 96 -204 q 180 -220 138 -220 q 250 -164 250 -220 q 229 -126 250 -141 q 154 -104 208 -111 l 219 0 l 345 0 l 318 -49 q 414 -170 414 -82 z "},"ţ":{"ha":570,"x_min":58,"x_max":596,"o":"m 349 151 q 458 175 393 151 l 458 22 q 278 -14 383 -14 q 129 29 176 -14 q 81 161 81 72 q 89 237 81 195 l 167 603 l 64 603 l 83 703 l 216 760 l 306 920 l 437 920 l 404 758 l 596 758 l 562 603 l 371 603 l 293 237 q 289 201 289 217 q 349 151 289 151 m 376 -170 q 320 -291 376 -248 q 161 -334 264 -334 q 58 -318 103 -334 l 58 -204 q 143 -220 101 -220 q 212 -164 212 -220 q 191 -126 212 -141 q 117 -104 170 -111 l 182 0 l 307 0 l 281 -49 q 376 -170 376 -82 z "},"I":{"ha":447,"x_min":36,"x_max":454,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 z "},"Ì":{"ha":447,"x_min":36,"x_max":454,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 452 1071 l 328 1071 q 234 1175 279 1118 q 163 1279 188 1232 l 163 1293 l 374 1293 q 452 1088 399 1193 l 452 1071 z "},"Í":{"ha":447,"x_min":36,"x_max":659,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 281 1088 q 431 1293 334 1147 l 659 1293 l 659 1282 q 554 1178 627 1244 q 422 1071 481 1113 l 281 1071 l 281 1088 z "},"Î":{"ha":447,"x_min":36,"x_max":635,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 635 1071 l 501 1071 q 391 1185 458 1107 q 234 1071 320 1125 l 87 1071 l 87 1088 q 191 1187 130 1126 q 287 1293 252 1249 l 516 1293 q 566 1197 531 1257 q 635 1088 602 1137 l 635 1071 z "},"Ï":{"ha":447,"x_min":36,"x_max":623,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 151 1166 q 179 1246 151 1219 q 260 1274 208 1274 q 351 1200 351 1274 q 324 1121 351 1151 q 242 1092 298 1092 q 151 1166 151 1092 m 423 1166 q 452 1246 423 1219 q 533 1274 480 1274 q 600 1255 577 1274 q 623 1200 623 1236 q 596 1121 623 1151 q 515 1092 570 1092 q 423 1166 423 1092 z "},"Ĩ":{"ha":447,"x_min":36,"x_max":662,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 467 1071 q 409 1082 434 1071 q 361 1106 383 1093 q 320 1131 340 1120 q 277 1142 300 1142 q 240 1123 256 1142 q 214 1069 223 1104 l 94 1069 q 284 1279 134 1279 q 343 1268 317 1279 q 392 1243 370 1257 q 434 1219 414 1230 q 475 1208 454 1208 q 514 1226 498 1208 q 545 1280 530 1243 l 662 1280 q 467 1071 617 1071 z "},"Ī":{"ha":447,"x_min":36,"x_max":606,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 186 1214 l 606 1214 l 576 1071 l 156 1071 l 186 1214 z "},"Ĭ":{"ha":447,"x_min":36,"x_max":640,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 640 1300 q 373 1071 602 1071 q 211 1120 269 1071 q 153 1255 153 1170 q 157 1300 153 1281 l 275 1300 q 300 1236 275 1256 q 380 1215 325 1215 q 466 1234 433 1215 q 511 1300 500 1252 l 640 1300 z "},"Į":{"ha":447,"x_min":-49,"x_max":454,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 232 0 q 127 -100 151 -65 q 102 -170 102 -136 q 113 -199 102 -189 q 143 -210 124 -210 q 212 -197 173 -210 l 212 -317 q 101 -334 155 -334 q -8 -297 32 -334 q -49 -201 -49 -261 q -17 -99 -49 -146 q 97 0 16 -52 l 232 0 z "},"İ":{"ha":447,"x_min":36,"x_max":503,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 278 1165 q 310 1254 278 1224 q 401 1284 342 1284 q 477 1263 451 1284 q 503 1203 503 1242 q 473 1115 503 1149 q 380 1082 443 1082 q 278 1165 278 1082 z "},"Ĳ":{"ha":907,"x_min":36,"x_max":915,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 355 -292 q 229 -273 292 -292 l 229 -102 q 340 -115 288 -115 q 449 -74 407 -115 q 509 56 490 -33 l 708 991 l 915 991 l 709 26 q 590 -216 674 -140 q 355 -292 507 -292 z "},"Ί":{"ha":546,"x_min":23,"x_max":553,"o":"m 134 0 l 346 991 l 553 991 l 341 0 l 134 0 m 23 791 q 125 1034 75 895 l 317 1034 l 317 1018 q 145 770 236 884 l 23 770 l 23 791 z "},"Ι":{"ha":447,"x_min":36,"x_max":454,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 z "},"Ϊ":{"ha":447,"x_min":36,"x_max":623,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 151 1166 q 179 1246 151 1219 q 260 1274 208 1274 q 351 1200 351 1274 q 324 1121 351 1151 q 242 1092 298 1092 q 151 1166 151 1092 m 423 1166 q 452 1246 423 1219 q 533 1274 480 1274 q 600 1255 577 1274 q 623 1200 623 1236 q 596 1121 623 1151 q 515 1092 570 1092 q 423 1166 423 1092 z "},"І":{"ha":447,"x_min":36,"x_max":454,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 z "},"Ї":{"ha":447,"x_min":36,"x_max":623,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 151 1166 q 179 1246 151 1219 q 260 1274 208 1274 q 351 1200 351 1274 q 324 1121 351 1151 q 242 1092 298 1092 q 151 1166 151 1092 m 423 1166 q 452 1246 423 1219 q 533 1274 480 1274 q 600 1255 577 1274 q 623 1200 623 1236 q 596 1121 623 1151 q 515 1092 570 1092 q 423 1166 423 1092 z "},"Ӏ":{"ha":447,"x_min":36,"x_max":454,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 z "},"ӏ":{"ha":447,"x_min":36,"x_max":454,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 z "},"Ỉ":{"ha":447,"x_min":36,"x_max":561,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m 561 1257 q 427 1104 561 1145 l 414 1056 l 290 1056 l 300 1156 q 375 1184 353 1165 q 397 1232 397 1202 q 386 1258 397 1249 q 354 1268 375 1268 q 269 1254 319 1268 l 269 1365 q 387 1382 319 1382 q 515 1350 470 1382 q 561 1257 561 1318 z "},"Ị":{"ha":447,"x_min":-10,"x_max":454,"o":"m 36 0 l 248 991 l 454 991 l 243 0 l 36 0 m -10 -208 q 22 -119 -10 -150 q 114 -89 55 -89 q 188 -110 161 -89 q 215 -171 215 -130 q 185 -258 215 -225 q 93 -292 155 -292 q -10 -208 -10 -292 z "}},"familyName":"Open Sans","ascender":1485,"descender":-407,"underlinePosition":-104,"underlineThickness":69,"boundingBox":{"yMin":-407,"xMin":-713,"yMax":1485,"xMax":1796},"resolution":1000,"original_font_information":{"format":0,"copyright":"Digitized data copyright © 2010-2011, Google Corporation.","fontFamily":"Open Sans","fontSubfamily":"Bold Italic","uniqueID":"1.10;1ASC;OpenSans-BoldItalic","fullName":"Open Sans Bold Italic","version":"Version 1.10","postScriptName":"OpenSans-BoldItalic","trademark":"Open Sans is a trademark of Google and may be registered in certain jurisdictions.","manufacturer":"Ascender Corporation","manufacturerURL":"http://www.ascendercorp.com/","designerURL":"http://www.ascendercorp.com/typedesigners.html","licence":"Licensed under the Apache License, Version 2.0","licenceURL":"http://www.apache.org/licenses/LICENSE-2.0"},"cssFontWeight":"bold","cssFontStyle":"italic"}')},function(e,t,n){e.exports=n(4)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(5);window.onload=function(){var e=new i.Core((function(){e.createGame(10,10)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),l=n(6),r=n(7),a=n(9),o=n(12),q=n(13),s=n(1),m=n(16),h=n(17),c=n(18),u=n(19),d=function(){function e(e){this.clock=new i.Clock,this.renderer=new i.WebGLRenderer({antialias:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.gammaInput=!0,this.renderer.gammaOutput=!0,this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=i.PCFSoftShadowMap,document.body.appendChild(this.renderer.domElement),this.scene=new i.Scene,this.scene.background=new i.Color(13421772),this.hemiLight=new i.HemisphereLight(16777215,16777215,.6),this.hemiLight.color.setHSL(.6,1,.6),this.hemiLight.groundColor.setHSL(.095,1,.75),this.hemiLight.position.set(0,50,0),this.scene.add(this.hemiLight),this.dirLight=new i.DirectionalLight(16777215,.6),this.dirLight.color.setHSL(.1,1,.95),this.dirLight.position.set(1,1.75,-1),this.dirLight.position.multiplyScalar(30),this.scene.add(this.dirLight);this.dirLight.castShadow=!0,this.dirLight.shadow.mapSize.width=1024,this.dirLight.shadow.mapSize.height=1024,this.dirLight.shadow.camera.left=-100,this.dirLight.shadow.camera.right=100,this.dirLight.shadow.camera.top=100,this.dirLight.shadow.camera.bottom=-100,this.dirLight.shadow.camera.far=3500,this.dirLight.shadow.bias=-1e-5,this.camera=new i.PerspectiveCamera(60,window.innerWidth/window.innerHeight,.5,1e3),this.camera.position.set(0,50,-50),this.camera.lookAt(0,0,0),this.control=new l.OrbitControls(this.camera,this.renderer.domElement),this.control.enableDamping=!0,this.control.dampingFactor=.05,this.control.enableKeys=!1,this.control.screenSpacePanning=!1,this.control.rotateSpeed=.5,this.control.enablePan=!1,this.control.minPolarAngle=.1*Math.PI,this.control.maxPolarAngle=.5*Math.PI,this.control.autoRotate=!0,this.control.enabled=!1,window.addEventListener("resize",this.onResize.bind(this),!1);var t=this;this.model=new a.ModelManager(this.scene,(function(){t.gameTimer=new u.GameTimer(t.scene,t.camera,t.control),t.soundMgr=new m.SoundManager(t.camera),t.scoreMgr=new q.ScoreManager(t.scene,t.camera,t.control),t.board=new r.Board(t.scene,t.model,t.camera,t.control,t.scoreMgr,t.soundMgr,t.gameTimer),t.gameLogic=new o.GameLogic(t.scene,t.camera,t.control,t.board,t.model,t.scoreMgr,t.soundMgr,t.gameTimer),t.tileHolder=new h.TileHolder(t.scene,t.camera,t.control,t.model),t.gameLogic.setTileHolder(t.tileHolder),t.board.setTileHolder(t.tileHolder),t.tileHolder.setVisible(!1),t.scoreMgr.setVisible(!1),t.gameTimer.setVisible(!1),t.gameTimer.setGameLogic(t.gameLogic),t.gameStarter=new c.GameStarter(t.scene,t.camera,t.control,(function(){t.control.autoRotate=!1,t.control.enabled=!0,t.tileHolder.setVisible(!0),t.scoreMgr.setVisible(!0),t.gameTimer.setVisible(!0),t.gameTimer.isPlaying=!0,t.soundMgr.playSound("BGM"),t.gameLogic.createCursor(),t.gameLogic.enable()})),t.board.setGameStarter(t.gameStarter),e&&e(),t.render()}))}return e.prototype.onResize=function(){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)},e.prototype.render=function(){requestAnimationFrame(this.render.bind(this));var e=this.clock.getDelta();s.default.update(),this.gameStarter.update(e),this.tileHolder.update(e),this.scoreMgr.update(e),this.board.update(e),this.gameTimer.update(e),this.control.update(),this.renderer.render(this.scene,this.camera)},e.prototype.dispose=function(){this.board.dispose(),this.gameLogic.disposeCursor()},e.prototype.createGame=function(e,t){this.dispose(),this.board.createMap(e,t)},e}();t.Core=d},function(e,t,n){"use strict";n.r(t),n.d(t,"OrbitControls",(function(){return l})),n.d(t,"MapControls",(function(){return r}));var i=n(0),l=function(e,t){var n,l,r,a,o;void 0===t&&console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.'),t===document&&console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'),this.object=e,this.domElement=t,this.enabled=!0,this.target=new i.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!1,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={LEFT:i.MOUSE.ROTATE,MIDDLE:i.MOUSE.DOLLY,RIGHT:i.MOUSE.PAN},this.touches={ONE:i.TOUCH.ROTATE,TWO:i.TOUCH.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.getPolarAngle=function(){return p.phi},this.getAzimuthalAngle=function(){return p.theta},this.saveState=function(){q.target0.copy(q.target),q.position0.copy(q.object.position),q.zoom0=q.object.zoom},this.reset=function(){q.target.copy(q.target0),q.object.position.copy(q.position0),q.object.zoom=q.zoom0,q.object.updateProjectionMatrix(),q.dispatchEvent(s),q.update(),u=c.NONE},this.update=(n=new i.Vector3,l=(new i.Quaternion).setFromUnitVectors(e.up,new i.Vector3(0,1,0)),r=l.clone().inverse(),a=new i.Vector3,o=new i.Quaternion,function(){var e=q.object.position;return n.copy(e).sub(q.target),n.applyQuaternion(l),p.setFromVector3(n),q.autoRotate&&u===c.NONE&&L(2*Math.PI/60/60*q.autoRotateSpeed),q.enableDamping?(p.theta+=f.theta*q.dampingFactor,p.phi+=f.phi*q.dampingFactor):(p.theta+=f.theta,p.phi+=f.phi),p.theta=Math.max(q.minAzimuthAngle,Math.min(q.maxAzimuthAngle,p.theta)),p.phi=Math.max(q.minPolarAngle,Math.min(q.maxPolarAngle,p.phi)),p.makeSafe(),p.radius*=x,p.radius=Math.max(q.minDistance,Math.min(q.maxDistance,p.radius)),!0===q.enableDamping?q.target.addScaledVector(v,q.dampingFactor):q.target.add(v),n.setFromSpherical(p),n.applyQuaternion(r),e.copy(q.target).add(n),q.object.lookAt(q.target),!0===q.enableDamping?(f.theta*=1-q.dampingFactor,f.phi*=1-q.dampingFactor,v.multiplyScalar(1-q.dampingFactor)):(f.set(0,0,0),v.set(0,0,0)),x=1,!!(g||a.distanceToSquared(q.object.position)>d||8*(1-o.dot(q.object.quaternion))>d)&&(q.dispatchEvent(s),a.copy(q.object.position),o.copy(q.object.quaternion),g=!1,!0)}),this.dispose=function(){q.domElement.removeEventListener("contextmenu",ee,!1),q.domElement.removeEventListener("mousedown",W,!1),q.domElement.removeEventListener("wheel",Z,!1),q.domElement.removeEventListener("touchstart",Q,!1),q.domElement.removeEventListener("touchend",$,!1),q.domElement.removeEventListener("touchmove",K,!1),document.removeEventListener("mousemove",X,!1),document.removeEventListener("mouseup",Y,!1),q.domElement.removeEventListener("keydown",J,!1)};var q=this,s={type:"change"},m={type:"start"},h={type:"end"},c={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},u=c.NONE,d=1e-6,p=new i.Spherical,f=new i.Spherical,x=1,v=new i.Vector3,g=!1,_=new i.Vector2,y=new i.Vector2,b=new i.Vector2,w=new i.Vector2,M=new i.Vector2,z=new i.Vector2,S=new i.Vector2,T=new i.Vector2,E=new i.Vector2;function A(){return Math.pow(.95,q.zoomSpeed)}function L(e){f.theta-=e}function P(e){f.phi-=e}var R,C=(R=new i.Vector3,function(e,t){R.setFromMatrixColumn(t,0),R.multiplyScalar(-e),v.add(R)}),O=function(){var e=new i.Vector3;return function(t,n){!0===q.screenSpacePanning?e.setFromMatrixColumn(n,1):(e.setFromMatrixColumn(n,0),e.crossVectors(q.object.up,e)),e.multiplyScalar(t),v.add(e)}}(),I=function(){var e=new i.Vector3;return function(t,n){var i=q.domElement;if(q.object.isPerspectiveCamera){var l=q.object.position;e.copy(l).sub(q.target);var r=e.length();r*=Math.tan(q.object.fov/2*Math.PI/180),C(2*t*r/i.clientHeight,q.object.matrix),O(2*n*r/i.clientHeight,q.object.matrix)}else q.object.isOrthographicCamera?(C(t*(q.object.right-q.object.left)/q.object.zoom/i.clientWidth,q.object.matrix),O(n*(q.object.top-q.object.bottom)/q.object.zoom/i.clientHeight,q.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),q.enablePan=!1)}}();function D(e){q.object.isPerspectiveCamera?x/=e:q.object.isOrthographicCamera?(q.object.zoom=Math.max(q.minZoom,Math.min(q.maxZoom,q.object.zoom*e)),q.object.updateProjectionMatrix(),g=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),q.enableZoom=!1)}function N(e){q.object.isPerspectiveCamera?x*=e:q.object.isOrthographicCamera?(q.object.zoom=Math.max(q.minZoom,Math.min(q.maxZoom,q.object.zoom/e)),q.object.updateProjectionMatrix(),g=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),q.enableZoom=!1)}function B(e){_.set(e.clientX,e.clientY)}function F(e){w.set(e.clientX,e.clientY)}function U(e){if(1==e.touches.length)_.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),n=.5*(e.touches[0].pageY+e.touches[1].pageY);_.set(t,n)}}function G(e){if(1==e.touches.length)w.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),n=.5*(e.touches[0].pageY+e.touches[1].pageY);w.set(t,n)}}function H(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,i=Math.sqrt(t*t+n*n);S.set(0,i)}function V(e){if(1==e.touches.length)y.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),n=.5*(e.touches[0].pageY+e.touches[1].pageY);y.set(t,n)}b.subVectors(y,_).multiplyScalar(q.rotateSpeed);var i=q.domElement;L(2*Math.PI*b.x/i.clientHeight),P(2*Math.PI*b.y/i.clientHeight),_.copy(y)}function j(e){if(1==e.touches.length)M.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),n=.5*(e.touches[0].pageY+e.touches[1].pageY);M.set(t,n)}z.subVectors(M,w).multiplyScalar(q.panSpeed),I(z.x,z.y),w.copy(M)}function k(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,i=Math.sqrt(t*t+n*n);T.set(0,i),E.set(0,Math.pow(T.y/S.y,q.zoomSpeed)),D(E.y),S.copy(T)}function W(e){if(!1!==q.enabled){switch(e.preventDefault(),q.domElement.focus?q.domElement.focus():window.focus(),e.button){case 0:switch(q.mouseButtons.LEFT){case i.MOUSE.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===q.enablePan)return;F(e),u=c.PAN}else{if(!1===q.enableRotate)return;B(e),u=c.ROTATE}break;case i.MOUSE.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===q.enableRotate)return;B(e),u=c.ROTATE}else{if(!1===q.enablePan)return;F(e),u=c.PAN}break;default:u=c.NONE}break;case 1:switch(q.mouseButtons.MIDDLE){case i.MOUSE.DOLLY:if(!1===q.enableZoom)return;!function(e){S.set(e.clientX,e.clientY)}(e),u=c.DOLLY;break;default:u=c.NONE}break;case 2:switch(q.mouseButtons.RIGHT){case i.MOUSE.ROTATE:if(!1===q.enableRotate)return;B(e),u=c.ROTATE;break;case i.MOUSE.PAN:if(!1===q.enablePan)return;F(e),u=c.PAN;break;default:u=c.NONE}}u!==c.NONE&&(document.addEventListener("mousemove",X,!1),document.addEventListener("mouseup",Y,!1),q.dispatchEvent(m))}}function X(e){if(!1!==q.enabled)switch(e.preventDefault(),u){case c.ROTATE:if(!1===q.enableRotate)return;!function(e){y.set(e.clientX,e.clientY),b.subVectors(y,_).multiplyScalar(q.rotateSpeed);var t=q.domElement;L(2*Math.PI*b.x/t.clientHeight),P(2*Math.PI*b.y/t.clientHeight),_.copy(y),q.update()}(e);break;case c.DOLLY:if(!1===q.enableZoom)return;!function(e){T.set(e.clientX,e.clientY),E.subVectors(T,S),E.y>0?D(A()):E.y<0&&N(A()),S.copy(T),q.update()}(e);break;case c.PAN:if(!1===q.enablePan)return;!function(e){M.set(e.clientX,e.clientY),z.subVectors(M,w).multiplyScalar(q.panSpeed),I(z.x,z.y),w.copy(M),q.update()}(e)}}function Y(e){!1!==q.enabled&&(document.removeEventListener("mousemove",X,!1),document.removeEventListener("mouseup",Y,!1),q.dispatchEvent(h),u=c.NONE)}function Z(e){!1===q.enabled||!1===q.enableZoom||u!==c.NONE&&u!==c.ROTATE||(e.preventDefault(),e.stopPropagation(),q.dispatchEvent(m),function(e){e.deltaY<0?N(A()):e.deltaY>0&&D(A()),q.update()}(e),q.dispatchEvent(h))}function J(e){!1!==q.enabled&&!1!==q.enableKeys&&!1!==q.enablePan&&function(e){var t=!1;switch(e.keyCode){case q.keys.UP:I(0,q.keyPanSpeed),t=!0;break;case q.keys.BOTTOM:I(0,-q.keyPanSpeed),t=!0;break;case q.keys.LEFT:I(q.keyPanSpeed,0),t=!0;break;case q.keys.RIGHT:I(-q.keyPanSpeed,0),t=!0}t&&(e.preventDefault(),q.update())}(e)}function Q(e){if(!1!==q.enabled){switch(e.preventDefault(),e.touches.length){case 1:switch(q.touches.ONE){case i.TOUCH.ROTATE:if(!1===q.enableRotate)return;U(e),u=c.TOUCH_ROTATE;break;case i.TOUCH.PAN:if(!1===q.enablePan)return;G(e),u=c.TOUCH_PAN;break;default:u=c.NONE}break;case 2:switch(q.touches.TWO){case i.TOUCH.DOLLY_PAN:if(!1===q.enableZoom&&!1===q.enablePan)return;!function(e){q.enableZoom&&H(e),q.enablePan&&G(e)}(e),u=c.TOUCH_DOLLY_PAN;break;case i.TOUCH.DOLLY_ROTATE:if(!1===q.enableZoom&&!1===q.enableRotate)return;!function(e){q.enableZoom&&H(e),q.enableRotate&&U(e)}(e),u=c.TOUCH_DOLLY_ROTATE;break;default:u=c.NONE}break;default:u=c.NONE}u!==c.NONE&&q.dispatchEvent(m)}}function K(e){if(!1!==q.enabled)switch(e.preventDefault(),e.stopPropagation(),u){case c.TOUCH_ROTATE:if(!1===q.enableRotate)return;V(e),q.update();break;case c.TOUCH_PAN:if(!1===q.enablePan)return;j(e),q.update();break;case c.TOUCH_DOLLY_PAN:if(!1===q.enableZoom&&!1===q.enablePan)return;!function(e){q.enableZoom&&k(e),q.enablePan&&j(e)}(e),q.update();break;case c.TOUCH_DOLLY_ROTATE:if(!1===q.enableZoom&&!1===q.enableRotate)return;!function(e){q.enableZoom&&k(e),q.enableRotate&&V(e)}(e),q.update();break;default:u=c.NONE}}function $(e){!1!==q.enabled&&(q.dispatchEvent(h),u=c.NONE)}function ee(e){!1!==q.enabled&&e.preventDefault()}q.domElement.addEventListener("contextmenu",ee,!1),q.domElement.addEventListener("mousedown",W,!1),q.domElement.addEventListener("wheel",Z,!1),q.domElement.addEventListener("touchstart",Q,!1),q.domElement.addEventListener("touchend",$,!1),q.domElement.addEventListener("touchmove",K,!1),q.domElement.addEventListener("keydown",J,!1),-1===q.domElement.tabIndex&&(q.domElement.tabIndex=0),this.update()};l.prototype=Object.create(i.EventDispatcher.prototype),l.prototype.constructor=l;var r=function(e,t){l.call(this,e,t),this.mouseButtons.LEFT=i.MOUSE.PAN,this.mouseButtons.RIGHT=i.MOUSE.ROTATE,this.touches.ONE=i.TOUCH.PAN,this.touches.TWO=i.TOUCH.DOLLY_ROTATE};r.prototype=Object.create(i.EventDispatcher.prototype),r.prototype.constructor=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),l=n(1),r=function(e,t,n){this.tileW=e,this.tileH=t,this.level=n};t.Tile=r;var a=function(e,t){this.direction=e.clone(),this.angle=t},o=function(){function e(e,t,n,l,r,o,q){this.scene=e,this.modelMgr=t,this.camera=n,this.camControl=l,this.scoreMgr=r,this.soundMgr=o,this.gameTimer=q,this.tileSize=10,this.pickPlates=[],this.floorPlates=[],this.mapWidth=-1,this.mapHeight=-1,this.prevPickPlate=null,this.matSelect=new i.MeshPhongMaterial({color:16776960}),this.matNormal=new i.MeshPhongMaterial({color:13421772}),this.boardBounding=(new i.Box3).makeEmpty(),this.isTileFacingToCamera=!1,this.tileFacingAngleArray=[],this.tileFacingAngleArray.push(new a(new i.Vector3(1,0,0),-.5*Math.PI)),this.tileFacingAngleArray.push(new a(new i.Vector3(-1,0,0),.5*Math.PI)),this.tileFacingAngleArray.push(new a(new i.Vector3(0,0,1),Math.PI)),this.tileFacingAngleArray.push(new a(new i.Vector3(0,0,-1),0)),this.prevFacingIndex=null;var s=new i.BoxBufferGeometry(this.tileSize,1,this.tileSize,1,1,1),m=new i.MeshBasicMaterial;this.plateBase=new i.Mesh(s,m)}return e.prototype.dispose=function(){for(var e=0;e<this.pickPlates.length;e++)this.pickPlates[e]=null;this.pickPlates=[];for(var t=0;t<this.mapWidth;t++)for(var n=0;n<this.mapHeight;n++){var i=this.map[t][n];if(i.object)if(this.scene.remove(i.object),i.object.geometry.dispose(),i.object.material instanceof Array)for(var l=0;l<i.object.material.length;l++)i.object.material[l].dispose();else i.object.material.dispose()}for(e=0;e<this.floorPlates.length;e++){var r=this.floorPlates[e];if(this.scene.remove(r),r.geometry.dispose(),r.material instanceof Array)for(l=0;l<r.material.length;l++)r.material[l].dispose();else r.material.dispose()}this.curtain&&(this.scene.remove(this.curtain),this.curtain.geometry.dispose(),this.curtain.material.dispose(),this.curtain=null),this.boardBounding.makeEmpty()},e.prototype.createMap=function(e,t){this.dispose(),this.mapWidth=e,this.mapHeight=t;for(var n=[9,8,7,6,5,4,3,2,2,2,1,1,1,1,1],l=[],a=[],o=0;o<this.mapWidth;o++)for(var q=0;q<this.mapHeight;q++)a.push({w:o,h:q});for(var s=0;s<n.length;s++){var m=n[s],h=i.Math.randInt(0,a.length-1);l.push({w:a[h].w,h:a[h].h,level:m}),a.splice(h,1)}this.map=[];for(o=0;o<e;o++){this.map[o]=[];for(q=0;q<t;q++){m=this.findMatchedLevel(o,q,l);this.map[o][q]=new r(o,q,m),(u=this.modelMgr.getModelByLevelNumber(0)).position.x=o*this.tileSize,u.position.z=q*this.tileSize,this.scene.add(u),this.floorPlates.push(u);var c=this.plateBase.clone();c.name=o+"_"+q+"/plate",c.position.copy(u.position),c.updateMatrixWorld(!0),c.userData.linkedTile=this.map[o][q],this.pickPlates.push(c)}}for(o=0;o<e;o++)for(q=0;q<t;q++){var u,d=this.map[o][q];(u=this.modelMgr.getModelByLevelNumber(d.level))&&(d.object=u,d.object.position.x=o*this.tileSize,d.object.position.z=q*this.tileSize,this.scene.add(d.object))}var p=new i.Box3;p.makeEmpty();for(var f=0;f<this.pickPlates.length;f++)p.expandByObject(this.pickPlates[f]);var x=new i.Sphere;p.getBoundingSphere(x),this.scoreMgr.sphere=x.clone(),this.gameTimer.sphere=x.clone(),this.tileHolder.boardSphere=x.clone(),this.gameStarter.boardSphere=x.clone(),this.camControl.target=x.center,this.camControl.object.position.set(x.center.x,x.center.y+x.radius,x.center.z+x.radius),this.camControl.object.lookAt(x.center),this.camControl.update(),this.camControl.minDistance=x.radius,this.camControl.maxDistance=2*x.radius;var v=new i.Vector3,g=new i.Vector3;p.getSize(v),p.getCenter(g);var _=new i.BoxBufferGeometry(v.x,50,v.z),y=new i.MeshPhongMaterial({color:13421772});this.curtain=new i.Mesh(_,y),this.curtain.position.x=g.x,this.curtain.position.y=-.25*v.y-25,this.curtain.position.z=g.z,this.scene.add(this.curtain),this.boardBounding.copy(p)},e.prototype.findMatchedLevel=function(e,t,n){for(var i=0,l=0;l<n.length;l++)if(n[l].w===e&&n[l].h===t){i=n[l].level,n.splice(l,1);break}return i},e.prototype.checkTriple=function(e,t){var n=this;if(0!==e.level){var i=[e],r=e.tileH>0?this.map[e.tileW][e.tileH-1]:null;r&&r.level===e.level&&-1===i.indexOf(r)&&i.push(r);var a=e.tileH<this.mapHeight-1?this.map[e.tileW][e.tileH+1]:null;a&&a.level===e.level&&-1===i.indexOf(a)&&i.push(a);var o=e.tileW>0?this.map[e.tileW-1][e.tileH]:null;o&&o.level===e.level&&-1===i.indexOf(o)&&i.push(o);var q=e.tileW<this.mapWidth-1?this.map[e.tileW+1][e.tileH]:null;q&&q.level===e.level&&-1===i.indexOf(q)&&i.push(q);var s=e.tileW>0&&e.tileH>0?this.map[e.tileW-1][e.tileH-1]:null;s&&s.level===e.level&&(s.level!==r.level&&s.level!==o.level||-1===i.indexOf(s)&&i.push(s));var m=e.tileW<this.mapWidth-1&&e.tileH>0?this.map[e.tileW+1][e.tileH-1]:null;m&&m.level===e.level&&(m.level!==r.level&&m.level!==q.level||-1===i.indexOf(m)&&i.push(m));var h=e.tileW>0&&e.tileH<this.mapHeight-1?this.map[e.tileW-1][e.tileH+1]:null;h&&h.level===e.level&&(h.level!==o.level&&h.level!==a.level||-1===i.indexOf(h)&&i.push(h));var c=e.tileW<this.mapWidth-1&&e.tileH<this.mapHeight-1?this.map[e.tileW+1][e.tileH+1]:null;c&&c.level===e.level&&(c.level!==q.level&&c.level!==a.level||-1===i.indexOf(c)&&i.push(c));var u=e.tileH-1>0?this.map[e.tileW][e.tileH-2]:null;u&&u.level===e.level&&u.level===r.level&&-1===i.indexOf(u)&&i.push(u);var d=e.tileH+1<this.mapHeight-1?this.map[e.tileW][e.tileH+2]:null;d&&d.level===e.level&&d.level===a.level&&-1===i.indexOf(d)&&i.push(d);var p=e.tileW-1>0?this.map[e.tileW-2][e.tileH]:null;p&&p.level===e.level&&p.level===o.level&&-1===i.indexOf(p)&&i.push(p);var f=e.tileW+1<this.mapWidth-1?this.map[e.tileW+2][e.tileH]:null;if(f&&f.level===e.level&&f.level===q.level&&-1===i.indexOf(f)&&i.push(f),i.length>=3){this.soundMgr.playSound("Score");var x=e.level;x++;var v=this.modelMgr.getModelByLevelNumber(0),g=this.modelMgr.getModelByLevelNumber(x);if(g)for(var _=function(r){if(i[r].tileW===e.tileW&&i[r].tileH===e.tileH)g.position.copy(i[r].object.position),y.scoreMgr.addScore(i[r],t),y.deleteTileObject(i[r].object,e,(function(){g.position.y=-30,n.scene.add(g),new l.default.Tween(g.position).to({y:0},250).easing(l.default.Easing.Quadratic.Out).onComplete((function(){i[r].object=g,i[r].level=x,n.checkTriple(i[r],t+1)})).start()}));else{var a=v;a.position.copy(i[r].object.position),y.scene.add(a),y.scoreMgr.addScore(i[r],t),y.deleteTileObject(i[r].object,e),i[r].object=a,i[r].level=0}},y=this,b=0;b<i.length;b++)_(b);else for(b=0;b<i.length;b++){var w=v;w.position.copy(i[b].object.position),this.scene.add(w),this.scoreMgr.addScore(i[b],t),this.deleteTileObject(i[b].object,e),i[b].object=w,i[b].level=0}}}},e.prototype.deleteTileObject=function(e,t,n){var i=this;if(e.material instanceof Array)for(var r=0;r<e.material.length;r++){e.material[r].transparent=!0}else e.material.transparent=!0;new l.default.Tween({opacity:1}).to({opacity:0},250).easing(l.default.Easing.Quadratic.Out).onUpdate((function(t){if(e.material instanceof Array)for(var n=0;n<e.material.length;n++){e.material[n].opacity=t.opacity}else e.material.opacity=t.opacity})).onComplete((function(t){if(i.scene.remove(e),e.material instanceof Array)for(var l=0;l<e.material.length;l++){e.material[l].dispose()}else e.material.dispose();n&&n()})).start()},e.prototype.update=function(e){if(this.isTileFacingToCamera){var t=new i.Vector3;this.boardBounding.getCenter(t);var n=(new i.Plane).setFromNormalAndCoplanarPoint(new i.Vector3(0,1,0),t),l=new i.Vector3;n.projectPoint(this.camera.position,l);var r=(new i.Vector3).subVectors(t,l);r.normalize();for(var a=-1,o=Number.MAX_VALUE,q=0;q<this.tileFacingAngleArray.length;q++){var s=this.tileFacingAngleArray[q],m=r.angleTo(s.direction);m<o&&(o=m,a=q)}if(this.prevFacingIndex!==a){for(var h=this.tileFacingAngleArray[a],c=0;c<this.mapWidth;c++)for(var u=0;u<this.mapHeight;u++){var d=this.map[c][u];d.level>0&&(d.object.rotation.y=h.angle)}this.prevFacingIndex=a}}},e.prototype.setTileHolder=function(e){this.tileHolder=e},e.prototype.setGameStarter=function(e){this.gameStarter=e},e.prototype.getTileCountByLevel=function(e){for(var t=0,n=0;n<this.mapWidth;n++)for(var i=0;i<this.mapHeight;i++){this.map[n][i].level===e&&t++}return t},e}();t.Board=o},function(e,t){var n,i,l=e.exports={};function r(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function o(e){if(n===setTimeout)return setTimeout(e,0);if((n===r||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:r}catch(e){n=r}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(e){i=a}}();var q,s=[],m=!1,h=-1;function c(){m&&q&&(m=!1,q.length?s=q.concat(s):h=-1,s.length&&u())}function u(){if(!m){var e=o(c);m=!0;for(var t=s.length;t;){for(q=s,s=[];++h<t;)q&&q[h].run();h=-1,t=s.length}q=null,m=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function p(){}l.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new d(e,t)),1!==s.length||m||o(u)},d.prototype.run=function(){this.fun.apply(null,this.array)},l.title="browser",l.browser=!0,l.env={},l.argv=[],l.version="",l.versions={},l.on=p,l.addListener=p,l.once=p,l.off=p,l.removeListener=p,l.removeAllListeners=p,l.emit=p,l.prependListener=p,l.prependOnceListener=p,l.listeners=function(e){return[]},l.binding=function(e){throw new Error("process.binding is not supported")},l.cwd=function(){return"/"},l.chdir=function(e){throw new Error("process.chdir is not supported")},l.umask=function(){return 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),l=n(10),r=n(11),a=function(){function e(e,t){this.scene=e,this.models={};var n=this;(new l.MTLLoader).load("models/buildingtiles.mtl",(function(e){e.preload(),(new r.OBJLoader).setMaterials(e).load("models/buildingtiles.obj",(function(e){e.traverse((function(e){e instanceof i.Mesh&&(e.castShadow=!0,e.receiveShadow=!0)}));for(var l=0;l<e.children.length;l++){var r=e.children[l],a=r.name.toLowerCase();n.models[a]=r}t&&t()}))}))}return e.prototype.getModelByLevelNumber=function(e){var t="level"+e;if(this.models.hasOwnProperty(t)){if(this.models[t].material instanceof Array){for(var n=this.models[t].material,l=[],r=0;r<n.length;r++){(a=new i.MeshPhongMaterial).copy(n[r]),l.push(a)}return(o=new i.Mesh(this.models[t].geometry,l)).castShadow=!0,o.receiveShadow=!0,o}var a,o;return(a=new i.MeshPhongMaterial).copy(this.models[t].material),(o=new i.Mesh(this.models[t].geometry,a)).castShadow=!0,o.receiveShadow=!0,o}return null},e}();t.ModelManager=a},function(e,t,n){"use strict";n.r(t),n.d(t,"MTLLoader",(function(){return l}));var i=n(0),l=function(e){i.Loader.call(this,e)};l.prototype=Object.assign(Object.create(i.Loader.prototype),{constructor:l,load:function(e,t,n,l){var r=this,a=""===this.path?i.LoaderUtils.extractUrlBase(e):this.path,o=new i.FileLoader(this.manager);o.setPath(this.path),o.load(e,(function(e){t(r.parse(e,a))}),n,l)},setMaterialOptions:function(e){return this.materialOptions=e,this},parse:function(e,t){for(var n=e.split("\n"),i={},r=/\s+/,a={},o=0;o<n.length;o++){var q=n[o];if(0!==(q=q.trim()).length&&"#"!==q.charAt(0)){var s=q.indexOf(" "),m=s>=0?q.substring(0,s):q;m=m.toLowerCase();var h=s>=0?q.substring(s+1):"";if(h=h.trim(),"newmtl"===m)i={name:h},a[h]=i;else if("ka"===m||"kd"===m||"ks"===m||"ke"===m){var c=h.split(r,3);i[m]=[parseFloat(c[0]),parseFloat(c[1]),parseFloat(c[2])]}else i[m]=h}}var u=new l.MaterialCreator(this.resourcePath||t,this.materialOptions);return u.setCrossOrigin(this.crossOrigin),u.setManager(this.manager),u.setMaterials(a),u}}),l.MaterialCreator=function(e,t){this.baseUrl=e||"",this.options=t,this.materialsInfo={},this.materials={},this.materialsArray=[],this.nameLookup={},this.side=this.options&&this.options.side?this.options.side:i.FrontSide,this.wrap=this.options&&this.options.wrap?this.options.wrap:i.RepeatWrapping},l.MaterialCreator.prototype={constructor:l.MaterialCreator,crossOrigin:"anonymous",setCrossOrigin:function(e){return this.crossOrigin=e,this},setManager:function(e){this.manager=e},setMaterials:function(e){this.materialsInfo=this.convert(e),this.materials={},this.materialsArray=[],this.nameLookup={}},convert:function(e){if(!this.options)return e;var t={};for(var n in e){var i=e[n],l={};for(var r in t[n]=l,i){var a=!0,o=i[r],q=r.toLowerCase();switch(q){case"kd":case"ka":case"ks":this.options&&this.options.normalizeRGB&&(o=[o[0]/255,o[1]/255,o[2]/255]),this.options&&this.options.ignoreZeroRGBs&&0===o[0]&&0===o[1]&&0===o[2]&&(a=!1)}a&&(l[q]=o)}}return t},preload:function(){for(var e in this.materialsInfo)this.create(e)},getIndex:function(e){return this.nameLookup[e]},getAsArray:function(){var e=0;for(var t in this.materialsInfo)this.materialsArray[e]=this.create(t),this.nameLookup[t]=e,e++;return this.materialsArray},create:function(e){return void 0===this.materials[e]&&this.createMaterial_(e),this.materials[e]},createMaterial_:function(e){var t=this,n=this.materialsInfo[e],l={name:e,side:this.side};function r(e,n){if(!l[e]){var i,r,a=t.getTextureParams(n,l),o=t.loadTexture((i=t.baseUrl,"string"!=typeof(r=a.url)||""===r?"":/^https?:\/\//i.test(r)?r:i+r));o.repeat.copy(a.scale),o.offset.copy(a.offset),o.wrapS=t.wrap,o.wrapT=t.wrap,l[e]=o}}for(var a in n){var o,q=n[a];if(""!==q)switch(a.toLowerCase()){case"kd":l.color=(new i.Color).fromArray(q);break;case"ks":l.specular=(new i.Color).fromArray(q);break;case"ke":l.emissive=(new i.Color).fromArray(q);break;case"map_kd":r("map",q);break;case"map_ks":r("specularMap",q);break;case"map_ke":r("emissiveMap",q);break;case"norm":r("normalMap",q);break;case"map_bump":case"bump":r("bumpMap",q);break;case"map_d":r("alphaMap",q),l.transparent=!0;break;case"ns":l.shininess=parseFloat(q);break;case"d":(o=parseFloat(q))<1&&(l.opacity=o,l.transparent=!0);break;case"tr":o=parseFloat(q),this.options&&this.options.invertTrProperty&&(o=1-o),o>0&&(l.opacity=1-o,l.transparent=!0)}}return this.materials[e]=new i.MeshPhongMaterial(l),this.materials[e]},getTextureParams:function(e,t){var n,l={scale:new i.Vector2(1,1),offset:new i.Vector2(0,0)},r=e.split(/\s+/);return(n=r.indexOf("-bm"))>=0&&(t.bumpScale=parseFloat(r[n+1]),r.splice(n,2)),(n=r.indexOf("-s"))>=0&&(l.scale.set(parseFloat(r[n+1]),parseFloat(r[n+2])),r.splice(n,4)),(n=r.indexOf("-o"))>=0&&(l.offset.set(parseFloat(r[n+1]),parseFloat(r[n+2])),r.splice(n,4)),l.url=r.join(" ").trim(),l},loadTexture:function(e,t,n,l,r){var a,o=void 0!==this.manager?this.manager:i.DefaultLoadingManager,q=o.getHandler(e);return null===q&&(q=new i.TextureLoader(o)),q.setCrossOrigin&&q.setCrossOrigin(this.crossOrigin),a=q.load(e,n,l,r),void 0!==t&&(a.mapping=t),a}}},function(e,t,n){"use strict";n.r(t),n.d(t,"OBJLoader",(function(){return l}));var i=n(0),l=function(){var e=/^[og]\s*(.+)?/,t=/^mtllib /,n=/^usemtl /;function l(){var e={objects:[],object:{},vertices:[],normals:[],colors:[],uvs:[],materialLibraries:[],startObject:function(e,t){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=e,void(this.object.fromDeclaration=!1!==t);var n=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:e||"",fromDeclaration:!1!==t,geometry:{vertices:[],normals:[],colors:[],uvs:[]},materials:[],smooth:!0,startMaterial:function(e,t){var n=this._finalize(!1);n&&(n.inherited||n.groupCount<=0)&&this.materials.splice(n.index,1);var i={index:this.materials.length,name:e||"",mtllib:Array.isArray(t)&&t.length>0?t[t.length-1]:"",smooth:void 0!==n?n.smooth:this.smooth,groupStart:void 0!==n?n.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(e){var t={index:"number"==typeof e?e:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return t.clone=this.clone.bind(t),t}};return this.materials.push(i),i},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(e){var t=this.currentMaterial();if(t&&-1===t.groupEnd&&(t.groupEnd=this.geometry.vertices.length/3,t.groupCount=t.groupEnd-t.groupStart,t.inherited=!1),e&&this.materials.length>1)for(var n=this.materials.length-1;n>=0;n--)this.materials[n].groupCount<=0&&this.materials.splice(n,1);return e&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),t}},n&&n.name&&"function"==typeof n.clone){var i=n.clone(0);i.inherited=!0,this.object.materials.push(i)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(e,t){var n=parseInt(e,10);return 3*(n>=0?n-1:n+t/3)},parseNormalIndex:function(e,t){var n=parseInt(e,10);return 3*(n>=0?n-1:n+t/3)},parseUVIndex:function(e,t){var n=parseInt(e,10);return 2*(n>=0?n-1:n+t/2)},addVertex:function(e,t,n){var i=this.vertices,l=this.object.geometry.vertices;l.push(i[e+0],i[e+1],i[e+2]),l.push(i[t+0],i[t+1],i[t+2]),l.push(i[n+0],i[n+1],i[n+2])},addVertexPoint:function(e){var t=this.vertices;this.object.geometry.vertices.push(t[e+0],t[e+1],t[e+2])},addVertexLine:function(e){var t=this.vertices;this.object.geometry.vertices.push(t[e+0],t[e+1],t[e+2])},addNormal:function(e,t,n){var i=this.normals,l=this.object.geometry.normals;l.push(i[e+0],i[e+1],i[e+2]),l.push(i[t+0],i[t+1],i[t+2]),l.push(i[n+0],i[n+1],i[n+2])},addColor:function(e,t,n){var i=this.colors,l=this.object.geometry.colors;l.push(i[e+0],i[e+1],i[e+2]),l.push(i[t+0],i[t+1],i[t+2]),l.push(i[n+0],i[n+1],i[n+2])},addUV:function(e,t,n){var i=this.uvs,l=this.object.geometry.uvs;l.push(i[e+0],i[e+1]),l.push(i[t+0],i[t+1]),l.push(i[n+0],i[n+1])},addUVLine:function(e){var t=this.uvs;this.object.geometry.uvs.push(t[e+0],t[e+1])},addFace:function(e,t,n,i,l,r,a,o,q){var s=this.vertices.length,m=this.parseVertexIndex(e,s),h=this.parseVertexIndex(t,s),c=this.parseVertexIndex(n,s);if(this.addVertex(m,h,c),this.colors.length>0&&this.addColor(m,h,c),void 0!==i&&""!==i){var u=this.uvs.length;m=this.parseUVIndex(i,u),h=this.parseUVIndex(l,u),c=this.parseUVIndex(r,u),this.addUV(m,h,c)}if(void 0!==a&&""!==a){var d=this.normals.length;m=this.parseNormalIndex(a,d),h=a===o?m:this.parseNormalIndex(o,d),c=a===q?m:this.parseNormalIndex(q,d),this.addNormal(m,h,c)}},addPointGeometry:function(e){this.object.geometry.type="Points";for(var t=this.vertices.length,n=0,i=e.length;n<i;n++)this.addVertexPoint(this.parseVertexIndex(e[n],t))},addLineGeometry:function(e,t){this.object.geometry.type="Line";for(var n=this.vertices.length,i=this.uvs.length,l=0,r=e.length;l<r;l++)this.addVertexLine(this.parseVertexIndex(e[l],n));var a=0;for(r=t.length;a<r;a++)this.addUVLine(this.parseUVIndex(t[a],i))}};return e.startObject("",!1),e}function r(e){i.Loader.call(this,e),this.materials=null}return r.prototype=Object.assign(Object.create(i.Loader.prototype),{constructor:r,load:function(e,t,n,l){var r=this,a=new i.FileLoader(r.manager);a.setPath(this.path),a.load(e,(function(e){t(r.parse(e))}),n,l)},setMaterials:function(e){return this.materials=e,this},parse:function(r){console.time("OBJLoader");var a=new l;-1!==r.indexOf("\r\n")&&(r=r.replace(/\r\n/g,"\n")),-1!==r.indexOf("\\\n")&&(r=r.replace(/\\\n/g,""));for(var o=r.split("\n"),q="",s="",m=[],h="function"==typeof"".trimLeft,c=0,u=o.length;c<u;c++)if(q=o[c],0!==(q=h?q.trimLeft():q.trim()).length&&"#"!==(s=q.charAt(0)))if("v"===s){var d=q.split(/\s+/);switch(d[0]){case"v":a.vertices.push(parseFloat(d[1]),parseFloat(d[2]),parseFloat(d[3])),d.length>=7&&a.colors.push(parseFloat(d[4]),parseFloat(d[5]),parseFloat(d[6]));break;case"vn":a.normals.push(parseFloat(d[1]),parseFloat(d[2]),parseFloat(d[3]));break;case"vt":a.uvs.push(parseFloat(d[1]),parseFloat(d[2]))}}else if("f"===s){for(var p=q.substr(1).trim().split(/\s+/),f=[],x=0,v=p.length;x<v;x++){var g=p[x];if(g.length>0){var _=g.split("/");f.push(_)}}var y=f[0];for(x=1,v=f.length-1;x<v;x++){var b=f[x],w=f[x+1];a.addFace(y[0],b[0],w[0],y[1],b[1],w[1],y[2],b[2],w[2])}}else if("l"===s){var M=q.substring(1).trim().split(" "),z=[],S=[];if(-1===q.indexOf("/"))z=M;else for(var T=0,E=M.length;T<E;T++){var A=M[T].split("/");""!==A[0]&&z.push(A[0]),""!==A[1]&&S.push(A[1])}a.addLineGeometry(z,S)}else if("p"===s){var L=q.substr(1).trim().split(" ");a.addPointGeometry(L)}else if(null!==(m=e.exec(q))){var P=(" "+m[0].substr(1).trim()).substr(1);a.startObject(P)}else if(n.test(q))a.object.startMaterial(q.substring(7).trim(),a.materialLibraries);else if(t.test(q))a.materialLibraries.push(q.substring(7).trim());else{if("s"!==s){if("\0"===q)continue;throw new Error('THREE.OBJLoader: Unexpected line: "'+q+'"')}if((m=q.split(" ")).length>1){var R=m[1].trim().toLowerCase();a.object.smooth="0"!==R&&"off"!==R}else a.object.smooth=!0;(W=a.object.currentMaterial())&&(W.smooth=a.object.smooth)}a.finalize();var C=new i.Group;C.materialLibraries=[].concat(a.materialLibraries);for(c=0,u=a.objects.length;c<u;c++){var O=a.objects[c],I=O.geometry,D=O.materials,N="Line"===I.type,B="Points"===I.type,F=!1;if(0!==I.vertices.length){var U=new i.BufferGeometry;U.setAttribute("position",new i.Float32BufferAttribute(I.vertices,3)),I.normals.length>0?U.setAttribute("normal",new i.Float32BufferAttribute(I.normals,3)):U.computeVertexNormals(),I.colors.length>0&&(F=!0,U.setAttribute("color",new i.Float32BufferAttribute(I.colors,3))),I.uvs.length>0&&U.setAttribute("uv",new i.Float32BufferAttribute(I.uvs,2));for(var G,H=[],V=0,j=D.length;V<j;V++){var k=D[V],W=void 0;if(null!==this.materials)if(W=this.materials.create(k.name),!N||!W||W instanceof i.LineBasicMaterial){if(B&&W&&!(W instanceof i.PointsMaterial)){var X=new i.PointsMaterial({size:10,sizeAttenuation:!1});i.Material.prototype.copy.call(X,W),X.color.copy(W.color),X.map=W.map,W=X}}else{var Y=new i.LineBasicMaterial;i.Material.prototype.copy.call(Y,W),Y.color.copy(W.color),W=Y}W||((W=N?new i.LineBasicMaterial:B?new i.PointsMaterial({size:1,sizeAttenuation:!1}):new i.MeshPhongMaterial).name=k.name),W.flatShading=!k.smooth,W.vertexColors=F?i.VertexColors:i.NoColors,H.push(W)}if(H.length>1){for(V=0,j=D.length;V<j;V++){k=D[V];U.addGroup(k.groupStart,k.groupCount,V)}G=N?new i.LineSegments(U,H):B?new i.Points(U,H):new i.Mesh(U,H)}else G=N?new i.LineSegments(U,H[0]):B?new i.Points(U,H[0]):new i.Mesh(U,H[0]);G.name=O.name,C.add(G)}}return console.timeEnd("OBJLoader"),C}}),r}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),l=n(1),r=function(){function e(e,t,n,l,r,a,o,q){this.scene=e,this.camera=t,this.control=n,this.board=l,this.modelMgr=r,this.scoreMgr=a,this.soundMgr=o,this.gameTimer=q,this.isSpawning=!1,this.rayCast=new i.Raycaster,this.mousePos=new i.Vector2,this.mouseDownPos=new i.Vector2,this.pointerDownBinder=this.onPointerDown.bind(this),this.pointerMoveBinder=this.onPointerMove.bind(this),this.pointerUpBinder=this.onPointerUp.bind(this),this.restartPointerUpBinder=this.restartPointerUp.bind(this)}return e.prototype.enable=function(){window.addEventListener("pointerdown",this.pointerDownBinder,!1),window.addEventListener("pointermove",this.pointerMoveBinder,!1),window.addEventListener("pointerup",this.pointerUpBinder,!1)},e.prototype.disable=function(){this.disposeCursor(),window.removeEventListener("pointerdown",this.pointerDownBinder),window.removeEventListener("pointermove",this.pointerMoveBinder),window.removeEventListener("pointerup",this.pointerUpBinder)},e.prototype.onPointerDown=function(e){0===e.button&&(this.mouseDownPos.x=e.screenX,this.mouseDownPos.y=e.screenY)},e.prototype.onPointerMove=function(e){this.mousePos.x=e.clientX/window.innerWidth*2-1,this.mousePos.y=-e.clientY/window.innerHeight*2+1,this.rayCast.setFromCamera(this.mousePos,this.camera);var t=this.rayCast.intersectObjects(this.board.pickPlates);if(t&&t.length>0&&!this.isSpawning){var n=t[0].object,i=n.userData.linkedTile;0===i.level?this.cursor&&(this.cursor.position.copy(n.position),this.cursor.userData.pickedTile=i,this.scene.add(this.cursor)):this.cursor&&(this.cursor.userData.pickedTile=null,this.cursor.position.copy(n.position),this.scene.add(this.cursor),this.scene.remove(this.cursor))}else this.cursor&&(this.cursor.userData.pickedTile=null,this.scene.remove(this.cursor));this.tileHolder.pickTest(this.rayCast)},e.prototype.onPointerUp=function(e){var t=this;if(0===e.button&&new i.Vector2(e.screenX,e.screenY).distanceTo(this.mouseDownPos)<5)if(this.tileHolder.pickTest(this.rayCast)){var n=this.tileHolder.setHoldTile(this.cursor.userData.level);this.createCursor(n)}else if(this.cursor&&this.cursor.userData.pickedTile&&0===this.cursor.userData.pickedTile.level){var r=this.cursor.userData.pickedTile;r.level=this.cursor.userData.level;var a=this.cursor.userData.sourceObject;a.position.copy(this.cursor.position),this.scene.add(a),this.disposeCursor(),this.scene.remove(r.object),r.object=a,this.isSpawning=!0,r.object.position.y=-30,new l.default.Tween(r.object.position).to({y:0},500).easing(l.default.Easing.Quadratic.Out).onComplete((function(){t.board.checkTriple(r,1),t.createCursor(),t.onPointerMove(e),t.isSpawning=!1,t.checkGameOver()})).start(),this.soundMgr.playSound("CreateBuilding")}},e.prototype.createCursor=function(e){var t=this;e||(e=this.getRandomTileNumber([30,20,14,12,10,6,4,3,1])+1);var n=this.modelMgr.getModelByLevelNumber(e);n&&(this.disposeCursor(),this.cursor=new i.Object3D,this.cursor.name="Cursor",n.traverse((function(e){if(e instanceof i.Mesh){var n=null;if(e.material instanceof Array){n=[];for(var l=0;l<e.material.length;l++){var r=e.material[l].clone();r.transparent=!0,r.opacity=.5,n.push(r)}}else(n=e.material.clone()).transparent=!0,n.opacity=.5;var a=new i.Mesh(e.geometry,n);t.cursor.add(a)}})),this.scene.add(this.cursor),this.cursor.userData.sourceObject=n,this.cursor.userData.level=e)},e.prototype.getRandomTileNumber=function(e){for(var t=0,n=0;n<e.length;n++)t+=e[n];var i=this.getRandomRange(0,1)*t;for(n=0;n<e.length;n++){if(i<e[n])return n;i-=e[n]}return e.length-1},e.prototype.getRandomRange=function(e,t){return Math.random()*(t-e)+e},e.prototype.disposeCursor=function(){this.cursor&&(this.scene.remove(this.cursor),this.cursor.traverse((function(e){if(e instanceof i.Mesh)if(e.geometry.dispose(),e.material instanceof Array)for(var t=0;t<e.material.length;t++)e.material[t].dispose();else e.material.dispose()})))},e.prototype.setTileHolder=function(e){this.tileHolder=e},e.prototype.checkGameOver=function(){0===this.board.getTileCountByLevel(0)&&this.doGameOver()},e.prototype.doGameOver=function(){this.control.autoRotate=!0,this.control.enabled=!1,this.tileHolder.setVisible(!1),this.scoreMgr.saveHighScore(),this.gameTimer.isPlaying=!1,this.gameTimer.gameOverText.visible=!0,this.disable(),window.addEventListener("pointerup",this.restartPointerUpBinder,!1)},e.prototype.restartPointerUp=function(e){confirm("Restart Game?")&&(window.removeEventListener("pointerup",this.restartPointerUpBinder),this.control.autoRotate=!1,this.control.enabled=!0,this.tileHolder.disposeHolderObject(),this.tileHolder.setVisible(!0),this.gameTimer.reset(),this.scoreMgr.setScore(0),this.board.createMap(this.board.mapWidth,this.board.mapHeight),this.createCursor(),this.enable())},e}();t.GameLogic=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),l=n(14),r=n(0),a=n(15),o=function(){function e(e,t,n){var a=this;this.scene=e,this.camera=t,this.control=n,this.score=0;var o=localStorage.getItem("highscore");o?this.highScore=parseInt(o):(localStorage.setItem("highscore","0"),this.highScore=0),this.scoreTable=[],this.scoreTable.push(5),this.scoreTable.push(10),this.scoreTable.push(20),this.scoreTable.push(35),this.scoreTable.push(55),this.scoreTable.push(80),this.scoreTable.push(110),this.scoreTable.push(145),this.scoreTable.push(200);var q=new r.FontLoader;this.fontData=q.parse(i),this.popupFontData=q.parse(l),this.resultScoreInterval=0;this.geometries={},["Score:","0","1","2","3","4","5","6","7","8","9"].forEach((function(e,t){var n=new r.TextBufferGeometry(e,{font:a.fontData,size:10,height:2});n.computeBoundingBox();var i=new r.Vector3;n.boundingBox.getSize(i),n.translate(-.5*i.x,-.5*i.y,-.5*i.z),a.geometries[e]=n,0<t&&(a.resultScoreInterval=Math.max(a.resultScoreInterval,i.x))}));this.popupGeometries={},["0","1","2","3","4","5","6","7","8","9","x"].forEach((function(e){var t=new r.TextBufferGeometry(e,{font:a.popupFontData,size:2,height:1});t.computeBoundingBox();var n=new r.Vector3;t.boundingBox.getSize(n),t.translate(-.5*n.x,-.5*n.y,-.5*n.z),"x"===e&&t.scale(.75,.75,.75),a.popupGeometries[e]=t})),this.sharedPopupMaterial=new r.MeshPhongMaterial({color:10053171,specular:328965,shininess:100}),this.popupObjList=[],this.resultScoreSharedMaterial=new r.MeshPhongMaterial({color:255}),this.resultScoreRoot=new r.Group,this.scene.add(this.resultScoreRoot),this.updateScoreMesh(),this.highScoreRoot=new r.Group,this.scene.add(this.highScoreRoot),this.highScoreInterval=0;this.highScoreGeometries={},["HighScore:","0","1","2","3","4","5","6","7","8","9"].forEach((function(e,t){var n=new r.TextBufferGeometry(e,{font:a.fontData,size:3,height:2});n.computeBoundingBox();var i=new r.Vector3;n.boundingBox.getSize(i),n.translate(-.5*i.x,-.5*i.y,-.5*i.z),a.highScoreGeometries[e]=n,0<t&&(a.highScoreInterval=Math.max(a.highScoreInterval,i.x))})),this.updateHighScoreMesh()}return e.prototype.reset=function(){this.score=0},e.prototype.setScore=function(e){this.score=e,this.updateScoreMesh()},e.prototype.addScore=function(e,t){if(1<=e.level&&e.level<=9){var n=this.scoreTable[e.level-1];this.score+=n*t;for(var i=n.toString(),l=[],o=0;o<i.length;o++)l.push(this.popupGeometries[i[o]]);if(t>1){var q=parseInt(t.toString()).toString();l.push(this.popupGeometries.x);for(o=0;o<q.length;o++)l.push(this.popupGeometries[q[o]])}var s=(new r.Box3).setFromObject(e.object),m=new r.Vector3,h=new r.Vector3;s.getCenter(m),s.getSize(h);var c=new r.Vector3;c.copy(m),c.y+=.5*h.y;var u=new a.ScorePopup(this.scene,l,this.sharedPopupMaterial,c);this.popupObjList.push(u),this.updateScoreMesh(),this.score>=this.highScore&&(this.highScore=this.score,this.saveHighScore(),this.updateHighScoreMesh())}},e.prototype.updateScoreMesh=function(){for(var e=this.resultScoreRoot.children.length,t=0;t<e;t++){var n=this.resultScoreRoot.children[0];this.resultScoreRoot.remove(n)}var i=new r.Mesh(this.geometries["Score:"],this.resultScoreSharedMaterial);this.resultScoreRoot.add(i),i.position.set(0,0,0);var l=this.geometries["Score:"].boundingBox.clone(),a=new r.Vector3,o=new r.Vector3;l.getCenter(a),l.getSize(o);var q=new r.Vector3;this.geometries[0].boundingBox.getSize(q);var s=this.score.toString();for(t=0;t<s.length;t++)i=new r.Mesh(this.geometries[s[t]],this.resultScoreSharedMaterial),this.resultScoreRoot.add(i),i.position.x=a.x+.5*o.x+q.x+this.resultScoreInterval*t,l.expandByObject(i);var m,h=Number.MAX_VALUE,c=Number.MIN_VALUE;for(t=1;t<this.resultScoreRoot.children.length;t++){var u=(n=this.resultScoreRoot.children[t]).geometry.boundingBox.clone();u.translate(n.position),h=Math.min(h,u.min.x),c=Math.max(c,u.max.x)}m=.5*(c-h);for(t=0;t<this.resultScoreRoot.children.length;t++){(n=this.resultScoreRoot.children[t]).translateX(-m)}},e.prototype.updateHighScoreMesh=function(){for(var e=this.highScoreRoot.children.length,t=0;t<e;t++){var n=this.highScoreRoot.children[0];this.highScoreRoot.remove(n)}var i=new r.Mesh(this.highScoreGeometries["HighScore:"],this.resultScoreSharedMaterial);this.highScoreRoot.add(i),i.position.set(0,0,0);var l=this.highScoreGeometries["HighScore:"].boundingBox.clone(),a=new r.Vector3,o=new r.Vector3;l.getCenter(a),l.getSize(o);var q=new r.Vector3;this.highScoreGeometries[0].boundingBox.getSize(q);var s=this.highScore.toString();for(t=0;t<s.length;t++)i=new r.Mesh(this.highScoreGeometries[s[t]],this.resultScoreSharedMaterial),this.highScoreRoot.add(i),i.position.x=a.x+.5*o.x+q.x+this.highScoreInterval*t,i.position.y-=1,l.expandByObject(i);var m,h=Number.MAX_VALUE,c=Number.MIN_VALUE;for(t=1;t<this.highScoreRoot.children.length;t++){var u=(n=this.highScoreRoot.children[t]).geometry.boundingBox.clone();u.translate(n.position),h=Math.min(h,u.min.x),c=Math.max(c,u.max.x)}m=.5*(c-h);for(t=0;t<this.highScoreRoot.children.length;t++){(n=this.highScoreRoot.children[t]).translateX(-m)}},e.prototype.update=function(e){if(this.sphere){var t=new r.Vector3;this.camera.getWorldDirection(t);var n=this.control.target.clone();n.addScaledVector(t,this.sphere.radius);var i=(new r.Plane).setFromNormalAndCoplanarPoint(new r.Vector3(0,1,0),this.sphere.center),l=new r.Vector3;i.projectPoint(n,l);var a=(new r.Vector3).subVectors(l,this.control.target);a.normalize();var o=this.control.target.clone();o.addScaledVector(a,this.sphere.radius+10),o.y+=10,this.resultScoreRoot.position.copy(o),this.resultScoreRoot.lookAt(this.control.target),this.highScoreRoot.position.copy(o),this.highScoreRoot.position.y-=8,this.highScoreRoot.lookAt(this.control.target)}for(var q=this.popupObjList.length-1;q>=0;q--)this.popupObjList[q].isDone&&(this.popupObjList[q].dispose(),this.popupObjList.splice(q,1))},e.prototype.setVisible=function(e){this.resultScoreRoot.visible=e,this.highScoreRoot.visible=e},e.prototype.saveHighScore=function(){localStorage.setItem("highscore",this.highScore.toString())},e}();t.ScoreManager=o},function(e){e.exports=JSON.parse('{"glyphs":{"0":{"ha":793,"x_min":50,"x_max":743,"o":"m 743 496 q 658 111 743 236 q 396 -14 573 -14 q 137 115 224 -14 q 50 496 50 244 q 135 883 50 758 q 396 1007 220 1007 q 655 877 568 1007 q 743 496 743 747 m 258 496 q 290 234 258 313 q 396 155 321 155 q 502 235 469 155 q 534 496 534 315 q 502 758 534 678 q 396 838 469 838 q 290 758 322 838 q 258 496 258 678 z "},"1":{"ha":793,"x_min":82,"x_max":574,"o":"m 574 0 l 364 0 l 364 574 l 366 668 l 370 771 q 297 703 317 719 l 183 611 l 82 737 l 401 991 l 574 991 l 574 0 z "},"2":{"ha":793,"x_min":53,"x_max":749,"o":"m 749 0 l 56 0 l 56 146 l 304 397 q 449 554 415 511 q 498 635 483 598 q 513 713 513 673 q 480 802 513 772 q 392 831 447 831 q 280 804 334 831 q 167 729 226 778 l 53 864 q 174 952 126 926 q 279 992 222 978 q 407 1006 336 1006 q 571 972 500 1006 q 682 877 642 938 q 721 737 721 816 q 697 609 721 669 q 622 486 673 549 q 444 306 572 422 l 317 186 l 317 176 l 749 176 l 749 0 z "},"3":{"ha":793,"x_min":53,"x_max":739,"o":"m 710 770 q 654 612 710 677 q 496 522 597 547 l 496 518 q 677 445 616 503 q 739 289 739 387 q 635 66 739 146 q 339 -14 532 -14 q 53 40 178 -14 l 53 218 q 180 171 111 189 q 317 153 249 153 q 470 188 420 153 q 519 301 519 223 q 463 400 519 371 q 281 429 406 429 l 205 429 l 205 590 l 282 590 q 451 620 397 590 q 504 724 504 650 q 363 836 504 836 q 263 820 314 836 q 151 764 213 804 l 54 908 q 378 1006 190 1006 q 621 943 532 1006 q 710 770 710 881 z "},"4":{"ha":793,"x_min":24,"x_max":771,"o":"m 771 205 l 652 205 l 652 0 l 447 0 l 447 205 l 24 205 l 24 351 l 458 991 l 652 991 l 652 368 l 771 368 l 771 205 m 447 368 l 447 536 q 450 659 447 578 q 456 751 454 739 l 450 751 q 390 643 425 696 l 208 368 l 447 368 z "},"5":{"ha":793,"x_min":68,"x_max":730,"o":"m 416 633 q 645 553 560 633 q 730 332 730 472 q 628 76 730 165 q 335 -14 526 -14 q 68 40 170 -14 l 68 221 q 193 175 121 193 q 328 157 264 157 q 519 314 519 157 q 321 464 519 464 q 241 457 285 464 q 171 441 198 450 l 87 486 l 125 991 l 663 991 l 663 814 l 309 814 l 290 619 l 314 624 q 416 633 355 633 z "},"6":{"ha":793,"x_min":49,"x_max":749,"o":"m 49 421 q 173 859 49 715 q 546 1003 298 1003 q 679 993 631 1003 l 679 825 q 559 839 618 839 q 384 806 452 839 q 281 710 315 774 q 241 529 248 646 l 250 529 q 465 644 317 644 q 673 561 598 644 q 749 330 749 477 q 659 79 749 172 q 411 -14 570 -14 q 219 37 301 -14 q 93 186 138 88 q 49 421 49 283 m 407 154 q 510 199 474 154 q 546 328 546 244 q 512 442 546 400 q 411 484 479 484 q 302 442 347 484 q 257 346 257 401 q 299 210 257 265 q 407 154 342 154 z "},"7":{"ha":793,"x_min":37,"x_max":749,"o":"m 154 0 l 526 814 l 37 814 l 37 990 l 749 990 l 749 859 l 374 0 l 154 0 z "},"8":{"ha":793,"x_min":49,"x_max":745,"o":"m 397 1004 q 627 940 540 1004 q 714 765 714 875 q 672 630 714 689 q 536 524 630 570 q 696 399 648 464 q 745 257 745 334 q 649 61 745 135 q 397 -14 553 -14 q 142 56 235 -14 q 49 252 49 125 q 94 402 49 336 q 239 518 139 468 q 117 633 154 572 q 79 766 79 694 q 168 939 79 873 q 397 1004 256 1004 m 243 264 q 283 173 243 205 q 395 140 324 140 q 511 174 473 140 q 550 262 550 208 q 512 348 550 308 q 387 432 473 387 q 243 264 243 366 m 396 851 q 310 824 342 851 q 277 750 277 796 q 303 677 277 709 q 397 611 329 645 q 490 675 464 642 q 517 750 517 707 q 483 824 517 797 q 396 851 449 851 z "},"9":{"ha":793,"x_min":45,"x_max":745,"o":"m 745 568 q 621 131 745 275 q 248 -14 498 -14 q 114 -4 159 -14 l 114 164 q 233 150 171 150 q 406 181 338 150 q 510 278 474 212 q 551 460 546 344 l 543 460 q 452 370 504 396 q 323 345 401 345 q 119 428 194 345 q 45 659 45 511 q 135 910 45 818 q 382 1003 226 1003 q 574 951 492 1003 q 701 802 656 900 q 745 568 745 704 m 386 835 q 284 790 321 835 q 248 661 248 745 q 281 547 248 589 q 382 505 314 505 q 491 547 446 505 q 536 643 536 589 q 494 779 536 724 q 386 835 452 835 z "}," ":{"ha":361,"x_min":0,"x_max":0,"o":""},"!":{"ha":397,"x_min":79,"x_max":317,"o":"m 282 329 l 117 329 l 82 991 l 317 991 l 282 329 m 79 97 q 110 183 79 154 q 199 212 140 212 q 286 182 255 212 q 317 97 317 153 q 286 13 317 43 q 199 -18 254 -18 q 111 12 142 -18 q 79 97 79 42 z "},"\\"":{"ha":656,"x_min":90,"x_max":566,"o":"m 279 991 l 252 633 l 118 633 l 90 991 l 279 991 m 566 991 l 538 633 l 404 633 l 376 991 l 566 991 z "},"#":{"ha":897,"x_min":31,"x_max":867,"o":"m 677 572 l 646 415 l 821 415 l 821 275 l 619 275 l 567 0 l 418 0 l 471 275 l 339 275 l 288 0 l 142 0 l 192 275 l 31 275 l 31 415 l 218 415 l 250 572 l 79 572 l 79 714 l 275 714 l 328 990 l 476 990 l 424 714 l 558 714 l 611 990 l 757 990 l 704 714 l 867 714 l 867 572 l 677 572 m 366 415 l 498 415 l 530 572 l 397 572 l 366 415 z "},"$":{"ha":793,"x_min":60,"x_max":741,"o":"m 741 310 q 663 137 741 202 q 444 58 585 71 l 444 -81 l 351 -81 l 351 56 q 61 114 186 59 l 61 293 q 203 241 120 264 q 351 215 286 219 l 351 425 l 306 443 q 116 558 172 496 q 60 711 60 620 q 137 873 60 810 q 351 950 214 937 l 351 1054 l 444 1054 l 444 953 q 725 890 600 946 l 661 732 q 444 785 555 775 l 444 585 q 632 496 576 534 q 714 414 688 459 q 741 310 741 370 m 536 300 q 513 348 536 328 q 444 389 490 368 l 444 220 q 536 300 536 235 m 264 711 q 284 662 264 682 q 351 623 305 643 l 351 782 q 264 711 264 769 z "},"%":{"ha":1251,"x_min":43,"x_max":1208,"o":"m 214 694 q 229 566 214 608 q 278 524 244 524 q 343 694 343 524 q 278 864 343 864 q 229 822 244 864 q 214 694 214 781 m 514 696 q 454 461 514 540 q 277 383 393 383 q 104 464 165 383 q 43 696 43 544 q 277 1006 43 1006 q 453 925 391 1006 q 514 696 514 845 m 981 991 l 431 0 l 268 0 l 818 991 l 981 991 m 908 298 q 923 170 908 212 q 972 127 939 127 q 1038 298 1038 127 q 972 468 1038 468 q 923 426 939 468 q 908 298 908 385 m 1208 300 q 1148 66 1208 144 q 971 -12 1088 -12 q 798 68 859 -12 q 737 300 737 149 q 971 610 737 610 q 1147 529 1086 610 q 1208 300 1208 449 z "},"&":{"ha":1042,"x_min":56,"x_max":1042,"o":"m 1042 0 l 786 0 l 708 77 q 415 -14 578 -14 q 153 62 250 -14 q 56 268 56 138 q 97 426 56 361 q 237 549 138 492 q 163 660 186 607 q 140 777 140 713 q 219 943 140 880 q 431 1006 298 1006 q 632 947 557 1006 q 708 790 708 888 q 661 643 708 709 q 510 515 614 576 l 703 328 q 786 532 751 407 l 1002 532 q 935 353 977 440 q 838 199 892 266 l 1042 0 m 273 288 q 317 195 273 229 q 429 160 361 160 q 583 201 515 160 l 358 425 q 296 363 319 395 q 273 288 273 330 m 517 768 q 492 825 517 804 q 429 846 468 846 q 358 824 384 846 q 332 762 332 802 q 396 631 332 703 q 486 695 454 663 q 517 768 517 726 z "},"\'":{"ha":370,"x_min":90,"x_max":279,"o":"m 279 991 l 252 633 l 118 633 l 90 991 l 279 991 z "},"(":{"ha":471,"x_min":56,"x_max":429,"o":"m 56 380 q 108 717 56 560 q 260 991 161 873 l 429 991 q 285 704 334 861 q 236 382 236 547 q 286 61 236 216 q 428 -220 336 -94 l 260 -220 q 108 50 160 -104 q 56 380 56 203 z "},")":{"ha":471,"x_min":41,"x_max":415,"o":"m 415 380 q 362 48 415 202 q 211 -220 310 -106 l 43 -220 q 184 60 134 -95 q 235 382 235 215 q 186 704 235 547 q 41 991 137 861 l 211 991 q 363 716 311 873 q 415 380 415 559 z "},"*":{"ha":757,"x_min":43,"x_max":714,"o":"m 467 1055 l 439 806 l 692 876 l 714 705 l 484 689 l 635 488 l 481 406 l 375 618 l 282 407 l 122 488 l 272 689 l 43 707 l 69 876 l 317 806 l 289 1055 l 467 1055 z "},"+":{"ha":793,"x_min":60,"x_max":733,"o":"m 322 415 l 60 415 l 60 564 l 322 564 l 322 828 l 471 828 l 471 564 l 733 564 l 733 415 l 471 415 l 471 154 l 322 154 l 322 415 z "},",":{"ha":403,"x_min":43,"x_max":311,"o":"m 311 146 q 192 -179 276 9 l 43 -179 q 111 161 87 1 l 301 161 l 311 146 z "},"-":{"ha":447,"x_min":41,"x_max":406,"o":"m 41 288 l 41 457 l 406 457 l 406 288 l 41 288 z "},".":{"ha":396,"x_min":79,"x_max":317,"o":"m 79 97 q 110 183 79 154 q 199 212 140 212 q 286 182 255 212 q 317 97 317 153 q 286 13 317 43 q 199 -18 254 -18 q 111 12 142 -18 q 79 97 79 42 z "},"/":{"ha":574,"x_min":9,"x_max":567,"o":"m 567 991 l 197 0 l 9 0 l 379 991 l 567 991 z "},":":{"ha":396,"x_min":79,"x_max":317,"o":"m 79 97 q 110 183 79 154 q 199 212 140 212 q 286 182 255 212 q 317 97 317 153 q 286 13 317 43 q 199 -18 254 -18 q 111 12 142 -18 q 79 97 79 42 m 79 657 q 110 743 79 714 q 199 772 140 772 q 286 743 255 772 q 317 657 317 713 q 285 572 317 602 q 199 542 254 542 q 111 572 142 542 q 79 657 79 602 z "},";":{"ha":403,"x_min":43,"x_max":317,"o":"m 301 161 l 311 146 q 192 -179 276 9 l 43 -179 q 111 161 87 1 l 301 161 m 79 657 q 110 743 79 714 q 199 772 140 772 q 286 743 255 772 q 317 657 317 713 q 285 572 317 602 q 199 542 254 542 q 111 572 142 542 q 79 657 79 602 z "},"<":{"ha":793,"x_min":60,"x_max":733,"o":"m 733 138 l 60 435 l 60 532 l 733 868 l 733 705 l 269 490 l 733 300 l 733 138 z "},"=":{"ha":793,"x_min":60,"x_max":733,"o":"m 60 546 l 60 694 l 733 694 l 733 546 l 60 546 m 60 283 l 60 432 l 733 432 l 733 283 l 60 283 z "},">":{"ha":793,"x_min":60,"x_max":733,"o":"m 60 300 l 524 490 l 60 705 l 60 868 l 733 532 l 733 435 l 60 138 l 60 300 z "},"?":{"ha":663,"x_min":4,"x_max":629,"o":"m 187 329 l 187 379 q 215 492 187 444 q 317 595 243 541 q 411 677 388 646 q 433 749 433 709 q 401 816 433 793 q 310 839 368 839 q 78 772 208 839 l 4 921 q 325 1006 155 1006 q 547 939 465 1006 q 629 760 629 871 q 595 631 629 685 q 467 509 562 576 q 384 435 401 460 q 367 370 367 410 l 367 329 l 187 329 m 165 97 q 196 183 165 154 q 285 212 227 212 q 372 182 341 212 q 403 97 403 153 q 372 13 403 43 q 285 -18 340 -18 q 197 12 228 -18 q 165 97 165 42 z "},"@":{"ha":1246,"x_min":69,"x_max":1177,"o":"m 1177 510 q 1145 331 1177 412 q 1057 204 1114 250 q 925 158 1000 158 q 836 182 875 158 q 781 245 798 206 l 770 245 q 583 158 696 158 q 394 230 463 158 q 325 428 325 302 q 416 659 325 571 q 653 746 507 746 q 782 735 711 746 q 897 708 852 724 l 882 376 q 933 282 882 282 q 1002 346 977 282 q 1028 511 1028 409 q 983 704 1028 621 q 855 832 937 788 q 667 876 772 876 q 429 820 530 876 q 274 657 328 764 q 220 412 220 551 q 320 125 220 225 q 610 25 420 25 q 768 41 682 25 q 937 87 854 57 l 937 -43 q 615 -104 792 -104 q 213 31 357 -104 q 69 408 69 167 q 143 712 69 576 q 352 927 216 849 q 665 1004 488 1004 q 932 943 814 1004 q 1113 770 1049 882 q 1177 510 1177 657 m 482 425 q 599 282 482 282 q 692 325 660 282 q 730 465 724 368 l 739 615 q 661 623 705 623 q 529 570 576 623 q 482 425 482 517 z "},"A":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 z "},"B":{"ha":933,"x_min":125,"x_max":860,"o":"m 125 991 l 433 991 q 740 931 644 991 q 835 741 835 871 q 793 595 835 652 q 682 526 751 538 l 682 519 q 818 441 777 498 q 860 288 860 383 q 762 76 860 152 q 496 0 664 0 l 125 0 l 125 991 m 335 599 l 457 599 q 581 625 543 599 q 619 713 619 652 q 577 794 619 770 q 446 819 536 819 l 335 819 l 335 599 m 335 432 l 335 174 l 472 174 q 600 207 559 174 q 642 309 642 240 q 465 432 642 432 l 335 432 z "},"C":{"ha":885,"x_min":81,"x_max":836,"o":"m 546 831 q 362 742 427 831 q 297 493 297 652 q 546 161 297 161 q 799 214 650 161 l 799 37 q 526 -14 677 -14 q 195 118 310 -14 q 81 494 81 249 q 137 765 81 649 q 299 944 193 882 q 546 1006 404 1006 q 836 936 690 1006 l 768 765 q 656 811 713 791 q 546 831 600 831 z "},"D":{"ha":1028,"x_min":125,"x_max":947,"o":"m 947 505 q 808 130 947 260 q 406 0 669 0 l 125 0 l 125 991 l 436 991 q 813 863 679 991 q 947 505 947 735 m 729 500 q 447 819 729 819 l 335 819 l 335 174 l 425 174 q 729 500 729 174 z "},"E":{"ha":778,"x_min":125,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 z "},"F":{"ha":762,"x_min":125,"x_max":693,"o":"m 332 0 l 125 0 l 125 991 l 693 991 l 693 819 l 332 819 l 332 564 l 668 564 l 668 392 l 332 392 l 332 0 z "},"G":{"ha":1006,"x_min":81,"x_max":895,"o":"m 501 557 l 895 557 l 895 43 q 714 -1 799 12 q 542 -14 630 -14 q 199 118 317 -14 q 81 497 81 250 q 218 871 81 737 q 599 1006 355 1006 q 893 945 751 1006 l 823 777 q 597 831 715 831 q 379 739 461 831 q 297 493 297 648 q 363 247 297 332 q 555 161 429 161 q 689 175 621 161 l 689 382 l 501 382 l 501 557 z "},"H":{"ha":1063,"x_min":125,"x_max":937,"o":"m 937 0 l 728 0 l 728 428 l 335 428 l 335 0 l 125 0 l 125 991 l 335 991 l 335 603 l 728 603 l 728 991 l 937 991 l 937 0 z "},"J":{"ha":460,"x_min":-103,"x_max":335,"o":"m 21 -292 q -103 -277 -50 -292 l -103 -102 q -4 -115 -49 -115 q 95 -72 65 -115 q 125 62 125 -29 l 125 991 l 335 991 l 335 64 q 256 -201 335 -110 q 21 -292 176 -292 z "},"K":{"ha":922,"x_min":125,"x_max":922,"o":"m 922 0 l 684 0 l 424 418 l 335 354 l 335 0 l 125 0 l 125 991 l 335 991 l 335 538 l 418 654 l 686 991 l 920 991 l 574 553 l 922 0 z "},"L":{"ha":785,"x_min":125,"x_max":737,"o":"m 125 0 l 125 991 l 335 991 l 335 174 l 737 174 l 737 0 l 125 0 z "},"M":{"ha":1310,"x_min":125,"x_max":1185,"o":"m 545 0 l 306 778 l 300 778 q 313 461 313 541 l 313 0 l 125 0 l 125 991 l 411 991 l 646 233 l 650 233 l 899 991 l 1185 991 l 1185 0 l 989 0 l 989 469 q 990 546 989 503 q 999 777 991 589 l 993 777 l 737 0 l 545 0 z "},"N":{"ha":1129,"x_min":125,"x_max":1004,"o":"m 1004 0 l 737 0 l 306 750 l 300 750 q 313 467 313 551 l 313 0 l 125 0 l 125 991 l 390 991 l 821 249 l 825 249 q 815 522 815 442 l 815 991 l 1004 991 l 1004 0 z "},"O":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 z "},"P":{"ha":872,"x_min":125,"x_max":810,"o":"m 335 525 l 404 525 q 549 563 501 525 q 597 675 597 602 q 557 784 597 749 q 431 819 517 819 l 335 819 l 335 525 m 810 682 q 710 437 810 522 q 425 353 610 353 l 335 353 l 335 0 l 125 0 l 125 991 l 441 991 q 716 914 622 991 q 810 682 810 836 z "},"Q":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 963 204 1025 322 q 781 31 901 85 l 1019 -236 l 750 -236 l 568 -14 l 553 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 z "},"R":{"ha":917,"x_min":125,"x_max":917,"o":"m 335 551 l 403 551 q 550 585 503 551 q 597 689 597 618 q 549 789 597 760 q 399 819 500 819 l 335 819 l 335 551 m 335 380 l 335 0 l 125 0 l 125 991 l 414 991 q 713 918 616 991 q 810 694 810 844 q 762 539 810 607 q 625 432 713 471 q 917 0 849 98 l 684 0 l 447 380 l 335 380 z "},"S":{"ha":765,"x_min":64,"x_max":710,"o":"m 710 275 q 613 64 710 141 q 345 -14 517 -14 q 64 46 186 -14 l 64 241 q 234 178 164 197 q 361 160 303 160 q 467 186 430 160 q 504 265 504 213 q 488 317 504 294 q 440 361 471 340 q 311 428 408 382 q 175 510 220 471 q 102 602 130 549 q 75 724 75 654 q 164 930 75 855 q 411 1006 254 1006 q 558 987 488 1006 q 705 936 629 969 l 637 772 q 506 818 558 805 q 404 831 454 831 q 313 803 345 831 q 281 730 281 775 q 294 682 281 703 q 335 642 307 661 q 468 572 363 623 q 659 439 607 506 q 710 275 710 372 z "},"T":{"ha":804,"x_min":28,"x_max":777,"o":"m 507 0 l 297 0 l 297 817 l 28 817 l 28 991 l 777 991 l 777 817 l 507 817 l 507 0 z "},"U":{"ha":1050,"x_min":118,"x_max":932,"o":"m 932 991 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 385 q 374 216 328 270 q 526 163 420 163 q 676 217 629 163 q 722 386 722 271 l 722 991 l 932 991 z "},"V":{"ha":903,"x_min":0,"x_max":903,"o":"m 690 991 l 903 991 l 566 0 l 336 0 l 0 991 l 212 991 l 399 401 q 431 280 414 349 q 452 183 448 210 q 503 401 459 245 l 690 991 z "},"W":{"ha":1343,"x_min":0,"x_max":1343,"o":"m 1090 0 l 851 0 l 717 521 q 691 636 709 549 q 671 753 673 723 q 650 635 667 716 q 625 519 634 554 l 492 0 l 253 0 l 0 991 l 207 991 l 334 450 q 382 191 367 300 q 400 310 386 229 q 428 436 415 391 l 572 991 l 771 991 l 916 436 q 939 322 925 399 q 961 191 954 245 q 983 322 968 243 q 1010 450 998 401 l 1136 991 l 1343 991 l 1090 0 z "},"X":{"ha":926,"x_min":0,"x_max":926,"o":"m 926 0 l 686 0 l 456 375 l 225 0 l 0 0 l 329 511 l 21 991 l 253 991 l 467 635 l 676 991 l 903 991 l 591 500 l 926 0 z "},"Y":{"ha":867,"x_min":0,"x_max":867,"o":"m 433 583 l 640 991 l 867 991 l 538 386 l 538 0 l 329 0 l 329 379 l 0 991 l 228 991 l 433 583 z "},"Z":{"ha":804,"x_min":33,"x_max":771,"o":"m 771 0 l 33 0 l 33 136 l 509 818 l 46 818 l 46 991 l 758 991 l 758 856 l 283 174 l 771 174 l 771 0 z "},"[":{"ha":460,"x_min":97,"x_max":425,"o":"m 425 -220 l 97 -220 l 97 991 l 425 991 l 425 848 l 273 848 l 273 -77 l 425 -77 l 425 -220 z "},"\\\\":{"ha":574,"x_min":8,"x_max":566,"o":"m 196 991 l 566 0 l 378 0 l 8 991 l 196 991 z "},"]":{"ha":460,"x_min":35,"x_max":363,"o":"m 35 -77 l 186 -77 l 186 848 l 35 848 l 35 991 l 363 991 l 363 -220 l 35 -220 l 35 -77 z "},"^":{"ha":739,"x_min":5,"x_max":736,"o":"m 5 353 l 302 997 l 400 997 l 736 353 l 574 353 l 355 789 l 165 353 l 5 353 z "},"_":{"ha":571,"x_min":-3,"x_max":574,"o":"m 574 -220 l -3 -220 l -3 -125 l 574 -125 l 574 -220 z "},"`":{"ha":843,"x_min":225,"x_max":616,"o":"m 479 842 q 354 938 437 871 q 225 1050 271 1005 l 225 1064 l 457 1064 q 616 860 500 996 l 616 842 l 479 842 z "},"a":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 z "},"b":{"ha":879,"x_min":109,"x_max":817,"o":"m 530 772 q 741 668 665 772 q 817 380 817 563 q 738 90 817 193 q 525 -14 660 -14 q 315 83 391 -14 l 301 83 l 267 0 l 109 0 l 109 1055 l 315 1055 l 315 810 q 307 660 315 763 l 315 660 q 530 772 388 772 m 464 607 q 352 560 387 607 q 315 404 317 513 l 315 382 q 352 207 315 260 q 467 154 388 154 q 568 213 530 154 q 606 383 606 271 q 568 551 606 495 q 464 607 530 607 z "},"c":{"ha":714,"x_min":62,"x_max":671,"o":"m 416 -14 q 62 375 62 -14 q 159 670 62 568 q 435 772 255 772 q 671 721 566 772 l 610 561 q 519 593 561 581 q 435 606 477 606 q 273 376 273 606 q 435 154 273 154 q 545 170 494 154 q 647 220 596 186 l 647 43 q 546 -1 597 11 q 416 -14 494 -14 z "},"d":{"ha":879,"x_min":62,"x_max":771,"o":"m 349 -14 q 139 90 215 -14 q 62 378 62 194 q 140 668 62 564 q 354 772 218 772 q 572 661 497 772 l 579 661 q 564 812 564 746 l 564 1055 l 771 1055 l 771 0 l 612 0 l 572 98 l 564 98 q 349 -14 493 -14 m 421 151 q 537 197 500 151 q 578 354 574 243 l 578 376 q 540 551 578 498 q 418 604 503 604 q 310 546 349 604 q 272 375 272 487 q 311 207 272 263 q 421 151 349 151 z "},"e":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 z "},"f":{"ha":538,"x_min":28,"x_max":600,"o":"m 528 603 l 349 603 l 349 0 l 142 0 l 142 603 l 28 603 l 28 703 l 142 758 l 142 814 q 205 1003 142 943 q 410 1063 269 1063 q 600 1031 517 1063 l 547 879 q 432 899 485 899 q 368 872 388 899 q 349 806 349 846 l 349 758 l 528 758 l 528 603 z "},"g":{"ha":785,"x_min":4,"x_max":768,"o":"m 768 758 l 768 653 l 650 623 q 682 509 682 572 q 597 318 682 387 q 361 250 512 250 l 323 252 l 293 256 q 261 201 261 231 q 375 157 261 157 l 504 157 q 694 103 629 157 q 760 -54 760 50 q 649 -260 760 -187 q 330 -334 538 -334 q 88 -278 172 -334 q 4 -123 4 -223 q 47 -9 4 -55 q 172 57 90 37 q 117 101 140 71 q 93 167 93 132 q 118 239 93 210 q 191 296 143 268 q 96 378 131 321 q 61 513 61 435 q 142 705 61 637 q 372 772 222 772 q 448 767 404 772 q 504 758 492 761 l 768 758 m 183 -107 q 224 -174 183 -150 q 339 -199 265 -199 q 513 -168 450 -199 q 576 -85 576 -138 q 539 -26 576 -42 q 424 -9 502 -9 l 317 -9 q 221 -36 260 -9 q 183 -107 183 -63 m 258 510 q 287 412 258 448 q 372 376 315 376 q 458 412 431 376 q 485 510 485 448 q 372 647 485 647 q 258 510 258 647 z "},"h":{"ha":913,"x_min":109,"x_max":808,"o":"m 808 0 l 602 0 l 602 443 q 479 607 602 607 q 354 548 393 607 q 315 357 315 489 l 315 0 l 109 0 l 109 1055 l 315 1055 l 315 840 q 311 722 315 815 l 306 661 l 317 661 q 536 772 386 772 q 739 701 670 772 q 808 494 808 629 l 808 0 z "},"i":{"ha":424,"x_min":100,"x_max":325,"o":"m 100 954 q 212 1055 100 1055 q 325 954 325 1055 q 297 879 325 906 q 212 852 269 852 q 100 954 100 852 m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 z "},"j":{"ha":424,"x_min":-89,"x_max":325,"o":"m 47 -334 q -89 -317 -32 -334 l -89 -154 q 8 -167 -41 -167 q 84 -138 60 -167 q 109 -52 109 -109 l 109 758 l 315 758 l 315 -82 q 245 -268 315 -203 q 47 -334 176 -334 m 100 954 q 212 1055 100 1055 q 325 954 325 1055 q 297 879 325 906 q 212 852 269 852 q 100 954 100 852 z "},"k":{"ha":861,"x_min":109,"x_max":861,"o":"m 307 412 l 397 528 l 610 758 l 843 758 l 542 429 l 861 0 l 623 0 l 404 307 l 315 236 l 315 0 l 109 0 l 109 1055 l 315 1055 l 315 585 l 304 412 l 307 412 z "},"l":{"ha":424,"x_min":109,"x_max":315,"o":"m 315 0 l 109 0 l 109 1055 l 315 1055 l 315 0 z "},"m":{"ha":1364,"x_min":109,"x_max":1260,"o":"m 787 0 l 581 0 l 581 443 q 553 566 581 525 q 467 607 526 607 q 351 549 387 607 q 315 357 315 490 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 394 743 336 713 q 526 772 452 772 q 757 661 696 772 l 775 661 q 865 743 806 714 q 999 772 924 772 q 1194 706 1128 772 q 1260 494 1260 640 l 1260 0 l 1053 0 l 1053 443 q 1025 566 1053 525 q 939 607 998 607 q 825 553 863 607 q 787 380 787 498 l 787 0 z "},"n":{"ha":913,"x_min":109,"x_max":808,"o":"m 808 0 l 602 0 l 602 443 q 572 566 602 525 q 479 607 543 607 q 354 549 393 607 q 315 357 315 491 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 401 744 340 716 q 539 772 462 772 q 740 701 671 772 q 808 494 808 629 l 808 0 z "},"o":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 z "},"p":{"ha":879,"x_min":109,"x_max":817,"o":"m 525 -14 q 315 83 391 -14 l 304 83 q 315 -26 315 -12 l 315 -334 l 109 -334 l 109 758 l 277 758 l 306 660 l 315 660 q 530 772 388 772 q 741 669 665 772 q 817 380 817 565 q 781 170 817 259 q 680 33 745 80 q 525 -14 614 -14 m 464 607 q 352 560 387 607 q 315 404 317 513 l 315 382 q 352 207 315 260 q 467 154 388 154 q 606 383 606 154 q 571 551 606 495 q 464 607 537 607 z "},"q":{"ha":879,"x_min":62,"x_max":771,"o":"m 422 149 q 538 194 501 149 q 578 351 574 239 l 578 376 q 540 551 578 498 q 419 604 503 604 q 273 375 273 604 q 310 205 273 261 q 422 149 346 149 m 349 -14 q 138 90 214 -14 q 62 378 62 193 q 140 668 62 564 q 353 772 218 772 q 478 745 425 772 q 572 661 532 718 l 578 661 l 596 758 l 771 758 l 771 -334 l 564 -334 l 564 -16 q 572 98 564 26 l 564 98 q 475 15 530 43 q 349 -14 420 -14 z "},"r":{"ha":631,"x_min":109,"x_max":602,"o":"m 532 772 q 602 766 574 772 l 586 572 q 525 579 561 579 q 371 528 426 579 q 315 386 315 477 l 315 0 l 109 0 l 109 758 l 265 758 l 296 631 l 306 631 q 401 733 341 694 q 532 772 461 772 z "},"s":{"ha":690,"x_min":62,"x_max":637,"o":"m 637 225 q 556 47 637 109 q 314 -14 475 -14 q 173 -2 231 -14 q 64 31 115 9 l 64 201 q 194 156 121 174 q 321 138 266 138 q 433 203 433 138 q 418 242 433 227 q 367 277 404 258 q 269 322 330 296 q 141 390 182 359 q 81 461 100 421 q 62 561 62 502 q 141 717 62 662 q 363 772 219 772 q 629 713 500 772 l 567 564 q 460 604 510 588 q 359 619 411 619 q 268 570 268 619 q 297 522 268 542 q 427 461 327 501 q 557 394 515 425 q 618 322 598 363 q 637 225 637 281 z "},"t":{"ha":603,"x_min":32,"x_max":558,"o":"m 428 151 q 558 175 482 151 l 558 21 q 368 -14 481 -14 q 188 49 244 -14 q 131 237 131 112 l 131 603 l 32 603 l 32 690 l 146 760 l 205 920 l 338 920 l 338 758 l 550 758 l 550 603 l 338 603 l 338 237 q 362 172 338 193 q 428 151 387 151 z "},"u":{"ha":913,"x_min":104,"x_max":804,"o":"m 646 0 l 618 97 l 607 97 q 513 15 574 44 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 0 l 646 0 z "},"v":{"ha":790,"x_min":0,"x_max":790,"o":"m 289 0 l 0 758 l 216 758 l 363 326 q 393 171 387 244 l 397 171 q 428 326 401 236 l 574 758 l 790 758 l 501 0 l 289 0 z "},"w":{"ha":1189,"x_min":14,"x_max":1175,"o":"m 732 0 l 673 265 l 595 600 l 590 600 l 452 0 l 229 0 l 14 758 l 220 758 l 307 422 q 350 174 328 332 l 354 174 q 378 337 357 225 l 389 395 l 482 758 l 710 758 l 799 395 q 807 351 802 380 q 819 289 813 321 q 828 224 824 256 q 833 174 833 193 l 838 174 q 859 308 844 222 q 882 422 875 393 l 972 758 l 1175 758 l 957 0 l 732 0 z "},"x":{"ha":803,"x_min":7,"x_max":796,"o":"m 264 387 l 20 758 l 254 758 l 401 517 l 550 758 l 785 758 l 538 387 l 796 0 l 561 0 l 401 260 l 241 0 l 7 0 l 264 387 z "},"y":{"ha":790,"x_min":0,"x_max":790,"o":"m 0 758 l 227 758 l 370 332 q 395 200 388 276 l 399 200 q 428 332 406 270 l 568 758 l 790 758 l 469 -97 q 343 -275 425 -216 q 153 -334 262 -334 q 47 -322 99 -334 l 47 -158 q 129 -167 85 -167 q 225 -133 184 -167 q 289 -32 266 -100 l 301 5 l 0 758 z "},"z":{"ha":677,"x_min":37,"x_max":636,"o":"m 636 0 l 37 0 l 37 122 l 389 600 l 58 600 l 58 758 l 624 758 l 624 624 l 282 158 l 636 158 l 636 0 z "},"{":{"ha":547,"x_min":21,"x_max":492,"o":"m 195 183 q 150 273 195 242 q 21 304 106 304 l 21 467 q 151 496 106 467 q 195 582 195 526 l 195 587 l 195 803 q 260 949 195 907 q 492 991 326 991 l 492 839 q 399 813 425 837 q 374 743 374 789 l 374 541 q 215 390 370 413 l 215 382 q 374 238 374 358 l 374 232 l 374 29 q 399 -41 374 -17 q 492 -66 424 -64 l 492 -220 q 260 -177 326 -220 q 195 -31 195 -135 l 195 183 z "},"|":{"ha":765,"x_min":309,"x_max":457,"o":"m 309 1051 l 457 1051 l 457 -315 l 309 -315 l 309 1051 z "},"}":{"ha":547,"x_min":56,"x_max":526,"o":"m 353 -31 q 325 -145 353 -106 q 233 -202 297 -184 q 56 -220 169 -220 l 56 -66 q 148 -42 123 -65 q 174 29 174 -19 l 174 232 l 174 239 q 214 334 174 298 q 332 382 254 370 l 332 390 q 174 541 178 413 l 174 743 q 149 814 174 791 q 56 839 123 837 l 56 991 q 233 974 169 991 q 325 917 298 956 q 353 803 353 878 l 353 587 l 353 581 q 394 495 353 524 q 526 467 436 467 l 526 304 q 397 277 441 304 q 353 183 353 249 l 353 -31 z "},"~":{"ha":793,"x_min":60,"x_max":733,"o":"m 218 456 q 139 433 181 456 q 60 374 96 410 l 60 530 q 233 604 130 604 q 327 593 283 604 q 421 561 370 583 q 575 524 509 524 q 654 545 611 524 q 733 606 696 567 l 733 449 q 559 375 665 375 q 474 384 515 375 q 372 418 433 393 q 218 456 283 456 z "}," ":{"ha":361,"x_min":0,"x_max":0,"o":""},"¡":{"ha":397,"x_min":79,"x_max":317,"o":"m 114 411 l 279 411 l 314 -250 l 79 -250 l 114 411 m 317 643 q 286 557 317 586 q 197 528 256 528 q 110 557 141 528 q 79 643 79 587 q 111 728 79 698 q 197 758 142 758 q 286 728 254 758 q 317 643 317 699 z "},"¢":{"ha":793,"x_min":97,"x_max":705,"o":"m 382 119 q 97 503 97 159 q 168 776 97 680 q 382 893 239 872 l 382 1006 l 503 1006 l 503 899 q 705 848 615 892 l 644 689 q 553 721 595 709 q 469 733 511 733 q 348 676 387 733 q 309 504 309 620 q 469 282 309 282 q 570 293 525 282 q 682 334 614 303 l 682 161 q 503 114 596 120 l 503 -14 l 382 -14 l 382 119 z "},"£":{"ha":793,"x_min":56,"x_max":766,"o":"m 475 1006 q 739 950 607 1006 l 676 794 q 492 838 570 838 q 410 807 439 838 q 382 721 382 777 l 382 590 l 636 590 l 636 441 l 382 441 l 382 345 q 279 176 382 229 l 766 176 l 766 0 l 56 0 l 56 168 q 152 237 125 198 q 178 343 178 275 l 178 441 l 57 441 l 57 590 l 178 590 l 178 722 q 255 932 178 859 q 475 1006 333 1006 z "},"¤":{"ha":793,"x_min":77,"x_max":717,"o":"m 127 490 q 164 624 127 559 l 77 710 l 176 810 l 262 724 q 396 760 324 760 q 529 722 467 760 l 615 810 l 717 713 l 629 625 q 665 490 665 565 q 629 355 665 418 l 714 271 l 615 172 l 529 257 q 396 222 465 222 q 261 257 318 222 l 176 174 l 78 272 l 164 357 q 127 490 127 420 m 268 490 q 305 400 268 438 q 396 363 342 363 q 489 400 451 363 q 526 490 526 437 q 488 582 526 545 q 396 619 450 619 q 306 581 343 619 q 268 490 268 543 z "},"¥":{"ha":793,"x_min":4,"x_max":787,"o":"m 396 583 l 575 991 l 787 991 l 528 485 l 660 485 l 660 364 l 493 364 l 493 271 l 660 271 l 660 150 l 493 150 l 493 0 l 298 0 l 298 150 l 131 150 l 131 271 l 298 271 l 298 364 l 131 364 l 131 485 l 260 485 l 4 991 l 218 991 l 396 583 z "},"¦":{"ha":765,"x_min":309,"x_max":457,"o":"m 309 1051 l 457 1051 l 457 498 l 309 498 l 309 1051 m 309 237 l 457 237 l 457 -315 l 309 -315 l 309 237 z "},"§":{"ha":675,"x_min":72,"x_max":607,"o":"m 82 546 q 106 644 82 600 q 172 715 131 688 q 82 873 82 772 q 158 1016 82 962 q 357 1069 233 1069 q 603 1013 472 1069 l 547 884 q 453 923 501 905 q 353 940 406 940 q 273 924 298 940 q 248 876 248 909 q 281 818 248 843 q 392 762 315 793 q 555 662 503 719 q 607 530 607 604 q 522 354 607 410 q 586 291 564 327 q 607 205 607 256 q 526 46 607 105 q 309 -14 445 -14 q 72 40 171 -14 l 72 180 q 194 133 127 153 q 309 114 261 114 q 440 193 440 114 q 428 236 440 220 q 385 270 415 252 q 300 310 354 287 q 129 413 176 360 q 82 546 82 467 m 233 561 q 277 480 233 515 q 400 414 321 445 q 453 513 453 452 q 419 591 453 559 q 294 656 385 623 q 251 620 269 646 q 233 561 233 593 z "},"¨":{"ha":843,"x_min":189,"x_max":654,"o":"m 189 953 q 215 1021 189 997 q 283 1044 240 1044 q 354 1019 328 1044 q 379 953 379 994 q 353 887 379 912 q 283 863 328 863 q 215 886 240 863 q 189 953 189 910 m 463 953 q 490 1022 463 1000 q 558 1044 517 1044 q 628 1020 602 1044 q 654 953 654 996 q 628 887 654 911 q 558 863 602 863 q 490 885 517 863 q 463 953 463 907 z "},"©":{"ha":1156,"x_min":68,"x_max":1088,"o":"m 607 685 q 505 635 541 685 q 469 496 469 585 q 607 306 469 306 q 690 316 646 306 q 774 346 735 326 l 774 216 q 603 178 692 178 q 389 262 465 178 q 313 497 313 347 q 388 729 313 646 q 597 812 463 812 q 804 760 699 812 l 754 646 q 607 685 677 685 m 68 496 q 136 750 68 631 q 322 937 203 869 q 578 1006 441 1006 q 832 938 713 1006 q 1019 751 951 870 q 1088 496 1088 633 q 1022 245 1088 362 q 838 57 956 127 q 578 -14 719 -14 q 319 57 437 -14 q 134 244 200 127 q 68 496 68 361 m 164 496 q 220 289 164 385 q 372 137 275 193 q 578 82 468 82 q 785 138 689 82 q 936 290 881 193 q 991 496 991 386 q 936 703 991 607 q 784 854 880 799 q 578 909 688 909 q 371 854 467 909 q 219 702 275 798 q 164 496 164 606 z "},"ª":{"ha":532,"x_min":32,"x_max":472,"o":"m 380 518 l 359 593 q 288 532 330 553 q 196 510 246 510 q 74 550 117 510 q 32 661 32 589 q 88 772 32 735 q 269 815 144 809 l 336 818 q 250 897 336 897 q 103 856 195 897 l 58 947 q 157 986 103 969 q 278 1003 211 1003 q 421 955 371 1003 q 472 818 472 907 l 472 518 l 380 518 m 171 663 q 186 625 171 637 q 224 612 202 612 q 306 641 276 612 q 336 713 336 669 l 336 737 l 269 733 q 171 663 171 726 z "},"«":{"ha":854,"x_min":56,"x_max":799,"o":"m 56 389 l 307 697 l 456 616 l 267 380 l 456 144 l 307 64 l 56 371 l 56 389 m 399 389 l 650 697 l 799 616 l 610 380 l 799 144 l 650 64 l 399 371 l 399 389 z "},"¬":{"ha":793,"x_min":60,"x_max":733,"o":"m 733 168 l 585 168 l 585 415 l 60 415 l 60 564 l 733 564 l 733 168 z "},"­":{"ha":447,"x_min":41,"x_max":406,"o":"m 41 288 l 41 457 l 406 457 l 406 288 l 41 288 z "},"®":{"ha":1156,"x_min":68,"x_max":1088,"o":"m 785 614 q 688 456 785 498 l 848 184 l 676 184 l 555 414 l 524 414 l 524 184 l 368 184 l 368 806 l 547 806 q 727 758 670 806 q 785 614 785 711 m 524 528 l 545 528 q 609 547 589 528 q 628 611 628 566 q 609 673 628 655 q 543 692 590 692 l 524 692 l 524 528 m 68 496 q 136 750 68 631 q 322 937 203 869 q 578 1006 441 1006 q 832 938 713 1006 q 1019 751 951 870 q 1088 496 1088 633 q 1022 245 1088 362 q 838 57 956 127 q 578 -14 719 -14 q 319 57 437 -14 q 134 244 200 127 q 68 496 68 361 m 164 496 q 220 289 164 385 q 372 137 275 193 q 578 82 468 82 q 785 138 689 82 q 936 290 881 193 q 991 496 991 386 q 936 703 991 607 q 784 854 880 799 q 578 909 688 909 q 371 854 467 909 q 219 702 275 798 q 164 496 164 606 z "},"¯":{"ha":694,"x_min":-4,"x_max":699,"o":"m 699 1055 l -4 1055 l -4 1192 l 699 1192 l 699 1055 z "},"°":{"ha":595,"x_min":62,"x_max":532,"o":"m 62 771 q 94 888 62 833 q 179 974 125 942 q 297 1006 233 1006 q 414 975 359 1006 q 500 888 469 943 q 532 771 532 833 q 500 653 532 708 q 414 568 469 599 q 297 538 360 538 q 131 605 199 538 q 62 771 62 673 m 192 771 q 222 697 192 728 q 297 667 252 667 q 372 698 342 667 q 403 771 403 729 q 372 846 403 814 q 297 878 341 878 q 223 846 254 878 q 192 771 192 815 z "},"±":{"ha":793,"x_min":60,"x_max":733,"o":"m 322 457 l 60 457 l 60 606 l 322 606 l 322 869 l 471 869 l 471 606 l 733 606 l 733 457 l 471 457 l 471 196 l 322 196 l 322 457 m 60 0 l 60 149 l 733 149 l 733 0 l 60 0 z "},"²":{"ha":526,"x_min":32,"x_max":476,"o":"m 476 397 l 37 397 l 37 511 l 189 660 q 278 758 258 728 q 297 822 297 788 q 281 861 297 848 q 237 875 264 875 q 115 815 182 875 l 32 918 q 260 1006 132 1006 q 406 961 353 1006 q 460 836 460 916 q 428 728 460 779 q 309 597 396 677 l 237 533 l 476 533 l 476 397 z "},"³":{"ha":526,"x_min":40,"x_max":471,"o":"m 452 847 q 336 713 452 750 l 336 704 q 435 653 400 690 q 471 562 471 616 q 411 433 471 480 q 225 386 351 386 q 40 433 128 386 l 40 562 q 224 501 140 501 q 321 574 321 501 q 291 628 321 610 q 208 646 261 646 l 132 646 l 132 754 l 195 754 q 278 772 251 754 q 306 828 306 789 q 289 871 306 854 q 237 888 272 888 q 177 875 205 888 q 110 835 149 862 l 41 930 q 135 983 83 962 q 256 1004 186 1004 q 397 961 342 1004 q 452 847 452 918 z "},"´":{"ha":843,"x_min":225,"x_max":616,"o":"m 225 842 l 225 860 q 385 1064 342 996 l 616 1064 l 616 1050 q 496 945 581 1015 q 363 842 411 876 l 225 842 z "},"µ":{"ha":917,"x_min":109,"x_max":808,"o":"m 315 315 q 345 192 315 233 q 439 151 375 151 q 563 210 524 151 q 602 401 602 269 l 602 758 l 808 758 l 808 0 l 652 0 l 623 102 l 612 102 q 543 15 584 44 q 443 -14 503 -14 q 366 2 401 -14 q 309 47 330 18 l 312 -10 l 315 -117 l 315 -334 l 109 -334 l 109 758 l 315 758 l 315 315 z "},"¶":{"ha":909,"x_min":77,"x_max":791,"o":"m 791 -176 l 682 -176 l 682 920 l 570 920 l 570 -176 l 460 -176 l 460 379 q 361 367 418 367 q 145 452 214 367 q 77 707 77 536 q 151 969 77 883 q 382 1055 224 1055 l 791 1055 l 791 -176 z "},"·":{"ha":396,"x_min":79,"x_max":317,"o":"m 79 490 q 110 576 79 547 q 199 606 140 606 q 286 576 255 606 q 317 490 317 546 q 285 405 317 435 q 199 375 254 375 q 111 405 142 375 q 79 490 79 435 z "},"¸":{"ha":285,"x_min":-25,"x_max":283,"o":"m 283 -170 q 232 -295 283 -256 q 74 -334 181 -334 q -25 -319 21 -334 l -25 -205 q 24 -215 -7 -210 q 72 -220 55 -220 q 121 -178 121 -220 q 8 -104 121 -121 l 61 0 l 192 0 l 174 -41 q 254 -92 224 -58 q 283 -170 283 -126 z "},"¹":{"ha":526,"x_min":62,"x_max":396,"o":"m 396 397 l 235 397 l 235 700 l 237 776 l 240 840 q 189 787 222 816 l 136 746 l 62 832 l 267 991 l 396 991 l 396 397 z "},"º":{"ha":539,"x_min":39,"x_max":500,"o":"m 500 757 q 438 575 500 641 q 268 510 376 510 q 101 577 164 510 q 39 757 39 644 q 99 937 39 871 q 271 1003 160 1003 q 437 936 374 1003 q 500 757 500 869 m 176 757 q 198 655 176 689 q 269 621 220 621 q 339 655 318 621 q 361 757 361 689 q 339 858 361 825 q 269 892 318 892 q 198 858 220 892 q 176 757 176 825 z "},"»":{"ha":854,"x_min":56,"x_max":799,"o":"m 799 371 l 547 64 l 399 144 l 587 380 l 399 616 l 547 697 l 799 389 l 799 371 m 456 371 l 204 64 l 56 144 l 244 380 l 56 616 l 204 697 l 456 389 l 456 371 z "},"¼":{"ha":1223,"x_min":31,"x_max":1141,"o":"m 365 397 l 203 397 l 203 700 l 205 776 l 209 840 q 158 787 191 816 l 105 746 l 31 832 l 235 991 l 365 991 l 365 397 m 929 991 l 379 0 l 217 0 l 767 991 l 929 991 m 1141 103 l 1056 103 l 1056 1 l 895 1 l 895 103 l 635 103 l 635 208 l 896 599 l 1056 599 l 1056 217 l 1141 217 l 1141 103 m 895 217 l 895 328 q 899 453 895 387 q 874 399 892 435 q 846 347 857 362 l 760 217 l 895 217 z "},"½":{"ha":1223,"x_min":31,"x_max":1164,"o":"m 365 397 l 203 397 l 203 700 l 205 776 l 209 840 q 158 787 191 816 l 105 746 l 31 832 l 235 991 l 365 991 l 365 397 m 929 991 l 379 0 l 217 0 l 767 991 l 929 991 m 1164 1 l 725 1 l 725 115 l 877 263 q 965 361 946 331 q 985 425 985 391 q 968 465 985 451 q 925 478 952 478 q 803 418 870 478 l 720 522 q 947 609 819 609 q 1094 564 1040 609 q 1147 439 1147 519 q 1116 331 1147 382 q 996 201 1084 280 l 925 136 l 1164 136 l 1164 1 z "},"¾":{"ha":1223,"x_min":61,"x_max":1161,"o":"m 473 847 q 357 713 473 750 l 357 704 q 456 653 421 690 q 492 562 492 616 q 432 433 492 480 q 246 386 372 386 q 61 433 149 386 l 61 562 q 245 501 161 501 q 342 574 342 501 q 312 628 342 610 q 229 646 282 646 l 153 646 l 153 754 l 216 754 q 299 772 272 754 q 327 828 327 789 q 310 871 327 854 q 258 888 293 888 q 198 875 227 888 q 131 835 170 862 l 62 930 q 156 983 104 962 q 277 1004 207 1004 q 418 961 363 1004 q 473 847 473 918 m 977 991 l 427 0 l 265 0 l 815 991 l 977 991 m 1161 103 l 1076 103 l 1076 1 l 915 1 l 915 103 l 655 103 l 655 208 l 916 599 l 1076 599 l 1076 217 l 1161 217 l 1161 103 m 915 217 l 915 328 q 919 453 915 387 q 895 399 913 435 q 867 347 877 362 l 781 217 l 915 217 z "},"¿":{"ha":663,"x_min":41,"x_max":667,"o":"m 484 411 l 484 361 q 453 246 484 294 q 350 146 423 198 q 257 63 276 93 q 237 -9 237 33 q 267 -73 237 -48 q 357 -98 296 -98 q 471 -79 410 -98 q 597 -31 532 -59 l 667 -180 q 516 -242 600 -218 q 361 -265 433 -265 q 126 -200 212 -265 q 41 -20 41 -134 q 74 107 41 54 q 204 232 107 161 q 287 304 269 279 q 304 371 304 330 l 304 411 l 484 411 m 505 643 q 475 557 505 586 q 386 528 444 528 q 299 557 330 528 q 268 643 268 587 q 299 728 268 698 q 386 758 331 758 q 474 728 443 758 q 505 643 505 699 z "},"À":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 484 1071 q 358 1167 441 1101 q 229 1279 275 1234 l 229 1293 l 461 1293 q 621 1089 504 1225 l 621 1071 l 484 1071 z "},"Á":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 367 1071 l 367 1089 q 526 1293 484 1225 l 758 1293 l 758 1279 q 638 1174 723 1244 q 505 1071 553 1105 l 367 1071 z "},"Â":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 636 1071 q 477 1190 530 1134 q 322 1071 425 1135 l 184 1071 l 184 1089 q 358 1293 313 1217 l 600 1293 q 673 1197 621 1258 q 774 1089 725 1137 l 774 1071 l 636 1071 z "},"Ã":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 368 1142 q 328 1124 347 1142 q 300 1069 309 1106 l 199 1069 q 255 1223 206 1168 q 383 1279 303 1279 q 438 1268 411 1279 q 491 1243 465 1257 q 542 1219 517 1230 q 591 1208 567 1208 q 632 1226 612 1208 q 660 1280 651 1244 l 761 1280 q 704 1126 753 1182 q 576 1071 655 1071 q 522 1082 549 1071 q 469 1106 495 1093 q 418 1131 443 1120 q 368 1142 393 1142 z "},"Ä":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 248 1182 q 273 1250 248 1226 q 342 1274 298 1274 q 412 1249 387 1274 q 437 1182 437 1223 q 412 1117 437 1141 q 342 1092 386 1092 q 273 1116 298 1092 q 248 1182 248 1139 m 521 1182 q 548 1252 521 1230 q 616 1274 576 1274 q 687 1249 661 1274 q 713 1182 713 1225 q 686 1116 713 1141 q 616 1092 660 1092 q 548 1114 576 1092 q 521 1182 521 1136 z "},"Å":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 650 1063 q 602 945 650 989 q 478 900 554 900 q 356 943 402 900 q 310 1061 310 987 q 356 1178 310 1135 q 478 1222 401 1222 q 602 1177 553 1222 q 650 1063 650 1133 m 543 1061 q 525 1109 543 1092 q 478 1126 507 1126 q 431 1109 450 1126 q 413 1061 413 1092 q 429 1013 413 1031 q 478 996 446 996 q 525 1013 507 996 q 543 1061 543 1031 z "},"Æ":{"ha":1322,"x_min":0,"x_max":1240,"o":"m 1240 0 l 648 0 l 648 236 l 315 236 l 214 0 l 0 0 l 444 991 l 1240 991 l 1240 819 l 859 819 l 859 602 l 1215 602 l 1215 429 l 859 429 l 859 174 l 1240 174 l 1240 0 m 392 412 l 648 412 l 648 812 l 562 812 l 392 412 z "},"Ç":{"ha":885,"x_min":81,"x_max":836,"o":"m 546 831 q 362 742 427 831 q 297 493 297 652 q 546 161 297 161 q 799 214 650 161 l 799 37 q 526 -14 677 -14 q 195 118 310 -14 q 81 494 81 249 q 137 765 81 649 q 299 944 193 882 q 546 1006 404 1006 q 836 936 690 1006 l 768 765 q 656 811 713 791 q 546 831 600 831 m 650 -170 q 599 -295 650 -256 q 441 -334 548 -334 q 342 -319 388 -334 l 342 -205 q 391 -215 360 -210 q 439 -220 422 -220 q 488 -178 488 -220 q 375 -104 488 -121 l 428 0 l 559 0 l 541 -41 q 621 -92 591 -58 q 650 -170 650 -126 z "},"È":{"ha":778,"x_min":125,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 430 1071 q 304 1167 387 1101 q 176 1279 222 1234 l 176 1293 l 408 1293 q 567 1089 450 1225 l 567 1071 l 430 1071 z "},"É":{"ha":778,"x_min":125,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 288 1071 l 288 1089 q 447 1293 404 1225 l 679 1293 l 679 1279 q 558 1174 644 1244 q 425 1071 473 1105 l 288 1071 z "},"Ê":{"ha":778,"x_min":119,"x_max":708,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 570 1071 q 412 1190 464 1134 q 256 1071 359 1135 l 119 1071 l 119 1089 q 292 1293 247 1217 l 534 1293 q 607 1197 555 1258 q 708 1089 659 1137 l 708 1071 l 570 1071 z "},"Ë":{"ha":778,"x_min":125,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 184 1182 q 210 1250 184 1226 q 279 1274 235 1274 q 349 1249 323 1274 q 374 1182 374 1223 q 349 1117 374 1141 q 279 1092 323 1092 q 210 1116 235 1092 q 184 1182 184 1139 m 458 1182 q 485 1252 458 1230 q 553 1274 513 1274 q 624 1249 597 1274 q 650 1182 650 1225 q 623 1116 650 1141 q 553 1092 597 1092 q 485 1114 513 1092 q 458 1182 458 1136 z "},"Ð":{"ha":1028,"x_min":32,"x_max":947,"o":"m 32 576 l 125 576 l 125 991 l 436 991 q 813 863 679 991 q 947 505 947 735 q 808 130 947 260 q 406 0 669 0 l 125 0 l 125 404 l 32 404 l 32 576 m 729 500 q 659 738 729 657 q 446 819 588 819 l 335 819 l 335 576 l 496 576 l 496 404 l 335 404 l 335 174 l 424 174 q 729 500 729 174 z "},"Ñ":{"ha":1129,"x_min":125,"x_max":1004,"o":"m 1004 0 l 737 0 l 306 750 l 300 750 q 313 467 313 551 l 313 0 l 125 0 l 125 991 l 390 991 l 821 249 l 825 249 q 815 522 815 442 l 815 991 l 1004 991 l 1004 0 m 453 1142 q 413 1124 432 1142 q 385 1069 393 1106 l 283 1069 q 339 1223 291 1168 q 468 1279 388 1279 q 523 1268 496 1279 q 575 1243 549 1257 q 627 1219 602 1230 q 676 1208 652 1208 q 716 1226 697 1208 q 745 1280 736 1244 l 846 1280 q 789 1126 838 1182 q 661 1071 740 1071 q 607 1082 633 1071 q 554 1106 580 1093 q 503 1131 528 1120 q 453 1142 477 1142 z "},"Ò":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 559 1071 q 433 1167 516 1101 q 304 1279 351 1234 l 304 1293 l 536 1293 q 696 1089 579 1225 l 696 1071 l 559 1071 z "},"Ó":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 446 1071 l 446 1089 q 606 1293 563 1225 l 838 1293 l 838 1279 q 717 1174 802 1244 q 584 1071 632 1105 l 446 1071 z "},"Ô":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 710 1071 q 551 1190 604 1134 q 396 1071 498 1135 l 258 1071 l 258 1089 q 432 1293 387 1217 l 674 1293 q 747 1197 695 1258 q 848 1089 799 1137 l 848 1071 l 710 1071 z "},"Õ":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 442 1142 q 402 1124 421 1142 q 374 1069 382 1106 l 273 1069 q 329 1223 280 1168 q 457 1279 377 1279 q 512 1268 485 1279 q 565 1243 538 1257 q 616 1219 591 1230 q 665 1208 641 1208 q 706 1226 686 1208 q 734 1280 725 1244 l 835 1280 q 778 1126 827 1182 q 650 1071 729 1071 q 596 1082 623 1071 q 543 1106 569 1093 q 492 1131 517 1120 q 442 1142 467 1142 z "},"Ö":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 321 1182 q 347 1250 321 1226 q 416 1274 372 1274 q 486 1249 460 1274 q 511 1182 511 1223 q 486 1117 511 1141 q 416 1092 460 1092 q 347 1116 372 1092 q 321 1182 321 1139 m 595 1182 q 622 1252 595 1230 q 690 1274 650 1274 q 761 1249 734 1274 q 787 1182 787 1225 q 760 1116 787 1141 q 690 1092 734 1092 q 622 1114 650 1092 q 595 1182 595 1136 z "},"×":{"ha":793,"x_min":87,"x_max":705,"o":"m 290 490 l 87 694 l 191 799 l 395 596 l 602 799 l 705 697 l 498 490 l 703 285 l 602 182 l 395 386 l 191 183 l 89 286 l 290 490 z "},"Ø":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 325 31 419 -14 l 264 -61 l 154 12 l 215 104 q 81 498 81 236 q 203 877 81 746 q 554 1007 326 1007 q 787 960 688 1007 l 844 1044 l 953 974 l 893 885 q 1025 497 1025 753 m 301 497 q 339 289 301 368 l 682 802 q 554 832 625 832 q 365 748 429 832 q 301 497 301 663 m 804 497 q 770 699 804 619 l 431 189 q 553 163 482 163 q 804 497 804 163 z "},"Ù":{"ha":1050,"x_min":118,"x_max":932,"o":"m 932 991 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 385 q 374 216 328 270 q 526 163 420 163 q 676 217 629 163 q 722 386 722 271 l 722 991 l 932 991 m 509 1071 q 383 1167 466 1101 q 254 1279 300 1234 l 254 1293 l 486 1293 q 646 1089 529 1225 l 646 1071 l 509 1071 z "},"Ú":{"ha":1050,"x_min":118,"x_max":932,"o":"m 932 991 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 385 q 374 216 328 270 q 526 163 420 163 q 676 217 629 163 q 722 386 722 271 l 722 991 l 932 991 m 408 1071 l 408 1089 q 568 1293 525 1225 l 800 1293 l 800 1279 q 679 1174 764 1244 q 546 1071 594 1105 l 408 1071 z "},"Û":{"ha":1050,"x_min":118,"x_max":932,"o":"m 932 991 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 385 q 374 216 328 270 q 526 163 420 163 q 676 217 629 163 q 722 386 722 271 l 722 991 l 932 991 m 682 1071 q 524 1190 576 1134 q 368 1071 471 1135 l 231 1071 l 231 1089 q 404 1293 359 1217 l 646 1293 q 719 1197 667 1258 q 820 1089 771 1137 l 820 1071 l 682 1071 z "},"Ü":{"ha":1050,"x_min":118,"x_max":932,"o":"m 932 991 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 385 q 374 216 328 270 q 526 163 420 163 q 676 217 629 163 q 722 386 722 271 l 722 991 l 932 991 m 294 1182 q 319 1250 294 1226 q 388 1274 345 1274 q 458 1249 433 1274 q 484 1182 484 1223 q 458 1117 484 1141 q 388 1092 432 1092 q 319 1116 345 1092 q 294 1182 294 1139 m 567 1182 q 594 1252 567 1230 q 663 1274 622 1274 q 733 1249 707 1274 q 759 1182 759 1225 q 732 1116 759 1141 q 663 1092 706 1092 q 594 1114 622 1092 q 567 1182 567 1136 z "},"Ý":{"ha":867,"x_min":0,"x_max":867,"o":"m 433 583 l 640 991 l 867 991 l 538 386 l 538 0 l 329 0 l 329 379 l 0 991 l 228 991 l 433 583 m 313 1071 l 313 1089 q 472 1293 429 1225 l 704 1293 l 704 1279 q 584 1174 669 1244 q 450 1071 498 1105 l 313 1071 z "},"Þ":{"ha":872,"x_min":125,"x_max":810,"o":"m 810 522 q 713 283 810 367 q 439 199 616 199 l 335 199 l 335 0 l 125 0 l 125 991 l 335 991 l 335 836 l 456 836 q 719 755 628 836 q 810 522 810 675 m 335 368 l 403 368 q 549 404 501 368 q 597 522 597 439 q 554 630 597 595 q 419 665 511 665 l 335 665 l 335 368 z "},"ß":{"ha":987,"x_min":109,"x_max":939,"o":"m 847 842 q 833 765 847 798 q 797 707 819 732 q 750 661 775 681 q 703 625 725 642 q 667 595 682 609 q 653 566 653 581 q 671 530 653 547 q 734 485 689 512 q 868 390 833 423 q 921 315 904 357 q 939 221 939 274 q 860 45 939 104 q 627 -14 781 -14 q 511 -4 559 -14 q 421 29 462 6 l 421 193 q 513 152 457 169 q 612 135 569 135 q 726 218 726 135 q 715 263 726 246 q 677 301 705 281 q 599 350 649 321 q 480 439 513 399 q 447 534 447 479 q 471 614 447 578 q 542 683 494 650 q 615 747 594 720 q 636 806 636 774 q 593 874 636 846 q 482 901 550 901 q 359 866 404 901 q 315 765 315 830 l 315 0 l 109 0 l 109 772 q 208 986 109 909 q 482 1063 307 1063 q 747 1003 648 1063 q 847 842 847 943 z "},"à":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 416 842 q 291 938 374 871 q 162 1050 208 1005 l 162 1064 l 394 1064 q 553 860 437 996 l 553 842 l 416 842 z "},"á":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 299 842 l 299 860 q 458 1064 416 996 l 690 1064 l 690 1050 q 570 945 655 1015 q 437 842 485 876 l 299 842 z "},"â":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 572 841 q 413 960 465 904 q 258 841 360 905 l 120 841 l 120 859 q 294 1063 248 987 l 536 1063 q 609 967 557 1028 q 709 859 661 907 l 709 841 l 572 841 z "},"ã":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 317 913 q 276 895 296 913 q 248 840 257 877 l 147 840 q 203 994 155 939 q 332 1050 252 1050 q 386 1039 359 1050 q 439 1014 413 1027 q 490 990 465 1001 q 540 979 515 979 q 580 997 561 979 q 608 1051 600 1015 l 709 1051 q 653 897 702 953 q 525 842 604 842 q 470 853 497 842 q 417 877 444 864 q 366 902 391 890 q 317 913 341 913 z "},"ä":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 193 953 q 219 1021 193 997 q 288 1044 244 1044 q 358 1019 332 1044 q 383 953 383 994 q 357 887 383 912 q 288 863 332 863 q 219 886 244 863 q 193 953 193 910 m 467 953 q 494 1022 467 1000 q 562 1044 522 1044 q 632 1020 606 1044 q 659 953 659 996 q 632 887 659 911 q 562 863 606 863 q 494 885 522 863 q 467 953 467 907 z "},"å":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 599 1003 q 551 885 599 930 q 427 840 503 840 q 304 884 351 840 q 258 1002 258 927 q 304 1119 258 1075 q 427 1162 350 1162 q 550 1118 501 1162 q 599 1003 599 1073 m 492 1002 q 473 1049 492 1032 q 427 1067 455 1067 q 380 1049 398 1067 q 361 1002 361 1032 q 378 954 361 971 q 427 936 394 936 q 473 954 455 936 q 492 1002 492 971 z "},"æ":{"ha":1274,"x_min":58,"x_max":1214,"o":"m 901 -14 q 732 21 808 -14 q 607 126 656 55 q 474 17 541 47 q 300 -14 407 -14 q 124 51 191 -14 q 58 227 58 115 q 140 405 58 347 q 386 468 222 462 l 515 472 l 515 529 q 485 598 515 576 q 403 621 455 621 q 196 568 308 621 l 129 705 q 415 774 257 774 q 647 685 569 774 q 750 750 692 728 q 890 772 809 772 q 1127 679 1040 772 q 1214 428 1214 586 l 1214 328 l 724 328 q 776 190 727 239 q 913 140 825 140 q 1171 200 1046 140 l 1171 40 q 1055 0 1117 14 q 901 -14 992 -14 m 515 351 l 439 349 q 313 316 355 346 q 271 225 271 287 q 366 138 271 138 q 475 179 434 138 q 515 289 515 220 l 515 351 m 886 625 q 728 465 739 625 l 1019 465 q 982 583 1018 541 q 886 625 946 625 z "},"ç":{"ha":714,"x_min":62,"x_max":671,"o":"m 416 -14 q 62 375 62 -14 q 159 670 62 568 q 435 772 255 772 q 671 721 566 772 l 610 561 q 519 593 561 581 q 435 606 477 606 q 273 376 273 606 q 435 154 273 154 q 545 170 494 154 q 647 220 596 186 l 647 43 q 546 -1 597 11 q 416 -14 494 -14 m 546 -170 q 495 -295 546 -256 q 336 -334 444 -334 q 237 -319 283 -334 l 237 -205 q 287 -215 256 -210 q 334 -220 317 -220 q 383 -178 383 -220 q 271 -104 383 -121 l 323 0 l 454 0 l 436 -41 q 516 -92 486 -58 q 546 -170 546 -126 z "},"è":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 420 842 q 295 938 378 871 q 166 1050 212 1005 l 166 1064 l 398 1064 q 557 860 441 996 l 557 842 l 420 842 z "},"é":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 303 842 l 303 860 q 463 1064 420 996 l 694 1064 l 694 1050 q 574 945 659 1015 q 441 842 489 876 l 303 842 z "},"ê":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 583 842 q 425 961 477 905 q 269 842 372 906 l 132 842 l 132 860 q 305 1064 260 988 l 547 1064 q 620 968 568 1029 q 721 860 672 907 l 721 842 l 583 842 z "},"ë":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 201 953 q 227 1021 201 997 q 296 1044 252 1044 q 366 1019 340 1044 q 391 953 391 994 q 366 887 391 912 q 296 863 340 863 q 227 886 252 863 q 201 953 201 910 m 475 953 q 502 1022 475 1000 q 570 1044 530 1044 q 641 1020 614 1044 q 667 953 667 996 q 640 887 667 911 q 570 863 614 863 q 502 885 530 863 q 475 953 475 907 z "},"ì":{"ha":424,"x_min":-68,"x_max":323,"o":"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 186 842 q 60 938 143 871 q -68 1050 -22 1005 l -68 1064 l 163 1064 q 323 860 206 996 l 323 842 l 186 842 z "},"í":{"ha":424,"x_min":98,"x_max":490,"o":"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 98 842 l 98 860 q 258 1064 215 996 l 490 1064 l 490 1050 q 369 945 454 1015 q 236 842 284 876 l 98 842 z "},"î":{"ha":424,"x_min":-83,"x_max":507,"o":"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 369 842 q 210 961 262 905 q 55 842 157 906 l -83 842 l -83 860 q 91 1064 45 988 l 333 1064 q 406 968 354 1029 q 507 860 458 907 l 507 842 l 369 842 z "},"ï":{"ha":424,"x_min":-20,"x_max":446,"o":"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m -20 953 q 6 1021 -20 997 q 75 1044 31 1044 q 145 1019 119 1044 q 170 953 170 994 q 144 887 170 912 q 75 863 119 863 q 6 886 31 863 q -20 953 -20 910 m 254 953 q 281 1022 254 1000 q 349 1044 309 1044 q 419 1020 393 1044 q 446 953 446 996 q 419 887 446 911 q 349 863 393 863 q 281 885 309 863 q 254 953 254 907 z "},"ð":{"ha":860,"x_min":62,"x_max":798,"o":"m 346 884 q 243 946 292 920 l 311 1065 q 486 970 409 1021 l 639 1064 l 707 960 l 591 889 q 747 669 697 792 q 798 389 798 546 q 699 93 798 199 q 428 -14 601 -14 q 162 79 262 -14 q 62 332 62 172 q 151 582 62 490 q 389 675 239 675 q 575 608 528 675 l 581 611 q 450 802 535 721 l 294 705 l 227 811 l 346 884 m 586 361 q 545 478 586 434 q 431 522 503 522 q 311 476 349 522 q 273 330 273 429 q 314 187 273 235 q 431 139 355 139 q 550 195 514 139 q 586 361 586 250 z "},"ñ":{"ha":913,"x_min":109,"x_max":808,"o":"m 808 0 l 602 0 l 602 443 q 572 566 602 525 q 479 607 543 607 q 354 549 393 607 q 315 357 315 491 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 401 744 340 716 q 539 772 462 772 q 740 701 671 772 q 808 494 808 629 l 808 0 m 345 913 q 304 895 323 913 q 276 840 285 877 l 175 840 q 231 994 182 939 q 359 1050 279 1050 q 414 1039 387 1050 q 467 1014 441 1027 q 518 990 493 1001 q 568 979 543 979 q 608 997 589 979 q 636 1051 627 1015 l 737 1051 q 681 897 730 953 q 553 842 631 842 q 498 853 525 842 q 445 877 471 864 q 394 902 419 890 q 345 913 369 913 z "},"ò":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 415 842 q 290 938 372 871 q 161 1050 207 1005 l 161 1064 l 393 1064 q 552 860 435 996 l 552 842 l 415 842 z "},"ó":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 317 842 l 317 860 q 476 1064 433 996 l 708 1064 l 708 1050 q 588 945 673 1015 q 454 842 503 876 l 317 842 z "},"ô":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 586 842 q 427 961 479 905 q 272 842 374 906 l 134 842 l 134 860 q 308 1064 262 988 l 550 1064 q 623 968 571 1029 q 724 860 675 907 l 724 842 l 586 842 z "},"õ":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 318 913 q 278 895 297 913 q 250 840 258 877 l 149 840 q 204 994 156 939 q 333 1050 253 1050 q 388 1039 361 1050 q 440 1014 414 1027 q 492 990 467 1001 q 541 979 517 979 q 582 997 562 979 q 610 1051 601 1015 l 711 1051 q 654 897 703 953 q 526 842 605 842 q 472 853 498 842 q 419 877 445 864 q 368 902 393 890 q 318 913 342 913 z "},"ö":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 197 953 q 223 1021 197 997 q 292 1044 248 1044 q 362 1019 336 1044 q 387 953 387 994 q 361 887 387 912 q 292 863 336 863 q 223 886 248 863 q 197 953 197 910 m 471 953 q 498 1022 471 1000 q 566 1044 526 1044 q 636 1020 610 1044 q 663 953 663 996 q 636 887 663 911 q 566 863 610 863 q 498 885 526 863 q 471 953 471 907 z "},"÷":{"ha":793,"x_min":60,"x_max":733,"o":"m 60 415 l 60 564 l 733 564 l 733 415 l 60 415 m 301 253 q 326 330 301 304 q 396 355 351 355 q 466 329 441 355 q 490 253 490 302 q 465 178 490 205 q 396 150 440 150 q 327 176 352 150 q 301 253 301 203 m 301 726 q 326 803 301 777 q 396 829 351 829 q 466 802 441 829 q 490 726 490 774 q 465 651 490 679 q 396 624 440 624 q 327 650 352 624 q 301 726 301 677 z "},"ø":{"ha":860,"x_min":62,"x_max":798,"o":"m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 269 17 342 -14 l 224 -52 l 119 20 l 165 87 q 62 380 62 193 q 159 669 62 566 q 432 772 256 772 q 600 737 522 772 l 637 793 l 741 720 l 701 663 q 798 380 798 557 m 273 380 q 286 268 273 317 l 501 590 q 429 606 472 606 q 310 550 347 606 q 273 380 273 494 m 586 380 q 578 476 586 435 l 368 163 q 431 153 394 153 q 550 210 513 153 q 586 380 586 267 z "},"ù":{"ha":913,"x_min":104,"x_max":804,"o":"m 646 0 l 618 97 l 607 97 q 513 15 574 44 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 0 l 646 0 m 420 842 q 295 938 378 871 q 166 1050 212 1005 l 166 1064 l 398 1064 q 557 860 441 996 l 557 842 l 420 842 z "},"ú":{"ha":913,"x_min":104,"x_max":804,"o":"m 646 0 l 618 97 l 607 97 q 513 15 574 44 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 0 l 646 0 m 338 842 l 338 860 q 497 1064 454 996 l 729 1064 l 729 1050 q 609 945 694 1015 q 475 842 524 876 l 338 842 z "},"û":{"ha":913,"x_min":104,"x_max":804,"o":"m 646 0 l 618 97 l 607 97 q 513 15 574 44 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 0 l 646 0 m 611 842 q 452 961 505 905 q 297 842 399 906 l 159 842 l 159 860 q 333 1064 288 988 l 575 1064 q 648 968 596 1029 q 749 860 700 907 l 749 842 l 611 842 z "},"ü":{"ha":913,"x_min":104,"x_max":804,"o":"m 646 0 l 618 97 l 607 97 q 513 15 574 44 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 0 l 646 0 m 221 953 q 247 1021 221 997 q 315 1044 272 1044 q 386 1019 360 1044 q 411 953 411 994 q 385 887 411 912 q 315 863 359 863 q 247 886 272 863 q 221 953 221 910 m 494 953 q 522 1022 494 1000 q 590 1044 549 1044 q 660 1020 634 1044 q 686 953 686 996 q 660 887 686 911 q 590 863 633 863 q 522 885 549 863 q 494 953 494 907 z "},"ý":{"ha":790,"x_min":0,"x_max":790,"o":"m 0 758 l 227 758 l 370 332 q 395 200 388 276 l 399 200 q 428 332 406 270 l 568 758 l 790 758 l 469 -97 q 343 -275 425 -216 q 153 -334 262 -334 q 47 -322 99 -334 l 47 -158 q 129 -167 85 -167 q 225 -133 184 -167 q 289 -32 266 -100 l 301 5 l 0 758 m 267 842 l 267 860 q 426 1064 383 996 l 658 1064 l 658 1050 q 537 945 623 1015 q 404 842 452 876 l 267 842 z "},"þ":{"ha":879,"x_min":109,"x_max":817,"o":"m 315 660 q 404 744 349 715 q 530 772 459 772 q 741 668 665 772 q 817 380 817 563 q 741 91 817 195 q 530 -14 665 -14 q 315 79 386 -14 l 306 79 l 311 37 l 315 -26 l 315 -334 l 109 -334 l 109 1055 l 315 1055 l 315 790 l 311 709 l 306 660 l 315 660 m 464 607 q 352 560 387 607 q 315 404 317 513 l 315 382 q 352 207 315 260 q 467 154 388 154 q 606 383 606 154 q 571 551 606 495 q 464 607 537 607 z "},"ÿ":{"ha":790,"x_min":0,"x_max":790,"o":"m 0 758 l 227 758 l 370 332 q 395 200 388 276 l 399 200 q 428 332 406 270 l 568 758 l 790 758 l 469 -97 q 343 -275 425 -216 q 153 -334 262 -334 q 47 -322 99 -334 l 47 -158 q 129 -167 85 -167 q 225 -133 184 -167 q 289 -32 266 -100 l 301 5 l 0 758 m 165 953 q 190 1021 165 997 q 259 1044 216 1044 q 329 1019 304 1044 q 355 953 355 994 q 329 887 355 912 q 259 863 303 863 q 190 886 216 863 q 165 953 165 910 m 438 953 q 466 1022 438 1000 q 534 1044 493 1044 q 604 1020 578 1044 q 630 953 630 996 q 604 887 630 911 q 534 863 577 863 q 466 885 493 863 q 438 953 438 907 z "},"Ā":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 252 1214 l 711 1214 l 711 1071 l 252 1071 l 252 1214 z "},"ā":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 199 985 l 659 985 l 659 842 l 199 842 l 199 985 z "},"Ă":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 746 1300 q 663 1133 738 1196 q 476 1071 589 1071 q 288 1133 358 1071 q 212 1300 218 1194 l 328 1300 q 346 1250 330 1268 q 391 1223 362 1232 q 477 1215 420 1215 q 628 1300 617 1215 l 746 1300 z "},"ă":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 696 1071 q 613 904 688 966 q 426 842 538 842 q 238 903 308 842 q 162 1071 168 965 l 277 1071 q 296 1021 280 1039 q 341 994 312 1002 q 427 986 370 986 q 578 1071 567 986 l 696 1071 z "},"Ą":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 754 -154 q 769 -196 754 -182 q 808 -210 785 -210 q 886 -197 846 -210 l 886 -318 q 781 -334 831 -334 q 657 -291 704 -334 q 611 -178 611 -248 q 637 -92 611 -132 q 733 0 663 -52 l 854 0 q 781 -82 807 -45 q 754 -154 754 -119 z "},"ą":{"ha":839,"x_min":58,"x_max":746,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 614 -154 q 629 -196 614 -182 q 668 -210 644 -210 q 746 -197 705 -210 l 746 -318 q 640 -334 690 -334 q 517 -291 564 -334 q 471 -178 471 -248 q 496 -92 471 -132 q 593 0 522 -52 l 714 0 q 640 -82 667 -45 q 614 -154 614 -119 z "},"Ć":{"ha":885,"x_min":81,"x_max":836,"o":"m 546 831 q 362 742 427 831 q 297 493 297 652 q 546 161 297 161 q 799 214 650 161 l 799 37 q 526 -14 677 -14 q 195 118 310 -14 q 81 494 81 249 q 137 765 81 649 q 299 944 193 882 q 546 1006 404 1006 q 836 936 690 1006 l 768 765 q 656 811 713 791 q 546 831 600 831 m 406 1071 l 406 1089 q 565 1293 522 1225 l 797 1293 l 797 1279 q 676 1174 762 1244 q 543 1071 591 1105 l 406 1071 z "},"ć":{"ha":714,"x_min":62,"x_max":692,"o":"m 416 -14 q 62 375 62 -14 q 159 670 62 568 q 435 772 255 772 q 671 721 566 772 l 610 561 q 519 593 561 581 q 435 606 477 606 q 273 376 273 606 q 435 154 273 154 q 545 170 494 154 q 647 220 596 186 l 647 43 q 546 -1 597 11 q 416 -14 494 -14 m 300 842 l 300 860 q 460 1064 417 996 l 692 1064 l 692 1050 q 571 945 656 1015 q 438 842 486 876 l 300 842 z "},"Ĉ":{"ha":885,"x_min":81,"x_max":836,"o":"m 546 831 q 362 742 427 831 q 297 493 297 652 q 546 161 297 161 q 799 214 650 161 l 799 37 q 526 -14 677 -14 q 195 118 310 -14 q 81 494 81 249 q 137 765 81 649 q 299 944 193 882 q 546 1006 404 1006 q 836 936 690 1006 l 768 765 q 656 811 713 791 q 546 831 600 831 m 693 1071 q 534 1190 587 1134 q 379 1071 481 1135 l 241 1071 l 241 1089 q 415 1293 370 1217 l 657 1293 q 730 1197 678 1258 q 831 1089 782 1137 l 831 1071 l 693 1071 z "},"ĉ":{"ha":714,"x_min":62,"x_max":704,"o":"m 416 -14 q 62 375 62 -14 q 159 670 62 568 q 435 772 255 772 q 671 721 566 772 l 610 561 q 519 593 561 581 q 435 606 477 606 q 273 376 273 606 q 435 154 273 154 q 545 170 494 154 q 647 220 596 186 l 647 43 q 546 -1 597 11 q 416 -14 494 -14 m 566 842 q 408 961 460 905 q 252 842 355 906 l 115 842 l 115 860 q 288 1064 243 988 l 530 1064 q 603 968 551 1029 q 704 860 655 907 l 704 842 l 566 842 z "},"Ċ":{"ha":885,"x_min":81,"x_max":836,"o":"m 546 831 q 362 742 427 831 q 297 493 297 652 q 546 161 297 161 q 799 214 650 161 l 799 37 q 526 -14 677 -14 q 195 118 310 -14 q 81 494 81 249 q 137 765 81 649 q 299 944 193 882 q 546 1006 404 1006 q 836 936 690 1006 l 768 765 q 656 811 713 791 q 546 831 600 831 m 420 1183 q 533 1284 420 1284 q 646 1183 646 1284 q 617 1108 646 1135 q 533 1082 589 1082 q 420 1183 420 1082 z "},"ċ":{"ha":714,"x_min":62,"x_max":671,"o":"m 416 -14 q 62 375 62 -14 q 159 670 62 568 q 435 772 255 772 q 671 721 566 772 l 610 561 q 519 593 561 581 q 435 606 477 606 q 273 376 273 606 q 435 154 273 154 q 545 170 494 154 q 647 220 596 186 l 647 43 q 546 -1 597 11 q 416 -14 494 -14 m 313 954 q 426 1055 313 1055 q 538 954 538 1055 q 510 879 538 906 q 426 852 482 852 q 313 954 313 852 z "},"Č":{"ha":885,"x_min":81,"x_max":836,"o":"m 546 831 q 362 742 427 831 q 297 493 297 652 q 546 161 297 161 q 799 214 650 161 l 799 37 q 526 -14 677 -14 q 195 118 310 -14 q 81 494 81 249 q 137 765 81 649 q 299 944 193 882 q 546 1006 404 1006 q 836 936 690 1006 l 768 765 q 656 811 713 791 q 546 831 600 831 m 832 1293 l 832 1275 q 727 1161 775 1218 q 659 1071 680 1105 l 416 1071 q 360 1147 397 1103 q 243 1275 323 1192 l 243 1293 l 380 1293 q 536 1174 480 1230 q 694 1293 593 1233 l 832 1293 z "},"č":{"ha":714,"x_min":62,"x_max":715,"o":"m 416 -14 q 62 375 62 -14 q 159 670 62 568 q 435 772 255 772 q 671 721 566 772 l 610 561 q 519 593 561 581 q 435 606 477 606 q 273 376 273 606 q 435 154 273 154 q 545 170 494 154 q 647 220 596 186 l 647 43 q 546 -1 597 11 q 416 -14 494 -14 m 715 1064 l 715 1046 q 611 932 659 989 q 542 842 563 876 l 300 842 q 243 918 280 873 q 126 1046 207 962 l 126 1064 l 264 1064 q 419 945 363 1001 q 578 1064 476 1004 l 715 1064 z "},"Ď":{"ha":1028,"x_min":125,"x_max":947,"o":"m 947 505 q 808 130 947 260 q 406 0 669 0 l 125 0 l 125 991 l 436 991 q 813 863 679 991 q 947 505 947 735 m 729 500 q 447 819 729 819 l 335 819 l 335 174 l 425 174 q 729 500 729 174 m 786 1293 l 786 1275 q 681 1161 729 1218 q 612 1071 633 1105 l 370 1071 q 314 1147 351 1103 q 197 1275 277 1192 l 197 1293 l 334 1293 q 490 1174 434 1230 q 648 1293 547 1233 l 786 1293 z "},"ď":{"ha":879,"x_min":62,"x_max":1067,"o":"m 349 -14 q 139 90 215 -14 q 62 378 62 194 q 140 668 62 564 q 354 772 218 772 q 572 661 497 772 l 579 661 q 564 812 564 746 l 564 1055 l 771 1055 l 771 0 l 612 0 l 572 98 l 564 98 q 349 -14 493 -14 m 421 151 q 537 197 500 151 q 578 354 574 243 l 578 376 q 540 551 578 498 q 418 604 503 604 q 310 546 349 604 q 272 375 272 487 q 311 207 272 263 q 421 151 349 151 m 833 851 q 857 948 844 884 q 876 1055 870 1012 l 1067 1055 l 1067 1042 q 954 833 1013 922 l 833 833 l 833 851 z "},"Đ":{"ha":1028,"x_min":32,"x_max":947,"o":"m 32 576 l 125 576 l 125 991 l 436 991 q 813 863 679 991 q 947 505 947 735 q 808 130 947 260 q 406 0 669 0 l 125 0 l 125 404 l 32 404 l 32 576 m 729 500 q 659 738 729 657 q 446 819 588 819 l 335 819 l 335 576 l 496 576 l 496 404 l 335 404 l 335 174 l 424 174 q 729 500 729 174 z "},"đ":{"ha":901,"x_min":62,"x_max":876,"o":"m 342 -14 q 137 84 212 -14 q 62 357 62 182 q 130 639 62 548 q 349 730 197 730 q 479 702 422 730 q 572 619 536 673 l 579 619 q 564 777 564 708 l 564 811 l 350 811 l 350 946 l 564 946 l 564 1055 l 771 1055 l 771 946 l 876 946 l 876 811 l 771 811 l 771 0 l 603 0 l 559 98 l 551 98 q 342 -14 481 -14 m 429 151 q 539 193 504 151 q 578 336 575 235 l 578 355 q 544 518 578 475 q 419 562 509 562 q 316 515 344 562 q 288 354 288 469 q 321 202 288 253 q 429 151 355 151 z "},"Ē":{"ha":778,"x_min":125,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 186 1214 l 646 1214 l 646 1071 l 186 1071 l 186 1214 z "},"ē":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 189 985 l 648 985 l 648 842 l 189 842 l 189 985 z "},"Ĕ":{"ha":778,"x_min":125,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 673 1300 q 590 1133 665 1196 q 403 1071 515 1071 q 215 1133 285 1071 q 139 1300 144 1194 l 254 1300 q 273 1250 257 1268 q 318 1223 289 1232 q 404 1215 347 1215 q 555 1300 544 1215 l 673 1300 z "},"ĕ":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 688 1071 q 605 904 680 966 q 418 842 530 842 q 230 903 300 842 q 154 1071 159 965 l 269 1071 q 288 1021 272 1039 q 333 994 304 1002 q 419 986 361 986 q 570 1071 559 986 l 688 1071 z "},"Ė":{"ha":778,"x_min":125,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 305 1164 q 418 1265 305 1265 q 530 1164 530 1265 q 502 1089 530 1116 q 418 1062 474 1062 q 305 1164 305 1062 z "},"ė":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 316 954 q 429 1055 316 1055 q 541 954 541 1055 q 513 879 541 906 q 429 852 485 852 q 316 954 316 852 z "},"Ę":{"ha":778,"x_min":125,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 533 -154 q 548 -196 533 -182 q 587 -210 564 -210 q 665 -197 625 -210 l 665 -318 q 559 -334 610 -334 q 436 -291 483 -334 q 390 -178 390 -248 q 416 -92 390 -132 q 512 0 441 -52 l 633 0 q 559 -82 586 -45 q 533 -154 533 -119 z "},"ę":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 540 -140 q 555 -182 540 -169 q 594 -196 570 -196 q 672 -184 631 -196 l 672 -304 q 566 -320 616 -320 q 443 -277 490 -320 q 397 -164 397 -234 q 422 -79 397 -119 q 519 14 448 -39 l 640 14 q 566 -68 593 -31 q 540 -140 540 -105 z "},"Ě":{"ha":778,"x_min":119,"x_max":708,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 708 1293 l 708 1275 q 603 1161 651 1218 q 534 1071 555 1105 l 292 1071 q 236 1147 273 1103 q 119 1275 199 1192 l 119 1293 l 256 1293 q 412 1174 356 1230 q 570 1293 469 1233 l 708 1293 z "},"ě":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 717 1064 l 717 1046 q 612 932 660 989 q 543 842 564 876 l 301 842 q 245 918 281 873 q 127 1046 208 962 l 127 1064 l 265 1064 q 420 945 365 1001 q 579 1064 477 1004 l 717 1064 z "},"Ĝ":{"ha":1006,"x_min":81,"x_max":895,"o":"m 501 557 l 895 557 l 895 43 q 714 -1 799 12 q 542 -14 630 -14 q 199 118 317 -14 q 81 497 81 250 q 218 871 81 737 q 599 1006 355 1006 q 893 945 751 1006 l 823 777 q 597 831 715 831 q 379 739 461 831 q 297 493 297 648 q 363 247 297 332 q 555 161 429 161 q 689 175 621 161 l 689 382 l 501 382 l 501 557 m 703 1071 q 544 1190 596 1134 q 389 1071 491 1135 l 251 1071 l 251 1089 q 425 1293 379 1217 l 667 1293 q 740 1197 688 1258 q 840 1089 791 1137 l 840 1071 l 703 1071 z "},"ĝ":{"ha":785,"x_min":4,"x_max":768,"o":"m 768 758 l 768 653 l 650 623 q 682 509 682 572 q 597 318 682 387 q 361 250 512 250 l 323 252 l 293 256 q 261 201 261 231 q 375 157 261 157 l 504 157 q 694 103 629 157 q 760 -54 760 50 q 649 -260 760 -187 q 330 -334 538 -334 q 88 -278 172 -334 q 4 -123 4 -223 q 47 -9 4 -55 q 172 57 90 37 q 117 101 140 71 q 93 167 93 132 q 118 239 93 210 q 191 296 143 268 q 96 378 131 321 q 61 513 61 435 q 142 705 61 637 q 372 772 222 772 q 448 767 404 772 q 504 758 492 761 l 768 758 m 183 -107 q 224 -174 183 -150 q 339 -199 265 -199 q 513 -168 450 -199 q 576 -85 576 -138 q 539 -26 576 -42 q 424 -9 502 -9 l 317 -9 q 221 -36 260 -9 q 183 -107 183 -63 m 258 510 q 287 412 258 448 q 372 376 315 376 q 458 412 431 376 q 485 510 485 448 q 372 647 485 647 q 258 510 258 647 m 553 842 q 395 961 447 905 q 239 842 342 906 l 102 842 l 102 860 q 275 1064 230 988 l 517 1064 q 590 968 538 1029 q 691 860 642 907 l 691 842 l 553 842 z "},"Ğ":{"ha":1006,"x_min":81,"x_max":895,"o":"m 501 557 l 895 557 l 895 43 q 714 -1 799 12 q 542 -14 630 -14 q 199 118 317 -14 q 81 497 81 250 q 218 871 81 737 q 599 1006 355 1006 q 893 945 751 1006 l 823 777 q 597 831 715 831 q 379 739 461 831 q 297 493 297 648 q 363 247 297 332 q 555 161 429 161 q 689 175 621 161 l 689 382 l 501 382 l 501 557 m 817 1300 q 734 1133 808 1196 q 547 1071 659 1071 q 358 1133 429 1071 q 283 1300 288 1194 l 398 1300 q 417 1250 401 1268 q 461 1223 433 1232 q 548 1215 490 1215 q 699 1300 688 1215 l 817 1300 z "},"ğ":{"ha":785,"x_min":4,"x_max":768,"o":"m 768 758 l 768 653 l 650 623 q 682 509 682 572 q 597 318 682 387 q 361 250 512 250 l 323 252 l 293 256 q 261 201 261 231 q 375 157 261 157 l 504 157 q 694 103 629 157 q 760 -54 760 50 q 649 -260 760 -187 q 330 -334 538 -334 q 88 -278 172 -334 q 4 -123 4 -223 q 47 -9 4 -55 q 172 57 90 37 q 117 101 140 71 q 93 167 93 132 q 118 239 93 210 q 191 296 143 268 q 96 378 131 321 q 61 513 61 435 q 142 705 61 637 q 372 772 222 772 q 448 767 404 772 q 504 758 492 761 l 768 758 m 183 -107 q 224 -174 183 -150 q 339 -199 265 -199 q 513 -168 450 -199 q 576 -85 576 -138 q 539 -26 576 -42 q 424 -9 502 -9 l 317 -9 q 221 -36 260 -9 q 183 -107 183 -63 m 258 510 q 287 412 258 448 q 372 376 315 376 q 458 412 431 376 q 485 510 485 448 q 372 647 485 647 q 258 510 258 647 m 667 1071 q 585 904 659 966 q 397 842 510 842 q 209 903 279 842 q 134 1071 139 965 l 249 1071 q 268 1021 252 1039 q 312 994 283 1002 q 399 986 341 986 q 549 1071 538 986 l 667 1071 z "},"Ġ":{"ha":1006,"x_min":81,"x_max":895,"o":"m 501 557 l 895 557 l 895 43 q 714 -1 799 12 q 542 -14 630 -14 q 199 118 317 -14 q 81 497 81 250 q 218 871 81 737 q 599 1006 355 1006 q 893 945 751 1006 l 823 777 q 597 831 715 831 q 379 739 461 831 q 297 493 297 648 q 363 247 297 332 q 555 161 429 161 q 689 175 621 161 l 689 382 l 501 382 l 501 557 m 444 1183 q 557 1284 444 1284 q 669 1183 669 1284 q 641 1108 669 1135 q 557 1082 613 1082 q 444 1183 444 1082 z "},"ġ":{"ha":785,"x_min":4,"x_max":768,"o":"m 768 758 l 768 653 l 650 623 q 682 509 682 572 q 597 318 682 387 q 361 250 512 250 l 323 252 l 293 256 q 261 201 261 231 q 375 157 261 157 l 504 157 q 694 103 629 157 q 760 -54 760 50 q 649 -260 760 -187 q 330 -334 538 -334 q 88 -278 172 -334 q 4 -123 4 -223 q 47 -9 4 -55 q 172 57 90 37 q 117 101 140 71 q 93 167 93 132 q 118 239 93 210 q 191 296 143 268 q 96 378 131 321 q 61 513 61 435 q 142 705 61 637 q 372 772 222 772 q 448 767 404 772 q 504 758 492 761 l 768 758 m 183 -107 q 224 -174 183 -150 q 339 -199 265 -199 q 513 -168 450 -199 q 576 -85 576 -138 q 539 -26 576 -42 q 424 -9 502 -9 l 317 -9 q 221 -36 260 -9 q 183 -107 183 -63 m 258 510 q 287 412 258 448 q 372 376 315 376 q 458 412 431 376 q 485 510 485 448 q 372 647 485 647 q 258 510 258 647 m 279 954 q 391 1055 279 1055 q 504 954 504 1055 q 476 879 504 906 q 391 852 448 852 q 279 954 279 852 z "},"Ģ":{"ha":1006,"x_min":81,"x_max":895,"o":"m 501 557 l 895 557 l 895 43 q 714 -1 799 12 q 542 -14 630 -14 q 199 118 317 -14 q 81 497 81 250 q 218 871 81 737 q 599 1006 355 1006 q 893 945 751 1006 l 823 777 q 597 831 715 831 q 379 739 461 831 q 297 493 297 648 q 363 247 297 332 q 555 161 429 161 q 689 175 621 161 l 689 382 l 501 382 l 501 557 m 427 -289 q 450 -192 437 -256 q 469 -85 463 -128 l 660 -85 l 660 -98 q 547 -307 609 -212 l 427 -307 l 427 -289 z "},"ģ":{"ha":785,"x_min":4,"x_max":768,"o":"m 768 758 l 768 653 l 650 623 q 682 509 682 572 q 597 318 682 387 q 361 250 512 250 l 323 252 l 293 256 q 261 201 261 231 q 375 157 261 157 l 504 157 q 694 103 629 157 q 760 -54 760 50 q 649 -260 760 -187 q 330 -334 538 -334 q 88 -278 172 -334 q 4 -123 4 -223 q 47 -9 4 -55 q 172 57 90 37 q 117 101 140 71 q 93 167 93 132 q 118 239 93 210 q 191 296 143 268 q 96 378 131 321 q 61 513 61 435 q 142 705 61 637 q 372 772 222 772 q 448 767 404 772 q 504 758 492 761 l 768 758 m 183 -107 q 224 -174 183 -150 q 339 -199 265 -199 q 513 -168 450 -199 q 576 -85 576 -138 q 539 -26 576 -42 q 424 -9 502 -9 l 317 -9 q 221 -36 260 -9 q 183 -107 183 -63 m 258 510 q 287 412 258 448 q 372 376 315 376 q 458 412 431 376 q 485 510 485 448 q 372 647 485 647 q 258 510 258 647 m 521 1046 q 497 949 511 1013 q 479 842 484 885 l 288 842 l 288 856 q 400 1064 340 971 l 521 1064 l 521 1046 z "},"Ĥ":{"ha":1063,"x_min":125,"x_max":937,"o":"m 937 0 l 728 0 l 728 428 l 335 428 l 335 0 l 125 0 l 125 991 l 335 991 l 335 603 l 728 603 l 728 991 l 937 991 l 937 0 m 686 1071 q 528 1190 580 1134 q 372 1071 475 1135 l 235 1071 l 235 1089 q 408 1293 363 1217 l 650 1293 q 723 1197 671 1258 q 824 1089 775 1137 l 824 1071 l 686 1071 z "},"ĥ":{"ha":913,"x_min":109,"x_max":808,"o":"m 808 0 l 602 0 l 602 443 q 479 607 602 607 q 354 548 393 607 q 315 357 315 489 l 315 0 l 109 0 l 109 1055 l 315 1055 l 315 840 q 311 722 315 815 l 306 661 l 317 661 q 536 772 386 772 q 739 701 670 772 q 808 494 808 629 l 808 0 m 614 1108 q 455 1227 507 1171 q 300 1108 402 1173 l 162 1108 l 162 1126 q 336 1331 290 1255 l 578 1331 q 651 1235 599 1295 q 751 1126 703 1174 l 751 1108 l 614 1108 z "},"Ħ":{"ha":1063,"x_min":0,"x_max":1063,"o":"m 937 860 l 1063 860 l 1063 725 l 937 725 l 937 0 l 728 0 l 728 428 l 335 428 l 335 0 l 125 0 l 125 725 l 0 725 l 0 860 l 125 860 l 125 991 l 335 991 l 335 860 l 728 860 l 728 991 l 937 991 l 937 860 m 728 603 l 728 725 l 335 725 l 335 603 l 728 603 z "},"ħ":{"ha":913,"x_min":3,"x_max":808,"o":"m 808 0 l 602 0 l 602 401 q 479 566 602 566 q 354 506 393 566 q 315 315 315 447 l 315 0 l 109 0 l 109 811 l 3 811 l 3 946 l 109 946 l 109 1055 l 315 1055 l 315 946 l 529 946 l 529 811 l 315 811 l 315 799 q 306 619 315 743 l 318 619 q 538 730 387 730 q 740 659 671 730 q 808 453 808 588 l 808 0 z "},"ĩ":{"ha":424,"x_min":-68,"x_max":494,"o":"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 101 913 q 61 895 80 913 q 33 840 41 877 l -68 840 q -13 994 -61 939 q 116 1050 36 1050 q 171 1039 144 1050 q 223 1014 197 1027 q 275 990 250 1001 q 324 979 300 979 q 365 997 345 979 q 393 1051 384 1015 l 494 1051 q 437 897 486 953 q 309 842 388 842 q 255 853 281 842 q 202 877 228 864 q 151 902 176 890 q 101 913 125 913 z "},"ī":{"ha":424,"x_min":-16,"x_max":444,"o":"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m -16 985 l 444 985 l 444 842 l -16 842 l -16 985 z "},"ĭ":{"ha":424,"x_min":-55,"x_max":479,"o":"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 479 1071 q 396 904 471 966 q 209 842 321 842 q 21 903 91 842 q -55 1071 -50 965 l 60 1071 q 79 1021 63 1039 q 124 994 95 1002 q 210 986 153 986 q 361 1071 350 986 l 479 1071 z "},"į":{"ha":424,"x_min":29,"x_max":325,"o":"m 100 954 q 212 1055 100 1055 q 325 954 325 1055 q 297 879 325 906 q 212 852 269 852 q 100 954 100 852 m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 172 -154 q 188 -196 172 -182 q 227 -210 203 -210 q 304 -197 264 -210 l 304 -318 q 199 -334 249 -334 q 76 -291 122 -334 q 29 -178 29 -248 q 55 -92 29 -132 q 151 0 81 -52 l 273 0 q 199 -82 225 -45 q 172 -154 172 -119 z "},"ı":{"ha":424,"x_min":109,"x_max":315,"o":"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 z "},"ĳ":{"ha":821,"x_min":100,"x_max":722,"o":"m 100 954 q 212 1055 100 1055 q 325 954 325 1055 q 297 879 325 906 q 212 852 269 852 q 100 954 100 852 m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 445 -334 q 309 -317 366 -334 l 309 -154 q 406 -167 356 -167 q 482 -138 458 -167 q 506 -52 506 -109 l 506 758 l 713 758 l 713 -82 q 643 -268 713 -203 q 445 -334 573 -334 m 497 954 q 610 1055 497 1055 q 722 954 722 1055 q 694 879 722 906 q 610 852 666 852 q 497 954 497 852 z "},"Ĵ":{"ha":460,"x_min":-103,"x_max":527,"o":"m 21 -292 q -103 -277 -50 -292 l -103 -102 q -4 -115 -49 -115 q 95 -72 65 -115 q 125 62 125 -29 l 125 991 l 335 991 l 335 64 q 256 -201 335 -110 q 21 -292 176 -292 m 389 1071 q 231 1190 283 1134 q 75 1071 178 1135 l -62 1071 l -62 1089 q 111 1293 66 1217 l 353 1293 q 426 1197 374 1258 q 527 1089 478 1137 l 527 1071 l 389 1071 z "},"ĵ":{"ha":424,"x_min":-89,"x_max":504,"o":"m 47 -334 q -89 -317 -32 -334 l -89 -154 q 8 -167 -41 -167 q 84 -138 60 -167 q 109 -52 109 -109 l 109 758 l 315 758 l 315 -82 q 245 -268 315 -203 q 47 -334 176 -334 m 366 842 q 208 961 260 905 q 52 842 155 906 l -85 842 l -85 860 q 88 1064 43 988 l 330 1064 q 403 968 351 1029 q 504 860 455 907 l 504 842 l 366 842 z "},"Ķ":{"ha":922,"x_min":125,"x_max":922,"o":"m 922 0 l 684 0 l 424 418 l 335 354 l 335 0 l 125 0 l 125 991 l 335 991 l 335 538 l 418 654 l 686 991 l 920 991 l 574 553 l 922 0 m 343 -289 q 367 -192 353 -256 q 385 -85 380 -128 l 576 -85 l 576 -98 q 464 -307 526 -212 l 343 -307 l 343 -289 z "},"ķ":{"ha":861,"x_min":109,"x_max":861,"o":"m 307 412 l 397 528 l 610 758 l 843 758 l 542 429 l 861 0 l 623 0 l 404 307 l 315 236 l 315 0 l 109 0 l 109 1055 l 315 1055 l 315 585 l 304 412 l 307 412 m 317 -289 q 340 -192 327 -256 q 359 -85 353 -128 l 550 -85 l 550 -98 q 437 -307 499 -212 l 317 -307 l 317 -289 z "},"ĸ":{"ha":861,"x_min":109,"x_max":861,"o":"m 314 395 l 410 510 l 623 758 l 843 758 l 545 411 l 861 0 l 625 0 l 412 289 l 315 228 l 315 0 l 109 0 l 109 758 l 315 758 l 315 559 l 313 450 l 311 395 l 314 395 z "},"Ĺ":{"ha":785,"x_min":125,"x_max":737,"o":"m 125 0 l 125 991 l 335 991 l 335 174 l 737 174 l 737 0 l 125 0 m 181 1071 l 181 1089 q 340 1293 298 1225 l 572 1293 l 572 1279 q 452 1174 537 1244 q 319 1071 367 1105 l 181 1071 z "},"ĺ":{"ha":424,"x_min":109,"x_max":513,"o":"m 315 0 l 109 0 l 109 1055 l 315 1055 l 315 0 m 121 1109 l 121 1128 q 281 1332 238 1263 l 513 1332 l 513 1318 q 392 1213 477 1282 q 259 1109 307 1143 l 121 1109 z "},"Ļ":{"ha":785,"x_min":125,"x_max":737,"o":"m 125 0 l 125 991 l 335 991 l 335 174 l 737 174 l 737 0 l 125 0 m 288 -289 q 311 -192 298 -256 q 330 -85 324 -128 l 521 -85 l 521 -98 q 408 -307 470 -212 l 288 -307 l 288 -289 z "},"ļ":{"ha":424,"x_min":67,"x_max":315,"o":"m 315 0 l 109 0 l 109 1055 l 315 1055 l 315 0 m 67 -289 q 91 -192 77 -256 q 109 -85 104 -128 l 300 -85 l 300 -98 q 188 -307 250 -212 l 67 -307 l 67 -289 z "},"Ľ":{"ha":785,"x_min":125,"x_max":737,"o":"m 125 0 l 125 991 l 335 991 l 335 174 l 737 174 l 737 0 l 125 0 m 490 788 q 514 885 500 821 q 532 992 527 949 l 724 992 l 724 979 q 611 770 669 859 l 490 770 l 490 788 z "},"ľ":{"ha":424,"x_min":109,"x_max":611,"o":"m 315 0 l 109 0 l 109 1055 l 315 1055 l 315 0 m 378 851 q 401 948 388 884 q 420 1055 414 1012 l 611 1055 l 611 1042 q 498 833 557 922 l 378 833 l 378 851 z "},"Ŀ":{"ha":785,"x_min":125,"x_max":737,"o":"m 125 0 l 125 991 l 335 991 l 335 174 l 737 174 l 737 0 l 125 0 m 479 509 q 591 610 479 610 q 704 509 704 610 q 676 434 704 461 q 591 408 648 408 q 479 509 479 408 z "},"ŀ":{"ha":595,"x_min":109,"x_max":623,"o":"m 315 0 l 109 0 l 109 1055 l 315 1055 l 315 0 m 398 471 q 511 572 398 572 q 623 471 623 572 q 595 396 623 423 q 511 370 567 370 q 398 471 398 370 z "},"Ł":{"ha":785,"x_min":1,"x_max":737,"o":"m 125 0 l 125 334 l 78 306 l 1 439 l 125 514 l 125 991 l 335 991 l 335 642 l 432 701 l 511 568 l 335 461 l 335 174 l 737 174 l 737 0 l 125 0 z "},"ł":{"ha":458,"x_min":0,"x_max":458,"o":"m 332 631 l 379 660 l 458 526 l 332 450 l 332 0 l 125 0 l 125 323 l 77 294 l 0 428 l 125 504 l 125 1055 l 332 1055 l 332 631 z "},"Ń":{"ha":1129,"x_min":125,"x_max":1004,"o":"m 1004 0 l 737 0 l 306 750 l 300 750 q 313 467 313 551 l 313 0 l 125 0 l 125 991 l 390 991 l 821 249 l 825 249 q 815 522 815 442 l 815 991 l 1004 991 l 1004 0 m 445 1071 l 445 1089 q 604 1293 562 1225 l 836 1293 l 836 1279 q 716 1174 801 1244 q 583 1071 631 1105 l 445 1071 z "},"ń":{"ha":913,"x_min":109,"x_max":808,"o":"m 808 0 l 602 0 l 602 443 q 572 566 602 525 q 479 607 543 607 q 354 549 393 607 q 315 357 315 491 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 401 744 340 716 q 539 772 462 772 q 740 701 671 772 q 808 494 808 629 l 808 0 m 340 842 l 340 860 q 500 1064 457 996 l 732 1064 l 732 1050 q 611 945 696 1015 q 478 842 526 876 l 340 842 z "},"Ņ":{"ha":1129,"x_min":125,"x_max":1004,"o":"m 1004 0 l 737 0 l 306 750 l 300 750 q 313 467 313 551 l 313 0 l 125 0 l 125 991 l 390 991 l 821 249 l 825 249 q 815 522 815 442 l 815 991 l 1004 991 l 1004 0 m 406 -289 q 429 -192 416 -256 q 448 -85 442 -128 l 639 -85 l 639 -98 q 526 -307 588 -212 l 406 -307 l 406 -289 z "},"ņ":{"ha":913,"x_min":109,"x_max":808,"o":"m 808 0 l 602 0 l 602 443 q 572 566 602 525 q 479 607 543 607 q 354 549 393 607 q 315 357 315 491 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 401 744 340 716 q 539 772 462 772 q 740 701 671 772 q 808 494 808 629 l 808 0 m 317 -289 q 340 -192 327 -256 q 359 -85 353 -128 l 550 -85 l 550 -98 q 437 -307 499 -212 l 317 -307 l 317 -289 z "},"Ň":{"ha":1129,"x_min":125,"x_max":1004,"o":"m 1004 0 l 737 0 l 306 750 l 300 750 q 313 467 313 551 l 313 0 l 125 0 l 125 991 l 390 991 l 821 249 l 825 249 q 815 522 815 442 l 815 991 l 1004 991 l 1004 0 m 877 1293 l 877 1275 q 772 1161 820 1218 q 703 1071 724 1105 l 461 1071 q 405 1147 441 1103 q 288 1275 368 1192 l 288 1293 l 425 1293 q 581 1174 525 1230 q 739 1293 637 1233 l 877 1293 z "},"ň":{"ha":913,"x_min":109,"x_max":808,"o":"m 808 0 l 602 0 l 602 443 q 572 566 602 525 q 479 607 543 607 q 354 549 393 607 q 315 357 315 491 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 401 744 340 716 q 539 772 462 772 q 740 701 671 772 q 808 494 808 629 l 808 0 m 768 1064 l 768 1046 q 664 932 711 989 q 595 842 616 876 l 353 842 q 296 918 333 873 q 179 1046 260 962 l 179 1064 l 317 1064 q 472 945 416 1001 q 631 1064 529 1004 l 768 1064 z "},"ŉ":{"ha":1082,"x_min":4,"x_max":978,"o":"m 978 0 l 771 0 l 771 443 q 742 566 771 525 q 649 607 713 607 q 524 549 562 607 q 485 357 485 491 l 485 0 l 278 0 l 278 758 l 436 758 l 464 661 l 475 661 q 571 744 510 716 q 709 772 631 772 q 909 701 841 772 q 978 494 978 629 l 978 0 m 262 991 l 272 977 q 153 652 238 843 l 4 652 q 72 991 51 852 l 262 991 z "},"Ŋ":{"ha":1129,"x_min":125,"x_max":1004,"o":"m 689 -292 q 555 -277 612 -292 l 555 -102 q 668 -115 618 -115 q 782 -84 742 -115 q 828 3 822 -54 l 306 750 l 300 750 q 313 467 313 551 l 313 0 l 125 0 l 125 991 l 390 991 l 821 387 l 825 387 l 820 490 q 815 661 815 564 l 815 991 l 1004 991 l 1004 0 q 923 -216 1004 -140 q 689 -292 841 -292 z "},"ŋ":{"ha":913,"x_min":109,"x_max":808,"o":"m 562 -334 q 437 -317 490 -334 l 437 -154 q 518 -167 477 -167 q 602 -52 602 -167 l 602 458 q 479 607 602 607 q 354 549 393 607 q 315 357 315 491 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 307 661 q 401 744 341 715 q 539 772 460 772 q 740 701 671 772 q 808 494 808 629 l 808 -82 q 745 -269 808 -203 q 562 -334 681 -334 z "},"Ō":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 324 1214 l 784 1214 l 784 1071 l 324 1071 l 324 1214 z "},"ō":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 200 985 l 660 985 l 660 842 l 200 842 l 200 985 z "},"Ŏ":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 821 1300 q 739 1133 813 1196 q 551 1071 664 1071 q 363 1133 433 1071 q 288 1300 293 1194 l 403 1300 q 421 1250 406 1268 q 466 1223 437 1232 q 553 1215 495 1215 q 703 1300 692 1215 l 821 1300 z "},"ŏ":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 696 1071 q 613 904 688 966 q 426 842 538 842 q 238 903 308 842 q 162 1071 168 965 l 277 1071 q 296 1021 280 1039 q 341 994 312 1002 q 427 986 370 986 q 578 1071 567 986 l 696 1071 z "},"Ő":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 324 1071 l 324 1089 q 404 1206 366 1147 q 456 1293 441 1265 l 660 1293 l 660 1279 q 561 1175 638 1243 q 433 1071 484 1107 l 324 1071 m 593 1071 l 593 1089 q 726 1293 688 1219 l 930 1293 l 930 1279 q 845 1188 913 1250 q 703 1071 777 1126 l 593 1071 z "},"ő":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 189 842 l 189 860 q 269 977 231 918 q 321 1064 307 1036 l 525 1064 l 525 1050 q 426 946 503 1014 q 298 842 349 878 l 189 842 m 458 842 l 458 860 q 591 1064 553 990 l 795 1064 l 795 1050 q 710 959 778 1021 q 568 842 642 897 l 458 842 z "},"Œ":{"ha":1352,"x_min":81,"x_max":1270,"o":"m 1270 0 l 677 0 q 604 -10 652 -6 q 525 -14 555 -14 q 195 120 309 -14 q 81 498 81 254 q 196 876 81 745 q 526 1007 311 1007 q 612 1002 568 1007 q 681 991 657 998 l 1270 991 l 1270 819 l 888 819 l 888 602 l 1244 602 l 1244 429 l 888 429 l 888 174 l 1270 174 l 1270 0 m 526 832 q 355 747 414 832 q 297 497 297 662 q 355 247 297 332 q 525 163 414 163 q 610 170 569 163 q 677 189 652 177 l 677 804 q 609 825 654 817 q 526 832 564 832 z "},"œ":{"ha":1358,"x_min":62,"x_max":1299,"o":"m 981 -14 q 696 92 797 -14 q 431 -14 600 -14 q 237 34 321 -14 q 107 171 153 81 q 62 380 62 260 q 158 670 62 568 q 429 772 254 772 q 573 746 505 772 q 689 667 641 719 q 949 772 787 772 q 1206 681 1114 772 q 1299 428 1299 589 l 1299 328 l 793 328 l 793 322 q 848 188 798 236 q 989 140 899 140 q 1124 155 1061 140 q 1255 200 1187 169 l 1255 40 q 1136 0 1200 14 q 981 -14 1072 -14 m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 953 625 q 847 586 889 625 q 799 465 805 547 l 1104 465 q 1063 583 1103 541 q 953 625 1023 625 z "},"Ŕ":{"ha":917,"x_min":125,"x_max":917,"o":"m 335 551 l 403 551 q 550 585 503 551 q 597 689 597 618 q 549 789 597 760 q 399 819 500 819 l 335 819 l 335 551 m 335 380 l 335 0 l 125 0 l 125 991 l 414 991 q 713 918 616 991 q 810 694 810 844 q 762 539 810 607 q 625 432 713 471 q 917 0 849 98 l 684 0 l 447 380 l 335 380 m 323 1071 l 323 1089 q 483 1293 440 1225 l 715 1293 l 715 1279 q 594 1174 680 1244 q 461 1071 509 1105 l 323 1071 z "},"ŕ":{"ha":631,"x_min":109,"x_max":621,"o":"m 532 772 q 602 766 574 772 l 586 572 q 525 579 561 579 q 371 528 426 579 q 315 386 315 477 l 315 0 l 109 0 l 109 758 l 265 758 l 296 631 l 306 631 q 401 733 341 694 q 532 772 461 772 m 229 842 l 229 860 q 389 1064 346 996 l 621 1064 l 621 1050 q 500 945 585 1015 q 367 842 415 876 l 229 842 z "},"Ŗ":{"ha":917,"x_min":125,"x_max":917,"o":"m 335 551 l 403 551 q 550 585 503 551 q 597 689 597 618 q 549 789 597 760 q 399 819 500 819 l 335 819 l 335 551 m 335 380 l 335 0 l 125 0 l 125 991 l 414 991 q 713 918 616 991 q 810 694 810 844 q 762 539 810 607 q 625 432 713 471 q 917 0 849 98 l 684 0 l 447 380 l 335 380 m 359 -289 q 383 -192 370 -256 q 401 -85 396 -128 l 593 -85 l 593 -98 q 480 -307 542 -212 l 359 -307 l 359 -289 z "},"ŗ":{"ha":631,"x_min":67,"x_max":602,"o":"m 532 772 q 602 766 574 772 l 586 572 q 525 579 561 579 q 371 528 426 579 q 315 386 315 477 l 315 0 l 109 0 l 109 758 l 265 758 l 296 631 l 306 631 q 401 733 341 694 q 532 772 461 772 m 67 -289 q 91 -192 77 -256 q 109 -85 104 -128 l 300 -85 l 300 -98 q 188 -307 250 -212 l 67 -307 l 67 -289 z "},"Ř":{"ha":917,"x_min":125,"x_max":917,"o":"m 335 551 l 403 551 q 550 585 503 551 q 597 689 597 618 q 549 789 597 760 q 399 819 500 819 l 335 819 l 335 551 m 335 380 l 335 0 l 125 0 l 125 991 l 414 991 q 713 918 616 991 q 810 694 810 844 q 762 539 810 607 q 625 432 713 471 q 917 0 849 98 l 684 0 l 447 380 l 335 380 m 750 1293 l 750 1275 q 645 1161 693 1218 q 576 1071 597 1105 l 334 1071 q 278 1147 315 1103 q 161 1275 241 1192 l 161 1293 l 298 1293 q 454 1174 398 1230 q 612 1293 511 1233 l 750 1293 z "},"ř":{"ha":631,"x_min":56,"x_max":646,"o":"m 532 772 q 602 766 574 772 l 586 572 q 525 579 561 579 q 371 528 426 579 q 315 386 315 477 l 315 0 l 109 0 l 109 758 l 265 758 l 296 631 l 306 631 q 401 733 341 694 q 532 772 461 772 m 646 1064 l 646 1046 q 541 932 589 989 q 472 842 493 876 l 230 842 q 174 918 210 873 q 56 1046 137 962 l 56 1064 l 194 1064 q 349 945 294 1001 q 508 1064 406 1004 l 646 1064 z "},"Ś":{"ha":765,"x_min":64,"x_max":710,"o":"m 710 275 q 613 64 710 141 q 345 -14 517 -14 q 64 46 186 -14 l 64 241 q 234 178 164 197 q 361 160 303 160 q 467 186 430 160 q 504 265 504 213 q 488 317 504 294 q 440 361 471 340 q 311 428 408 382 q 175 510 220 471 q 102 602 130 549 q 75 724 75 654 q 164 930 75 855 q 411 1006 254 1006 q 558 987 488 1006 q 705 936 629 969 l 637 772 q 506 818 558 805 q 404 831 454 831 q 313 803 345 831 q 281 730 281 775 q 294 682 281 703 q 335 642 307 661 q 468 572 363 623 q 659 439 607 506 q 710 275 710 372 m 278 1071 l 278 1089 q 437 1293 395 1225 l 669 1293 l 669 1279 q 549 1174 634 1244 q 416 1071 464 1105 l 278 1071 z "},"ś":{"ha":690,"x_min":62,"x_max":637,"o":"m 637 225 q 556 47 637 109 q 314 -14 475 -14 q 173 -2 231 -14 q 64 31 115 9 l 64 201 q 194 156 121 174 q 321 138 266 138 q 433 203 433 138 q 418 242 433 227 q 367 277 404 258 q 269 322 330 296 q 141 390 182 359 q 81 461 100 421 q 62 561 62 502 q 141 717 62 662 q 363 772 219 772 q 629 713 500 772 l 567 564 q 460 604 510 588 q 359 619 411 619 q 268 570 268 619 q 297 522 268 542 q 427 461 327 501 q 557 394 515 425 q 618 322 598 363 q 637 225 637 281 m 232 842 l 232 860 q 391 1064 349 996 l 623 1064 l 623 1050 q 503 945 588 1015 q 370 842 418 876 l 232 842 z "},"Ŝ":{"ha":765,"x_min":64,"x_max":710,"o":"m 710 275 q 613 64 710 141 q 345 -14 517 -14 q 64 46 186 -14 l 64 241 q 234 178 164 197 q 361 160 303 160 q 467 186 430 160 q 504 265 504 213 q 488 317 504 294 q 440 361 471 340 q 311 428 408 382 q 175 510 220 471 q 102 602 130 549 q 75 724 75 654 q 164 930 75 855 q 411 1006 254 1006 q 558 987 488 1006 q 705 936 629 969 l 637 772 q 506 818 558 805 q 404 831 454 831 q 313 803 345 831 q 281 730 281 775 q 294 682 281 703 q 335 642 307 661 q 468 572 363 623 q 659 439 607 506 q 710 275 710 372 m 563 1071 q 404 1190 456 1134 q 249 1071 351 1135 l 111 1071 l 111 1089 q 285 1293 239 1217 l 527 1293 q 600 1197 548 1258 q 701 1089 652 1137 l 701 1071 l 563 1071 z "},"ŝ":{"ha":690,"x_min":62,"x_max":652,"o":"m 637 225 q 556 47 637 109 q 314 -14 475 -14 q 173 -2 231 -14 q 64 31 115 9 l 64 201 q 194 156 121 174 q 321 138 266 138 q 433 203 433 138 q 418 242 433 227 q 367 277 404 258 q 269 322 330 296 q 141 390 182 359 q 81 461 100 421 q 62 561 62 502 q 141 717 62 662 q 363 772 219 772 q 629 713 500 772 l 567 564 q 460 604 510 588 q 359 619 411 619 q 268 570 268 619 q 297 522 268 542 q 427 461 327 501 q 557 394 515 425 q 618 322 598 363 q 637 225 637 281 m 515 842 q 356 961 408 905 q 201 842 303 906 l 63 842 l 63 860 q 237 1064 191 988 l 479 1064 q 552 968 500 1029 q 652 860 604 907 l 652 842 l 515 842 z "},"Ş":{"ha":765,"x_min":64,"x_max":710,"o":"m 710 275 q 613 64 710 141 q 345 -14 517 -14 q 64 46 186 -14 l 64 241 q 234 178 164 197 q 361 160 303 160 q 467 186 430 160 q 504 265 504 213 q 488 317 504 294 q 440 361 471 340 q 311 428 408 382 q 175 510 220 471 q 102 602 130 549 q 75 724 75 654 q 164 930 75 855 q 411 1006 254 1006 q 558 987 488 1006 q 705 936 629 969 l 637 772 q 506 818 558 805 q 404 831 454 831 q 313 803 345 831 q 281 730 281 775 q 294 682 281 703 q 335 642 307 661 q 468 572 363 623 q 659 439 607 506 q 710 275 710 372 m 524 -170 q 472 -295 524 -256 q 314 -334 421 -334 q 215 -319 261 -334 l 215 -205 q 264 -215 233 -210 q 312 -220 295 -220 q 361 -178 361 -220 q 248 -104 361 -121 l 301 0 l 432 0 l 414 -41 q 494 -92 464 -58 q 524 -170 524 -126 z "},"ş":{"ha":690,"x_min":62,"x_max":637,"o":"m 637 225 q 556 47 637 109 q 314 -14 475 -14 q 173 -2 231 -14 q 64 31 115 9 l 64 201 q 194 156 121 174 q 321 138 266 138 q 433 203 433 138 q 418 242 433 227 q 367 277 404 258 q 269 322 330 296 q 141 390 182 359 q 81 461 100 421 q 62 561 62 502 q 141 717 62 662 q 363 772 219 772 q 629 713 500 772 l 567 564 q 460 604 510 588 q 359 619 411 619 q 268 570 268 619 q 297 522 268 542 q 427 461 327 501 q 557 394 515 425 q 618 322 598 363 q 637 225 637 281 m 488 -170 q 436 -295 488 -256 q 278 -334 385 -334 q 179 -319 225 -334 l 179 -205 q 228 -215 197 -210 q 276 -220 259 -220 q 325 -178 325 -220 q 212 -104 325 -121 l 265 0 l 396 0 l 378 -41 q 458 -92 428 -58 q 488 -170 488 -126 z "},"Š":{"ha":765,"x_min":64,"x_max":710,"o":"m 710 275 q 613 64 710 141 q 345 -14 517 -14 q 64 46 186 -14 l 64 241 q 234 178 164 197 q 361 160 303 160 q 467 186 430 160 q 504 265 504 213 q 488 317 504 294 q 440 361 471 340 q 311 428 408 382 q 175 510 220 471 q 102 602 130 549 q 75 724 75 654 q 164 930 75 855 q 411 1006 254 1006 q 558 987 488 1006 q 705 936 629 969 l 637 772 q 506 818 558 805 q 404 831 454 831 q 313 803 345 831 q 281 730 281 775 q 294 682 281 703 q 335 642 307 661 q 468 572 363 623 q 659 439 607 506 q 710 275 710 372 m 701 1293 l 701 1275 q 596 1161 644 1218 q 527 1071 548 1105 l 285 1071 q 229 1147 265 1103 q 111 1275 192 1192 l 111 1293 l 249 1293 q 404 1174 349 1230 q 563 1293 461 1233 l 701 1293 z "},"š":{"ha":690,"x_min":62,"x_max":659,"o":"m 637 225 q 556 47 637 109 q 314 -14 475 -14 q 173 -2 231 -14 q 64 31 115 9 l 64 201 q 194 156 121 174 q 321 138 266 138 q 433 203 433 138 q 418 242 433 227 q 367 277 404 258 q 269 322 330 296 q 141 390 182 359 q 81 461 100 421 q 62 561 62 502 q 141 717 62 662 q 363 772 219 772 q 629 713 500 772 l 567 564 q 460 604 510 588 q 359 619 411 619 q 268 570 268 619 q 297 522 268 542 q 427 461 327 501 q 557 394 515 425 q 618 322 598 363 q 637 225 637 281 m 659 1064 l 659 1046 q 554 932 602 989 q 486 842 507 876 l 243 842 q 187 918 224 873 q 70 1046 151 962 l 70 1064 l 208 1064 q 363 945 307 1001 q 522 1064 420 1004 l 659 1064 z "},"Ț":{"ha":804,"x_min":28,"x_max":777,"o":"m 507 0 l 297 0 l 297 817 l 28 817 l 28 991 l 777 991 l 777 817 l 507 817 l 507 0 m 265 -289 q 289 -192 275 -256 q 307 -85 302 -128 l 498 -85 l 498 -98 q 386 -307 448 -212 l 265 -307 l 265 -289 z "},"ț":{"ha":603,"x_min":32,"x_max":558,"o":"m 428 151 q 558 175 482 151 l 558 21 q 368 -14 481 -14 q 188 49 244 -14 q 131 237 131 112 l 131 603 l 32 603 l 32 690 l 146 760 l 205 920 l 338 920 l 338 758 l 550 758 l 550 603 l 338 603 l 338 237 q 362 172 338 193 q 428 151 387 151 m 203 -289 q 227 -192 214 -256 q 245 -85 240 -128 l 437 -85 l 437 -98 q 324 -307 386 -212 l 203 -307 l 203 -289 z "},"Ť":{"ha":804,"x_min":28,"x_max":777,"o":"m 507 0 l 297 0 l 297 817 l 28 817 l 28 991 l 777 991 l 777 817 l 507 817 l 507 0 m 698 1293 l 698 1275 q 593 1161 641 1218 q 524 1071 545 1105 l 282 1071 q 226 1147 262 1103 q 109 1275 189 1192 l 109 1293 l 246 1293 q 401 1174 346 1230 q 560 1293 458 1233 l 698 1293 z "},"ť":{"ha":603,"x_min":32,"x_max":654,"o":"m 428 151 q 558 175 482 151 l 558 21 q 368 -14 481 -14 q 188 49 244 -14 q 131 237 131 112 l 131 603 l 32 603 l 32 690 l 146 760 l 205 920 l 338 920 l 338 758 l 550 758 l 550 603 l 338 603 l 338 237 q 362 172 338 193 q 428 151 387 151 m 420 865 q 444 962 431 898 q 463 1069 457 1025 l 654 1069 l 654 1055 q 541 847 600 936 l 420 847 l 420 865 z "},"Ŧ":{"ha":804,"x_min":28,"x_max":777,"o":"m 507 0 l 297 0 l 297 404 l 129 404 l 129 576 l 297 576 l 297 817 l 28 817 l 28 991 l 777 991 l 777 817 l 507 817 l 507 576 l 675 576 l 675 404 l 507 404 l 507 0 z "},"ŧ":{"ha":603,"x_min":32,"x_max":558,"o":"m 428 151 q 558 175 482 151 l 558 21 q 472 -5 523 4 q 372 -14 422 -14 q 189 48 246 -14 q 131 237 131 110 l 131 338 l 45 338 l 45 472 l 131 472 l 131 603 l 32 603 l 32 690 l 146 760 l 205 920 l 338 920 l 338 758 l 550 758 l 550 603 l 338 603 l 338 472 l 526 472 l 526 338 l 338 338 l 338 237 q 362 172 338 193 q 428 151 387 151 z "},"Ũ":{"ha":1050,"x_min":118,"x_max":932,"o":"m 932 991 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 385 q 374 216 328 270 q 526 163 420 163 q 676 217 629 163 q 722 386 722 271 l 722 991 l 932 991 m 416 1142 q 375 1124 395 1142 q 347 1069 356 1106 l 246 1069 q 302 1223 254 1168 q 431 1279 351 1279 q 485 1268 458 1279 q 538 1243 512 1257 q 589 1219 564 1230 q 639 1208 614 1208 q 679 1226 660 1208 q 707 1280 699 1244 l 808 1280 q 752 1126 801 1182 q 624 1071 703 1071 q 569 1082 596 1071 q 516 1106 543 1093 q 465 1131 490 1120 q 416 1142 440 1142 z "},"ũ":{"ha":913,"x_min":104,"x_max":804,"o":"m 646 0 l 618 97 l 607 97 q 513 15 574 44 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 0 l 646 0 m 343 913 q 303 895 322 913 q 275 840 283 877 l 174 840 q 230 994 181 939 q 358 1050 278 1050 q 413 1039 386 1050 q 466 1014 439 1027 q 517 990 492 1001 q 566 979 542 979 q 607 997 587 979 q 635 1051 626 1015 l 736 1051 q 679 897 728 953 q 551 842 630 842 q 497 853 524 842 q 444 877 470 864 q 393 902 418 890 q 343 913 368 913 z "},"Ū":{"ha":1050,"x_min":118,"x_max":932,"o":"m 932 991 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 385 q 374 216 328 270 q 526 163 420 163 q 676 217 629 163 q 722 386 722 271 l 722 991 l 932 991 m 296 1214 l 756 1214 l 756 1071 l 296 1071 l 296 1214 z "},"ū":{"ha":913,"x_min":104,"x_max":804,"o":"m 646 0 l 618 97 l 607 97 q 513 15 574 44 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 0 l 646 0 m 224 985 l 684 985 l 684 842 l 224 842 l 224 985 z "},"Ŭ":{"ha":1050,"x_min":118,"x_max":932,"o":"m 932 991 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 385 q 374 216 328 270 q 526 163 420 163 q 676 217 629 163 q 722 386 722 271 l 722 991 l 932 991 m 792 1300 q 709 1133 784 1196 q 522 1071 635 1071 q 334 1133 404 1071 q 258 1300 264 1194 l 374 1300 q 392 1250 376 1268 q 437 1223 408 1232 q 524 1215 466 1215 q 674 1300 663 1215 l 792 1300 z "},"ŭ":{"ha":913,"x_min":104,"x_max":804,"o":"m 646 0 l 618 97 l 607 97 q 513 15 574 44 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 0 l 646 0 m 721 1071 q 638 904 713 966 q 451 842 564 842 q 263 903 333 842 q 187 1071 193 965 l 302 1071 q 321 1021 305 1039 q 366 994 337 1002 q 452 986 395 986 q 603 1071 592 986 l 721 1071 z "},"Ů":{"ha":1050,"x_min":118,"x_max":932,"o":"m 932 991 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 385 q 374 216 328 270 q 526 163 420 163 q 676 217 629 163 q 722 386 722 271 l 722 991 l 932 991 m 696 1232 q 648 1114 696 1159 q 524 1069 600 1069 q 401 1113 448 1069 q 355 1231 355 1156 q 401 1348 355 1304 q 524 1392 447 1392 q 647 1347 598 1392 q 696 1232 696 1302 m 589 1231 q 570 1279 589 1261 q 524 1296 552 1296 q 477 1279 495 1296 q 458 1231 458 1261 q 475 1183 458 1200 q 524 1165 491 1165 q 570 1183 552 1165 q 589 1231 589 1200 z "},"ů":{"ha":913,"x_min":104,"x_max":804,"o":"m 646 0 l 618 97 l 607 97 q 513 15 574 44 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 0 l 646 0 m 624 1003 q 576 885 624 930 q 452 840 528 840 q 330 884 376 840 q 283 1002 283 927 q 329 1119 283 1075 q 452 1162 375 1162 q 575 1118 526 1162 q 624 1003 624 1073 m 517 1002 q 498 1049 517 1032 q 452 1067 480 1067 q 405 1049 423 1067 q 387 1002 387 1032 q 403 954 387 971 q 452 936 419 936 q 498 954 480 936 q 517 1002 517 971 z "},"Ű":{"ha":1050,"x_min":118,"x_max":932,"o":"m 932 991 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 385 q 374 216 328 270 q 526 163 420 163 q 676 217 629 163 q 722 386 722 271 l 722 991 l 932 991 m 299 1071 l 299 1089 q 379 1206 341 1147 q 431 1293 416 1265 l 635 1293 l 635 1279 q 536 1175 613 1243 q 408 1071 458 1107 l 299 1071 m 568 1071 l 568 1089 q 701 1293 663 1219 l 905 1293 l 905 1279 q 820 1188 888 1250 q 678 1071 751 1126 l 568 1071 z "},"ű":{"ha":913,"x_min":104,"x_max":839,"o":"m 646 0 l 618 97 l 607 97 q 513 15 574 44 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 0 l 646 0 m 233 842 l 233 860 q 313 977 275 918 q 365 1064 351 1036 l 569 1064 l 569 1050 q 470 946 547 1014 q 342 842 393 878 l 233 842 m 503 842 l 503 860 q 635 1064 597 990 l 839 1064 l 839 1050 q 754 959 822 1021 q 612 842 686 897 l 503 842 z "},"Ų":{"ha":1050,"x_min":118,"x_max":932,"o":"m 932 991 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 385 q 374 216 328 270 q 526 163 420 163 q 676 217 629 163 q 722 386 722 271 l 722 991 l 932 991 m 546 -154 q 561 -196 546 -182 q 600 -210 576 -210 q 678 -197 637 -210 l 678 -318 q 572 -334 623 -334 q 449 -291 496 -334 q 403 -178 403 -248 q 429 -92 403 -132 q 525 0 454 -52 l 646 0 q 572 -82 599 -45 q 546 -154 546 -119 z "},"ų":{"ha":913,"x_min":104,"x_max":804,"o":"m 646 0 l 618 97 l 607 97 q 513 15 574 44 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 0 l 646 0 m 665 -154 q 681 -196 665 -182 q 720 -210 696 -210 q 798 -197 757 -210 l 798 -318 q 692 -334 742 -334 q 569 -291 615 -334 q 522 -178 522 -248 q 548 -92 522 -132 q 644 0 574 -52 l 766 0 q 692 -82 718 -45 q 665 -154 665 -119 z "},"Ŵ":{"ha":1343,"x_min":0,"x_max":1343,"o":"m 1090 0 l 851 0 l 717 521 q 691 636 709 549 q 671 753 673 723 q 650 635 667 716 q 625 519 634 554 l 492 0 l 253 0 l 0 991 l 207 991 l 334 450 q 382 191 367 300 q 400 310 386 229 q 428 436 415 391 l 572 991 l 771 991 l 916 436 q 939 322 925 399 q 961 191 954 245 q 983 322 968 243 q 1010 450 998 401 l 1136 991 l 1343 991 l 1090 0 m 828 1071 q 669 1190 722 1134 q 514 1071 616 1135 l 376 1071 l 376 1089 q 550 1293 505 1217 l 792 1293 q 865 1197 813 1258 q 966 1089 917 1137 l 966 1071 l 828 1071 z "},"ŵ":{"ha":1189,"x_min":14,"x_max":1175,"o":"m 732 0 l 673 265 l 595 600 l 590 600 l 452 0 l 229 0 l 14 758 l 220 758 l 307 422 q 350 174 328 332 l 354 174 q 378 337 357 225 l 389 395 l 482 758 l 710 758 l 799 395 q 807 351 802 380 q 819 289 813 321 q 828 224 824 256 q 833 174 833 193 l 838 174 q 859 308 844 222 q 882 422 875 393 l 972 758 l 1175 758 l 957 0 l 732 0 m 751 842 q 593 961 645 905 q 437 842 540 906 l 300 842 l 300 860 q 473 1064 428 988 l 715 1064 q 788 968 736 1029 q 889 860 840 907 l 889 842 l 751 842 z "},"Ŷ":{"ha":867,"x_min":0,"x_max":867,"o":"m 433 583 l 640 991 l 867 991 l 538 386 l 538 0 l 329 0 l 329 379 l 0 991 l 228 991 l 433 583 m 591 1071 q 433 1190 485 1134 q 277 1071 380 1135 l 140 1071 l 140 1089 q 313 1293 268 1217 l 555 1293 q 628 1197 576 1258 q 729 1089 680 1137 l 729 1071 l 591 1071 z "},"ŷ":{"ha":790,"x_min":0,"x_max":790,"o":"m 0 758 l 227 758 l 370 332 q 395 200 388 276 l 399 200 q 428 332 406 270 l 568 758 l 790 758 l 469 -97 q 343 -275 425 -216 q 153 -334 262 -334 q 47 -322 99 -334 l 47 -158 q 129 -167 85 -167 q 225 -133 184 -167 q 289 -32 266 -100 l 301 5 l 0 758 m 553 842 q 395 961 447 905 q 239 842 342 906 l 102 842 l 102 860 q 275 1064 230 988 l 517 1064 q 590 968 538 1029 q 691 860 642 907 l 691 842 l 553 842 z "},"Ÿ":{"ha":867,"x_min":0,"x_max":867,"o":"m 433 583 l 640 991 l 867 991 l 538 386 l 538 0 l 329 0 l 329 379 l 0 991 l 228 991 l 433 583 m 201 1182 q 227 1250 201 1226 q 296 1274 252 1274 q 366 1249 340 1274 q 391 1182 391 1223 q 366 1117 391 1141 q 296 1092 340 1092 q 227 1116 252 1092 q 201 1182 201 1139 m 475 1182 q 502 1252 475 1230 q 570 1274 530 1274 q 641 1249 614 1274 q 667 1182 667 1225 q 640 1116 667 1141 q 570 1092 614 1092 q 502 1114 530 1092 q 475 1182 475 1136 z "},"Ź":{"ha":804,"x_min":33,"x_max":771,"o":"m 771 0 l 33 0 l 33 136 l 509 818 l 46 818 l 46 991 l 758 991 l 758 856 l 283 174 l 771 174 l 771 0 m 278 1071 l 278 1089 q 437 1293 395 1225 l 669 1293 l 669 1279 q 549 1174 634 1244 q 416 1071 464 1105 l 278 1071 z "},"ź":{"ha":677,"x_min":37,"x_max":636,"o":"m 636 0 l 37 0 l 37 122 l 389 600 l 58 600 l 58 758 l 624 758 l 624 624 l 282 158 l 636 158 l 636 0 m 239 842 l 239 860 q 398 1064 355 996 l 630 1064 l 630 1050 q 510 945 595 1015 q 376 842 425 876 l 239 842 z "},"Ż":{"ha":804,"x_min":33,"x_max":771,"o":"m 771 0 l 33 0 l 33 136 l 509 818 l 46 818 l 46 991 l 758 991 l 758 856 l 283 174 l 771 174 l 771 0 m 289 1183 q 401 1284 289 1284 q 514 1183 514 1284 q 486 1108 514 1135 q 401 1082 458 1082 q 289 1183 289 1082 z "},"ż":{"ha":677,"x_min":37,"x_max":636,"o":"m 636 0 l 37 0 l 37 122 l 389 600 l 58 600 l 58 758 l 624 758 l 624 624 l 282 158 l 636 158 l 636 0 m 223 954 q 336 1055 223 1055 q 448 954 448 1055 q 420 879 448 906 q 336 852 392 852 q 223 954 223 852 z "},"Ž":{"ha":804,"x_min":33,"x_max":771,"o":"m 771 0 l 33 0 l 33 136 l 509 818 l 46 818 l 46 991 l 758 991 l 758 856 l 283 174 l 771 174 l 771 0 m 705 1293 l 705 1275 q 601 1161 648 1218 q 532 1071 553 1105 l 290 1071 q 233 1147 270 1103 q 116 1275 197 1192 l 116 1293 l 254 1293 q 409 1174 353 1230 q 568 1293 466 1233 l 705 1293 z "},"ž":{"ha":677,"x_min":37,"x_max":646,"o":"m 636 0 l 37 0 l 37 122 l 389 600 l 58 600 l 58 758 l 624 758 l 624 624 l 282 158 l 636 158 l 636 0 m 646 1064 l 646 1046 q 541 932 589 989 q 472 842 493 876 l 230 842 q 174 918 210 873 q 56 1046 137 962 l 56 1064 l 194 1064 q 349 945 294 1001 q 508 1064 406 1004 l 646 1064 z "},"ſ":{"ha":532,"x_min":109,"x_max":564,"o":"m 401 899 q 315 806 315 899 l 315 0 l 109 0 l 109 814 q 172 1003 109 943 q 375 1063 236 1063 q 564 1031 482 1063 l 515 879 q 401 899 453 899 z "},"ƒ":{"ha":793,"x_min":134,"x_max":726,"o":"m 505 -82 q 441 -268 505 -202 q 258 -334 378 -334 q 134 -317 186 -334 l 134 -154 q 214 -167 174 -167 q 298 -52 298 -167 l 298 546 l 184 546 l 184 646 l 298 701 l 298 757 q 358 945 298 885 q 549 1006 417 1006 q 726 974 650 1006 l 677 822 q 579 842 622 842 q 505 749 505 842 l 505 701 l 660 701 l 660 546 l 505 546 l 505 -82 z "},"Ǻ":{"ha":958,"x_min":0,"x_max":958,"o":"m 650 991 q 618 892 650 934 l 958 0 l 733 0 l 661 224 l 298 224 l 225 0 l 0 0 l 339 892 q 310 990 310 931 q 356 1108 310 1065 q 478 1152 402 1152 q 601 1108 552 1152 q 650 991 650 1064 m 616 400 l 547 596 q 479 799 489 752 q 420 618 467 751 l 345 400 l 616 400 m 396 1189 l 396 1200 q 463 1269 427 1228 q 514 1331 499 1310 l 746 1331 l 746 1322 q 668 1265 730 1305 q 533 1189 606 1226 l 396 1189 m 543 990 q 525 1038 543 1021 q 478 1055 507 1055 q 431 1038 450 1055 q 412 990 412 1021 q 471 925 412 928 l 484 925 q 526 944 509 926 q 543 990 543 961 z "},"ǻ":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 319 1189 l 319 1200 q 387 1269 351 1228 q 437 1331 422 1310 l 669 1331 l 669 1322 q 600 1271 655 1306 q 457 1189 544 1235 l 319 1189 m 597 975 q 549 857 597 902 q 425 812 501 812 q 303 856 349 812 q 257 974 257 899 q 303 1091 257 1047 q 425 1135 349 1135 q 549 1090 500 1135 q 597 975 597 1045 m 490 974 q 472 1022 490 1004 q 425 1039 454 1039 q 378 1022 397 1039 q 359 974 359 1004 q 376 926 359 943 q 425 908 393 908 q 472 926 454 908 q 490 974 490 943 z "},"Ǽ":{"ha":1322,"x_min":0,"x_max":1240,"o":"m 1240 0 l 648 0 l 648 236 l 315 236 l 214 0 l 0 0 l 444 991 l 1240 991 l 1240 819 l 859 819 l 859 602 l 1215 602 l 1215 429 l 859 429 l 859 174 l 1240 174 l 1240 0 m 392 412 l 648 412 l 648 812 l 562 812 l 392 412 m 681 1071 l 681 1089 q 840 1293 798 1225 l 1072 1293 l 1072 1279 q 952 1174 1037 1244 q 819 1071 867 1105 l 681 1071 z "},"ǽ":{"ha":1274,"x_min":58,"x_max":1214,"o":"m 901 -14 q 732 21 808 -14 q 607 126 656 55 q 474 17 541 47 q 300 -14 407 -14 q 124 51 191 -14 q 58 227 58 115 q 140 405 58 347 q 386 468 222 462 l 515 472 l 515 529 q 485 598 515 576 q 403 621 455 621 q 196 568 308 621 l 129 705 q 415 774 257 774 q 647 685 569 774 q 750 750 692 728 q 890 772 809 772 q 1127 679 1040 772 q 1214 428 1214 586 l 1214 328 l 724 328 q 776 190 727 239 q 913 140 825 140 q 1171 200 1046 140 l 1171 40 q 1055 0 1117 14 q 901 -14 992 -14 m 515 351 l 439 349 q 313 316 355 346 q 271 225 271 287 q 366 138 271 138 q 475 179 434 138 q 515 289 515 220 l 515 351 m 886 625 q 728 465 739 625 l 1019 465 q 982 583 1018 541 q 886 625 946 625 m 541 842 l 541 860 q 700 1064 657 996 l 932 1064 l 932 1050 q 811 945 897 1015 q 678 842 726 876 l 541 842 z "},"Ǿ":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 325 31 419 -14 l 264 -61 l 154 12 l 215 104 q 81 498 81 236 q 203 877 81 746 q 554 1007 326 1007 q 787 960 688 1007 l 844 1044 l 953 974 l 893 885 q 1025 497 1025 753 m 301 497 q 339 289 301 368 l 682 802 q 554 832 625 832 q 365 748 429 832 q 301 497 301 663 m 804 497 q 770 699 804 619 l 431 189 q 553 163 482 163 q 804 497 804 163 m 432 1071 l 432 1089 q 591 1293 549 1225 l 823 1293 l 823 1279 q 703 1174 788 1244 q 570 1071 618 1105 l 432 1071 z "},"ǿ":{"ha":860,"x_min":62,"x_max":798,"o":"m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 269 17 342 -14 l 224 -52 l 119 20 l 165 87 q 62 380 62 193 q 159 669 62 566 q 432 772 256 772 q 600 737 522 772 l 637 793 l 741 720 l 701 663 q 798 380 798 557 m 273 380 q 286 268 273 317 l 501 590 q 429 606 472 606 q 310 550 347 606 q 273 380 273 494 m 586 380 q 578 476 586 435 l 368 163 q 431 153 394 153 q 550 210 513 153 q 586 380 586 267 m 309 842 l 309 860 q 468 1064 425 996 l 700 1064 l 700 1050 q 579 945 665 1015 q 446 842 494 876 l 309 842 z "},"Ș":{"ha":765,"x_min":64,"x_max":710,"o":"m 710 275 q 613 64 710 141 q 345 -14 517 -14 q 64 46 186 -14 l 64 241 q 234 178 164 197 q 361 160 303 160 q 467 186 430 160 q 504 265 504 213 q 488 317 504 294 q 440 361 471 340 q 311 428 408 382 q 175 510 220 471 q 102 602 130 549 q 75 724 75 654 q 164 930 75 855 q 411 1006 254 1006 q 558 987 488 1006 q 705 936 629 969 l 637 772 q 506 818 558 805 q 404 831 454 831 q 313 803 345 831 q 281 730 281 775 q 294 682 281 703 q 335 642 307 661 q 468 572 363 623 q 659 439 607 506 q 710 275 710 372 m 234 -289 q 257 -192 244 -256 q 276 -85 271 -128 l 467 -85 l 467 -98 q 355 -307 416 -212 l 234 -307 l 234 -289 z "},"ș":{"ha":690,"x_min":62,"x_max":637,"o":"m 637 225 q 556 47 637 109 q 314 -14 475 -14 q 173 -2 231 -14 q 64 31 115 9 l 64 201 q 194 156 121 174 q 321 138 266 138 q 433 203 433 138 q 418 242 433 227 q 367 277 404 258 q 269 322 330 296 q 141 390 182 359 q 81 461 100 421 q 62 561 62 502 q 141 717 62 662 q 363 772 219 772 q 629 713 500 772 l 567 564 q 460 604 510 588 q 359 619 411 619 q 268 570 268 619 q 297 522 268 542 q 427 461 327 501 q 557 394 515 425 q 618 322 598 363 q 637 225 637 281 m 199 -289 q 223 -192 210 -256 q 241 -85 236 -128 l 433 -85 l 433 -98 q 320 -307 382 -212 l 199 -307 l 199 -289 z "},"ˆ":{"ha":843,"x_min":126,"x_max":715,"o":"m 578 842 q 419 961 471 905 q 264 842 366 906 l 126 842 l 126 860 q 300 1064 254 988 l 542 1064 q 615 968 563 1029 q 715 860 667 907 l 715 842 l 578 842 z "},"ˇ":{"ha":843,"x_min":126,"x_max":715,"o":"m 715 1064 l 715 1046 q 611 932 659 989 q 542 842 563 876 l 300 842 q 243 918 280 873 q 126 1046 207 962 l 126 1064 l 264 1064 q 419 945 363 1001 q 578 1064 476 1004 l 715 1064 z "},"ˉ":{"ha":843,"x_min":192,"x_max":652,"o":"m 192 985 l 652 985 l 652 842 l 192 842 l 192 985 z "},"˘":{"ha":843,"x_min":154,"x_max":688,"o":"m 688 1071 q 605 904 680 966 q 418 842 530 842 q 230 903 300 842 q 154 1071 159 965 l 269 1071 q 288 1021 272 1039 q 333 994 304 1002 q 419 986 361 986 q 570 1071 559 986 l 688 1071 z "},"˙":{"ha":424,"x_min":100,"x_max":325,"o":"m 100 954 q 212 1055 100 1055 q 325 954 325 1055 q 297 879 325 906 q 212 852 269 852 q 100 954 100 852 z "},"˚":{"ha":802,"x_min":231,"x_max":571,"o":"m 571 1003 q 523 885 571 930 q 399 840 475 840 q 277 884 323 840 q 231 1002 231 927 q 276 1119 231 1075 q 399 1162 322 1162 q 522 1118 473 1162 q 571 1003 571 1073 m 464 1002 q 446 1049 464 1032 q 399 1067 427 1067 q 352 1049 370 1067 q 334 1002 334 1032 q 350 954 334 971 q 399 936 366 936 q 446 954 427 936 q 464 1002 464 971 z "},"˛":{"ha":286,"x_min":7,"x_max":282,"o":"m 150 -154 q 165 -196 150 -182 q 204 -210 180 -210 q 282 -197 241 -210 l 282 -318 q 176 -334 227 -334 q 53 -291 100 -334 q 7 -178 7 -248 q 33 -92 7 -132 q 129 0 58 -52 l 250 0 q 176 -82 203 -45 q 150 -154 150 -119 z "},"˜":{"ha":843,"x_min":140,"x_max":703,"o":"m 310 913 q 270 895 289 913 q 241 840 250 877 l 140 840 q 196 994 148 939 q 325 1050 245 1050 q 379 1039 353 1050 q 432 1014 406 1027 q 484 990 458 1001 q 533 979 509 979 q 573 997 554 979 q 602 1051 593 1015 l 703 1051 q 646 897 695 953 q 518 842 597 842 q 464 853 490 842 q 411 877 437 864 q 359 902 385 890 q 310 913 334 913 z "},"˝":{"ha":817,"x_min":106,"x_max":711,"o":"m 106 842 l 106 860 q 185 977 148 918 q 237 1064 223 1036 l 441 1064 l 441 1050 q 342 946 420 1014 q 215 842 265 878 l 106 842 m 375 842 l 375 860 q 507 1064 469 990 l 711 1064 l 711 1050 q 626 959 694 1021 q 485 842 558 897 l 375 842 z "},"΄":{"ha":802,"x_min":319,"x_max":567,"o":"m 319 863 q 350 974 332 899 q 375 1105 368 1048 l 567 1105 l 567 1089 q 440 842 514 963 l 319 842 l 319 863 z "},"΅":{"ha":802,"x_min":126,"x_max":675,"o":"m 126 953 q 150 1023 126 1001 q 214 1044 174 1044 q 277 1023 252 1044 q 302 953 302 1001 q 277 885 302 907 q 214 863 252 863 q 150 885 174 863 q 126 953 126 907 m 497 953 q 586 1044 497 1044 q 650 1023 625 1044 q 675 953 675 1001 q 650 885 675 907 q 586 863 625 863 q 521 885 545 863 q 497 953 497 907 m 330 960 q 354 1057 340 993 q 372 1164 367 1120 l 550 1164 l 550 1150 q 424 942 511 1063 l 330 942 l 330 960 z "},"Ά":{"ha":958,"x_min":-38,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m -38 791 q -8 903 -26 828 q 18 1034 10 977 l 210 1034 l 210 1018 q 83 770 157 892 l -38 770 l -38 791 z "},"·":{"ha":396,"x_min":79,"x_max":317,"o":"m 79 489 q 110 575 79 546 q 199 604 140 604 q 286 574 255 604 q 317 489 317 545 q 286 405 317 435 q 199 374 254 374 q 111 404 142 374 q 79 489 79 434 z "},"Έ":{"ha":875,"x_min":-67,"x_max":793,"o":"m 793 0 l 222 0 l 222 991 l 793 991 l 793 819 l 432 819 l 432 602 l 768 602 l 768 429 l 432 429 l 432 174 l 793 174 l 793 0 m -67 791 q -37 903 -55 828 q -12 1034 -19 977 l 180 1034 l 180 1018 q 54 770 127 892 l -67 770 l -67 791 z "},"Ή":{"ha":1160,"x_min":-67,"x_max":1034,"o":"m 1034 0 l 825 0 l 825 428 l 432 428 l 432 0 l 222 0 l 222 991 l 432 991 l 432 603 l 825 603 l 825 991 l 1034 991 l 1034 0 m -67 791 q -37 903 -55 828 q -12 1034 -19 977 l 180 1034 l 180 1018 q 54 770 127 892 l -67 770 l -67 791 z "},"Ό":{"ha":1161,"x_min":-39,"x_max":1080,"o":"m 1080 497 q 958 119 1080 251 q 608 -14 836 -14 q 258 119 380 -14 q 136 498 136 251 q 259 877 136 746 q 610 1007 381 1007 q 959 876 838 1007 q 1080 497 1080 744 m 357 497 q 420 247 357 331 q 608 163 483 163 q 860 497 860 163 q 610 832 860 832 q 420 748 484 832 q 357 497 357 663 m -39 791 q -9 903 -27 828 q 16 1034 9 977 l 208 1034 l 208 1018 q 81 770 155 892 l -39 770 l -39 791 z "},"Ύ":{"ha":1061,"x_min":-81,"x_max":1061,"o":"m 628 583 l 835 991 l 1061 991 l 732 386 l 732 0 l 524 0 l 524 379 l 195 991 l 422 991 l 628 583 m -81 791 q -51 903 -69 828 q -26 1034 -33 977 l 166 1034 l 166 1018 q 39 770 113 892 l -81 770 l -81 791 z "},"Ώ":{"ha":1092,"x_min":-39,"x_max":1115,"o":"m 607 832 q 418 758 484 832 q 351 547 351 683 q 396 324 351 410 q 532 189 441 238 l 532 0 l 98 0 l 98 176 l 350 176 q 191 348 247 239 q 135 591 135 457 q 193 811 135 716 q 358 956 251 905 q 607 1007 465 1007 q 951 894 823 1007 q 1079 590 1079 781 q 1023 349 1079 456 q 861 176 966 241 l 1115 176 l 1115 0 l 679 0 l 679 189 q 818 326 773 238 q 863 549 863 413 q 796 758 863 684 q 607 832 729 832 m -39 791 q -9 903 -27 828 q 16 1034 9 977 l 208 1034 l 208 1018 q 81 770 155 892 l -39 770 l -39 791 z "},"ΐ":{"ha":566,"x_min":-37,"x_max":536,"o":"m 315 758 l 315 237 q 340 172 315 193 q 406 151 365 151 q 536 175 460 151 l 536 21 q 358 -14 463 -14 q 169 49 229 -14 q 109 237 109 112 l 109 758 l 315 758 m -37 953 q -13 1023 -37 1001 q 50 1044 11 1044 q 114 1023 89 1044 q 139 953 139 1001 q 114 885 139 907 q 50 863 89 863 q -13 885 11 863 q -37 953 -37 907 m 334 953 q 422 1044 334 1044 q 486 1023 461 1044 q 511 953 511 1001 q 486 885 511 907 q 422 863 461 863 q 358 885 382 863 q 334 953 334 907 m 167 960 q 190 1057 177 993 q 209 1164 203 1120 l 387 1164 l 387 1150 q 260 942 347 1063 l 167 942 l 167 960 z "},"Α":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 z "},"Β":{"ha":933,"x_min":125,"x_max":860,"o":"m 125 991 l 433 991 q 740 931 644 991 q 835 741 835 871 q 793 595 835 652 q 682 526 751 538 l 682 519 q 818 441 777 498 q 860 288 860 383 q 762 76 860 152 q 496 0 664 0 l 125 0 l 125 991 m 335 599 l 457 599 q 581 625 543 599 q 619 713 619 652 q 577 794 619 770 q 446 819 536 819 l 335 819 l 335 599 m 335 432 l 335 174 l 472 174 q 600 207 559 174 q 642 309 642 240 q 465 432 642 432 l 335 432 z "},"Γ":{"ha":779,"x_min":125,"x_max":751,"o":"m 751 991 l 751 818 l 335 818 l 335 0 l 125 0 l 125 991 l 751 991 z "},"Δ":{"ha":914,"x_min":39,"x_max":875,"o":"m 39 121 l 339 996 l 576 996 l 875 119 l 875 0 l 39 0 l 39 121 m 457 823 q 449 784 456 813 q 428 707 441 754 q 253 175 414 661 l 661 175 l 490 696 l 483 722 q 457 823 458 810 z "},"Ε":{"ha":778,"x_min":125,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 z "},"Ζ":{"ha":804,"x_min":33,"x_max":771,"o":"m 771 0 l 33 0 l 33 136 l 509 818 l 46 818 l 46 991 l 758 991 l 758 856 l 283 174 l 771 174 l 771 0 z "},"Η":{"ha":1063,"x_min":125,"x_max":937,"o":"m 937 0 l 728 0 l 728 428 l 335 428 l 335 0 l 125 0 l 125 991 l 335 991 l 335 603 l 728 603 l 728 991 l 937 991 l 937 0 z "},"Θ":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 729 590 l 729 418 l 376 418 l 376 590 l 729 590 m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 297 497 q 362 248 297 333 q 553 163 427 163 q 745 248 681 163 q 808 497 808 333 q 745 747 808 661 q 554 832 681 832 q 362 747 427 832 q 297 497 297 662 z "},"Κ":{"ha":922,"x_min":125,"x_max":922,"o":"m 922 0 l 684 0 l 424 418 l 335 354 l 335 0 l 125 0 l 125 991 l 335 991 l 335 538 l 418 654 l 686 991 l 920 991 l 574 553 l 922 0 z "},"Λ":{"ha":903,"x_min":0,"x_max":903,"o":"m 452 815 q 426 698 444 773 q 400 595 409 623 l 212 0 l 0 0 l 336 991 l 566 991 l 903 0 l 690 0 l 505 596 q 478 697 498 616 q 452 815 458 779 z "},"Μ":{"ha":1310,"x_min":125,"x_max":1185,"o":"m 545 0 l 306 778 l 300 778 q 313 461 313 541 l 313 0 l 125 0 l 125 991 l 411 991 l 646 233 l 650 233 l 899 991 l 1185 991 l 1185 0 l 989 0 l 989 469 q 990 546 989 503 q 999 777 991 589 l 993 777 l 737 0 l 545 0 z "},"Ν":{"ha":1129,"x_min":125,"x_max":1004,"o":"m 1004 0 l 737 0 l 306 750 l 300 750 q 313 467 313 551 l 313 0 l 125 0 l 125 991 l 390 991 l 821 249 l 825 249 q 815 522 815 442 l 815 991 l 1004 991 l 1004 0 z "},"Ξ":{"ha":793,"x_min":56,"x_max":737,"o":"m 139 602 l 654 602 l 654 429 l 139 429 l 139 602 m 83 991 l 710 991 l 710 819 l 83 819 l 83 991 m 737 174 l 737 0 l 56 0 l 56 174 l 737 174 z "},"Ο":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 z "},"Π":{"ha":1035,"x_min":125,"x_max":909,"o":"m 909 0 l 700 0 l 700 817 l 335 817 l 335 0 l 125 0 l 125 991 l 909 991 l 909 0 z "},"Ρ":{"ha":872,"x_min":125,"x_max":810,"o":"m 335 525 l 404 525 q 549 563 501 525 q 597 675 597 602 q 557 784 597 749 q 431 819 517 819 l 335 819 l 335 525 m 810 682 q 710 437 810 522 q 425 353 610 353 l 335 353 l 335 0 l 125 0 l 125 991 l 441 991 q 716 914 622 991 q 810 682 810 836 z "},"Σ":{"ha":823,"x_min":53,"x_max":777,"o":"m 53 0 l 53 165 l 372 519 l 61 831 l 61 991 l 736 991 l 736 819 l 439 819 q 285 827 404 819 l 593 521 l 269 165 q 463 174 432 174 l 777 174 l 777 0 l 53 0 z "},"Τ":{"ha":804,"x_min":28,"x_max":777,"o":"m 507 0 l 297 0 l 297 817 l 28 817 l 28 991 l 777 991 l 777 817 l 507 817 l 507 0 z "},"Υ":{"ha":867,"x_min":0,"x_max":867,"o":"m 433 583 l 640 991 l 867 991 l 538 386 l 538 0 l 329 0 l 329 379 l 0 991 l 228 991 l 433 583 z "},"Φ":{"ha":1194,"x_min":62,"x_max":1132,"o":"m 692 301 l 701 301 q 872 358 810 301 q 935 515 935 416 q 877 664 935 608 q 720 720 819 720 l 692 720 l 692 301 m 503 -14 l 503 139 l 488 139 q 267 183 361 139 q 117 317 172 228 q 62 514 62 406 q 111 704 62 619 q 251 836 159 788 q 467 884 342 884 l 503 884 l 503 1006 l 692 1006 l 692 884 l 728 884 q 943 836 851 884 q 1083 704 1034 788 q 1132 514 1132 619 q 1077 317 1132 406 q 928 183 1023 228 q 707 139 833 139 l 692 139 l 692 -14 l 503 -14 m 503 720 l 475 720 q 317 664 375 720 q 260 515 260 608 q 321 359 260 418 q 493 301 382 301 l 503 301 l 503 720 z "},"Χ":{"ha":926,"x_min":0,"x_max":926,"o":"m 926 0 l 686 0 l 456 375 l 225 0 l 0 0 l 329 511 l 21 991 l 253 991 l 467 635 l 676 991 l 903 991 l 591 500 l 926 0 z "},"Ψ":{"ha":1217,"x_min":74,"x_max":1143,"o":"m 1143 667 q 1042 386 1143 476 q 737 296 941 296 l 703 296 l 703 0 l 514 0 l 514 296 l 479 296 q 173 386 273 296 q 74 664 74 475 l 74 991 l 271 991 l 271 667 q 321 513 271 560 q 493 465 372 465 l 514 465 l 514 991 l 703 991 l 703 465 l 724 465 q 894 514 842 465 q 946 664 946 564 l 946 991 l 1143 991 l 1143 667 z "},"Ω":{"ha":1092,"x_min":37,"x_max":1054,"o":"m 546 832 q 357 758 423 832 q 290 547 290 683 q 335 324 290 410 q 471 189 380 238 l 471 0 l 37 0 l 37 176 l 289 176 q 130 348 186 239 q 74 591 74 457 q 132 811 74 716 q 297 956 190 905 q 546 1007 404 1007 q 890 894 762 1007 q 1018 590 1018 781 q 962 349 1018 456 q 800 176 905 241 l 1054 176 l 1054 0 l 618 0 l 618 189 q 757 326 712 238 q 802 549 802 413 q 735 758 802 684 q 546 832 668 832 z "},"Ϋ":{"ha":867,"x_min":0,"x_max":867,"o":"m 433 583 l 640 991 l 867 991 l 538 386 l 538 0 l 329 0 l 329 379 l 0 991 l 228 991 l 433 583 m 203 1182 q 228 1250 203 1226 q 297 1274 254 1274 q 367 1249 342 1274 q 393 1182 393 1223 q 367 1117 393 1141 q 297 1092 341 1092 q 228 1116 254 1092 q 203 1182 203 1139 m 476 1182 q 504 1252 476 1230 q 572 1274 531 1274 q 642 1249 616 1274 q 668 1182 668 1225 q 642 1116 668 1141 q 572 1092 615 1092 q 504 1114 531 1092 q 476 1182 476 1136 z "},"ά":{"ha":899,"x_min":62,"x_max":868,"o":"m 422 151 q 539 200 503 151 q 578 370 575 248 l 578 378 q 540 553 578 500 q 419 606 503 606 q 273 375 273 606 q 310 207 273 263 q 422 151 346 151 m 359 -14 q 141 90 220 -14 q 62 376 62 193 q 145 668 62 565 q 375 771 227 771 q 507 743 455 771 q 593 657 559 714 l 603 657 q 648 758 619 721 l 819 758 q 784 607 798 692 q 771 452 771 522 l 771 240 q 828 160 771 160 q 868 167 850 160 l 868 4 q 826 -8 857 -3 q 775 -14 795 -14 q 659 13 699 -14 q 596 100 619 39 l 582 100 q 359 -14 507 -14 m 353 863 q 383 974 365 899 q 408 1105 401 1048 l 600 1105 l 600 1089 q 473 842 547 963 l 353 842 l 353 863 z "},"έ":{"ha":771,"x_min":53,"x_max":720,"o":"m 570 467 l 570 323 l 456 323 q 307 301 357 323 q 257 231 257 279 q 439 146 257 146 q 583 161 509 146 q 718 204 658 176 l 718 39 q 424 -14 602 -14 q 148 42 243 -14 q 53 210 53 98 q 96 328 53 282 q 237 392 140 373 l 237 399 q 93 574 93 432 q 179 721 93 669 q 424 772 265 772 q 581 757 502 772 q 720 715 660 741 l 656 566 q 528 609 575 598 q 429 619 481 619 q 315 602 353 619 q 278 549 278 585 q 323 485 278 504 q 465 467 368 467 l 570 467 m 345 863 q 375 974 357 899 q 400 1105 393 1048 l 592 1105 l 592 1089 q 465 842 539 963 l 345 842 l 345 863 z "},"ή":{"ha":913,"x_min":109,"x_max":808,"o":"m 808 -334 l 602 -334 l 602 443 q 572 566 602 525 q 479 607 543 607 q 354 549 393 607 q 315 357 315 491 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 401 744 340 716 q 539 772 462 772 q 740 701 671 772 q 808 494 808 629 l 808 -334 m 400 863 q 430 974 412 899 q 456 1105 448 1048 l 648 1105 l 648 1089 q 521 842 595 963 l 400 842 l 400 863 z "},"ί":{"ha":566,"x_min":109,"x_max":536,"o":"m 315 758 l 315 237 q 340 172 315 193 q 406 151 365 151 q 536 175 460 151 l 536 21 q 358 -14 463 -14 q 169 49 229 -14 q 109 237 109 112 l 109 758 l 315 758 m 155 863 q 185 974 167 899 q 210 1105 203 1048 l 402 1105 l 402 1089 q 275 842 349 963 l 155 842 l 155 863 z "},"ΰ":{"ha":896,"x_min":97,"x_max":822,"o":"m 446 -12 q 183 76 270 -12 q 97 346 97 163 l 97 758 l 304 758 l 304 339 q 340 196 304 240 q 453 153 376 153 q 576 216 538 153 q 615 416 615 279 q 606 562 615 489 q 567 758 596 634 l 775 758 q 812 571 802 652 q 822 411 822 491 q 729 93 822 198 q 446 -12 637 -12 m 172 953 q 196 1023 172 1001 q 260 1044 220 1044 q 323 1023 298 1044 q 349 953 349 1001 q 323 885 349 907 q 260 863 298 863 q 196 885 220 863 q 172 953 172 907 m 543 953 q 632 1044 543 1044 q 696 1023 671 1044 q 721 953 721 1001 q 696 885 721 907 q 632 863 671 863 q 567 885 591 863 q 543 953 543 907 m 376 960 q 400 1057 387 993 q 418 1164 413 1120 l 596 1164 l 596 1150 q 470 942 557 1063 l 376 942 l 376 960 z "},"α":{"ha":899,"x_min":62,"x_max":868,"o":"m 422 151 q 539 200 503 151 q 578 370 575 248 l 578 378 q 540 553 578 500 q 419 606 503 606 q 273 375 273 606 q 310 207 273 263 q 422 151 346 151 m 359 -14 q 141 90 220 -14 q 62 376 62 193 q 145 668 62 565 q 375 771 227 771 q 507 743 455 771 q 593 657 559 714 l 603 657 q 648 758 619 721 l 819 758 q 784 607 798 692 q 771 452 771 522 l 771 240 q 828 160 771 160 q 868 167 850 160 l 868 4 q 826 -8 857 -3 q 775 -14 795 -14 q 659 13 699 -14 q 596 100 619 39 l 582 100 q 359 -14 507 -14 z "},"β":{"ha":917,"x_min":109,"x_max":868,"o":"m 471 1063 q 722 992 630 1063 q 814 796 814 922 q 762 636 814 695 q 615 562 711 578 l 615 558 q 805 476 743 542 q 868 293 868 411 q 780 68 868 151 q 536 -14 691 -14 q 315 29 401 -14 l 315 -334 l 109 -334 l 109 743 q 203 979 109 895 q 471 1063 298 1063 m 465 901 q 315 724 315 901 l 315 199 q 395 164 348 178 q 484 151 443 151 q 612 193 570 151 q 654 311 654 235 q 609 425 654 386 q 478 464 564 464 l 429 464 l 429 628 l 465 628 q 570 665 532 628 q 607 771 607 702 q 570 867 607 833 q 465 901 532 901 z "},"γ":{"ha":789,"x_min":1,"x_max":789,"o":"m 441 -334 l 222 -334 q 241 -178 222 -275 q 290 8 260 -81 l 1 758 l 216 758 l 328 424 q 364 300 342 382 q 396 168 387 218 l 400 168 q 422 276 403 198 q 463 414 441 353 l 574 758 l 789 758 l 509 12 q 460 -162 478 -66 q 441 -334 441 -257 z "},"δ":{"ha":860,"x_min":62,"x_max":798,"o":"m 329 623 q 168 854 168 725 q 250 1007 168 952 q 476 1063 332 1063 q 622 1047 551 1063 q 789 987 693 1032 l 707 842 q 586 891 644 872 q 468 909 528 909 q 393 891 418 909 q 368 842 368 873 q 415 769 368 805 q 555 686 462 734 q 739 539 680 623 q 798 347 798 456 q 702 79 798 172 q 427 -14 606 -14 q 162 71 261 -14 q 62 297 62 155 q 128 502 62 420 q 329 623 193 583 m 586 334 q 554 448 586 397 q 450 538 522 498 q 321 453 367 514 q 275 306 275 391 q 316 195 275 237 q 428 153 357 153 q 545 199 503 153 q 586 334 586 245 z "},"ε":{"ha":771,"x_min":53,"x_max":720,"o":"m 570 467 l 570 323 l 456 323 q 307 301 357 323 q 257 231 257 279 q 439 146 257 146 q 583 161 509 146 q 718 204 658 176 l 718 39 q 424 -14 602 -14 q 148 42 243 -14 q 53 210 53 98 q 96 328 53 282 q 237 392 140 373 l 237 399 q 93 574 93 432 q 179 721 93 669 q 424 772 265 772 q 581 757 502 772 q 720 715 660 741 l 656 566 q 528 609 575 598 q 429 619 481 619 q 315 602 353 619 q 278 549 278 585 q 323 485 278 504 q 465 467 368 467 l 570 467 z "},"ζ":{"ha":692,"x_min":62,"x_max":685,"o":"m 685 -25 q 591 -257 685 -126 l 383 -257 q 457 -141 430 -194 q 484 -57 484 -89 q 457 -21 484 -35 q 361 5 430 -7 q 62 317 62 58 q 151 602 62 458 q 449 916 240 745 q 381 907 430 911 q 298 904 333 904 l 102 904 l 102 1055 l 681 1055 l 681 932 q 455 718 545 819 q 320 521 366 616 q 275 326 275 426 q 289 245 275 276 q 327 197 302 215 q 386 170 351 179 q 465 151 421 160 q 631 86 578 129 q 685 -25 685 44 z "},"η":{"ha":913,"x_min":109,"x_max":808,"o":"m 808 -334 l 602 -334 l 602 443 q 572 566 602 525 q 479 607 543 607 q 354 549 393 607 q 315 357 315 491 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 401 744 340 716 q 539 772 462 772 q 740 701 671 772 q 808 494 808 629 l 808 -334 z "},"θ":{"ha":859,"x_min":62,"x_max":796,"o":"m 796 529 q 705 120 796 254 q 428 -14 614 -14 q 155 126 248 -14 q 62 529 62 265 q 153 938 62 805 q 428 1071 244 1071 q 702 933 608 1071 q 796 529 796 795 m 428 136 q 544 215 507 136 q 583 456 580 294 l 273 456 q 312 216 276 296 q 428 136 347 136 m 429 921 q 319 849 356 921 q 275 610 281 777 l 583 610 q 542 843 578 766 q 429 921 507 921 z "},"ι":{"ha":566,"x_min":109,"x_max":536,"o":"m 315 758 l 315 237 q 340 172 315 193 q 406 151 365 151 q 536 175 460 151 l 536 21 q 358 -14 463 -14 q 169 49 229 -14 q 109 237 109 112 l 109 758 l 315 758 z "},"κ":{"ha":861,"x_min":109,"x_max":861,"o":"m 314 395 l 410 510 l 623 758 l 843 758 l 545 411 l 861 0 l 625 0 l 412 289 l 315 228 l 315 0 l 109 0 l 109 758 l 315 758 l 315 559 l 313 450 l 311 395 l 314 395 z "},"λ":{"ha":854,"x_min":5,"x_max":847,"o":"m 5 0 l 326 717 l 302 779 q 247 865 278 840 q 151 890 216 890 q 82 882 117 890 l 82 1053 q 195 1064 136 1064 q 328 1040 273 1064 q 422 967 383 1017 q 496 821 461 917 l 686 297 q 737 193 711 227 q 800 160 763 160 q 847 167 823 160 l 847 7 q 793 -7 831 -1 q 728 -14 754 -14 q 606 23 653 -14 q 530 140 558 60 q 438 405 453 359 q 415 485 424 450 l 411 485 q 359 329 380 380 l 220 0 l 5 0 z "},"μ":{"ha":917,"x_min":109,"x_max":808,"o":"m 315 315 q 345 192 315 233 q 439 151 375 151 q 563 210 524 151 q 602 401 602 269 l 602 758 l 808 758 l 808 0 l 652 0 l 623 102 l 612 102 q 543 15 584 44 q 443 -14 503 -14 q 366 2 401 -14 q 309 47 330 18 l 312 -10 l 315 -117 l 315 -334 l 109 -334 l 109 758 l 315 758 l 315 315 z "},"ν":{"ha":827,"x_min":4,"x_max":772,"o":"m 4 758 l 216 758 l 364 338 l 411 183 l 416 183 q 529 421 494 287 q 564 758 564 555 l 772 758 q 743 459 772 585 q 648 221 713 333 q 475 0 583 109 l 289 0 l 4 758 z "},"ξ":{"ha":692,"x_min":62,"x_max":685,"o":"m 62 297 q 112 447 62 382 q 254 549 161 512 l 254 555 q 106 728 106 591 q 152 844 106 800 q 301 913 197 888 q 117 904 162 904 l 102 904 l 102 1055 l 647 1055 l 647 913 l 596 913 q 391 866 471 913 q 311 741 311 820 q 355 648 311 676 q 498 621 399 621 l 611 621 l 611 478 l 497 478 q 328 436 380 478 q 275 311 275 395 q 291 234 275 263 q 340 188 307 205 q 465 151 373 170 q 631 86 578 129 q 685 -25 685 44 q 591 -257 685 -126 l 383 -257 q 457 -141 430 -194 q 484 -57 484 -89 q 457 -21 484 -35 q 361 5 430 -7 q 138 105 214 31 q 62 297 62 179 z "},"ο":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 z "},"π":{"ha":1026,"x_min":17,"x_max":978,"o":"m 882 149 q 970 172 927 149 l 970 24 q 899 -3 942 7 q 819 -14 856 -14 q 664 42 718 -14 q 611 208 611 98 l 611 600 l 382 600 l 382 0 l 175 0 l 175 600 l 17 600 l 17 689 l 138 758 l 978 758 l 978 600 l 818 600 l 818 216 q 836 165 818 182 q 882 149 854 149 z "},"ρ":{"ha":859,"x_min":82,"x_max":796,"o":"m 796 379 q 713 90 796 194 q 482 -14 630 -14 q 292 39 378 -14 l 279 39 q 290 -143 290 -78 l 290 -334 l 82 -334 l 82 380 q 176 670 82 567 q 443 772 270 772 q 628 725 548 772 q 752 587 708 677 q 796 379 796 498 m 439 606 q 326 554 362 606 q 290 390 290 502 l 290 211 q 359 167 319 182 q 439 153 398 153 q 550 206 516 153 q 583 379 583 259 q 550 552 583 498 q 439 606 517 606 z "},"ς":{"ha":692,"x_min":62,"x_max":685,"o":"m 62 335 q 154 665 62 557 q 441 772 245 772 q 684 718 566 772 l 624 561 q 436 606 507 606 q 312 539 351 606 q 273 340 273 473 q 290 258 273 290 q 341 207 307 227 q 465 168 375 188 q 632 100 578 144 q 685 -16 685 56 q 591 -257 685 -119 l 383 -257 q 484 -46 484 -112 q 456 -7 484 -22 q 361 21 428 7 q 138 129 214 50 q 62 335 62 208 z "},"σ":{"ha":907,"x_min":62,"x_max":879,"o":"m 808 322 q 763 146 808 223 q 632 28 717 69 q 433 -14 547 -14 q 160 89 257 -14 q 62 370 62 191 q 490 760 62 760 l 879 760 l 879 608 l 686 608 q 808 322 808 479 m 275 370 q 316 208 275 264 q 436 153 356 153 q 555 204 515 153 q 596 354 596 256 q 576 491 596 429 q 510 608 556 552 l 476 608 q 321 553 366 608 q 275 370 275 497 z "},"τ":{"ha":747,"x_min":28,"x_max":694,"o":"m 425 603 l 425 237 q 450 172 425 193 q 515 151 475 151 q 646 175 570 151 l 646 21 q 468 -14 573 -14 q 279 49 339 -14 q 218 237 218 112 l 218 603 l 28 603 l 28 689 l 147 758 l 694 758 l 694 603 l 425 603 z "},"υ":{"ha":896,"x_min":97,"x_max":822,"o":"m 446 -12 q 183 76 270 -12 q 97 346 97 163 l 97 758 l 304 758 l 304 339 q 340 196 304 240 q 453 153 376 153 q 576 216 538 153 q 615 416 615 279 q 606 562 615 489 q 567 758 596 634 l 775 758 q 812 571 802 652 q 822 411 822 491 q 729 93 822 198 q 446 -12 637 -12 z "},"φ":{"ha":1100,"x_min":62,"x_max":1038,"o":"m 839 400 q 807 563 839 506 q 714 619 775 619 q 654 592 675 619 q 632 500 632 566 l 632 149 q 782 226 725 157 q 839 400 839 295 m 440 -334 l 440 -8 q 158 111 254 12 q 62 376 62 210 q 100 579 62 481 q 218 775 137 676 l 368 677 q 282 525 307 595 q 257 372 257 454 q 440 149 257 184 l 440 498 q 513 697 440 624 q 711 770 585 770 q 951 671 864 770 q 1038 401 1038 572 q 987 197 1038 286 q 845 56 937 109 q 632 -8 753 3 l 632 -334 l 440 -334 z "},"χ":{"ha":822,"x_min":-33,"x_max":831,"o":"m 163 768 q 262 751 224 768 q 328 695 301 734 q 383 574 355 657 l 433 424 l 623 758 l 831 758 l 522 241 l 654 -81 q 697 -142 673 -124 q 762 -160 721 -160 q 831 -151 795 -160 l 831 -313 q 699 -334 773 -334 q 560 -288 614 -334 q 471 -135 506 -242 l 400 86 l 187 -334 l -33 -334 l 307 267 l 216 505 q 176 574 199 553 q 114 595 152 595 q 36 582 76 595 l 36 747 q 163 768 113 768 z "},"ψ":{"ha":1162,"x_min":97,"x_max":1089,"o":"m 684 1054 l 684 147 q 851 215 803 159 q 899 392 899 271 q 844 758 899 544 l 1036 758 q 1089 390 1089 568 q 987 102 1089 204 q 684 -12 885 -1 l 684 -334 l 492 -334 l 492 -12 q 196 92 295 -6 q 97 376 97 190 l 97 758 l 294 758 l 294 371 q 338 204 294 254 q 492 146 381 154 l 492 1054 l 684 1054 z "},"ω":{"ha":1198,"x_min":74,"x_max":1125,"o":"m 819 -14 q 684 22 736 -14 q 603 129 631 58 l 596 129 q 512 20 565 54 q 379 -14 460 -14 q 154 89 234 -14 q 74 368 74 191 q 90 561 74 473 q 150 758 106 649 l 349 758 q 264 375 264 581 q 297 205 264 264 q 396 147 331 147 q 478 186 452 147 q 504 317 504 226 l 504 517 l 694 517 l 694 317 q 720 186 694 225 q 803 147 746 147 q 901 204 867 147 q 935 372 935 262 q 850 758 935 581 l 1048 758 q 1108 561 1092 648 q 1125 368 1125 473 q 1044 88 1125 190 q 819 -14 964 -14 z "},"ϊ":{"ha":566,"x_min":8,"x_max":536,"o":"m 315 758 l 315 237 q 340 172 315 193 q 406 151 365 151 q 536 175 460 151 l 536 21 q 358 -14 463 -14 q 169 49 229 -14 q 109 237 109 112 l 109 758 l 315 758 m 8 953 q 34 1021 8 997 q 102 1044 59 1044 q 173 1019 147 1044 q 198 953 198 994 q 172 887 198 912 q 102 863 146 863 q 34 886 59 863 q 8 953 8 910 m 281 953 q 309 1022 281 1000 q 377 1044 336 1044 q 447 1020 421 1044 q 473 953 473 996 q 447 887 473 911 q 377 863 420 863 q 309 885 336 863 q 281 953 281 907 z "},"ϋ":{"ha":896,"x_min":97,"x_max":822,"o":"m 446 -12 q 183 76 270 -12 q 97 346 97 163 l 97 758 l 304 758 l 304 339 q 340 196 304 240 q 453 153 376 153 q 576 216 538 153 q 615 416 615 279 q 606 562 615 489 q 567 758 596 634 l 775 758 q 812 571 802 652 q 822 411 822 491 q 729 93 822 198 q 446 -12 637 -12 m 216 953 q 241 1021 216 997 q 310 1044 267 1044 q 380 1019 355 1044 q 406 953 406 994 q 380 887 406 912 q 310 863 354 863 q 241 886 267 863 q 216 953 216 910 m 489 953 q 516 1022 489 1000 q 585 1044 544 1044 q 655 1020 629 1044 q 681 953 681 996 q 654 887 681 911 q 585 863 628 863 q 516 885 544 863 q 489 953 489 907 z "},"ό":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 364 863 q 394 974 376 899 q 420 1105 412 1048 l 612 1105 l 612 1089 q 485 842 559 963 l 364 842 l 364 863 z "},"ύ":{"ha":896,"x_min":97,"x_max":822,"o":"m 446 -12 q 183 76 270 -12 q 97 346 97 163 l 97 758 l 304 758 l 304 339 q 340 196 304 240 q 453 153 376 153 q 576 216 538 153 q 615 416 615 279 q 606 562 615 489 q 567 758 596 634 l 775 758 q 812 571 802 652 q 822 411 822 491 q 729 93 822 198 q 446 -12 637 -12 m 372 863 q 402 974 385 899 q 428 1105 420 1048 l 620 1105 l 620 1089 q 493 842 567 963 l 372 842 l 372 863 z "},"ώ":{"ha":1198,"x_min":74,"x_max":1125,"o":"m 819 -14 q 684 22 736 -14 q 603 129 631 58 l 596 129 q 512 20 565 54 q 379 -14 460 -14 q 154 89 234 -14 q 74 368 74 191 q 90 561 74 473 q 150 758 106 649 l 349 758 q 264 375 264 581 q 297 205 264 264 q 396 147 331 147 q 478 186 452 147 q 504 317 504 226 l 504 517 l 694 517 l 694 317 q 720 186 694 225 q 803 147 746 147 q 901 204 867 147 q 935 372 935 262 q 850 758 935 581 l 1048 758 q 1108 561 1092 648 q 1125 368 1125 473 q 1044 88 1125 190 q 819 -14 964 -14 m 529 863 q 559 974 541 899 q 585 1105 577 1048 l 777 1105 l 777 1089 q 650 842 724 963 l 529 842 l 529 863 z "},"Ё":{"ha":778,"x_min":125,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 179 1182 q 204 1250 179 1226 q 273 1274 230 1274 q 343 1249 318 1274 q 369 1182 369 1223 q 343 1117 369 1141 q 273 1092 317 1092 q 204 1116 230 1092 q 179 1182 179 1139 m 452 1182 q 480 1252 452 1230 q 548 1274 507 1274 q 618 1249 592 1274 q 644 1182 644 1225 q 618 1116 644 1141 q 548 1092 591 1092 q 480 1114 507 1092 q 452 1182 452 1136 z "},"Ђ":{"ha":1118,"x_min":28,"x_max":1044,"o":"m 768 -12 q 631 14 690 -12 l 631 187 q 747 158 698 158 q 801 169 784 158 q 826 202 818 179 q 835 262 835 225 l 835 349 q 807 433 835 409 q 714 457 779 457 l 486 457 l 486 0 l 277 0 l 277 817 l 28 817 l 28 991 l 783 991 l 783 817 l 486 817 l 486 632 l 722 632 q 961 562 877 632 q 1044 364 1044 492 l 1044 277 q 975 61 1044 135 q 768 -12 905 -12 z "},"Ѓ":{"ha":779,"x_min":125,"x_max":751,"o":"m 751 991 l 751 818 l 335 818 l 335 0 l 125 0 l 125 991 l 751 991 m 315 1071 l 315 1089 q 475 1293 432 1225 l 707 1293 l 707 1279 q 586 1174 671 1244 q 453 1071 501 1105 l 315 1071 z "},"Є":{"ha":940,"x_min":81,"x_max":892,"o":"m 571 831 q 383 766 456 831 q 302 586 311 701 l 732 586 l 732 414 l 301 414 q 378 227 310 293 q 574 161 446 161 q 854 214 690 161 l 854 37 q 713 -2 783 10 q 561 -14 644 -14 q 204 118 328 -14 q 81 494 81 249 q 141 765 81 648 q 314 943 201 881 q 581 1006 427 1006 q 744 987 669 1006 q 892 936 819 968 l 817 765 l 758 790 q 571 831 661 831 z "},"Ѕ":{"ha":765,"x_min":64,"x_max":710,"o":"m 710 275 q 613 64 710 141 q 345 -14 517 -14 q 64 46 186 -14 l 64 241 q 234 178 164 197 q 361 160 303 160 q 467 186 430 160 q 504 265 504 213 q 488 317 504 294 q 440 361 471 340 q 311 428 408 382 q 175 510 220 471 q 102 602 130 549 q 75 724 75 654 q 164 930 75 855 q 411 1006 254 1006 q 558 987 488 1006 q 705 936 629 969 l 637 772 q 506 818 558 805 q 404 831 454 831 q 313 803 345 831 q 281 730 281 775 q 294 682 281 703 q 335 642 307 661 q 468 572 363 623 q 659 439 607 506 q 710 275 710 372 z "},"Ј":{"ha":460,"x_min":-103,"x_max":335,"o":"m 21 -292 q -103 -277 -50 -292 l -103 -102 q -4 -115 -49 -115 q 95 -72 65 -115 q 125 62 125 -29 l 125 991 l 335 991 l 335 64 q 256 -201 335 -110 q 21 -292 176 -292 z "},"Љ":{"ha":1388,"x_min":11,"x_max":1325,"o":"m 864 611 l 942 611 q 1225 532 1125 611 q 1325 310 1325 454 q 1225 78 1325 155 q 930 0 1126 0 l 654 0 l 654 817 l 457 817 l 446 726 q 372 239 404 379 q 278 42 340 99 q 111 -14 216 -15 q 11 1 54 -14 l 11 174 q 85 160 50 160 q 142 193 121 160 q 181 315 163 226 q 231 607 200 404 q 283 991 262 810 l 864 991 l 864 611 m 864 172 l 928 172 q 1068 207 1023 172 q 1112 310 1112 241 q 1068 408 1112 377 q 913 439 1023 439 l 864 439 l 864 172 z "},"Њ":{"ha":1392,"x_min":125,"x_max":1329,"o":"m 1329 310 q 1230 78 1329 155 q 935 0 1130 0 l 659 0 l 659 428 l 335 428 l 335 0 l 125 0 l 125 991 l 335 991 l 335 603 l 659 603 l 659 991 l 868 991 l 868 611 l 946 611 q 1229 532 1129 611 q 1329 310 1329 454 m 868 172 l 932 172 q 1072 207 1027 172 q 1117 310 1117 241 q 1071 409 1117 378 q 917 439 1025 439 l 868 439 l 868 172 z "},"Ћ":{"ha":1118,"x_min":28,"x_max":1044,"o":"m 835 0 l 835 349 q 811 433 835 409 q 733 457 787 457 l 486 457 l 486 0 l 277 0 l 277 817 l 28 817 l 28 991 l 783 991 l 783 817 l 486 817 l 486 632 l 747 632 q 966 561 888 632 q 1044 364 1044 490 l 1044 0 l 835 0 z "},"Ќ":{"ha":933,"x_min":125,"x_max":933,"o":"m 933 0 l 694 0 l 335 503 l 335 0 l 125 0 l 125 991 l 335 991 l 335 511 l 690 991 l 914 991 l 553 515 l 933 0 m 393 1071 l 393 1089 q 553 1293 510 1225 l 785 1293 l 785 1279 q 664 1174 749 1244 q 531 1071 579 1105 l 393 1071 z "},"Ў":{"ha":907,"x_min":0,"x_max":907,"o":"m 907 991 l 600 290 q 492 100 543 158 q 372 15 441 43 q 204 -14 303 -14 q 46 7 119 -14 l 46 187 q 195 163 106 163 q 286 189 251 163 q 343 279 320 215 l 0 991 l 222 991 l 467 439 l 473 439 l 486 473 l 690 991 l 907 991 m 793 1314 q 697 1129 780 1187 q 458 1071 614 1071 q 221 1126 298 1071 q 134 1314 144 1182 l 319 1314 q 354 1216 324 1244 q 463 1187 385 1187 q 565 1218 531 1187 q 606 1314 598 1249 l 793 1314 z "},"Џ":{"ha":1035,"x_min":125,"x_max":909,"o":"m 909 0 l 619 0 l 619 -289 l 416 -289 l 416 0 l 125 0 l 125 991 l 335 991 l 335 175 l 700 175 l 700 991 l 909 991 l 909 0 z "},"А":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 z "},"Б":{"ha":886,"x_min":125,"x_max":823,"o":"m 335 611 l 418 611 q 718 532 612 611 q 823 310 823 454 q 414 0 823 0 l 125 0 l 125 991 l 751 991 l 751 818 l 335 818 l 335 611 m 335 172 l 406 172 q 562 207 512 172 q 611 310 611 241 q 561 409 611 378 q 389 439 511 439 l 335 439 l 335 172 z "},"В":{"ha":933,"x_min":125,"x_max":860,"o":"m 125 991 l 433 991 q 740 931 644 991 q 835 741 835 871 q 793 595 835 652 q 682 526 751 538 l 682 519 q 818 441 777 498 q 860 288 860 383 q 762 76 860 152 q 496 0 664 0 l 125 0 l 125 991 m 335 599 l 457 599 q 581 625 543 599 q 619 713 619 652 q 577 794 619 770 q 446 819 536 819 l 335 819 l 335 599 m 335 432 l 335 174 l 472 174 q 600 207 559 174 q 642 309 642 240 q 465 432 642 432 l 335 432 z "},"Г":{"ha":779,"x_min":125,"x_max":751,"o":"m 751 991 l 751 818 l 335 818 l 335 0 l 125 0 l 125 991 l 751 991 z "},"Д":{"ha":1061,"x_min":7,"x_max":1034,"o":"m 7 175 l 83 175 q 239 568 182 372 q 323 991 296 764 l 901 991 l 901 175 l 1034 175 l 1034 -289 l 831 -289 l 831 0 l 210 0 l 210 -289 l 7 -289 l 7 175 m 490 817 q 418 488 469 661 q 304 175 368 314 l 692 175 l 692 817 l 490 817 z "},"Е":{"ha":778,"x_min":125,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 z "},"Ж":{"ha":1310,"x_min":0,"x_max":1310,"o":"m 353 515 l 20 991 l 236 991 l 557 511 l 557 991 l 753 991 l 753 511 l 1074 991 l 1291 991 l 957 515 l 1310 0 l 1084 0 l 753 503 l 753 0 l 557 0 l 557 503 l 225 0 l 0 0 l 353 515 z "},"З":{"ha":900,"x_min":64,"x_max":840,"o":"m 810 760 q 742 602 810 664 q 558 522 674 539 l 558 518 q 767 443 694 505 q 840 282 840 381 q 729 66 840 145 q 422 -14 618 -14 q 72 40 204 -14 l 72 216 q 221 169 136 186 q 382 151 307 151 q 632 297 632 151 q 552 398 632 363 q 314 433 471 433 l 221 433 l 221 597 l 304 597 q 534 627 462 597 q 606 726 606 657 q 561 807 606 777 q 425 838 515 838 q 155 757 286 838 l 64 897 q 243 980 149 954 q 454 1006 338 1006 q 713 938 616 1006 q 810 760 810 870 z "},"И":{"ha":1143,"x_min":125,"x_max":1018,"o":"m 125 991 l 314 991 l 314 513 l 311 385 l 304 239 l 309 239 l 766 991 l 1018 991 l 1018 0 l 831 0 l 831 476 q 843 760 831 572 l 838 760 l 378 0 l 125 0 l 125 991 z "},"Й":{"ha":1143,"x_min":125,"x_max":1018,"o":"m 125 991 l 314 991 l 314 513 l 311 385 l 304 239 l 309 239 l 766 991 l 1018 991 l 1018 0 l 831 0 l 831 476 q 843 760 831 572 l 838 760 l 378 0 l 125 0 l 125 991 m 900 1314 q 804 1129 887 1187 q 566 1071 722 1071 q 328 1126 405 1071 q 241 1314 251 1182 l 427 1314 q 461 1216 431 1244 q 570 1187 492 1187 q 672 1218 638 1187 q 713 1314 705 1249 l 900 1314 z "},"К":{"ha":933,"x_min":125,"x_max":933,"o":"m 933 0 l 694 0 l 335 503 l 335 0 l 125 0 l 125 991 l 335 991 l 335 511 l 690 991 l 914 991 l 553 515 l 933 0 z "},"Л":{"ha":1035,"x_min":11,"x_max":909,"o":"m 909 0 l 700 0 l 700 817 l 457 817 l 446 726 q 372 239 404 379 q 278 42 340 99 q 111 -14 216 -15 q 11 1 54 -14 l 11 174 q 85 160 50 160 q 142 193 121 160 q 181 315 163 226 q 231 607 200 404 q 283 991 262 810 l 909 991 l 909 0 z "},"М":{"ha":1310,"x_min":125,"x_max":1185,"o":"m 545 0 l 306 778 l 300 778 q 313 461 313 541 l 313 0 l 125 0 l 125 991 l 411 991 l 646 233 l 650 233 l 899 991 l 1185 991 l 1185 0 l 989 0 l 989 469 q 990 546 989 503 q 999 777 991 589 l 993 777 l 737 0 l 545 0 z "},"Н":{"ha":1063,"x_min":125,"x_max":937,"o":"m 937 0 l 728 0 l 728 428 l 335 428 l 335 0 l 125 0 l 125 991 l 335 991 l 335 603 l 728 603 l 728 991 l 937 991 l 937 0 z "},"О":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 z "},"П":{"ha":1035,"x_min":125,"x_max":909,"o":"m 909 0 l 700 0 l 700 817 l 335 817 l 335 0 l 125 0 l 125 991 l 909 991 l 909 0 z "},"Р":{"ha":872,"x_min":125,"x_max":810,"o":"m 335 525 l 404 525 q 549 563 501 525 q 597 675 597 602 q 557 784 597 749 q 431 819 517 819 l 335 819 l 335 525 m 810 682 q 710 437 810 522 q 425 353 610 353 l 335 353 l 335 0 l 125 0 l 125 991 l 441 991 q 716 914 622 991 q 810 682 810 836 z "},"С":{"ha":885,"x_min":81,"x_max":836,"o":"m 546 831 q 362 742 427 831 q 297 493 297 652 q 546 161 297 161 q 799 214 650 161 l 799 37 q 526 -14 677 -14 q 195 118 310 -14 q 81 494 81 249 q 137 765 81 649 q 299 944 193 882 q 546 1006 404 1006 q 836 936 690 1006 l 768 765 q 656 811 713 791 q 546 831 600 831 z "},"Т":{"ha":804,"x_min":28,"x_max":777,"o":"m 507 0 l 297 0 l 297 817 l 28 817 l 28 991 l 777 991 l 777 817 l 507 817 l 507 0 z "},"У":{"ha":907,"x_min":0,"x_max":907,"o":"m 907 991 l 600 290 q 492 100 543 158 q 372 15 441 43 q 204 -14 303 -14 q 46 7 119 -14 l 46 187 q 195 163 106 163 q 286 189 251 163 q 343 279 320 215 l 0 991 l 222 991 l 467 439 l 473 439 l 486 473 l 690 991 l 907 991 z "},"Ф":{"ha":1194,"x_min":62,"x_max":1132,"o":"m 692 301 l 701 301 q 872 358 810 301 q 935 515 935 416 q 877 664 935 608 q 720 720 819 720 l 692 720 l 692 301 m 503 -14 l 503 139 l 488 139 q 267 183 361 139 q 117 317 172 228 q 62 514 62 406 q 111 704 62 619 q 251 836 159 788 q 467 884 342 884 l 503 884 l 503 1006 l 692 1006 l 692 884 l 728 884 q 943 836 851 884 q 1083 704 1034 788 q 1132 514 1132 619 q 1077 317 1132 406 q 928 183 1023 228 q 707 139 833 139 l 692 139 l 692 -14 l 503 -14 m 503 720 l 475 720 q 317 664 375 720 q 260 515 260 608 q 321 359 260 418 q 493 301 382 301 l 503 301 l 503 720 z "},"Х":{"ha":926,"x_min":0,"x_max":926,"o":"m 926 0 l 686 0 l 456 375 l 225 0 l 0 0 l 329 511 l 21 991 l 253 991 l 467 635 l 676 991 l 903 991 l 591 500 l 926 0 z "},"Ц":{"ha":1084,"x_min":125,"x_max":1057,"o":"m 909 167 l 1057 167 l 1057 -289 l 854 -289 l 854 0 l 125 0 l 125 991 l 335 991 l 335 175 l 700 175 l 700 991 l 909 991 l 909 167 z "},"Ч":{"ha":1011,"x_min":74,"x_max":886,"o":"m 886 0 l 676 0 l 676 383 q 502 335 572 348 q 370 322 433 322 q 151 390 228 322 q 74 582 74 458 l 74 991 l 283 991 l 283 642 q 317 533 283 570 q 429 497 350 497 q 540 508 485 497 q 676 547 595 519 l 676 991 l 886 991 l 886 0 z "},"Ш":{"ha":1497,"x_min":125,"x_max":1372,"o":"m 854 175 l 1162 175 l 1162 991 l 1372 991 l 1372 0 l 125 0 l 125 991 l 335 991 l 335 175 l 643 175 l 643 991 l 854 991 l 854 175 z "},"Щ":{"ha":1547,"x_min":125,"x_max":1520,"o":"m 854 175 l 1162 175 l 1162 991 l 1372 991 l 1372 167 l 1520 167 l 1520 -289 l 1317 -289 l 1317 0 l 125 0 l 125 991 l 335 991 l 335 175 l 643 175 l 643 991 l 854 991 l 854 175 m 1497 0 z "},"Ъ":{"ha":1010,"x_min":0,"x_max":947,"o":"m 947 310 q 844 78 947 155 q 538 0 741 0 l 249 0 l 249 817 l 0 817 l 0 991 l 458 991 l 458 611 l 542 611 q 842 532 736 611 q 947 310 947 454 m 458 172 l 529 172 q 685 207 635 172 q 734 310 734 241 q 684 409 734 378 q 513 439 634 439 l 458 439 l 458 172 z "},"Ы":{"ha":1258,"x_min":125,"x_max":1133,"o":"m 803 310 q 700 78 803 155 q 396 0 597 0 l 125 0 l 125 991 l 335 991 l 335 611 l 403 611 q 698 532 593 611 q 803 310 803 453 m 335 172 l 390 172 q 542 207 494 172 q 590 310 590 241 q 544 409 590 379 q 380 439 497 439 l 335 439 l 335 172 m 1133 0 l 924 0 l 924 991 l 1133 991 l 1133 0 z "},"Ь":{"ha":886,"x_min":125,"x_max":823,"o":"m 823 310 q 414 0 823 0 l 125 0 l 125 991 l 335 991 l 335 611 l 418 611 q 718 532 612 611 q 823 310 823 454 m 335 172 l 406 172 q 562 207 512 172 q 611 310 611 241 q 561 409 611 378 q 389 439 511 439 l 335 439 l 335 172 z "},"Э":{"ha":921,"x_min":49,"x_max":840,"o":"m 375 831 q 243 812 308 831 q 115 766 178 793 l 49 936 q 379 1006 206 1006 q 720 870 600 1006 q 840 494 840 735 q 716 118 840 249 q 359 -14 593 -14 q 66 37 199 -14 l 66 214 q 347 161 231 161 q 545 224 477 161 q 619 414 613 288 l 189 414 l 189 586 l 618 586 q 549 766 614 701 q 375 831 484 831 z "},"Ю":{"ha":1486,"x_min":125,"x_max":1406,"o":"m 1406 497 q 1292 120 1406 253 q 964 -14 1177 -14 q 655 99 768 -14 q 525 428 543 212 l 335 428 l 335 0 l 125 0 l 125 991 l 335 991 l 335 603 l 529 603 q 664 903 552 799 q 965 1007 775 1007 q 1293 874 1179 1007 q 1406 497 1406 741 m 741 497 q 798 247 741 332 q 964 163 854 163 q 1189 497 1189 163 q 1133 747 1189 663 q 966 832 1077 832 q 798 747 855 832 q 741 497 741 663 z "},"Я":{"ha":924,"x_min":-7,"x_max":799,"o":"m 458 380 l 227 0 l -7 0 l 275 436 q 146 541 191 470 q 102 708 102 612 q 198 918 102 844 q 476 991 295 991 l 799 991 l 799 0 l 589 0 l 589 380 l 458 380 m 589 819 l 485 819 q 359 790 404 819 q 314 693 314 761 q 357 589 314 627 q 490 551 401 551 l 589 551 l 589 819 z "},"а":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 z "},"б":{"ha":864,"x_min":62,"x_max":802,"o":"m 62 454 q 162 851 62 715 q 472 1022 261 986 q 778 1067 574 1040 l 802 886 q 489 843 713 876 q 361 802 404 829 q 299 725 319 775 q 273 591 278 675 l 283 591 q 378 677 319 647 q 505 707 437 707 q 724 621 646 707 q 802 375 802 535 q 703 89 802 191 q 431 -14 604 -14 q 160 111 257 -14 q 62 454 62 235 m 443 154 q 590 357 590 154 q 457 554 590 554 q 384 537 420 554 q 318 493 348 520 q 273 437 288 465 q 317 227 273 300 q 443 154 361 154 z "},"в":{"ha":888,"x_min":109,"x_max":832,"o":"m 808 559 q 770 455 808 498 q 657 400 732 412 l 657 395 q 785 339 738 385 q 832 227 832 294 q 745 58 832 116 q 497 0 659 0 l 109 0 l 109 758 l 497 758 q 731 708 653 758 q 808 559 808 657 m 618 237 q 583 302 618 282 q 479 322 549 322 l 315 322 l 315 143 l 484 143 q 584 168 549 143 q 618 237 618 193 m 599 543 q 489 612 599 612 l 315 612 l 315 463 l 465 463 q 565 481 531 463 q 599 543 599 500 z "},"г":{"ha":664,"x_min":109,"x_max":632,"o":"m 632 758 l 632 603 l 315 603 l 315 0 l 109 0 l 109 758 l 632 758 z "},"д":{"ha":922,"x_min":20,"x_max":901,"o":"m 583 151 l 583 603 l 428 603 q 381 363 411 477 q 300 151 352 250 l 583 151 m 901 -272 l 715 -272 l 715 0 l 205 0 l 205 -272 l 20 -272 l 20 151 l 83 151 q 193 406 149 252 q 254 758 237 560 l 790 758 l 790 151 l 901 151 l 901 -272 z "},"е":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 z "},"ж":{"ha":1213,"x_min":0,"x_max":1213,"o":"m 510 390 l 510 758 l 703 758 l 703 390 l 972 758 l 1186 758 l 907 395 l 1213 0 l 991 0 l 703 385 l 703 0 l 510 0 l 510 385 l 221 0 l 0 0 l 306 395 l 26 758 l 240 758 l 510 390 z "},"з":{"ha":771,"x_min":53,"x_max":718,"o":"m 297 467 q 464 486 414 467 q 513 546 513 505 q 477 601 513 583 q 358 619 441 619 q 240 606 306 619 q 119 571 174 593 l 58 715 q 215 759 139 746 q 385 772 291 772 q 612 718 526 772 q 697 571 697 664 q 546 404 697 443 l 546 397 q 679 332 639 374 q 718 221 718 290 q 673 98 718 152 q 544 16 629 45 q 345 -14 459 -14 q 53 33 155 -14 l 53 204 q 181 161 111 177 q 315 146 250 146 q 467 169 416 146 q 517 233 517 191 q 464 301 517 279 q 301 323 411 323 l 221 323 l 221 467 l 297 467 z "},"и":{"ha":1000,"x_min":109,"x_max":892,"o":"m 309 758 l 309 458 q 293 227 309 411 l 643 758 l 892 758 l 892 0 l 692 0 l 692 302 q 705 530 692 383 l 357 0 l 109 0 l 109 758 l 309 758 z "},"й":{"ha":1000,"x_min":109,"x_max":892,"o":"m 309 758 l 309 458 q 293 227 309 411 l 643 758 l 892 758 l 892 0 l 692 0 l 692 302 q 705 530 692 383 l 357 0 l 109 0 l 109 758 l 309 758 m 831 1084 q 735 900 818 958 q 496 842 652 842 q 259 897 336 842 q 172 1084 182 953 l 357 1084 q 392 986 362 1015 q 500 958 422 958 q 603 989 569 958 q 644 1084 636 1020 l 831 1084 z "},"к":{"ha":860,"x_min":109,"x_max":860,"o":"m 606 758 l 833 758 l 533 395 l 860 0 l 625 0 l 315 385 l 315 0 l 109 0 l 109 758 l 315 758 l 315 390 l 606 758 z "},"л":{"ha":896,"x_min":0,"x_max":787,"o":"m 787 0 l 581 0 l 581 603 l 390 603 q 337 223 368 349 q 254 42 306 98 q 118 -14 202 -14 q 0 8 46 -14 l 0 174 q 66 160 33 160 q 131 216 105 160 q 178 401 157 271 q 214 758 199 531 l 787 758 l 787 0 z "},"м":{"ha":1173,"x_min":109,"x_max":1064,"o":"m 1064 0 l 871 0 l 871 597 l 860 555 q 794 339 823 412 l 660 0 l 513 0 l 376 342 q 314 551 347 416 l 301 597 l 301 0 l 109 0 l 109 758 l 393 758 l 524 435 q 561 315 544 382 q 585 199 578 247 q 620 345 607 300 q 647 427 632 389 q 782 758 662 464 l 1064 758 l 1064 0 z "},"н":{"ha":920,"x_min":109,"x_max":811,"o":"m 315 758 l 315 467 l 604 467 l 604 758 l 811 758 l 811 0 l 604 0 l 604 313 l 315 313 l 315 0 l 109 0 l 109 758 l 315 758 z "},"о":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 z "},"п":{"ha":905,"x_min":109,"x_max":798,"o":"m 798 758 l 798 0 l 590 0 l 590 603 l 315 603 l 315 0 l 109 0 l 109 758 l 798 758 z "},"р":{"ha":879,"x_min":109,"x_max":817,"o":"m 525 -14 q 315 83 391 -14 l 304 83 q 315 -26 315 -12 l 315 -334 l 109 -334 l 109 758 l 277 758 l 306 660 l 315 660 q 530 772 388 772 q 741 669 665 772 q 817 380 817 565 q 781 170 817 259 q 680 33 745 80 q 525 -14 614 -14 m 464 607 q 352 560 387 607 q 315 404 317 513 l 315 382 q 352 207 315 260 q 467 154 388 154 q 606 383 606 154 q 571 551 606 495 q 464 607 537 607 z "},"с":{"ha":714,"x_min":62,"x_max":671,"o":"m 416 -14 q 62 375 62 -14 q 159 670 62 568 q 435 772 255 772 q 671 721 566 772 l 610 561 q 519 593 561 581 q 435 606 477 606 q 273 376 273 606 q 435 154 273 154 q 545 170 494 154 q 647 220 596 186 l 647 43 q 546 -1 597 11 q 416 -14 494 -14 z "},"т":{"ha":768,"x_min":32,"x_max":736,"o":"m 736 758 l 736 603 l 488 603 l 488 0 l 281 0 l 281 603 l 32 603 l 32 758 l 736 758 z "},"у":{"ha":790,"x_min":0,"x_max":790,"o":"m 0 758 l 227 758 l 370 332 q 395 200 388 276 l 399 200 q 428 332 406 270 l 568 758 l 790 758 l 469 -97 q 343 -275 425 -216 q 153 -334 262 -334 q 47 -322 99 -334 l 47 -158 q 129 -167 85 -167 q 225 -133 184 -167 q 289 -32 266 -100 l 301 5 l 0 758 z "},"ф":{"ha":1131,"x_min":62,"x_max":1068,"o":"m 663 762 q 960 645 852 747 q 1068 379 1068 543 q 962 111 1068 212 q 663 -5 855 10 l 663 -334 l 471 -334 l 471 -5 q 171 115 279 12 q 62 379 62 218 q 167 650 62 551 q 471 762 271 749 l 471 1055 l 663 1055 l 663 762 m 275 379 q 328 223 275 283 q 471 151 380 163 l 471 607 q 329 533 383 595 q 275 379 275 471 m 856 379 q 805 530 856 469 q 663 604 754 591 l 663 151 q 804 224 753 163 q 856 379 856 284 z "},"х":{"ha":803,"x_min":7,"x_max":796,"o":"m 264 387 l 20 758 l 254 758 l 401 517 l 550 758 l 785 758 l 538 387 l 796 0 l 561 0 l 401 260 l 241 0 l 7 0 l 264 387 z "},"ц":{"ha":956,"x_min":109,"x_max":936,"o":"m 825 151 l 936 151 l 936 -272 l 750 -272 l 750 0 l 109 0 l 109 758 l 315 758 l 315 155 l 618 155 l 618 758 l 825 758 l 825 151 z "},"ч":{"ha":911,"x_min":83,"x_max":803,"o":"m 290 758 l 290 481 q 382 382 290 382 q 493 395 441 382 q 596 431 544 409 l 596 758 l 803 758 l 803 0 l 596 0 l 596 301 q 463 248 524 263 q 343 232 401 232 q 151 295 219 232 q 83 476 83 359 l 83 758 l 290 758 z "},"ш":{"ha":1346,"x_min":109,"x_max":1238,"o":"m 1238 0 l 109 0 l 109 758 l 315 758 l 315 155 l 570 155 l 570 758 l 777 758 l 777 155 l 1031 155 l 1031 758 l 1238 758 l 1238 0 z "},"щ":{"ha":1368,"x_min":109,"x_max":1349,"o":"m 1238 151 l 1349 151 l 1349 -272 l 1162 -272 l 1162 0 l 109 0 l 109 758 l 315 758 l 315 155 l 570 155 l 570 758 l 777 758 l 777 155 l 1031 155 l 1031 758 l 1238 758 l 1238 151 m 1346 0 z "},"ъ":{"ha":986,"x_min":0,"x_max":937,"o":"m 449 758 l 449 465 l 595 465 q 853 410 770 465 q 937 241 937 354 q 603 0 937 0 l 241 0 l 241 603 l 0 603 l 0 758 l 449 758 m 730 239 q 695 302 730 283 q 590 322 661 322 l 449 322 l 449 143 l 593 143 q 730 239 730 143 z "},"ы":{"ha":1181,"x_min":109,"x_max":1072,"o":"m 315 465 l 415 465 q 672 410 589 465 q 755 241 755 354 q 672 61 755 121 q 422 0 589 0 l 109 0 l 109 758 l 315 758 l 315 465 m 549 239 q 513 302 549 283 q 408 322 478 322 l 315 322 l 315 143 l 411 143 q 549 239 549 143 m 1072 0 l 865 0 l 865 758 l 1072 758 l 1072 0 z "},"ь":{"ha":852,"x_min":109,"x_max":804,"o":"m 315 465 l 461 465 q 720 410 636 465 q 804 241 804 354 q 469 0 804 0 l 109 0 l 109 758 l 315 758 l 315 465 m 597 239 q 562 302 597 283 q 457 322 527 322 l 315 322 l 315 143 l 460 143 q 597 239 597 143 z "},"э":{"ha":711,"x_min":50,"x_max":648,"o":"m 283 -14 q 50 33 141 -14 l 50 195 q 272 140 168 140 q 387 184 347 140 q 435 314 428 227 l 149 314 l 149 452 l 435 452 q 393 577 429 535 q 289 619 357 619 q 113 576 208 619 l 54 718 q 169 757 105 742 q 297 772 233 772 q 562 676 475 772 q 648 387 648 580 q 556 88 648 189 q 283 -14 465 -14 z "},"ю":{"ha":1218,"x_min":109,"x_max":1156,"o":"m 1156 380 q 1061 90 1156 194 q 800 -14 967 -14 q 561 71 650 -14 q 452 313 471 155 l 315 313 l 315 0 l 109 0 l 109 758 l 315 758 l 315 467 l 454 467 q 567 692 474 612 q 804 772 659 772 q 1060 667 965 772 q 1156 380 1156 562 m 660 380 q 693 210 660 267 q 803 153 726 153 q 911 210 878 153 q 945 380 945 267 q 911 550 945 494 q 802 606 878 606 q 693 549 726 606 q 660 380 660 493 z "},"я":{"ha":823,"x_min":0,"x_max":715,"o":"m 224 0 l 0 0 l 204 300 q 93 388 131 330 q 56 524 56 446 q 138 696 56 633 q 363 758 220 758 l 715 758 l 715 0 l 509 0 l 509 282 l 395 282 l 224 0 m 258 522 q 296 448 258 475 q 393 421 333 421 l 509 421 l 509 612 l 367 612 q 287 588 316 612 q 258 522 258 563 z "},"ё":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 191 953 q 216 1021 191 997 q 285 1044 241 1044 q 355 1019 330 1044 q 380 953 380 994 q 355 887 380 912 q 285 863 329 863 q 216 886 241 863 q 191 953 191 910 m 464 953 q 491 1022 464 1000 q 559 1044 519 1044 q 630 1020 604 1044 q 656 953 656 996 q 629 887 656 911 q 559 863 603 863 q 491 885 519 863 q 464 953 464 907 z "},"ђ":{"ha":913,"x_min":3,"x_max":808,"o":"m 562 -334 q 437 -317 490 -334 l 437 -154 q 518 -167 477 -167 q 602 -52 602 -167 l 602 416 q 570 528 602 491 q 479 566 538 566 q 354 506 393 566 q 315 315 315 447 l 315 0 l 109 0 l 109 811 l 3 811 l 3 946 l 109 946 l 109 1055 l 315 1055 l 315 946 l 529 946 l 529 811 l 315 811 l 315 799 q 306 619 315 743 l 318 619 q 538 730 387 730 q 740 659 671 730 q 808 453 808 588 l 808 -82 q 745 -269 808 -203 q 562 -334 681 -334 z "},"ѓ":{"ha":664,"x_min":109,"x_max":636,"o":"m 632 758 l 632 603 l 315 603 l 315 0 l 109 0 l 109 758 l 632 758 m 245 842 l 245 860 q 404 1064 361 996 l 636 1064 l 636 1050 q 516 945 601 1015 q 382 842 431 876 l 245 842 z "},"є":{"ha":728,"x_min":62,"x_max":684,"o":"m 443 -14 q 158 85 254 -14 q 62 375 62 184 q 154 675 62 577 q 441 772 245 772 q 684 722 566 772 l 624 575 q 436 619 509 619 q 326 578 365 619 q 277 452 287 536 l 562 452 l 562 314 l 277 314 q 323 183 286 225 q 431 140 361 140 q 538 153 484 140 q 661 195 592 165 l 661 36 q 443 -14 565 -14 z "},"ѕ":{"ha":690,"x_min":62,"x_max":637,"o":"m 637 225 q 556 47 637 109 q 314 -14 475 -14 q 173 -2 231 -14 q 64 31 115 9 l 64 201 q 194 156 121 174 q 321 138 266 138 q 433 203 433 138 q 418 242 433 227 q 367 277 404 258 q 269 322 330 296 q 141 390 182 359 q 81 461 100 421 q 62 561 62 502 q 141 717 62 662 q 363 772 219 772 q 629 713 500 772 l 567 564 q 460 604 510 588 q 359 619 411 619 q 268 570 268 619 q 297 522 268 542 q 427 461 327 501 q 557 394 515 425 q 618 322 598 363 q 637 225 637 281 z "},"і":{"ha":424,"x_min":100,"x_max":325,"o":"m 100 954 q 212 1055 100 1055 q 325 954 325 1055 q 297 879 325 906 q 212 852 269 852 q 100 954 100 852 m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 z "},"ї":{"ha":424,"x_min":-18,"x_max":447,"o":"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m -18 953 q 7 1021 -18 997 q 76 1044 33 1044 q 146 1019 121 1044 q 172 953 172 994 q 146 887 172 912 q 76 863 120 863 q 7 886 33 863 q -18 953 -18 910 m 255 953 q 282 1022 255 1000 q 351 1044 310 1044 q 421 1020 395 1044 q 447 953 447 996 q 420 887 447 911 q 351 863 394 863 q 282 885 310 863 q 255 953 255 907 z "},"ј":{"ha":424,"x_min":-89,"x_max":325,"o":"m 47 -334 q -89 -317 -32 -334 l -89 -154 q 8 -167 -41 -167 q 84 -138 60 -167 q 109 -52 109 -109 l 109 758 l 315 758 l 315 -82 q 245 -268 315 -203 q 47 -334 176 -334 m 100 954 q 212 1055 100 1055 q 325 954 325 1055 q 297 879 325 906 q 212 852 269 852 q 100 954 100 852 z "},"љ":{"ha":1234,"x_min":0,"x_max":1185,"o":"m 551 0 l 551 603 l 390 603 q 337 223 368 349 q 254 42 306 98 q 118 -14 202 -14 q 0 8 46 -14 l 0 174 q 66 160 33 160 q 131 216 105 160 q 178 401 157 271 q 214 758 199 531 l 758 758 l 758 465 l 854 465 q 1104 410 1023 465 q 1185 241 1185 354 q 859 0 1185 0 l 551 0 m 978 239 q 945 302 978 283 q 846 322 911 322 l 758 322 l 758 143 l 848 143 q 978 239 978 143 z "},"њ":{"ha":1234,"x_min":109,"x_max":1185,"o":"m 758 465 l 854 465 q 1104 410 1023 465 q 1185 241 1185 354 q 859 0 1185 0 l 551 0 l 551 313 l 315 313 l 315 0 l 109 0 l 109 758 l 315 758 l 315 467 l 551 467 l 551 758 l 758 758 l 758 465 m 978 239 q 945 302 978 283 q 846 322 911 322 l 758 322 l 758 143 l 848 143 q 978 239 978 143 z "},"ћ":{"ha":913,"x_min":3,"x_max":808,"o":"m 808 0 l 602 0 l 602 401 q 479 566 602 566 q 354 506 393 566 q 315 315 315 447 l 315 0 l 109 0 l 109 811 l 3 811 l 3 946 l 109 946 l 109 1055 l 315 1055 l 315 946 l 529 946 l 529 811 l 315 811 l 315 799 q 306 619 315 743 l 318 619 q 538 730 387 730 q 740 659 671 730 q 808 453 808 588 l 808 0 z "},"ќ":{"ha":860,"x_min":109,"x_max":860,"o":"m 606 758 l 833 758 l 533 395 l 860 0 l 625 0 l 315 385 l 315 0 l 109 0 l 109 758 l 315 758 l 315 390 l 606 758 m 343 842 l 343 860 q 503 1064 460 996 l 734 1064 l 734 1050 q 614 945 699 1015 q 481 842 529 876 l 343 842 z "},"ў":{"ha":790,"x_min":0,"x_max":790,"o":"m 0 758 l 227 758 l 370 332 q 395 200 388 276 l 399 200 q 428 332 406 270 l 568 758 l 790 758 l 469 -97 q 343 -275 425 -216 q 153 -334 262 -334 q 47 -322 99 -334 l 47 -158 q 129 -167 85 -167 q 225 -133 184 -167 q 289 -32 266 -100 l 301 5 l 0 758 m 726 1084 q 630 900 713 958 q 391 842 547 842 q 154 897 231 842 q 67 1084 77 953 l 252 1084 q 287 986 257 1015 q 395 958 317 958 q 497 989 464 958 q 538 1084 531 1020 l 726 1084 z "},"џ":{"ha":933,"x_min":109,"x_max":825,"o":"m 109 0 l 109 758 l 315 758 l 315 155 l 618 155 l 618 758 l 825 758 l 825 0 l 559 0 l 559 -272 l 374 -272 l 374 0 l 109 0 z "},"Ґ":{"ha":807,"x_min":125,"x_max":779,"o":"m 335 0 l 125 0 l 125 991 l 597 991 l 597 1202 l 779 1202 l 779 818 l 335 818 l 335 0 z "},"ґ":{"ha":711,"x_min":109,"x_max":661,"o":"m 315 0 l 109 0 l 109 758 l 475 758 l 475 965 l 661 965 l 661 603 l 315 603 l 315 0 z "},"Ẁ":{"ha":1343,"x_min":0,"x_max":1343,"o":"m 1090 0 l 851 0 l 717 521 q 691 636 709 549 q 671 753 673 723 q 650 635 667 716 q 625 519 634 554 l 492 0 l 253 0 l 0 991 l 207 991 l 334 450 q 382 191 367 300 q 400 310 386 229 q 428 436 415 391 l 572 991 l 771 991 l 916 436 q 939 322 925 399 q 961 191 954 245 q 983 322 968 243 q 1010 450 998 401 l 1136 991 l 1343 991 l 1090 0 m 650 1071 q 525 1167 608 1101 q 396 1279 442 1234 l 396 1293 l 628 1293 q 787 1089 671 1225 l 787 1071 l 650 1071 z "},"ẁ":{"ha":1189,"x_min":14,"x_max":1175,"o":"m 732 0 l 673 265 l 595 600 l 590 600 l 452 0 l 229 0 l 14 758 l 220 758 l 307 422 q 350 174 328 332 l 354 174 q 378 337 357 225 l 389 395 l 482 758 l 710 758 l 799 395 q 807 351 802 380 q 819 289 813 321 q 828 224 824 256 q 833 174 833 193 l 838 174 q 859 308 844 222 q 882 422 875 393 l 972 758 l 1175 758 l 957 0 l 732 0 m 571 842 q 446 938 528 871 q 317 1050 363 1005 l 317 1064 l 549 1064 q 708 860 591 996 l 708 842 l 571 842 z "},"Ẃ":{"ha":1343,"x_min":0,"x_max":1343,"o":"m 1090 0 l 851 0 l 717 521 q 691 636 709 549 q 671 753 673 723 q 650 635 667 716 q 625 519 634 554 l 492 0 l 253 0 l 0 991 l 207 991 l 334 450 q 382 191 367 300 q 400 310 386 229 q 428 436 415 391 l 572 991 l 771 991 l 916 436 q 939 322 925 399 q 961 191 954 245 q 983 322 968 243 q 1010 450 998 401 l 1136 991 l 1343 991 l 1090 0 m 525 1071 l 525 1089 q 684 1293 642 1225 l 916 1293 l 916 1279 q 796 1174 881 1244 q 663 1071 711 1105 l 525 1071 z "},"ẃ":{"ha":1189,"x_min":14,"x_max":1175,"o":"m 732 0 l 673 265 l 595 600 l 590 600 l 452 0 l 229 0 l 14 758 l 220 758 l 307 422 q 350 174 328 332 l 354 174 q 378 337 357 225 l 389 395 l 482 758 l 710 758 l 799 395 q 807 351 802 380 q 819 289 813 321 q 828 224 824 256 q 833 174 833 193 l 838 174 q 859 308 844 222 q 882 422 875 393 l 972 758 l 1175 758 l 957 0 l 732 0 m 467 842 l 467 860 q 626 1064 583 996 l 858 1064 l 858 1050 q 738 945 823 1015 q 604 842 652 876 l 467 842 z "},"Ẅ":{"ha":1343,"x_min":0,"x_max":1343,"o":"m 1090 0 l 851 0 l 717 521 q 691 636 709 549 q 671 753 673 723 q 650 635 667 716 q 625 519 634 554 l 492 0 l 253 0 l 0 991 l 207 991 l 334 450 q 382 191 367 300 q 400 310 386 229 q 428 436 415 391 l 572 991 l 771 991 l 916 436 q 939 322 925 399 q 961 191 954 245 q 983 322 968 243 q 1010 450 998 401 l 1136 991 l 1343 991 l 1090 0 m 438 1182 q 464 1250 438 1226 q 532 1274 489 1274 q 603 1249 577 1274 q 628 1182 628 1223 q 602 1117 628 1141 q 532 1092 576 1092 q 464 1116 489 1092 q 438 1182 438 1139 m 711 1182 q 739 1252 711 1230 q 807 1274 766 1274 q 877 1249 851 1274 q 903 1182 903 1225 q 877 1116 903 1141 q 807 1092 850 1092 q 739 1114 766 1092 q 711 1182 711 1136 z "},"ẅ":{"ha":1189,"x_min":14,"x_max":1175,"o":"m 732 0 l 673 265 l 595 600 l 590 600 l 452 0 l 229 0 l 14 758 l 220 758 l 307 422 q 350 174 328 332 l 354 174 q 378 337 357 225 l 389 395 l 482 758 l 710 758 l 799 395 q 807 351 802 380 q 819 289 813 321 q 828 224 824 256 q 833 174 833 193 l 838 174 q 859 308 844 222 q 882 422 875 393 l 972 758 l 1175 758 l 957 0 l 732 0 m 361 953 q 387 1021 361 997 q 456 1044 412 1044 q 526 1019 500 1044 q 551 953 551 994 q 526 887 551 912 q 456 863 500 863 q 387 886 412 863 q 361 953 361 910 m 635 953 q 662 1022 635 1000 q 730 1044 690 1044 q 801 1020 774 1044 q 827 953 827 996 q 800 887 827 911 q 730 863 774 863 q 662 885 690 863 q 635 953 635 907 z "},"Ỳ":{"ha":867,"x_min":0,"x_max":867,"o":"m 433 583 l 640 991 l 867 991 l 538 386 l 538 0 l 329 0 l 329 379 l 0 991 l 228 991 l 433 583 m 390 1071 q 264 1167 347 1101 q 136 1279 182 1234 l 136 1293 l 368 1293 q 527 1089 410 1225 l 527 1071 l 390 1071 z "},"ỳ":{"ha":790,"x_min":0,"x_max":790,"o":"m 0 758 l 227 758 l 370 332 q 395 200 388 276 l 399 200 q 428 332 406 270 l 568 758 l 790 758 l 469 -97 q 343 -275 425 -216 q 153 -334 262 -334 q 47 -322 99 -334 l 47 -158 q 129 -167 85 -167 q 225 -133 184 -167 q 289 -32 266 -100 l 301 5 l 0 758 m 366 842 q 241 938 323 871 q 112 1050 158 1005 l 112 1064 l 344 1064 q 503 860 387 996 l 503 842 l 366 842 z "},"–":{"ha":694,"x_min":56,"x_max":639,"o":"m 56 296 l 56 452 l 639 452 l 639 296 l 56 296 z "},"—":{"ha":1389,"x_min":56,"x_max":1333,"o":"m 56 296 l 56 452 l 1333 452 l 1333 296 l 56 296 z "},"―":{"ha":1389,"x_min":56,"x_max":1333,"o":"m 56 296 l 56 452 l 1333 452 l 1333 296 l 56 296 z "},"‗":{"ha":571,"x_min":-3,"x_max":574,"o":"m 574 -314 l -3 -314 l -3 -220 l 574 -220 l 574 -314 m 574 -125 l -3 -125 l -3 -31 l 574 -31 l 574 -125 z "},"‘":{"ha":301,"x_min":17,"x_max":285,"o":"m 26 652 l 17 667 q 66 822 32 728 q 136 991 100 915 l 285 991 q 216 652 240 810 l 26 652 z "},"’":{"ha":301,"x_min":17,"x_max":285,"o":"m 275 991 l 285 977 q 165 652 251 843 l 17 652 q 85 991 64 852 l 275 991 z "},"‚":{"ha":404,"x_min":43,"x_max":311,"o":"m 311 146 q 192 -179 276 9 l 43 -179 q 111 161 87 1 l 301 161 l 311 146 z "},"‛":{"ha":300,"x_min":17,"x_max":285,"o":"m 216 991 q 285 652 241 825 l 136 652 q 63 828 96 738 q 17 977 31 919 l 26 991 l 216 991 z "},"“":{"ha":618,"x_min":17,"x_max":602,"o":"m 334 667 q 383 822 349 728 q 453 991 417 915 l 602 991 q 533 652 557 810 l 343 652 l 334 667 m 17 667 q 66 822 32 728 q 136 991 100 915 l 285 991 q 216 652 240 810 l 26 652 l 17 667 z "},"”":{"ha":618,"x_min":17,"x_max":602,"o":"m 285 977 q 165 652 251 843 l 17 652 q 85 991 64 852 l 275 991 l 285 977 m 602 977 q 482 652 568 843 l 334 652 q 401 991 380 852 l 591 991 l 602 977 z "},"„":{"ha":720,"x_min":43,"x_max":628,"o":"m 311 146 q 192 -179 276 9 l 43 -179 q 111 161 87 1 l 301 161 l 311 146 m 628 146 q 509 -179 593 9 l 359 -179 q 428 161 404 1 l 618 161 l 628 146 z "},"†":{"ha":717,"x_min":83,"x_max":633,"o":"m 633 629 l 408 650 l 446 0 l 257 0 l 294 650 l 83 629 l 83 793 l 294 772 l 257 1055 l 446 1055 l 408 772 l 633 793 l 633 629 z "},"‡":{"ha":730,"x_min":83,"x_max":647,"o":"m 422 378 l 647 399 l 647 235 l 422 256 l 460 0 l 271 0 l 309 256 l 83 235 l 83 399 l 309 378 l 277 533 l 309 677 l 83 657 l 83 821 l 309 800 l 271 1055 l 460 1055 l 422 800 l 647 821 l 647 657 l 422 677 l 454 533 l 422 378 z "},"•":{"ha":522,"x_min":66,"x_max":456,"o":"m 66 507 q 117 667 66 612 q 261 722 167 722 q 405 667 354 722 q 456 507 456 611 q 405 348 456 404 q 261 292 353 292 q 117 348 168 292 q 66 507 66 404 z "},"…":{"ha":1187,"x_min":79,"x_max":1108,"o":"m 79 97 q 110 183 79 154 q 199 212 140 212 q 286 182 255 212 q 317 97 317 153 q 286 13 317 43 q 199 -18 254 -18 q 111 12 142 -18 q 79 97 79 42 m 475 97 q 505 183 475 154 q 595 212 536 212 q 682 182 651 212 q 713 97 713 153 q 682 13 713 43 q 595 -18 650 -18 q 506 12 537 -18 q 475 97 475 42 m 871 97 q 901 183 871 154 q 990 212 932 212 q 1077 182 1046 212 q 1108 97 1108 153 q 1077 13 1108 43 q 990 -18 1046 -18 q 902 12 933 -18 q 871 97 871 42 z "},"‰":{"ha":1779,"x_min":43,"x_max":1736,"o":"m 214 694 q 229 566 214 608 q 278 524 244 524 q 343 694 343 524 q 278 864 343 864 q 229 822 244 864 q 214 694 214 781 m 514 696 q 454 461 514 540 q 277 383 393 383 q 104 464 165 383 q 43 696 43 544 q 277 1006 43 1006 q 453 925 391 1006 q 514 696 514 845 m 981 991 l 431 0 l 268 0 l 818 991 l 981 991 m 908 298 q 923 170 908 212 q 972 127 939 127 q 1038 298 1038 127 q 972 468 1038 468 q 923 426 939 468 q 908 298 908 385 m 1208 300 q 1148 66 1208 144 q 971 -12 1088 -12 q 798 68 859 -12 q 737 300 737 149 q 971 610 737 610 q 1147 529 1086 610 q 1208 300 1208 449 m 1436 298 q 1451 170 1436 212 q 1500 127 1466 127 q 1565 298 1565 127 q 1500 468 1565 468 q 1451 426 1466 468 q 1436 298 1436 385 m 1736 300 q 1676 66 1736 145 q 1499 -12 1617 -12 q 1326 68 1388 -12 q 1265 300 1265 149 q 1499 610 1265 610 q 1675 529 1613 610 q 1736 300 1736 449 m 1251 0 z "},"′":{"ha":370,"x_min":90,"x_max":279,"o":"m 279 991 l 252 633 l 118 633 l 90 991 l 279 991 z "},"″":{"ha":656,"x_min":90,"x_max":566,"o":"m 279 991 l 252 633 l 118 633 l 90 991 l 279 991 m 566 991 l 538 633 l 404 633 l 376 991 l 566 991 z "},"‹":{"ha":511,"x_min":56,"x_max":456,"o":"m 56 389 l 307 697 l 456 616 l 267 380 l 456 144 l 307 64 l 56 371 l 56 389 z "},"›":{"ha":511,"x_min":56,"x_max":456,"o":"m 456 371 l 204 64 l 56 144 l 244 380 l 56 616 l 204 697 l 456 389 l 456 371 z "},"‼":{"ha":791,"x_min":79,"x_max":713,"o":"m 678 329 l 513 329 l 478 991 l 713 991 l 678 329 m 475 97 q 506 183 475 154 q 595 212 536 212 q 682 182 651 212 q 713 97 713 153 q 682 13 713 43 q 595 -18 650 -18 q 507 12 538 -18 q 475 97 475 42 m 282 329 l 117 329 l 82 991 l 317 991 l 282 329 m 79 97 q 110 183 79 154 q 199 212 140 212 q 286 182 255 212 q 317 97 317 153 q 286 13 317 43 q 199 -18 254 -18 q 111 12 142 -18 q 79 97 79 42 z "},"⁄":{"ha":180,"x_min":-267,"x_max":446,"o":"m 446 991 l -104 0 l -267 0 l 283 991 l 446 991 z "},"ⁿ":{"ha":587,"x_min":69,"x_max":528,"o":"m 393 518 l 393 790 q 373 863 393 842 q 314 885 353 885 q 229 852 253 885 q 204 743 204 820 l 204 518 l 69 518 l 69 991 l 179 991 l 197 935 l 207 935 q 353 1003 256 1003 q 528 833 528 1003 l 528 518 l 393 518 z "},"₣":{"ha":793,"x_min":24,"x_max":721,"o":"m 332 298 l 546 298 l 546 178 l 332 178 l 332 0 l 125 0 l 125 178 l 24 178 l 24 298 l 125 298 l 125 991 l 721 991 l 721 819 l 332 819 l 332 591 l 696 591 l 696 419 l 332 419 l 332 298 z "},"₤":{"ha":793,"x_min":56,"x_max":766,"o":"m 478 1006 q 739 950 607 1006 l 676 794 q 579 826 623 814 q 488 838 534 838 q 408 808 433 838 q 382 721 382 779 l 382 644 l 625 644 l 625 525 l 382 525 l 382 447 l 625 447 l 625 326 l 380 326 q 353 239 377 276 q 279 176 330 203 l 766 176 l 766 0 l 56 0 l 56 168 q 149 233 123 197 q 178 326 174 269 l 57 326 l 57 447 l 178 447 l 178 525 l 57 525 l 57 644 l 178 644 l 178 722 q 255 934 178 862 q 478 1006 332 1006 z "},"₧":{"ha":1239,"x_min":125,"x_max":1200,"o":"m 321 525 l 366 525 q 508 560 460 525 q 555 675 555 595 q 513 784 555 749 q 378 819 470 819 l 321 819 l 321 525 m 754 682 q 651 437 754 522 q 357 353 547 353 l 321 353 l 321 0 l 125 0 l 125 991 l 378 991 q 658 914 562 991 q 754 682 754 836 m 1090 138 q 1200 161 1143 138 l 1200 21 q 1040 -14 1134 -14 q 879 43 930 -14 q 828 216 828 99 l 828 432 l 729 432 l 729 505 l 843 575 l 903 734 l 1007 734 l 1007 574 l 1192 574 l 1192 432 l 1007 432 l 1007 224 q 1031 160 1007 183 q 1090 138 1056 138 z "},"€":{"ha":793,"x_min":45,"x_max":783,"o":"m 545 831 q 408 783 462 831 q 339 644 355 735 l 612 644 l 612 525 l 329 525 l 328 501 l 328 469 l 329 447 l 570 447 l 570 326 l 340 326 q 558 161 375 161 q 745 200 655 161 l 745 26 q 546 -14 666 -14 q 273 77 380 -14 q 138 326 165 167 l 45 326 l 45 447 l 125 447 q 122 489 122 463 l 123 525 l 45 525 l 45 644 l 135 644 q 270 904 160 808 q 545 999 380 999 q 783 943 672 999 l 717 786 q 629 819 670 807 q 545 831 589 831 z "},"℅":{"ha":1104,"x_min":43,"x_max":1061,"o":"m 889 991 l 339 0 l 176 0 l 726 991 l 889 991 m 1061 233 q 1000 52 1061 117 q 832 -14 939 -14 q 669 53 731 -14 q 607 233 607 119 q 667 414 607 349 q 836 479 728 479 q 1000 412 938 479 q 1061 233 1061 345 m 745 233 q 766 131 745 165 q 835 97 787 97 q 902 131 881 97 q 922 233 922 165 q 902 335 922 301 q 835 368 881 368 q 766 335 787 368 q 745 233 745 301 m 285 513 q 107 575 172 513 q 43 753 43 637 q 104 936 43 873 q 283 999 166 999 q 431 965 363 999 l 393 860 q 281 888 324 888 q 207 853 231 888 q 182 754 182 819 q 277 625 182 625 q 416 654 355 625 l 416 543 q 285 513 363 513 z "},"ℓ":{"ha":722,"x_min":28,"x_max":672,"o":"m 435 129 q 502 162 475 129 q 532 265 528 196 l 672 265 q 602 52 665 116 q 414 -12 540 -12 q 220 58 290 -12 q 151 261 151 128 l 151 347 l 28 314 l 28 447 q 151 484 94 465 l 151 762 q 215 946 151 887 q 412 1004 279 1004 q 587 945 523 1004 q 652 785 652 886 q 583 575 652 663 q 350 412 514 488 l 350 254 q 435 129 350 129 m 473 781 q 412 875 473 875 q 363 849 376 875 q 350 781 350 823 l 350 558 q 441 642 410 585 q 473 781 473 699 z "},"№":{"ha":1428,"x_min":92,"x_max":1377,"o":"m 835 0 l 612 0 l 267 710 l 257 710 q 273 427 273 536 l 273 0 l 92 0 l 92 991 l 315 991 l 659 286 l 671 286 q 654 559 654 444 l 654 991 l 835 991 l 835 0 m 929 0 l 929 127 l 1362 127 l 1362 0 l 929 0 m 1377 433 q 1314 252 1377 317 q 1145 186 1252 186 q 978 253 1040 186 q 916 433 916 320 q 977 613 916 547 q 1147 679 1038 679 q 1314 611 1252 679 q 1377 433 1377 544 m 1053 433 q 1075 331 1053 366 q 1146 297 1097 297 q 1216 331 1194 297 q 1238 433 1238 366 q 1216 535 1238 501 q 1146 568 1194 568 q 1075 535 1097 568 q 1053 433 1053 501 z "},"™":{"ha":1040,"x_min":11,"x_max":978,"o":"m 258 503 l 144 503 l 144 890 l 11 890 l 11 991 l 393 991 l 393 890 l 258 890 l 258 503 m 648 503 l 536 861 l 532 861 l 534 786 l 534 503 l 424 503 l 424 991 l 591 991 l 700 646 l 815 991 l 978 991 l 978 503 l 864 503 l 864 779 l 867 861 l 863 861 l 745 503 l 648 503 z "},"Ω":{"ha":1092,"x_min":37,"x_max":1054,"o":"m 546 832 q 357 758 423 832 q 290 547 290 683 q 335 324 290 410 q 471 189 380 238 l 471 0 l 37 0 l 37 176 l 289 176 q 130 348 186 239 q 74 591 74 457 q 132 811 74 716 q 297 956 190 905 q 546 1007 404 1007 q 890 894 762 1007 q 1018 590 1018 781 q 962 349 1018 456 q 800 176 905 241 l 1054 176 l 1054 0 l 618 0 l 618 189 q 757 326 712 238 q 802 549 802 413 q 735 758 802 684 q 546 832 668 832 z "},"℮":{"ha":860,"x_min":69,"x_max":789,"o":"m 429 -24 q 241 26 323 -24 q 114 164 159 76 q 69 359 69 253 q 116 562 69 475 q 245 696 163 648 q 429 743 328 743 q 615 695 532 743 q 743 559 697 647 q 789 359 789 471 l 228 359 l 228 118 q 317 58 261 82 q 429 35 374 35 q 580 70 518 35 q 697 193 642 106 l 746 165 q 606 18 680 60 q 429 -24 532 -24 m 632 418 l 632 606 q 543 664 598 642 q 428 686 488 686 q 228 607 311 686 l 228 418 l 632 418 z "},"⅛":{"ha":1223,"x_min":39,"x_max":1160,"o":"m 913 991 l 363 0 l 201 0 l 751 991 l 913 991 m 928 606 q 1080 565 1023 606 q 1137 453 1137 524 q 1115 376 1137 410 q 1040 313 1092 342 q 1114 264 1091 285 q 1148 219 1136 243 q 1160 164 1160 194 q 1095 34 1160 85 q 928 -16 1030 -16 q 756 31 819 -16 q 694 160 694 79 q 719 240 694 204 q 802 307 743 276 q 715 453 715 368 q 774 565 715 524 q 928 606 833 606 m 847 160 q 867 110 847 130 q 925 91 886 91 q 985 110 965 91 q 1006 160 1006 130 q 916 245 1006 215 q 847 160 847 215 m 926 499 q 882 483 897 499 q 867 448 867 467 q 884 403 867 420 q 928 372 902 386 q 970 401 954 385 q 987 448 987 418 q 973 483 987 467 q 926 499 959 499 m 373 397 l 212 397 l 212 700 l 214 776 l 217 840 q 166 787 199 816 l 113 746 l 39 832 l 243 991 l 373 991 l 373 397 z "},"⅜":{"ha":1223,"x_min":40,"x_max":1183,"o":"m 961 991 l 411 0 l 249 0 l 799 991 l 961 991 m 951 606 q 1104 565 1047 606 q 1161 453 1161 524 q 1138 376 1161 410 q 1064 313 1116 342 q 1137 264 1115 285 q 1172 219 1160 243 q 1183 164 1183 194 q 1119 34 1183 85 q 951 -16 1054 -16 q 780 31 842 -16 q 718 160 718 79 q 742 240 718 204 q 825 307 766 276 q 739 453 739 368 q 798 565 739 524 q 951 606 857 606 m 871 160 q 890 110 871 130 q 949 91 910 91 q 1009 110 989 91 q 1029 160 1029 130 q 939 245 1029 215 q 871 160 871 215 m 950 499 q 906 483 921 499 q 890 448 890 467 q 908 403 890 420 q 951 372 926 386 q 994 401 977 385 q 1011 448 1011 418 q 997 483 1011 467 q 950 499 983 499 m 452 847 q 336 713 452 750 l 336 704 q 435 653 400 690 q 471 562 471 616 q 411 433 471 480 q 225 386 351 386 q 40 433 128 386 l 40 562 q 224 501 140 501 q 321 574 321 501 q 291 628 321 610 q 208 646 261 646 l 132 646 l 132 754 l 195 754 q 278 772 251 754 q 306 828 306 789 q 289 871 306 854 q 237 888 272 888 q 177 875 205 888 q 110 835 149 862 l 41 930 q 135 983 83 962 q 256 1004 186 1004 q 397 961 342 1004 q 452 847 452 918 z "},"⅝":{"ha":1223,"x_min":61,"x_max":1183,"o":"m 961 991 l 411 0 l 249 0 l 799 991 l 961 991 m 951 606 q 1104 565 1047 606 q 1161 453 1161 524 q 1138 376 1161 410 q 1064 313 1116 342 q 1137 264 1115 285 q 1172 219 1160 243 q 1183 164 1183 194 q 1119 34 1183 85 q 951 -16 1054 -16 q 780 31 842 -16 q 718 160 718 79 q 742 240 718 204 q 825 307 766 276 q 739 453 739 368 q 798 565 739 524 q 951 606 857 606 m 871 160 q 890 110 871 130 q 949 91 910 91 q 1009 110 989 91 q 1029 160 1029 130 q 939 245 1029 215 q 871 160 871 215 m 950 499 q 906 483 921 499 q 890 448 890 467 q 908 403 890 420 q 951 372 926 386 q 994 401 977 385 q 1011 448 1011 418 q 997 483 1011 467 q 950 499 983 499 m 273 781 q 430 730 370 781 q 489 593 489 680 q 425 440 489 494 q 236 386 360 386 q 61 421 129 386 l 61 551 q 140 515 95 530 q 222 501 185 501 q 339 590 339 501 q 310 654 339 633 q 225 676 280 676 q 144 664 182 676 l 71 693 l 96 991 l 448 991 l 448 867 l 207 867 l 196 775 q 273 781 234 781 z "},"⅞":{"ha":1223,"x_min":45,"x_max":1145,"o":"m 900 991 l 350 0 l 188 0 l 738 991 l 900 991 m 913 606 q 1066 565 1009 606 q 1123 453 1123 524 q 1100 376 1123 410 q 1026 313 1078 342 q 1099 264 1077 285 q 1134 219 1122 243 q 1145 164 1145 194 q 1081 34 1145 85 q 913 -16 1016 -16 q 742 31 804 -16 q 680 160 680 79 q 704 240 680 204 q 787 307 728 276 q 701 453 701 368 q 760 565 701 524 q 913 606 819 606 m 833 160 q 852 110 833 130 q 911 91 872 91 q 971 110 951 91 q 991 160 991 130 q 901 245 991 215 q 833 160 833 215 m 912 499 q 868 483 883 499 q 852 448 852 467 q 870 403 852 420 q 913 372 888 386 q 956 401 939 385 q 973 448 973 418 q 959 483 973 467 q 912 499 945 499 m 110 397 l 340 867 l 45 867 l 45 991 l 498 991 l 498 890 l 281 397 l 110 397 z "},"∂":{"ha":807,"x_min":40,"x_max":761,"o":"m 761 624 q 702 296 761 448 q 545 65 644 144 q 318 -14 446 -14 q 112 58 183 -14 q 40 271 40 130 q 91 494 40 389 q 225 651 141 599 q 418 704 310 704 q 546 676 489 704 q 410 836 530 836 q 321 818 373 836 q 211 761 269 800 l 211 945 q 439 1006 326 1006 q 679 907 597 1006 q 761 624 761 809 m 326 151 q 453 245 396 151 q 532 479 510 338 q 496 532 522 515 q 433 550 469 550 q 347 513 386 550 q 283 404 308 477 q 258 254 258 330 q 326 151 258 151 z "},"∆":{"ha":914,"x_min":39,"x_max":875,"o":"m 39 121 l 339 996 l 576 996 l 875 119 l 875 0 l 39 0 l 39 121 m 457 823 q 449 784 456 813 q 428 707 441 754 q 253 175 414 661 l 661 175 l 490 696 l 483 722 q 457 823 458 810 z "},"∏":{"ha":1029,"x_min":113,"x_max":917,"o":"m 701 -310 l 701 817 l 328 817 l 328 -310 l 113 -310 l 113 991 l 917 991 l 917 -310 l 701 -310 z "},"∑":{"ha":876,"x_min":28,"x_max":869,"o":"m 28 -310 l 28 -195 l 418 371 l 39 879 l 39 991 l 829 991 l 829 821 l 317 821 l 652 375 l 300 -138 l 869 -138 l 869 -310 l 28 -310 z "},"−":{"ha":793,"x_min":60,"x_max":733,"o":"m 60 415 l 60 564 l 733 564 l 733 415 l 60 415 z "},"√":{"ha":762,"x_min":25,"x_max":865,"o":"m 450 -9 l 326 -9 l 144 490 l 25 490 l 25 635 l 245 635 l 385 250 l 717 1192 l 865 1192 l 450 -9 z "},"∞":{"ha":982,"x_min":77,"x_max":905,"o":"m 905 486 q 844 323 905 390 q 690 257 782 257 q 488 376 571 257 q 398 293 448 324 q 294 261 348 261 q 138 323 199 261 q 77 490 77 386 q 138 653 77 588 q 294 718 199 718 q 492 600 414 718 q 690 715 576 715 q 845 653 785 715 q 905 486 905 590 m 301 399 q 414 490 361 399 q 361 559 388 536 q 300 582 334 582 q 238 556 262 582 q 215 489 215 530 q 238 424 215 448 q 301 399 262 399 m 681 578 q 567 488 622 578 q 682 395 621 395 q 743 422 720 395 q 766 488 766 449 q 743 552 766 527 q 681 578 719 578 z "},"∫":{"ha":572,"x_min":0,"x_max":572,"o":"m 465 882 q 410 857 431 882 q 390 789 390 833 l 390 -77 q 323 -269 390 -203 q 132 -334 257 -334 q 0 -306 58 -334 l 0 -134 q 107 -160 62 -160 q 182 -64 182 -160 l 182 799 q 248 990 182 924 q 440 1055 313 1055 q 572 1028 514 1055 l 572 856 q 465 882 512 882 z "},"≈":{"ha":793,"x_min":60,"x_max":733,"o":"m 218 589 q 139 567 181 589 q 60 507 96 544 l 60 664 q 233 738 130 738 q 327 727 283 738 q 421 694 370 716 q 575 657 509 657 q 654 679 611 657 q 733 739 696 701 l 733 583 q 559 509 665 509 q 474 517 515 509 q 372 551 433 526 q 218 589 283 589 m 218 319 q 139 296 181 319 q 60 237 96 273 l 60 393 q 233 467 130 467 q 327 456 283 467 q 421 424 370 446 q 575 387 509 387 q 654 408 611 387 q 733 469 696 430 l 733 312 q 559 238 665 238 q 474 247 515 238 q 372 281 433 256 q 218 319 283 319 z "},"≠":{"ha":793,"x_min":60,"x_max":733,"o":"m 380 283 l 294 97 l 158 154 l 218 283 l 60 283 l 60 432 l 288 432 l 342 547 l 60 547 l 60 694 l 410 694 l 498 885 l 635 827 l 572 694 l 733 694 l 733 547 l 504 547 l 450 432 l 733 432 l 733 283 l 380 283 z "},"≤":{"ha":793,"x_min":58,"x_max":733,"o":"m 58 0 l 58 149 l 732 149 l 732 0 l 58 0 m 733 179 l 60 476 l 60 574 l 733 909 l 733 747 l 269 532 l 733 342 l 733 179 z "},"≥":{"ha":793,"x_min":60,"x_max":733,"o":"m 60 0 l 60 149 l 733 149 l 733 0 l 60 0 m 60 342 l 524 532 l 60 747 l 60 909 l 733 574 l 733 476 l 60 179 l 60 342 z "},"◊":{"ha":810,"x_min":60,"x_max":749,"o":"m 749 498 l 443 0 l 366 0 l 60 498 l 366 999 l 443 999 l 749 498 m 570 498 l 404 777 l 239 498 l 404 221 l 570 498 z "},"ﬁ":{"ha":961,"x_min":28,"x_max":863,"o":"m 528 603 l 349 603 l 349 0 l 142 0 l 142 603 l 28 603 l 28 703 l 142 758 l 142 814 q 205 1003 142 943 q 410 1063 269 1063 q 600 1031 517 1063 l 547 879 q 432 899 485 899 q 368 872 388 899 q 349 806 349 846 l 349 758 l 528 758 l 528 603 m 637 954 q 750 1055 637 1055 q 863 954 863 1055 q 834 879 863 906 q 750 852 806 852 q 637 954 637 852 m 853 0 l 646 0 l 646 758 l 853 758 l 853 0 z "},"ﬂ":{"ha":961,"x_min":28,"x_max":853,"o":"m 528 603 l 349 603 l 349 0 l 142 0 l 142 603 l 28 603 l 28 703 l 142 758 l 142 814 q 205 1003 142 943 q 410 1063 269 1063 q 600 1031 517 1063 l 547 879 q 432 899 485 899 q 368 872 388 899 q 349 806 349 846 l 349 758 l 528 758 l 528 603 m 853 0 l 646 0 l 646 1055 l 853 1055 l 853 0 z "},"ȷ":{"ha":424,"x_min":-89,"x_max":315,"o":"m 47 -334 q -89 -317 -32 -334 l -89 -154 q 8 -167 -41 -167 q 84 -138 60 -167 q 109 -52 109 -109 l 109 758 l 315 758 l 315 -82 q 245 -268 315 -203 q 47 -334 176 -334 z "},"⁰":{"ha":526,"x_min":28,"x_max":498,"o":"m 199 694 q 214 566 199 608 q 262 524 229 524 q 312 566 296 524 q 328 694 328 608 q 312 822 328 781 q 262 864 296 864 q 214 822 229 864 q 199 694 199 781 m 498 696 q 261 383 498 383 q 89 464 150 383 q 28 696 28 544 q 261 1006 28 1006 q 437 925 376 1006 q 498 696 498 845 z "},"⁴":{"ha":526,"x_min":8,"x_max":514,"o":"m 514 500 l 429 500 l 429 397 l 268 397 l 268 500 l 8 500 l 8 604 l 269 996 l 429 996 l 429 614 l 514 614 l 514 500 m 268 614 l 268 725 q 272 850 268 783 q 248 795 266 832 q 220 743 230 759 l 134 614 l 268 614 z "},"⁵":{"ha":526,"x_min":57,"x_max":485,"o":"m 269 781 q 426 730 366 781 q 485 593 485 680 q 420 440 485 494 q 232 386 356 386 q 57 421 125 386 l 57 551 q 136 515 91 530 q 218 501 181 501 q 335 590 335 501 q 306 654 335 633 q 221 676 276 676 q 140 664 178 676 l 66 693 l 92 991 l 444 991 l 444 867 l 203 867 l 192 775 q 269 781 230 781 z "},"⁶":{"ha":526,"x_min":31,"x_max":494,"o":"m 494 595 q 435 440 494 497 q 271 383 376 383 q 97 448 163 383 q 31 619 31 513 q 401 1014 31 903 l 447 904 q 267 823 328 868 q 187 720 205 779 l 195 720 q 246 765 216 749 q 326 781 276 781 q 450 733 405 781 q 494 595 494 686 m 261 504 q 322 528 301 504 q 343 595 343 552 q 323 654 343 631 q 264 677 302 677 q 176 606 176 677 q 199 532 176 561 q 261 504 222 504 z "},"⁷":{"ha":526,"x_min":40,"x_max":493,"o":"m 104 397 l 335 867 l 40 867 l 40 991 l 493 991 l 493 890 l 275 397 l 104 397 z "},"⁸":{"ha":526,"x_min":31,"x_max":496,"o":"m 264 1006 q 416 965 359 1006 q 473 852 473 924 q 451 776 473 810 q 376 713 428 742 q 450 664 427 684 q 484 618 472 643 q 496 564 496 593 q 431 434 496 484 q 264 383 366 383 q 93 431 155 383 q 31 559 31 478 q 55 640 31 604 q 138 707 79 675 q 52 852 52 767 q 111 964 52 923 q 264 1006 170 1006 m 183 559 q 203 510 183 529 q 261 490 222 490 q 321 510 301 490 q 342 559 342 529 q 252 644 342 614 q 183 559 183 614 m 262 899 q 218 883 233 899 q 203 847 203 867 q 220 802 203 819 q 264 771 238 785 q 307 801 290 784 q 323 847 323 818 q 309 883 323 867 q 262 899 295 899 z "},"⁹":{"ha":526,"x_min":29,"x_max":492,"o":"m 492 729 q 408 471 492 557 q 168 386 325 386 q 82 396 119 386 l 82 524 q 150 509 115 509 q 292 547 245 509 q 345 673 339 585 l 339 673 q 205 607 291 607 q 76 657 123 607 q 29 796 29 707 q 91 947 29 889 q 253 1004 153 1004 q 428 932 364 1004 q 492 729 492 860 m 261 884 q 203 860 225 884 q 180 791 180 836 q 199 732 180 754 q 258 710 218 710 q 319 731 296 710 q 343 782 343 753 q 320 856 343 827 q 261 884 297 884 z "}," ":{"ha":694,"x_min":0,"x_max":0,"o":""}," ":{"ha":1389,"x_min":0,"x_max":0,"o":""}," ":{"ha":694,"x_min":0,"x_max":0,"o":""}," ":{"ha":1389,"x_min":0,"x_max":0,"o":""}," ":{"ha":463,"x_min":0,"x_max":0,"o":""}," ":{"ha":347,"x_min":0,"x_max":0,"o":""}," ":{"ha":232,"x_min":0,"x_max":0,"o":""}," ":{"ha":777,"x_min":0,"x_max":0,"o":""}," ":{"ha":396,"x_min":0,"x_max":0,"o":""}," ":{"ha":278,"x_min":0,"x_max":0,"o":""}," ":{"ha":139,"x_min":0,"x_max":0,"o":""},"​":{"ha":0,"x_min":0,"x_max":0,"o":""},"\ufeff":{"ha":0,"x_min":0,"x_max":0,"o":""},"￼":{"ha":1389,"x_min":57,"x_max":1346,"o":"m 57 823 l 57 1029 l 262 1029 l 262 954 l 132 954 l 132 823 l 57 823 m 1140 954 l 1140 1029 l 1346 1029 l 1346 823 l 1272 823 l 1272 954 l 1140 954 m 57 -260 l 57 -54 l 132 -54 l 132 -186 l 262 -186 l 262 -260 l 57 -260 m 1140 -260 l 1140 -186 l 1272 -186 l 1272 -54 l 1346 -54 l 1346 -260 l 1140 -260 m 875 -260 l 875 -186 l 1060 -186 l 1060 -260 l 875 -260 m 345 -260 l 345 -186 l 528 -186 l 528 -260 l 345 -260 m 345 954 l 345 1029 l 528 1029 l 528 954 l 345 954 m 1346 26 l 1272 26 l 1272 210 l 1346 210 l 1346 26 m 1346 558 l 1272 558 l 1272 742 l 1346 742 l 1346 558 m 610 -260 l 610 -186 l 794 -186 l 794 -260 l 610 -260 m 132 26 l 57 26 l 57 210 l 132 210 l 132 26 m 610 954 l 610 1029 l 794 1029 l 794 954 l 610 954 m 875 954 l 875 1029 l 1060 1029 l 1060 954 l 875 954 m 132 292 l 57 292 l 57 476 l 132 476 l 132 292 m 132 558 l 57 558 l 57 742 l 132 742 l 132 558 m 1346 292 l 1272 292 l 1272 476 l 1346 476 l 1346 292 m 586 427 q 540 275 586 328 q 408 222 494 222 q 276 275 322 222 q 231 427 231 328 q 276 578 231 526 q 408 631 322 631 q 540 578 494 631 q 586 427 586 526 m 317 427 q 408 293 317 293 q 500 427 500 293 q 408 559 500 559 q 317 427 317 559 m 643 625 l 760 625 q 871 603 833 625 q 909 524 909 580 q 894 467 909 490 q 848 439 878 444 l 848 436 q 905 404 888 427 q 921 343 921 381 q 884 258 921 288 q 783 228 847 228 l 643 228 l 643 625 m 726 468 l 771 468 q 814 479 802 468 q 827 513 827 491 q 812 546 827 536 q 766 555 798 555 l 726 555 l 726 468 m 726 401 l 726 297 l 777 297 q 822 312 810 297 q 835 351 835 326 q 774 401 835 401 l 726 401 m 1011 224 q 957 231 976 224 l 957 300 q 1003 294 986 294 q 1061 353 1061 294 l 1061 625 l 1146 625 l 1146 355 q 1111 257 1146 291 q 1011 224 1075 224 z "},"�":{"ha":1389,"x_min":57,"x_max":1331,"o":"m 693 1055 l 1331 419 l 693 -216 l 57 419 l 693 1055 m 737 249 l 737 281 q 752 337 737 315 q 811 392 767 359 q 906 490 881 448 q 930 593 930 533 q 867 736 930 684 q 692 789 804 789 q 575 770 638 789 q 464 722 512 751 l 519 602 q 689 656 628 656 q 753 636 732 656 q 774 585 774 616 q 757 523 774 549 q 692 461 741 498 q 615 377 635 415 q 595 289 595 339 l 595 249 l 737 249 m 576 62 q 601 -5 576 20 q 672 -29 625 -29 q 742 -4 717 -29 q 766 62 766 20 q 742 131 766 106 q 672 155 718 155 q 600 131 623 155 q 576 62 576 106 z "},"ǰ":{"ha":424,"x_min":-89,"x_max":505,"o":"m 47 -334 q -89 -317 -32 -334 l -89 -154 q 8 -167 -41 -167 q 84 -138 60 -167 q 109 -52 109 -109 l 109 758 l 315 758 l 315 -82 q 245 -268 315 -203 q 47 -334 176 -334 m 505 1064 l 505 1046 q 400 932 448 989 q 332 842 353 876 l 90 842 q 33 918 70 873 q -84 1046 -3 962 l -84 1064 l 54 1064 q 209 945 153 1001 q 368 1064 266 1004 l 505 1064 z "},"ʼ":{"ha":301,"x_min":17,"x_max":285,"o":"m 275 991 l 285 977 q 165 652 251 843 l 17 652 q 85 991 64 852 l 275 991 z "},"ϑ":{"ha":1017,"x_min":28,"x_max":975,"o":"m 672 672 q 610 850 657 787 q 494 914 563 914 q 431 895 454 914 q 407 838 407 876 q 477 717 407 760 q 672 672 547 673 m 888 517 l 889 488 l 889 457 q 782 107 889 228 q 467 -14 674 -14 q 244 42 318 -14 q 170 211 170 98 q 174 282 170 247 q 178 347 178 318 q 169 385 178 376 q 140 395 159 395 q 79 375 112 395 l 28 498 q 232 557 129 557 q 328 525 293 557 q 363 433 363 493 q 358 345 363 391 q 353 252 353 300 q 386 174 353 201 q 481 147 418 147 q 629 225 579 147 q 679 471 679 303 l 679 492 l 677 514 q 420 555 526 515 q 259 665 314 594 q 204 831 204 736 q 280 1005 204 940 q 490 1069 357 1069 q 750 970 654 1069 q 876 672 846 871 l 975 672 l 975 517 l 888 517 z "},"ϒ":{"ha":876,"x_min":0,"x_max":872,"o":"m 432 578 q 515 753 474 670 q 591 896 555 836 q 666 978 626 956 q 770 1000 705 1000 q 872 982 827 1000 l 872 827 q 825 835 842 835 q 780 820 798 835 q 745 779 762 806 q 637 593 699 714 q 539 376 576 473 l 539 0 l 330 0 l 330 379 l 0 991 l 228 991 l 432 578 z "},"ϖ":{"ha":1388,"x_min":35,"x_max":1353,"o":"m 916 -14 q 699 129 755 -14 l 692 129 q 475 -14 636 -14 q 247 78 325 -14 q 170 340 170 170 q 212 603 170 461 l 35 603 l 35 689 l 153 758 l 1353 758 l 1353 603 l 1178 603 q 1221 340 1221 461 q 1143 78 1221 170 q 916 -14 1065 -14 m 1031 345 q 987 603 1031 459 l 401 603 q 359 347 359 467 q 391 196 359 245 q 492 147 422 147 q 574 186 549 147 q 600 317 600 225 l 600 410 l 790 410 l 790 317 q 816 186 790 225 q 899 147 842 147 q 1000 196 968 147 q 1031 345 1031 245 z "},"Ḿ":{"ha":1310,"x_min":125,"x_max":1185,"o":"m 545 0 l 306 778 l 300 778 q 313 461 313 541 l 313 0 l 125 0 l 125 991 l 411 991 l 646 233 l 650 233 l 899 991 l 1185 991 l 1185 0 l 989 0 l 989 469 q 990 546 989 503 q 999 777 991 589 l 993 777 l 737 0 l 545 0 m 531 1072 l 531 1090 q 690 1295 648 1226 l 922 1295 l 922 1280 q 802 1176 887 1245 q 669 1072 717 1106 l 531 1072 z "},"ḿ":{"ha":1364,"x_min":109,"x_max":1260,"o":"m 787 0 l 581 0 l 581 443 q 553 566 581 525 q 467 607 526 607 q 351 549 387 607 q 315 357 315 490 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 394 743 336 713 q 526 772 452 772 q 757 661 696 772 l 775 661 q 865 743 806 714 q 999 772 924 772 q 1194 706 1128 772 q 1260 494 1260 640 l 1260 0 l 1053 0 l 1053 443 q 1025 566 1053 525 q 939 607 998 607 q 825 553 863 607 q 787 380 787 498 l 787 0 m 560 842 l 560 860 q 720 1064 677 996 l 951 1064 l 951 1050 q 831 945 916 1015 q 698 842 746 876 l 560 842 z "},"Ḁ":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 652 -244 q 604 -362 652 -317 q 479 -407 555 -407 q 357 -363 404 -407 q 311 -245 311 -320 q 357 -129 311 -172 q 479 -85 403 -85 q 603 -130 554 -85 q 652 -244 652 -174 m 545 -245 q 526 -198 545 -215 q 479 -180 508 -180 q 433 -198 451 -180 q 414 -245 414 -215 q 431 -294 414 -276 q 479 -311 447 -311 q 526 -294 508 -311 q 545 -245 545 -276 z "},"ḁ":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 574 -244 q 526 -362 574 -317 q 401 -407 477 -407 q 279 -363 326 -407 q 233 -245 233 -320 q 279 -129 233 -172 q 401 -85 325 -85 q 525 -130 476 -85 q 574 -244 574 -174 m 467 -245 q 448 -198 467 -215 q 401 -180 430 -180 q 355 -198 373 -180 q 336 -245 336 -215 q 353 -294 336 -276 q 401 -311 369 -311 q 448 -294 430 -311 q 467 -245 467 -276 z "},"Ὅ":{"ha":1161,"x_min":-270,"x_max":1080,"o":"m 1080 497 q 958 119 1080 251 q 608 -14 836 -14 q 258 119 380 -14 q 136 498 136 251 q 259 877 136 746 q 610 1007 381 1007 q 959 876 838 1007 q 1080 497 1080 744 m 357 497 q 420 247 357 331 q 608 163 483 163 q 860 497 860 163 q 610 832 860 832 q 420 748 484 832 q 357 497 357 663 m -270 859 q -218 952 -270 914 q -71 1003 -167 990 l -71 953 q -144 925 -121 938 q -168 893 -168 913 q -155 875 -168 881 q -127 863 -142 869 q -99 848 -112 857 q -87 821 -87 840 q -108 780 -87 795 q -174 765 -130 765 q -245 790 -220 765 q -270 859 -270 815 m -35 789 l -22 834 q 20 993 6 934 l 198 993 l 198 979 q 58 771 170 916 l -35 771 l -35 789 z "},"˳":{"ha":463,"x_min":60,"x_max":400,"o":"m 400 -244 q 352 -362 400 -317 q 228 -407 304 -407 q 106 -363 152 -407 q 60 -245 60 -320 q 105 -129 60 -172 q 228 -85 151 -85 q 351 -130 302 -85 q 400 -244 400 -174 m 293 -245 q 275 -198 293 -215 q 228 -180 256 -180 q 181 -198 199 -180 q 163 -245 163 -215 q 179 -294 163 -276 q 228 -311 195 -311 q 275 -294 256 -311 q 293 -245 293 -276 z "},"ﬃ":{"ha":1497,"x_min":28,"x_max":1398,"o":"m 528 603 l 349 603 l 349 0 l 142 0 l 142 603 l 28 603 l 28 703 l 142 758 l 142 814 q 205 1003 142 943 q 410 1063 269 1063 q 600 1031 517 1063 l 547 879 q 432 899 485 899 q 368 872 388 899 q 349 806 349 846 l 349 758 l 528 758 l 528 603 m 1065 603 l 886 603 l 886 0 l 680 0 l 680 603 l 566 603 l 566 703 l 680 758 l 680 814 q 743 1003 680 943 q 947 1063 807 1063 q 1138 1031 1055 1063 l 1085 879 q 970 899 1023 899 q 906 872 926 899 q 886 806 886 846 l 886 758 l 1065 758 l 1065 603 m 1173 954 q 1286 1055 1173 1055 q 1398 954 1398 1055 q 1370 879 1398 906 q 1286 852 1342 852 q 1173 954 1173 852 m 1389 0 l 1182 0 l 1182 758 l 1389 758 l 1389 0 z "},"ﬄ":{"ha":1497,"x_min":28,"x_max":1389,"o":"m 528 603 l 349 603 l 349 0 l 142 0 l 142 603 l 28 603 l 28 703 l 142 758 l 142 814 q 205 1003 142 943 q 410 1063 269 1063 q 600 1031 517 1063 l 547 879 q 432 899 485 899 q 368 872 388 899 q 349 806 349 846 l 349 758 l 528 758 l 528 603 m 1065 603 l 886 603 l 886 0 l 680 0 l 680 603 l 566 603 l 566 703 l 680 758 l 680 814 q 743 1003 680 943 q 947 1063 807 1063 q 1138 1031 1055 1063 l 1085 879 q 970 899 1023 899 q 906 872 926 899 q 886 806 886 846 l 886 758 l 1065 758 l 1065 603 m 1389 0 l 1182 0 l 1182 1055 l 1389 1055 l 1389 0 z "},"Ơ":{"ha":1146,"x_min":81,"x_max":1187,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 876 81 745 q 555 1007 326 1007 q 911 869 790 1007 q 974 1055 974 911 l 1178 1055 l 1187 1040 q 1115 852 1163 920 q 983 750 1067 784 q 1025 497 1025 642 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 1105 0 z "},"ơ":{"ha":943,"x_min":62,"x_max":1007,"o":"m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 576 749 508 772 q 692 679 644 726 q 793 872 793 709 l 997 872 l 1007 857 q 959 713 989 766 q 882 624 930 660 q 762 570 833 587 q 798 380 798 485 m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 860 0 z "},"Ư":{"ha":1229,"x_min":118,"x_max":1243,"o":"m 932 991 l 932 864 q 1006 932 982 882 q 1029 1055 1029 983 l 1234 1055 l 1243 1040 q 1185 879 1221 936 q 1087 788 1149 823 q 932 739 1025 753 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 368 q 375 213 328 262 q 526 163 423 163 q 676 215 629 163 q 722 370 722 267 l 722 991 l 932 991 m 1050 0 z "},"ư":{"ha":1055,"x_min":104,"x_max":1120,"o":"m 646 0 l 618 97 l 606 97 q 512 16 573 45 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 679 q 879 744 852 694 q 905 872 905 793 l 1109 872 l 1120 857 q 1061 694 1098 751 q 963 603 1025 637 q 804 554 901 568 l 804 0 l 646 0 m 913 0 z "},"̀":{"ha":0,"x_min":-680,"x_max":-288,"o":"m -425 842 q -551 938 -468 871 q -680 1050 -633 1005 l -680 1064 l -448 1064 q -288 860 -405 996 l -288 842 l -425 842 z "},"́":{"ha":0,"x_min":-553,"x_max":-162,"o":"m -553 842 l -553 860 q -394 1064 -437 996 l -162 1064 l -162 1050 q -282 945 -197 1015 q -416 842 -368 876 l -553 842 z "},"̃":{"ha":0,"x_min":-716,"x_max":-154,"o":"m -547 913 q -587 895 -568 913 q -615 840 -606 877 l -716 840 q -660 994 -709 939 q -532 1050 -612 1050 q -477 1039 -504 1050 q -424 1014 -450 1027 q -373 990 -398 1001 q -323 979 -348 979 q -283 997 -302 979 q -255 1051 -264 1015 l -154 1051 q -211 897 -161 953 q -338 842 -260 842 q -393 853 -366 842 q -446 877 -420 864 q -497 902 -472 890 q -547 913 -522 913 z "},"̉":{"ha":0,"x_min":-547,"x_max":-239,"o":"m -239 1008 q -349 875 -239 903 l -355 827 l -473 827 l -489 926 q -420 952 -438 935 q -401 994 -401 969 q -416 1027 -401 1016 q -453 1039 -430 1039 q -547 1023 -497 1039 l -547 1137 q -491 1148 -527 1144 q -428 1153 -456 1153 q -286 1115 -333 1153 q -239 1008 -239 1078 z "},"̣":{"ha":0,"x_min":-547,"x_max":-322,"o":"m -547 -191 q -435 -89 -547 -89 q -322 -191 -322 -89 q -351 -265 -322 -239 q -435 -292 -379 -292 q -547 -191 -547 -292 z "},"Ѐ":{"ha":778,"x_min":125,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 389 1071 q 263 1167 346 1101 q 134 1279 180 1234 l 134 1293 l 366 1293 q 526 1089 409 1225 l 526 1071 l 389 1071 z "},"Ѝ":{"ha":1143,"x_min":125,"x_max":1018,"o":"m 125 991 l 314 991 l 314 513 l 311 385 l 304 239 l 309 239 l 766 991 l 1018 991 l 1018 0 l 831 0 l 831 476 q 843 760 831 572 l 838 760 l 378 0 l 125 0 l 125 991 m 536 1071 q 411 1167 494 1101 q 282 1279 328 1234 l 282 1293 l 514 1293 q 673 1089 557 1225 l 673 1071 l 536 1071 z "},"ѐ":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 420 842 q 295 938 378 871 q 166 1050 212 1005 l 166 1064 l 398 1064 q 557 860 441 996 l 557 842 l 420 842 z "},"ѝ":{"ha":1000,"x_min":109,"x_max":892,"o":"m 309 758 l 309 458 q 293 227 309 411 l 643 758 l 892 758 l 892 0 l 692 0 l 692 302 q 705 530 692 383 l 357 0 l 109 0 l 109 758 l 309 758 m 488 842 q 362 938 445 871 q 233 1050 279 1005 l 233 1064 l 465 1064 q 625 860 508 996 l 625 842 l 488 842 z "},"Ѡ":{"ha":1511,"x_min":81,"x_max":1430,"o":"m 1040 838 q 983 826 1014 838 q 907 785 953 815 l 833 930 q 937 984 877 964 q 1047 1004 996 1004 q 1330 878 1229 1004 q 1430 521 1430 751 q 1319 126 1430 267 q 1006 -14 1208 -14 q 867 11 927 -14 q 754 86 806 35 q 643 11 702 35 q 505 -14 584 -14 q 192 126 304 -14 q 81 521 81 266 q 181 877 81 750 q 464 1004 282 1004 q 573 985 514 1004 q 677 930 633 965 l 604 785 q 527 826 558 815 q 471 838 496 838 q 336 755 384 838 q 288 519 288 673 q 351 259 288 349 q 533 170 414 170 q 647 216 589 170 l 647 485 l 857 485 l 857 216 q 979 170 906 170 q 1161 259 1099 170 q 1223 519 1223 349 q 1175 755 1223 672 q 1040 838 1126 838 z "},"ѡ":{"ha":1229,"x_min":4,"x_max":1175,"o":"m 272 0 l 4 758 l 221 758 l 353 323 q 383 168 375 256 l 389 168 q 440 323 399 224 l 514 511 l 428 758 l 661 758 l 786 338 l 828 183 l 833 183 q 935 425 903 288 q 966 758 966 562 l 1175 758 q 1107 323 1175 509 q 899 0 1040 138 l 713 0 l 602 258 l 485 0 l 272 0 z "},"Ѣ":{"ha":935,"x_min":0,"x_max":872,"o":"m 383 762 l 383 611 l 467 611 q 766 532 661 611 q 872 310 872 454 q 463 0 872 0 l 174 0 l 174 762 l 0 762 l 0 918 l 174 918 l 174 1055 l 383 1055 l 383 918 l 639 918 l 639 762 l 383 762 m 383 172 l 454 172 q 610 207 561 172 q 660 310 660 241 q 610 409 660 378 q 437 439 559 439 l 383 439 l 383 172 z "},"ѣ":{"ha":920,"x_min":0,"x_max":871,"o":"m 382 603 l 382 465 l 528 465 q 787 410 703 465 q 871 241 871 354 q 536 0 871 0 l 175 0 l 175 603 l 0 603 l 0 758 l 175 758 l 175 895 l 382 895 l 382 758 l 625 758 l 625 603 l 382 603 m 664 239 q 629 302 664 283 q 524 322 593 322 l 382 322 l 382 143 l 526 143 q 664 239 664 143 z "},"Ѥ":{"ha":1320,"x_min":125,"x_max":1271,"o":"m 1111 428 l 694 428 q 774 233 703 305 q 960 161 844 161 q 1091 175 1025 161 q 1234 214 1156 189 l 1234 37 q 1095 -2 1163 10 q 946 -14 1027 -14 q 612 100 732 -14 q 475 428 492 213 l 335 428 l 335 0 l 125 0 l 125 991 l 335 991 l 335 603 l 481 603 q 640 899 511 793 q 966 1006 768 1006 q 1271 936 1122 1006 l 1203 765 q 1081 811 1142 791 q 961 831 1020 831 q 780 772 850 831 q 696 603 709 713 l 1111 603 l 1111 428 z "},"ѥ":{"ha":1111,"x_min":109,"x_max":1061,"o":"m 828 -14 q 574 68 665 -14 q 465 313 482 151 l 315 313 l 315 0 l 109 0 l 109 758 l 315 758 l 315 467 l 465 467 q 569 696 481 619 q 814 772 656 772 q 940 758 876 772 q 1057 718 1005 743 l 999 576 q 822 619 903 619 q 718 581 754 619 q 676 467 682 543 l 962 467 l 962 313 l 676 313 q 722 183 682 226 q 839 140 761 140 q 1061 195 942 140 l 1061 33 q 828 -14 969 -14 z "},"Ѧ":{"ha":1014,"x_min":0,"x_max":1014,"o":"m 810 0 l 668 428 l 600 428 l 600 0 l 415 0 l 415 428 l 346 428 l 205 0 l 0 0 l 378 996 l 635 996 l 1014 0 l 810 0 m 399 589 l 611 589 q 507 869 520 823 q 399 589 500 834 z "},"ѧ":{"ha":889,"x_min":0,"x_max":889,"o":"m 587 286 l 534 286 l 534 0 l 355 0 l 355 286 l 301 286 l 199 0 l 0 0 l 319 758 l 568 758 l 889 0 l 690 0 l 587 286 m 354 427 l 536 427 l 513 481 q 444 646 464 587 q 354 427 427 583 z "},"Ѩ":{"ha":1396,"x_min":125,"x_max":1396,"o":"m 1192 0 l 1050 428 l 982 428 l 982 0 l 798 0 l 798 428 l 728 428 l 587 0 l 382 0 l 545 428 l 335 428 l 335 0 l 125 0 l 125 991 l 335 991 l 335 603 l 611 603 l 760 996 l 1017 996 l 1396 0 l 1192 0 m 781 589 l 993 589 l 958 682 q 889 869 896 843 q 781 589 882 834 z "},"ѩ":{"ha":1253,"x_min":109,"x_max":1253,"o":"m 943 311 l 899 311 l 899 0 l 720 0 l 720 311 l 675 311 l 562 0 l 364 0 l 496 313 l 288 313 l 288 0 l 109 0 l 109 758 l 288 758 l 288 467 l 559 467 l 684 758 l 932 758 l 1253 0 l 1054 0 l 943 311 m 730 452 l 889 452 q 808 646 824 600 q 730 452 794 596 z "},"Ѫ":{"ha":1117,"x_min":28,"x_max":1089,"o":"m 28 0 l 131 307 q 227 492 170 429 q 374 579 284 555 l 119 897 l 119 991 l 1002 991 l 1002 897 l 742 579 q 890 489 833 554 q 986 307 947 425 l 1089 0 l 878 0 l 794 261 q 738 379 766 345 q 664 424 709 413 l 664 0 l 456 0 l 456 424 q 378 379 408 413 q 322 261 349 345 l 239 0 l 28 0 m 558 604 l 730 817 l 387 817 l 558 604 z "},"ѫ":{"ha":865,"x_min":14,"x_max":851,"o":"m 14 0 l 93 235 q 162 368 120 319 q 267 439 205 417 l 71 686 l 71 758 l 800 758 l 800 686 l 602 437 q 703 367 662 416 q 772 235 744 318 l 851 0 l 676 0 l 612 200 q 576 275 595 252 q 525 304 557 297 l 525 0 l 346 0 l 346 306 q 289 276 309 299 q 253 200 269 253 l 189 0 l 14 0 m 433 465 l 555 618 l 313 618 l 433 465 z "},"Ѭ":{"ha":1491,"x_min":125,"x_max":1463,"o":"m 401 0 l 504 307 q 568 428 534 393 l 335 428 l 335 0 l 125 0 l 125 991 l 335 991 l 335 603 l 728 603 l 493 897 l 493 991 l 1375 991 l 1375 897 l 1116 579 q 1264 489 1207 554 q 1360 307 1321 425 l 1463 0 l 1251 0 l 1168 261 q 1112 379 1140 345 q 1038 424 1083 413 l 1038 0 l 829 0 l 829 424 q 752 379 781 413 q 696 261 723 345 l 612 0 l 401 0 m 932 604 l 1104 817 l 761 817 l 932 604 m 374 0 z "},"ѭ":{"ha":1222,"x_min":109,"x_max":1208,"o":"m 371 0 l 450 235 q 492 313 470 292 l 288 313 l 288 0 l 109 0 l 109 758 l 288 758 l 288 467 l 602 467 l 428 686 l 428 758 l 1157 758 l 1157 686 l 958 437 q 1060 367 1019 416 q 1129 235 1101 318 l 1208 0 l 1034 0 l 970 200 q 934 273 954 249 q 882 304 913 298 l 882 0 l 703 0 l 703 306 q 646 276 666 299 q 610 200 625 253 l 546 0 l 371 0 m 790 465 l 913 618 l 669 618 l 790 465 m 357 0 z "},"Ѯ":{"ha":878,"x_min":28,"x_max":818,"o":"m 653 1204 q 736 1193 703 1204 l 736 1090 q 676 1099 718 1099 q 549 994 613 1099 q 725 909 663 971 q 787 760 787 846 q 725 602 787 665 q 555 522 663 539 l 555 518 q 749 443 680 505 q 818 282 818 380 q 704 66 818 146 q 389 -14 589 -14 q 293 -19 326 -14 q 246 -38 260 -25 q 232 -79 232 -52 q 330 -139 232 -139 q 461 -136 391 -139 l 566 -132 q 681 -160 661 -132 l 681 -315 q 640 -296 670 -304 q 572 -288 609 -288 l 450 -290 l 288 -293 q 97 -235 167 -293 q 28 -77 28 -176 q 108 94 28 41 q 361 151 188 146 q 551 188 493 154 q 610 297 610 222 q 529 398 610 363 q 292 433 449 433 l 199 433 l 199 597 l 282 597 q 511 627 439 597 q 583 726 583 657 q 538 807 583 777 q 403 838 493 838 q 134 757 262 838 l 41 897 q 160 960 98 934 q 302 997 222 985 q 149 1166 237 1078 l 149 1185 l 290 1185 q 432 1053 327 1158 q 514 1147 485 1120 q 578 1189 544 1173 q 653 1204 612 1204 z "},"ѯ":{"ha":771,"x_min":21,"x_max":718,"o":"m 604 936 q 688 925 653 936 l 688 822 q 628 831 665 831 q 521 755 571 831 q 652 685 606 732 q 697 571 697 637 q 662 465 697 507 q 555 404 626 423 l 555 397 q 681 332 643 374 q 718 221 718 290 q 619 47 718 107 q 336 -14 520 -14 q 230 -27 263 -14 q 197 -75 197 -40 q 223 -125 197 -111 q 309 -139 248 -139 q 420 -136 366 -139 q 505 -132 473 -132 q 618 -160 597 -132 l 618 -315 q 577 -296 606 -304 q 513 -288 548 -288 q 406 -290 467 -288 q 261 -293 345 -293 q 81 -241 141 -293 q 21 -85 21 -189 q 99 90 21 34 q 338 146 177 146 q 472 168 427 146 q 517 233 517 189 q 464 301 517 279 q 301 323 411 323 l 221 323 l 221 467 l 297 467 q 464 486 414 467 q 513 546 513 505 q 477 601 513 583 q 358 619 441 619 q 240 606 306 619 q 119 571 174 593 l 58 715 q 145 743 102 732 q 231 761 189 754 l 168 834 l 109 899 l 109 917 l 241 917 q 383 785 280 889 q 468 880 439 854 q 531 921 497 905 q 604 936 564 936 z "},"Ѱ":{"ha":1217,"x_min":74,"x_max":1143,"o":"m 1143 667 q 1042 386 1143 476 q 737 296 941 296 l 703 296 l 703 0 l 514 0 l 514 296 l 479 296 q 173 386 273 296 q 74 664 74 475 l 74 991 l 271 991 l 271 667 q 321 513 271 560 q 493 465 372 465 l 514 465 l 514 991 l 703 991 l 703 465 l 724 465 q 894 514 842 465 q 946 664 946 564 l 946 991 l 1143 991 l 1143 667 z "},"ѱ":{"ha":1162,"x_min":97,"x_max":1089,"o":"m 684 1054 l 684 147 q 851 215 803 159 q 899 392 899 271 q 844 758 899 544 l 1036 758 q 1089 390 1089 568 q 987 102 1089 204 q 684 -12 885 -1 l 684 -334 l 492 -334 l 492 -12 q 196 92 295 -6 q 97 376 97 190 l 97 758 l 294 758 l 294 371 q 338 204 294 254 q 492 146 381 154 l 492 1054 l 684 1054 z "},"Ѳ":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 553 163 q 727 228 663 163 q 804 421 791 293 l 300 421 q 375 231 313 299 q 553 163 437 163 m 554 832 q 384 773 447 832 q 302 596 321 714 l 802 596 q 723 771 785 711 q 554 832 661 832 z "},"ѳ":{"ha":860,"x_min":62,"x_max":798,"o":"m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 431 153 q 534 192 496 153 q 582 310 572 231 l 277 310 q 324 192 287 231 q 431 153 361 153 m 429 606 q 325 567 363 606 q 277 453 287 529 l 582 453 q 535 567 572 529 q 429 606 498 606 z "},"Ѵ":{"ha":996,"x_min":0,"x_max":981,"o":"m 913 825 q 860 801 882 825 q 810 697 838 777 l 566 0 l 336 0 l 0 991 l 212 991 l 408 375 q 452 172 437 267 q 500 375 463 259 l 615 728 q 684 897 652 844 q 755 975 715 949 q 854 1000 796 1000 q 981 974 933 1000 l 981 810 q 913 825 946 825 z "},"ѵ":{"ha":840,"x_min":0,"x_max":836,"o":"m 0 758 l 216 758 l 355 334 q 395 170 389 223 l 397 170 q 436 329 406 245 l 519 562 q 580 694 554 659 q 642 747 606 730 q 736 764 678 764 q 836 745 787 764 l 836 585 q 781 597 807 597 q 742 583 759 597 q 710 530 724 568 l 501 0 l 290 0 l 0 758 z "},"Ѷ":{"ha":996,"x_min":0,"x_max":981,"o":"m 913 825 q 860 801 882 825 q 810 697 838 777 l 566 0 l 336 0 l 0 991 l 212 991 l 408 375 q 452 172 437 267 q 500 375 463 259 l 615 728 q 684 897 652 844 q 755 975 715 949 q 854 1000 796 1000 q 981 974 933 1000 l 981 810 q 913 825 946 825 m 595 1071 q 479 1173 553 1104 q 382 1279 405 1242 l 382 1293 l 586 1293 q 642 1186 608 1244 q 704 1089 676 1127 l 704 1071 l 595 1071 m 325 1071 q 204 1177 275 1109 q 113 1279 134 1245 l 113 1293 l 317 1293 q 373 1186 339 1244 q 435 1089 407 1127 l 435 1071 l 325 1071 z "},"ѷ":{"ha":840,"x_min":0,"x_max":836,"o":"m 0 758 l 216 758 l 355 334 q 395 170 389 223 l 397 170 q 436 329 406 245 l 519 562 q 580 694 554 659 q 642 747 606 730 q 736 764 678 764 q 836 745 787 764 l 836 585 q 781 597 807 597 q 742 583 759 597 q 710 530 724 568 l 501 0 l 290 0 l 0 758 m 532 842 q 416 944 490 875 q 319 1050 342 1013 l 319 1064 l 524 1064 q 580 957 546 1015 q 642 860 614 898 l 642 842 l 532 842 m 262 842 q 142 948 213 880 q 50 1050 71 1016 l 50 1064 l 254 1064 q 311 957 277 1015 q 372 860 345 898 l 372 842 l 262 842 z "},"Ѹ":{"ha":1832,"x_min":81,"x_max":1832,"o":"m 1042 758 l 1268 758 l 1411 332 q 1436 200 1430 276 l 1440 200 q 1470 332 1448 270 l 1610 758 l 1832 758 l 1511 -97 q 1385 -275 1467 -216 q 1194 -334 1303 -334 q 1089 -322 1141 -334 l 1089 -158 q 1171 -167 1126 -167 q 1266 -133 1225 -167 q 1331 -32 1308 -100 l 1343 5 l 1042 758 m 970 497 q 858 116 970 245 q 525 -14 746 -14 q 193 115 305 -14 q 81 498 81 243 q 193 880 81 753 q 526 1007 306 1007 q 858 879 745 1007 q 970 497 970 751 m 297 497 q 353 243 297 323 q 525 163 408 163 q 697 240 642 163 q 753 497 753 318 q 698 753 753 674 q 526 832 644 832 q 352 751 408 832 q 297 497 297 671 z "},"ѹ":{"ha":1590,"x_min":62,"x_max":1590,"o":"m 800 758 l 1026 758 l 1169 332 q 1194 200 1187 281 l 1198 200 q 1227 332 1207 270 l 1368 758 l 1590 758 l 1270 -97 q 1144 -275 1225 -216 q 953 -334 1062 -334 q 847 -322 901 -334 l 847 -158 q 929 -167 886 -167 q 1025 -133 984 -167 q 1089 -32 1066 -100 l 1101 5 l 800 758 m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 z "},"Ѻ":{"ha":1161,"x_min":81,"x_max":1080,"o":"m 1080 497 q 978 150 1080 279 q 682 -7 876 20 q 582 -85 659 -85 q 482 -7 502 -85 q 184 148 288 18 q 81 498 81 277 q 183 846 81 718 q 484 1000 286 975 q 517 1058 494 1041 q 582 1075 541 1075 q 642 1060 618 1075 q 679 1000 667 1045 q 977 846 873 975 q 1080 497 1080 717 m 297 497 q 345 281 297 363 q 488 174 393 199 q 526 212 503 202 q 582 222 549 222 q 636 212 612 222 q 675 174 659 202 q 864 497 864 224 q 677 819 864 767 q 582 768 651 768 q 485 819 513 768 q 297 497 297 767 z "},"ѻ":{"ha":943,"x_min":62,"x_max":880,"o":"m 880 380 q 799 123 880 221 q 562 0 718 26 q 532 -56 556 -36 q 471 -75 507 -75 q 408 -55 432 -75 q 378 1 384 -35 q 144 127 227 28 q 62 380 62 227 q 145 640 62 541 q 383 761 227 739 q 471 817 396 817 q 557 761 543 817 q 794 638 709 738 q 880 380 880 539 m 273 380 q 380 155 273 197 q 413 196 393 182 q 471 211 432 211 q 521 200 500 211 q 559 154 542 189 q 643 235 616 175 q 669 380 669 295 q 642 525 669 469 q 566 600 615 581 q 533 549 554 568 q 471 530 512 530 q 411 547 434 530 q 375 600 388 564 q 273 380 273 556 z "},"Ѽ":{"ha":1511,"x_min":81,"x_max":1430,"o":"m 1040 838 q 983 826 1014 838 q 907 785 953 815 l 847 930 q 940 983 888 962 q 1047 1004 993 1004 q 1330 878 1229 1004 q 1430 521 1430 751 q 1319 126 1430 267 q 1006 -14 1208 -14 q 873 11 933 -14 q 755 90 812 35 q 644 13 703 39 q 505 -14 584 -14 q 192 126 304 -14 q 81 521 81 266 q 181 877 81 750 q 464 1004 282 1004 q 571 983 519 1004 q 664 930 623 962 l 604 785 q 527 826 558 815 q 471 838 496 838 q 336 755 384 838 q 288 519 288 673 q 347 259 288 351 q 514 167 406 167 q 642 205 579 167 q 755 310 705 243 q 869 204 806 241 q 997 167 932 167 q 1165 260 1107 167 q 1223 519 1223 353 q 1175 755 1223 672 q 1040 838 1126 838 m 1050 1402 l 1050 1271 l 1039 1271 q 825 1308 917 1271 q 738 1340 755 1335 q 704 1344 721 1344 q 658 1327 673 1344 q 636 1270 644 1310 l 513 1270 l 513 1303 q 534 1409 513 1369 q 593 1466 555 1448 q 701 1485 630 1485 q 779 1472 741 1485 q 857 1443 817 1459 q 942 1415 897 1428 q 1040 1402 987 1402 l 1050 1402 m 865 1177 q 805 1066 865 1114 q 656 1014 744 1019 l 656 1072 q 713 1101 691 1082 q 734 1141 734 1121 q 722 1160 734 1154 q 694 1172 709 1166 q 667 1186 680 1177 q 654 1214 654 1195 q 681 1270 654 1250 q 755 1289 707 1289 q 837 1259 808 1289 q 865 1177 865 1228 z "},"ѽ":{"ha":1236,"x_min":62,"x_max":1174,"o":"m 416 -14 q 152 87 241 -14 q 62 387 62 188 q 142 675 62 578 q 389 772 222 772 q 574 732 490 772 l 515 590 q 450 615 473 610 q 403 619 428 619 q 277 387 277 619 q 317 203 277 267 q 431 140 357 140 q 618 232 530 140 q 806 140 706 140 q 920 204 880 140 q 960 387 960 267 q 833 619 960 619 q 785 614 807 619 q 721 590 763 610 l 663 732 q 847 772 747 772 q 1094 675 1014 772 q 1174 387 1174 578 q 1085 88 1174 190 q 819 -14 996 -14 q 618 62 702 -14 q 416 -14 535 -14 m 908 1189 l 908 1057 l 897 1057 q 683 1094 775 1057 q 596 1126 613 1122 q 562 1131 579 1131 q 516 1113 531 1131 q 494 1055 502 1095 l 371 1055 l 371 1089 q 382 1170 371 1136 q 414 1225 394 1204 q 468 1259 433 1246 q 559 1271 503 1271 q 637 1258 599 1271 q 715 1230 675 1245 q 801 1202 755 1215 q 899 1189 846 1189 l 908 1189 m 724 962 q 662 851 724 899 q 514 800 600 804 l 514 859 q 570 887 548 867 q 593 928 593 907 q 580 947 593 941 q 553 958 568 953 q 525 972 538 964 q 513 1000 513 981 q 539 1055 513 1036 q 614 1075 566 1075 q 695 1045 667 1075 q 724 962 724 1015 z "},"Ѿ":{"ha":1511,"x_min":81,"x_max":1430,"o":"m 1040 838 q 983 826 1014 838 q 907 785 953 815 l 847 930 q 940 983 888 962 q 1047 1004 993 1004 q 1330 878 1229 1004 q 1430 521 1430 751 q 1319 126 1430 267 q 1006 -14 1208 -14 q 873 11 933 -14 q 755 90 812 35 q 644 13 703 39 q 505 -14 584 -14 q 192 126 304 -14 q 81 521 81 266 q 181 877 81 750 q 464 1004 282 1004 q 571 983 519 1004 q 664 930 623 962 l 604 785 q 527 826 558 815 q 471 838 496 838 q 336 755 384 838 q 288 519 288 673 q 351 259 288 349 q 533 170 414 170 q 647 220 587 170 l 647 485 l 857 485 l 857 227 q 979 170 918 170 q 1161 259 1099 170 q 1223 519 1223 349 q 1175 755 1223 672 q 1040 838 1126 838 m 1036 1260 l 1036 1200 l 981 1083 l 943 1083 l 909 1153 l 806 1153 l 772 1083 l 734 1083 l 701 1153 l 597 1153 l 564 1083 l 526 1083 l 472 1200 l 472 1260 l 1036 1260 z "},"ѿ":{"ha":1229,"x_min":4,"x_max":1175,"o":"m 282 0 l 4 758 l 221 758 l 353 326 q 386 171 378 251 l 390 171 q 400 208 394 189 q 518 505 406 226 l 424 758 l 640 758 l 777 338 q 788 301 781 322 q 801 259 795 280 q 814 217 808 237 q 823 183 820 197 l 829 183 q 934 419 901 286 q 966 758 966 553 l 1175 758 q 1108 332 1175 506 q 889 0 1040 158 l 696 0 l 606 261 l 503 0 l 282 0 m 876 979 l 876 920 l 821 803 l 783 803 l 750 872 l 646 872 l 612 803 l 575 803 l 542 872 l 437 872 l 404 803 l 367 803 l 313 920 l 313 979 l 876 979 z "},"Ҁ":{"ha":940,"x_min":81,"x_max":892,"o":"m 582 -14 q 210 118 338 -14 q 81 494 81 249 q 141 765 81 648 q 314 943 201 881 q 581 1006 427 1006 q 892 936 733 1006 l 823 765 q 699 811 762 791 q 575 831 636 831 q 370 742 443 831 q 297 493 297 653 q 578 161 297 161 q 678 168 617 161 q 791 186 739 174 l 791 -334 l 582 -334 l 582 -14 z "},"ҁ":{"ha":728,"x_min":62,"x_max":684,"o":"m 408 -11 q 150 99 237 2 q 62 375 62 197 q 154 675 62 577 q 441 772 245 772 q 684 718 566 772 l 624 561 q 436 606 507 606 q 312 548 351 606 q 273 376 273 491 q 317 212 273 271 q 441 154 361 154 q 615 179 526 154 l 615 -334 l 408 -334 l 408 -11 z "},"҂":{"ha":846,"x_min":71,"x_max":777,"o":"m 399 293 l 591 180 l 543 97 l 350 208 l 228 -4 l 140 46 l 262 260 l 71 371 l 118 454 l 313 343 l 447 578 l 254 689 l 302 774 l 496 663 l 619 875 l 705 825 l 582 611 l 777 500 l 726 416 l 534 528 l 399 293 z "},"҃":{"ha":774,"x_min":122,"x_max":654,"o":"m 268 842 q 245 795 264 812 q 195 778 227 778 q 139 802 157 778 q 122 864 122 826 q 196 943 122 943 l 507 943 q 581 1007 514 1007 q 654 929 654 1007 q 636 866 654 890 q 579 842 618 842 l 268 842 z "},"҄":{"ha":802,"x_min":165,"x_max":703,"o":"m 175 974 q 273 986 228 974 q 358 1014 318 999 q 437 1042 399 1029 q 514 1055 475 1055 q 623 1037 585 1055 q 681 979 660 1019 q 703 873 703 939 l 703 840 l 579 840 q 557 898 572 880 q 511 916 543 916 q 466 907 491 916 q 391 879 441 899 q 176 842 300 842 l 165 842 l 165 974 l 175 974 z "},"҅":{"ha":802,"x_min":313,"x_max":524,"o":"m 422 1101 q 497 1082 471 1101 q 524 1026 524 1062 q 511 999 524 1008 q 483 984 498 990 q 455 973 468 979 q 443 954 443 967 q 466 913 443 932 q 522 885 489 893 l 522 827 q 375 877 437 831 q 313 989 313 924 q 341 1071 313 1041 q 422 1101 370 1101 z "},"҆":{"ha":802,"x_min":311,"x_max":522,"o":"m 522 989 q 460 878 522 925 q 313 827 399 831 l 313 885 q 369 912 345 892 q 392 954 392 932 q 379 973 392 967 q 352 984 367 979 q 324 999 336 990 q 311 1026 311 1008 q 338 1082 311 1062 q 412 1101 364 1101 q 494 1071 465 1101 q 522 989 522 1041 z "},"҈":{"ha":1373,"x_min":28,"x_max":1346,"o":"m 679 966 q 780 932 742 966 q 823 835 819 898 l 770 835 q 746 880 766 865 q 679 895 726 895 q 609 881 626 895 q 589 835 592 867 l 538 835 q 679 966 545 966 m 679 -85 q 780 -119 741 -85 q 823 -216 819 -154 l 770 -216 q 746 -172 766 -186 q 679 -157 726 -157 q 609 -171 626 -157 q 589 -216 592 -184 l 538 -216 q 575 -120 541 -156 q 679 -85 609 -85 m 1072 104 q 1174 70 1135 104 q 1217 -28 1213 35 l 1162 -28 q 1139 17 1159 3 q 1072 32 1118 32 q 1002 19 1019 32 q 982 -28 985 5 l 930 -28 q 968 69 934 33 q 1072 104 1002 104 m 290 104 q 392 70 353 104 q 435 -28 431 35 l 380 -28 q 357 17 377 3 q 290 32 336 32 q 220 19 237 32 q 200 -28 203 5 l 149 -28 q 186 69 152 33 q 290 104 220 104 m 1072 774 q 1174 739 1135 774 q 1217 642 1213 705 l 1162 642 q 1139 687 1159 672 q 1072 701 1118 701 q 1002 688 1019 701 q 982 642 985 675 l 930 642 q 968 738 934 703 q 1072 774 1002 774 m 290 774 q 392 739 353 774 q 435 642 431 705 l 380 642 q 357 687 377 672 q 290 701 336 701 q 220 688 237 701 q 200 642 203 675 l 149 642 q 186 738 152 703 q 290 774 220 774 m 1202 443 q 1303 408 1264 443 q 1346 311 1342 372 l 1292 311 q 1268 356 1289 341 q 1202 371 1248 371 q 1132 357 1149 371 q 1111 311 1114 344 l 1060 311 q 1202 443 1067 443 m 170 443 q 271 408 232 443 q 314 311 310 374 l 260 311 q 236 356 256 342 q 170 371 216 371 q 100 358 117 371 q 79 311 83 345 l 28 311 q 65 408 31 372 q 170 443 100 443 z "},"҉":{"ha":1328,"x_min":28,"x_max":1300,"o":"m 739 -33 q 704 -143 728 -78 q 656 -261 680 -208 l 590 -261 q 637 -24 626 -111 l 732 -24 l 739 -33 m 590 783 q 628 899 603 831 q 673 1011 652 967 l 739 1011 q 692 774 704 862 l 597 774 l 590 783 m 1072 449 q 1188 411 1120 436 q 1300 366 1256 387 l 1300 300 q 1063 347 1150 336 l 1063 441 l 1072 449 m 256 300 q 146 335 211 311 q 28 383 81 359 l 28 449 q 265 401 178 413 l 265 307 l 256 300 m 1120 804 l 1166 758 q 965 624 1046 684 l 899 690 l 900 701 q 1010 758 945 728 q 1120 804 1074 787 m 208 -83 l 161 -37 q 363 97 281 37 l 429 31 l 428 20 q 208 -83 323 -41 m 220 815 l 265 863 q 400 661 349 728 l 334 595 l 322 596 q 220 815 267 691 m 1107 -96 l 1061 -143 q 996 -43 1040 -109 q 926 58 952 23 l 993 125 l 1004 123 q 1061 11 1031 77 q 1107 -96 1092 -55 z "},"Ҋ":{"ha":1272,"x_min":125,"x_max":1244,"o":"m 125 991 l 314 991 l 314 513 l 311 385 l 304 239 l 309 239 l 766 991 l 1018 991 l 1018 180 l 1244 180 l 1124 -289 l 890 -289 l 1018 0 l 831 0 l 831 476 q 843 760 831 572 l 838 760 l 378 0 l 125 0 l 125 991 m 900 1314 q 804 1129 887 1187 q 566 1071 722 1071 q 328 1126 405 1071 q 241 1314 251 1182 l 427 1314 q 461 1216 431 1244 q 570 1187 492 1187 q 671 1218 637 1187 q 713 1314 705 1249 l 900 1314 m 1143 0 z "},"ҋ":{"ha":1114,"x_min":109,"x_max":1095,"o":"m 309 758 l 309 458 q 293 227 309 411 l 643 758 l 892 758 l 892 151 l 1095 151 l 996 -272 l 799 -272 l 892 0 l 692 0 l 692 302 q 705 530 692 383 l 357 0 l 109 0 l 109 758 l 309 758 m 831 1084 q 734 899 817 956 q 496 842 652 842 q 318 867 387 842 q 214 943 249 892 q 172 1084 179 994 l 357 1084 q 393 985 363 1011 q 500 958 423 958 q 604 990 570 958 q 643 1084 637 1023 l 831 1084 m 1000 0 z "},"Ҍ":{"ha":856,"x_min":32,"x_max":823,"o":"m 335 889 l 538 889 l 538 717 l 335 717 l 335 611 l 418 611 q 718 532 612 611 q 823 310 823 454 q 414 0 823 0 l 125 0 l 125 717 l 32 717 l 32 889 l 125 889 l 125 991 l 335 991 l 335 889 m 335 172 l 406 172 q 562 207 512 172 q 611 310 611 241 q 561 409 611 378 q 389 439 511 439 l 335 439 l 335 172 z "},"ҍ":{"ha":852,"x_min":3,"x_max":804,"o":"m 3 904 l 109 904 l 109 1055 l 315 1055 l 315 904 l 571 904 l 571 770 l 315 770 l 315 465 l 461 465 q 720 410 636 465 q 804 241 804 354 q 469 0 804 0 l 109 0 l 109 770 l 3 770 l 3 904 m 597 239 q 562 302 597 283 q 457 322 527 322 l 315 322 l 315 143 l 460 143 q 597 239 597 143 z "},"Ҏ":{"ha":872,"x_min":125,"x_max":810,"o":"m 810 682 q 778 527 810 595 q 682 416 745 458 l 742 332 l 639 256 l 561 367 q 425 353 503 353 l 335 353 l 335 0 l 125 0 l 125 991 l 441 991 q 716 914 622 991 q 810 682 810 836 m 335 525 l 433 525 l 449 526 l 410 582 l 514 657 l 570 578 q 597 675 597 614 q 557 784 597 749 q 431 819 517 819 l 335 819 l 335 525 z "},"ҏ":{"ha":879,"x_min":109,"x_max":817,"o":"m 525 -14 q 315 83 391 -14 l 304 83 q 315 -26 315 -12 l 315 -334 l 109 -334 l 109 758 l 277 758 l 306 660 l 317 660 q 408 744 353 716 q 530 772 463 772 q 741 669 665 772 q 817 380 817 565 q 718 66 817 175 l 782 -17 l 675 -97 l 602 -3 q 525 -14 566 -14 m 464 607 q 352 560 387 607 q 315 404 317 513 l 315 382 q 352 207 315 260 q 467 154 388 154 l 478 154 l 490 155 l 421 241 l 534 325 l 590 257 q 606 383 606 310 q 571 551 606 495 q 464 607 537 607 z "},"Ғ":{"ha":777,"x_min":32,"x_max":749,"o":"m 749 991 l 749 819 l 335 819 l 335 576 l 607 576 l 607 404 l 335 404 l 335 0 l 125 0 l 125 404 l 32 404 l 32 576 l 125 576 l 125 991 l 749 991 z "},"ғ":{"ha":682,"x_min":3,"x_max":650,"o":"m 650 758 l 650 590 l 302 590 l 302 443 l 528 443 l 528 283 l 302 283 l 302 0 l 96 0 l 96 283 l 3 283 l 3 443 l 96 443 l 96 758 l 650 758 z "},"Ҕ":{"ha":1019,"x_min":125,"x_max":950,"o":"m 421 364 q 335 355 385 364 l 335 0 l 125 0 l 125 991 l 749 991 l 749 819 l 335 819 l 335 547 q 509 555 408 555 q 743 498 640 555 q 898 337 846 440 q 950 96 950 235 q 903 -137 950 -37 q 771 -293 856 -238 q 582 -347 686 -347 q 460 -340 507 -347 q 363 -315 413 -332 l 363 -131 q 541 -163 450 -163 q 690 -93 635 -163 q 745 96 745 -24 q 667 296 745 229 q 421 364 589 364 z "},"ҕ":{"ha":836,"x_min":109,"x_max":787,"o":"m 787 46 q 746 -163 787 -75 q 629 -295 705 -250 q 453 -340 553 -340 q 279 -306 357 -340 l 279 -127 q 351 -154 310 -144 q 425 -164 392 -164 q 546 -109 504 -164 q 589 49 589 -54 q 375 256 589 256 q 315 252 347 256 l 315 0 l 109 0 l 109 758 l 663 758 l 663 590 l 315 590 l 315 427 q 416 435 366 435 q 609 387 524 435 q 741 252 694 340 q 787 46 787 163 z "},"Җ":{"ha":1429,"x_min":0,"x_max":1401,"o":"m 353 515 l 20 991 l 236 991 l 557 511 l 557 991 l 753 991 l 753 511 l 1074 991 l 1291 991 l 957 515 l 1186 180 l 1401 180 l 1401 -289 l 1198 -289 l 1198 0 l 1084 0 l 753 503 l 753 0 l 557 0 l 557 503 l 225 0 l 0 0 l 353 515 m 1310 0 z "},"җ":{"ha":1308,"x_min":0,"x_max":1275,"o":"m 510 390 l 510 758 l 703 758 l 703 390 l 972 758 l 1186 758 l 907 395 l 1095 151 l 1275 151 l 1275 -272 l 1089 -272 l 1089 0 l 991 0 l 703 385 l 703 0 l 510 0 l 510 385 l 221 0 l 0 0 l 306 395 l 26 758 l 240 758 l 510 390 m 1213 0 z "},"Ҙ":{"ha":900,"x_min":64,"x_max":840,"o":"m 810 760 q 742 602 810 664 q 558 522 674 539 l 558 518 q 767 443 694 505 q 840 282 840 381 q 729 66 840 145 q 422 -14 618 -14 q 72 40 204 -14 l 72 216 q 221 169 136 186 q 382 151 307 151 q 632 297 632 151 q 552 398 632 363 q 314 433 471 433 l 221 433 l 221 597 l 304 597 q 534 627 462 597 q 606 726 606 657 q 561 807 606 777 q 425 838 515 838 q 155 757 286 838 l 64 897 q 243 980 149 954 q 454 1006 338 1006 q 713 938 616 1006 q 810 760 810 870 m 420 -154 q 393 -82 420 -119 q 319 0 367 -45 l 441 0 q 517 -66 494 -41 q 551 -119 539 -92 q 563 -178 563 -146 q 516 -291 563 -248 q 393 -334 469 -334 q 288 -318 343 -334 l 288 -197 q 366 -210 328 -210 q 405 -196 389 -210 q 420 -154 420 -182 z "},"ҙ":{"ha":771,"x_min":53,"x_max":718,"o":"m 297 467 q 464 486 414 467 q 513 546 513 505 q 477 601 513 583 q 358 619 441 619 q 240 606 306 619 q 119 571 174 593 l 58 715 q 215 759 139 746 q 385 772 291 772 q 612 718 526 772 q 697 571 697 664 q 546 404 697 443 l 546 397 q 679 332 639 374 q 718 221 718 290 q 673 98 718 152 q 544 16 629 45 q 345 -14 459 -14 q 53 33 155 -14 l 53 204 q 181 161 111 177 q 315 146 250 146 q 467 169 416 146 q 517 233 517 191 q 464 301 517 279 q 301 323 411 323 l 221 323 l 221 467 l 297 467 m 346 -154 q 319 -82 346 -119 q 245 0 293 -45 l 367 0 q 443 -66 420 -41 q 477 -119 465 -92 q 489 -178 489 -146 q 442 -291 489 -248 q 319 -334 395 -334 q 214 -318 269 -334 l 214 -197 q 292 -210 254 -210 q 331 -196 315 -210 q 346 -154 346 -182 z "},"Қ":{"ha":1050,"x_min":125,"x_max":1022,"o":"m 800 180 l 1022 180 l 1022 -289 l 819 -289 l 819 0 l 694 0 l 335 503 l 335 0 l 125 0 l 125 991 l 335 991 l 335 511 l 690 991 l 914 991 l 553 515 l 800 180 m 933 0 z "},"қ":{"ha":924,"x_min":109,"x_max":904,"o":"m 606 758 l 833 758 l 533 395 l 734 151 l 904 151 l 904 -272 l 718 -272 l 718 0 l 625 0 l 315 385 l 315 0 l 109 0 l 109 758 l 315 758 l 315 390 l 606 758 m 860 0 z "},"Ҝ":{"ha":922,"x_min":125,"x_max":922,"o":"m 419 415 l 335 354 l 335 0 l 125 0 l 125 991 l 335 991 l 335 538 l 418 654 l 419 656 l 419 896 l 510 896 l 510 770 l 686 991 l 920 991 l 574 553 l 922 0 l 684 0 l 510 279 l 510 129 l 419 129 l 419 415 z "},"ҝ":{"ha":832,"x_min":109,"x_max":832,"o":"m 109 758 l 301 758 l 301 390 l 368 473 l 368 688 l 467 688 l 467 600 l 591 758 l 806 758 l 505 395 l 832 0 l 611 0 l 465 180 l 465 61 l 367 61 l 367 302 l 301 385 l 301 0 l 109 0 l 109 758 z "},"Ҟ":{"ha":893,"x_min":3,"x_max":893,"o":"m 3 900 l 96 900 l 96 991 l 306 991 l 306 900 l 399 900 l 399 728 l 306 728 l 306 538 l 389 654 l 657 991 l 890 991 l 545 553 l 893 0 l 654 0 l 395 418 l 306 354 l 306 0 l 96 0 l 96 728 l 3 728 l 3 900 z "},"ҟ":{"ha":861,"x_min":3,"x_max":861,"o":"m 3 946 l 109 946 l 109 1055 l 315 1055 l 315 946 l 529 946 l 529 811 l 315 811 l 315 585 l 304 412 l 307 412 l 397 528 l 610 758 l 843 758 l 542 429 l 861 0 l 623 0 l 404 307 l 315 236 l 315 0 l 109 0 l 109 811 l 3 811 l 3 946 z "},"Ҡ":{"ha":1018,"x_min":0,"x_max":1018,"o":"m 0 991 l 431 991 l 431 538 l 514 654 l 782 991 l 1015 991 l 669 553 l 1018 0 l 779 0 l 519 418 l 431 354 l 431 0 l 221 0 l 221 817 l 0 817 l 0 991 m 96 0 z "},"ҡ":{"ha":965,"x_min":0,"x_max":965,"o":"m 0 758 l 435 758 l 435 390 l 725 758 l 939 758 l 639 395 l 965 0 l 745 0 l 435 385 l 435 0 l 241 0 l 241 603 l 0 603 l 0 758 m 133 0 z "},"Ң":{"ha":1168,"x_min":125,"x_max":1140,"o":"m 937 180 l 1140 180 l 1140 -289 l 937 -289 l 937 0 l 728 0 l 728 428 l 335 428 l 335 0 l 125 0 l 125 991 l 335 991 l 335 603 l 728 603 l 728 991 l 937 991 l 937 180 m 1063 0 z "},"ң":{"ha":1032,"x_min":109,"x_max":999,"o":"m 315 758 l 315 467 l 604 467 l 604 758 l 811 758 l 811 151 l 999 151 l 999 -272 l 812 -272 l 812 0 l 604 0 l 604 313 l 315 313 l 315 0 l 109 0 l 109 758 l 315 758 m 920 0 z "},"Ҥ":{"ha":1158,"x_min":125,"x_max":1158,"o":"m 1158 817 l 937 817 l 937 0 l 728 0 l 728 428 l 335 428 l 335 0 l 125 0 l 125 991 l 335 991 l 335 603 l 728 603 l 728 991 l 1158 991 l 1158 817 m 1063 0 z "},"ҥ":{"ha":1053,"x_min":109,"x_max":1053,"o":"m 315 758 l 315 467 l 604 467 l 604 758 l 1053 758 l 1053 603 l 811 603 l 811 0 l 604 0 l 604 313 l 315 313 l 315 0 l 109 0 l 109 758 l 315 758 m 920 0 z "},"Ҧ":{"ha":1563,"x_min":125,"x_max":1493,"o":"m 882 545 q 1072 555 960 555 q 1296 497 1198 555 q 1444 337 1394 439 q 1493 96 1493 235 q 1446 -137 1493 -37 q 1314 -293 1399 -238 q 1125 -347 1229 -347 q 1005 -340 1051 -347 q 905 -315 960 -334 l 905 -131 q 1083 -163 993 -163 q 1230 -91 1172 -163 q 1287 96 1287 -18 q 1215 296 1287 229 q 987 364 1143 364 q 882 350 948 364 l 882 0 l 672 0 l 672 817 l 335 817 l 335 0 l 125 0 l 125 991 l 882 991 l 882 545 z "},"ҧ":{"ha":1235,"x_min":109,"x_max":1186,"o":"m 1186 46 q 1145 -162 1186 -75 q 1028 -295 1104 -249 q 851 -340 952 -340 q 677 -306 755 -340 l 677 -127 q 749 -154 708 -144 q 823 -164 790 -164 q 944 -109 901 -164 q 987 49 987 -54 q 935 203 987 150 q 781 256 882 256 l 777 256 l 777 0 l 570 0 l 570 603 l 315 603 l 315 0 l 109 0 l 109 758 l 777 758 l 777 432 l 831 435 q 1015 387 933 435 q 1141 251 1097 339 q 1186 46 1186 163 z "},"Ҩ":{"ha":1079,"x_min":81,"x_max":1038,"o":"m 1007 460 q 974 279 1007 363 q 864 119 941 195 q 940 109 895 109 q 1038 123 991 109 l 1038 -40 q 917 -57 996 -57 q 701 9 800 -57 q 532 -14 631 -14 q 201 119 321 -14 q 81 484 81 251 q 191 874 81 742 q 517 1007 301 1007 q 604 999 555 1007 q 685 978 654 990 l 632 815 q 517 835 570 835 q 293 490 293 835 q 361 249 293 334 q 549 164 429 164 q 570 167 566 164 q 501 301 527 218 q 475 468 475 383 q 542 693 475 616 q 739 770 610 770 q 937 688 866 770 q 1007 460 1007 606 m 819 454 q 743 612 819 612 q 685 571 706 612 q 664 457 664 529 q 683 315 664 374 q 728 222 702 256 q 794 323 769 260 q 819 454 819 386 z "},"ҩ":{"ha":911,"x_min":62,"x_max":864,"o":"m 844 345 q 815 201 844 264 q 733 103 786 138 q 781 98 752 98 q 864 110 821 98 l 864 -33 q 758 -49 815 -49 q 572 9 659 -49 q 415 -14 506 -14 q 158 92 254 -14 q 62 376 62 197 q 155 668 62 564 q 416 772 248 772 q 486 765 445 772 q 559 745 527 758 l 514 590 q 416 607 454 607 q 306 551 341 607 q 271 370 271 494 q 308 210 271 267 q 419 153 346 153 q 444 155 436 153 q 406 253 416 209 q 396 349 396 296 q 452 522 396 462 q 621 582 509 582 q 784 519 724 582 q 844 345 844 456 m 681 345 q 666 408 681 383 q 621 432 651 432 q 559 343 559 432 q 611 199 559 258 q 681 345 681 242 z "},"Ҫ":{"ha":885,"x_min":81,"x_max":836,"o":"m 546 831 q 362 742 427 831 q 297 493 297 652 q 546 161 297 161 q 799 214 650 161 l 799 37 q 526 -14 677 -14 q 195 118 310 -14 q 81 494 81 249 q 137 765 81 649 q 299 944 193 882 q 546 1006 404 1006 q 836 936 690 1006 l 768 765 q 656 811 713 791 q 546 831 600 831 m 525 -154 q 498 -82 525 -119 q 425 0 472 -45 l 546 0 q 622 -66 600 -41 q 656 -119 644 -92 q 668 -178 668 -146 q 621 -291 668 -248 q 498 -334 574 -334 q 393 -318 448 -334 l 393 -197 q 471 -210 433 -210 q 510 -196 494 -210 q 525 -154 525 -182 z "},"ҫ":{"ha":714,"x_min":62,"x_max":671,"o":"m 416 -14 q 62 375 62 -14 q 159 670 62 568 q 435 772 255 772 q 671 721 566 772 l 610 561 q 519 593 561 581 q 435 606 477 606 q 273 376 273 606 q 435 154 273 154 q 545 170 494 154 q 647 220 596 186 l 647 43 q 546 -1 597 11 q 416 -14 494 -14 m 421 -154 q 395 -82 421 -119 q 321 0 368 -45 l 442 0 q 518 -66 496 -41 q 552 -119 541 -92 q 564 -178 564 -146 q 517 -291 564 -248 q 395 -334 471 -334 q 289 -318 345 -334 l 289 -197 q 367 -210 330 -210 q 406 -196 391 -210 q 421 -154 421 -182 z "},"Ҭ":{"ha":804,"x_min":28,"x_max":777,"o":"m 507 180 l 710 180 l 710 -289 l 507 -289 l 507 0 l 297 0 l 297 817 l 28 817 l 28 991 l 777 991 l 777 817 l 507 817 l 507 180 z "},"ҭ":{"ha":764,"x_min":32,"x_max":736,"o":"m 736 758 l 736 603 l 488 603 l 488 151 l 673 151 l 673 -272 l 488 -272 l 488 0 l 281 0 l 281 603 l 32 603 l 32 758 l 736 758 z "},"Ү":{"ha":867,"x_min":0,"x_max":867,"o":"m 433 583 l 640 991 l 867 991 l 538 386 l 538 0 l 329 0 l 329 379 l 0 991 l 228 991 l 433 583 z "},"ү":{"ha":798,"x_min":0,"x_max":798,"o":"m 503 -334 l 294 -334 l 294 0 l 0 758 l 228 758 l 347 416 q 386 270 365 367 l 395 229 l 403 229 q 450 416 427 351 l 571 758 l 798 758 l 503 0 l 503 -334 z "},"Ұ":{"ha":867,"x_min":0,"x_max":867,"o":"m 433 583 l 640 991 l 867 991 l 538 386 l 538 358 l 754 358 l 754 183 l 538 183 l 538 0 l 329 0 l 329 183 l 113 183 l 113 358 l 329 358 l 329 379 l 0 991 l 228 991 l 433 583 z "},"ұ":{"ha":798,"x_min":0,"x_max":798,"o":"m 700 0 l 700 -155 l 503 -155 l 503 -334 l 294 -334 l 294 -155 l 97 -155 l 97 0 l 294 0 l 0 758 l 228 758 l 347 416 q 386 270 365 367 l 395 229 l 403 229 q 450 416 427 351 l 571 758 l 798 758 l 503 0 l 700 0 z "},"Ҳ":{"ha":1032,"x_min":0,"x_max":1004,"o":"m 806 180 l 1004 180 l 1004 -289 l 802 -289 l 802 0 l 686 0 l 456 375 l 225 0 l 0 0 l 329 511 l 21 991 l 253 991 l 467 635 l 676 991 l 903 991 l 591 500 l 806 180 m 926 0 z "},"ҳ":{"ha":889,"x_min":7,"x_max":869,"o":"m 264 387 l 20 758 l 254 758 l 401 517 l 550 758 l 785 758 l 538 387 l 694 151 l 869 151 l 869 -272 l 684 -272 l 684 0 l 561 0 l 401 260 l 241 0 l 7 0 l 264 387 m 796 0 m 803 0 z "},"Ҵ":{"ha":1292,"x_min":28,"x_max":1264,"o":"m 277 0 l 277 817 l 28 817 l 28 991 l 762 991 l 762 817 l 486 817 l 486 175 l 851 175 l 851 991 l 1061 991 l 1061 180 l 1264 180 l 1264 -289 l 1061 -289 l 1061 0 l 277 0 z "},"ҵ":{"ha":1099,"x_min":32,"x_max":1079,"o":"m 611 758 l 611 603 l 411 603 l 411 155 l 686 155 l 686 758 l 893 758 l 893 151 l 1079 151 l 1079 -272 l 893 -272 l 893 0 l 204 0 l 204 603 l 32 603 l 32 758 l 611 758 z "},"Ҷ":{"ha":1117,"x_min":74,"x_max":1089,"o":"m 886 180 l 1089 180 l 1089 -289 l 886 -289 l 886 0 l 676 0 l 676 383 q 502 335 572 348 q 370 322 433 322 q 151 390 228 322 q 74 582 74 458 l 74 991 l 283 991 l 283 642 q 317 533 283 570 q 429 497 350 497 q 540 508 485 497 q 676 547 595 519 l 676 991 l 886 991 l 886 180 m 1011 0 z "},"ҷ":{"ha":1008,"x_min":83,"x_max":989,"o":"m 290 758 l 290 481 q 382 382 290 382 q 493 395 441 382 q 596 431 544 409 l 596 758 l 803 758 l 803 151 l 989 151 l 989 -272 l 803 -272 l 803 0 l 596 0 l 596 301 q 463 248 524 263 q 343 232 401 232 q 151 295 219 232 q 83 476 83 359 l 83 758 l 290 758 m 911 0 z "},"Ҹ":{"ha":1011,"x_min":74,"x_max":886,"o":"m 424 323 l 397 322 l 370 322 q 151 390 228 322 q 74 582 74 458 l 74 991 l 283 991 l 283 642 q 317 533 283 567 q 424 497 350 498 l 424 720 l 514 720 l 514 504 q 676 547 574 513 l 676 991 l 886 991 l 886 0 l 676 0 l 676 383 q 514 336 589 353 l 514 117 l 424 117 l 424 323 z "},"ҹ":{"ha":911,"x_min":83,"x_max":803,"o":"m 395 235 q 343 232 378 232 q 151 295 219 232 q 83 476 83 359 l 83 758 l 290 758 l 290 481 q 382 382 290 382 l 395 382 l 395 555 l 479 555 l 479 392 q 596 431 532 403 l 596 758 l 803 758 l 803 0 l 596 0 l 596 301 q 479 252 525 264 l 479 87 l 395 87 l 395 235 z "},"Һ":{"ha":1011,"x_min":125,"x_max":937,"o":"m 125 991 l 335 991 l 335 608 q 507 656 435 643 q 642 669 580 669 q 859 602 781 669 q 937 410 937 534 l 937 0 l 728 0 l 728 350 q 694 458 728 422 q 582 494 661 494 q 472 484 528 494 q 335 444 415 473 l 335 0 l 125 0 l 125 991 z "},"һ":{"ha":925,"x_min":109,"x_max":828,"o":"m 621 0 l 621 285 q 529 376 621 376 q 315 328 431 376 l 315 0 l 109 0 l 109 758 l 315 758 l 315 457 q 448 511 387 495 q 568 526 509 526 q 760 463 692 526 q 828 282 828 399 l 828 0 l 621 0 z "},"Ҽ":{"ha":1317,"x_min":0,"x_max":1206,"o":"m 761 161 q 967 193 854 161 q 1154 271 1080 224 l 1154 82 q 973 9 1069 31 q 760 -14 876 -14 q 414 102 544 -14 q 265 428 285 218 l 222 428 q 56 475 112 428 q 0 604 0 522 q 36 743 0 683 l 195 743 q 183 707 189 732 q 176 663 176 683 q 241 603 176 603 l 269 603 q 415 901 294 795 q 734 1007 536 1007 q 1088 873 970 1007 q 1206 476 1206 739 l 1206 428 l 482 428 q 562 229 491 297 q 761 161 633 161 m 734 832 q 560 771 627 832 q 485 603 493 711 l 987 603 q 926 777 987 722 q 734 832 864 832 z "},"ҽ":{"ha":993,"x_min":0,"x_max":933,"o":"m 227 465 q 343 693 249 614 q 586 772 437 772 q 842 681 750 772 q 933 428 933 590 l 933 328 l 429 328 q 483 190 433 239 q 625 140 534 140 q 761 155 697 140 q 890 200 824 170 l 890 40 q 773 0 838 14 q 618 -14 709 -14 q 339 75 442 -14 q 222 328 235 163 q 0 479 0 328 q 28 591 0 545 l 167 591 q 150 518 150 554 q 215 465 150 465 l 227 465 m 587 625 q 481 586 524 625 q 433 465 439 547 l 739 465 q 697 583 738 541 q 587 625 657 625 z "},"Ҿ":{"ha":1317,"x_min":0,"x_max":1206,"o":"m 648 -5 q 382 133 481 22 q 265 428 283 245 l 222 428 q 56 475 112 428 q 0 604 0 522 q 36 743 0 683 l 195 743 q 183 707 189 732 q 176 663 176 683 q 241 603 176 603 l 269 603 q 415 901 294 795 q 734 1007 536 1007 q 1088 873 970 1007 q 1206 476 1206 739 l 1206 428 l 482 428 q 562 229 491 297 q 761 161 633 161 q 967 193 854 161 q 1154 271 1080 224 l 1154 82 q 1008 18 1080 39 q 850 -9 935 -3 l 850 -289 l 648 -289 l 648 -5 m 734 832 q 560 771 627 832 q 485 603 493 711 l 987 603 q 926 777 987 722 q 734 832 864 832 z "},"ҿ":{"ha":993,"x_min":0,"x_max":933,"o":"m 497 -1 q 303 110 374 26 q 222 328 233 194 q 0 479 0 328 q 28 591 0 545 l 167 591 q 150 518 150 554 q 215 465 150 465 l 227 465 q 343 693 249 614 q 586 772 437 772 q 842 681 750 772 q 933 428 933 590 l 933 328 l 429 328 q 483 190 433 239 q 625 140 534 140 q 761 155 697 140 q 890 200 824 170 l 890 40 q 684 -11 804 -3 l 684 -272 l 497 -272 l 497 -1 m 587 625 q 481 586 524 625 q 433 465 439 547 l 739 465 q 697 583 738 541 q 587 625 657 625 z "},"Ӂ":{"ha":1310,"x_min":0,"x_max":1310,"o":"m 353 515 l 20 991 l 236 991 l 557 511 l 557 991 l 753 991 l 753 511 l 1074 991 l 1291 991 l 957 515 l 1310 0 l 1084 0 l 753 503 l 753 0 l 557 0 l 557 503 l 225 0 l 0 0 l 353 515 m 982 1314 q 886 1129 969 1187 q 648 1071 804 1071 q 410 1126 487 1071 q 323 1314 333 1182 l 509 1314 q 544 1216 513 1244 q 652 1187 574 1187 q 754 1218 720 1187 q 795 1314 787 1249 l 982 1314 z "},"ӂ":{"ha":1213,"x_min":0,"x_max":1213,"o":"m 510 390 l 510 758 l 703 758 l 703 390 l 972 758 l 1186 758 l 907 395 l 1213 0 l 991 0 l 703 385 l 703 0 l 510 0 l 510 385 l 221 0 l 0 0 l 306 395 l 26 758 l 240 758 l 510 390 m 935 1084 q 839 900 922 958 q 600 842 756 842 q 362 897 439 842 q 276 1084 286 953 l 461 1084 q 496 986 466 1015 q 604 958 526 958 q 706 989 673 958 q 747 1084 740 1020 l 935 1084 z "},"Ӄ":{"ha":1055,"x_min":125,"x_max":986,"o":"m 461 364 q 335 347 410 364 l 335 0 l 125 0 l 125 991 l 335 991 l 335 514 l 433 654 l 700 991 l 933 991 l 542 525 l 545 525 q 783 472 680 525 q 936 323 886 419 q 986 96 986 227 q 939 -137 986 -37 q 807 -293 892 -238 q 618 -347 722 -347 q 496 -340 543 -347 q 399 -315 449 -332 l 399 -131 q 576 -163 486 -163 q 727 -93 673 -163 q 781 96 781 -24 q 704 296 781 228 q 461 364 627 364 z "},"ӄ":{"ha":918,"x_min":109,"x_max":863,"o":"m 863 46 q 822 -162 863 -75 q 705 -295 781 -249 q 528 -340 629 -340 q 354 -306 431 -340 l 354 -127 q 426 -154 385 -144 q 500 -164 467 -164 q 621 -108 578 -164 q 664 49 664 -52 q 610 202 664 149 q 453 256 557 256 q 378 249 419 256 q 315 233 336 241 l 315 0 l 109 0 l 109 758 l 315 758 l 315 424 l 610 758 l 843 758 l 522 419 q 770 320 677 419 q 863 46 863 220 z "},"Ӆ":{"ha":1164,"x_min":11,"x_max":1136,"o":"m 909 0 l 700 0 l 700 817 l 457 817 l 446 726 q 372 239 404 379 q 278 42 340 99 q 111 -14 216 -15 q 11 1 54 -14 l 11 174 q 85 160 50 160 q 142 193 121 160 q 181 315 163 226 q 231 607 200 404 q 283 991 262 810 l 909 991 l 909 180 l 1136 180 l 1015 -289 l 782 -289 l 909 0 m 1035 0 z "},"ӆ":{"ha":1010,"x_min":0,"x_max":990,"o":"m 787 151 l 990 151 l 892 -272 l 694 -272 l 787 0 l 581 0 l 581 603 l 390 603 q 337 223 368 349 q 254 42 306 98 q 118 -14 202 -14 q 0 8 46 -14 l 0 174 q 66 160 33 160 q 131 216 105 160 q 178 401 157 271 q 214 758 199 531 l 787 758 l 787 151 m 896 0 z "},"Ӈ":{"ha":1063,"x_min":125,"x_max":937,"o":"m 937 61 q 892 -153 937 -59 q 763 -297 846 -246 q 570 -347 679 -347 q 350 -315 440 -347 l 350 -131 q 446 -156 401 -149 q 546 -163 490 -163 q 680 -97 631 -163 q 728 85 728 -32 l 728 428 l 335 428 l 335 0 l 125 0 l 125 991 l 335 991 l 335 603 l 728 603 l 728 991 l 937 991 l 937 61 z "},"ӈ":{"ha":920,"x_min":109,"x_max":811,"o":"m 315 313 l 315 0 l 109 0 l 109 758 l 315 758 l 315 467 l 604 467 l 604 758 l 811 758 l 811 16 q 722 -246 811 -152 q 475 -340 632 -340 q 383 -332 423 -340 q 300 -302 343 -324 l 300 -125 q 453 -164 376 -164 q 564 -114 526 -164 q 604 32 602 -64 l 604 313 l 315 313 z "},"Ӊ":{"ha":1192,"x_min":125,"x_max":1164,"o":"m 937 180 l 1164 180 l 1043 -289 l 810 -289 l 937 0 l 728 0 l 728 428 l 335 428 l 335 0 l 125 0 l 125 991 l 335 991 l 335 603 l 728 603 l 728 991 l 937 991 l 937 180 m 1063 0 z "},"ӊ":{"ha":1034,"x_min":109,"x_max":1014,"o":"m 315 758 l 315 467 l 604 467 l 604 758 l 811 758 l 811 151 l 1014 151 l 916 -272 l 718 -272 l 811 0 l 604 0 l 604 313 l 315 313 l 315 0 l 109 0 l 109 758 l 315 758 m 920 0 z "},"Ӌ":{"ha":1011,"x_min":74,"x_max":886,"o":"m 886 0 l 711 0 l 711 -289 l 509 -289 l 509 180 l 676 180 l 676 383 q 502 335 572 348 q 370 322 433 322 q 151 390 228 322 q 74 582 74 458 l 74 991 l 283 991 l 283 642 q 317 533 283 570 q 429 497 350 497 q 540 508 485 497 q 676 547 595 519 l 676 991 l 886 991 l 886 0 z "},"ӌ":{"ha":911,"x_min":83,"x_max":803,"o":"m 290 758 l 290 481 q 382 382 290 382 q 493 395 441 382 q 596 431 544 409 l 596 758 l 803 758 l 803 0 l 627 0 l 627 -272 l 440 -272 l 440 151 l 596 151 l 596 301 q 463 248 524 263 q 343 232 401 232 q 151 295 219 232 q 83 476 83 359 l 83 758 l 290 758 z "},"Ӎ":{"ha":1439,"x_min":125,"x_max":1411,"o":"m 545 0 l 306 778 l 300 778 q 313 461 313 541 l 313 0 l 125 0 l 125 991 l 411 991 l 646 233 l 650 233 l 899 991 l 1185 991 l 1185 180 l 1411 180 l 1291 -289 l 1057 -289 l 1185 0 l 989 0 l 989 469 q 990 546 989 503 q 999 777 991 589 l 993 777 l 737 0 l 545 0 m 1310 0 z "},"ӎ":{"ha":1286,"x_min":109,"x_max":1267,"o":"m 1064 151 l 1267 151 l 1168 -272 l 971 -272 l 1064 0 l 871 0 l 871 597 l 860 555 q 794 339 823 412 l 660 0 l 513 0 l 376 342 q 314 551 347 416 l 301 597 l 301 0 l 109 0 l 109 758 l 393 758 l 524 435 q 561 315 544 382 q 585 199 578 247 q 620 345 607 300 q 647 427 632 389 q 782 758 662 464 l 1064 758 l 1064 151 m 1173 0 z "},"Ӑ":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 808 1314 q 713 1129 795 1187 q 474 1071 630 1071 q 236 1126 313 1071 q 150 1314 159 1182 l 335 1314 q 370 1216 340 1244 q 478 1187 400 1187 q 580 1218 547 1187 q 621 1314 614 1249 l 808 1314 z "},"ӑ":{"ha":839,"x_min":58,"x_max":757,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 757 1084 q 661 900 744 958 q 422 842 578 842 q 185 897 262 842 q 98 1084 108 953 l 283 1084 q 318 986 288 1015 q 427 958 349 958 q 529 989 495 958 q 570 1084 562 1020 l 757 1084 z "},"Ӓ":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 248 1182 q 273 1250 248 1226 q 342 1274 298 1274 q 412 1249 387 1274 q 437 1182 437 1223 q 412 1117 437 1141 q 342 1092 386 1092 q 273 1116 298 1092 q 248 1182 248 1139 m 521 1182 q 548 1252 521 1230 q 616 1274 576 1274 q 687 1249 661 1274 q 713 1182 713 1225 q 686 1116 713 1141 q 616 1092 660 1092 q 548 1114 576 1092 q 521 1182 521 1136 z "},"ӓ":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 186 953 q 211 1021 186 997 q 280 1044 237 1044 q 350 1019 325 1044 q 376 953 376 994 q 350 887 376 912 q 280 863 324 863 q 211 886 237 863 q 186 953 186 910 m 459 953 q 487 1022 459 1000 q 555 1044 514 1044 q 625 1020 599 1044 q 651 953 651 996 q 625 887 651 911 q 555 863 598 863 q 487 885 514 863 q 459 953 459 907 z "},"Ӕ":{"ha":1322,"x_min":0,"x_max":1240,"o":"m 1240 0 l 648 0 l 648 236 l 315 236 l 214 0 l 0 0 l 444 991 l 1240 991 l 1240 819 l 859 819 l 859 602 l 1215 602 l 1215 429 l 859 429 l 859 174 l 1240 174 l 1240 0 m 392 412 l 648 412 l 648 812 l 562 812 l 392 412 z "},"ӕ":{"ha":1274,"x_min":58,"x_max":1214,"o":"m 901 -14 q 732 21 808 -14 q 607 126 656 55 q 474 17 541 47 q 300 -14 407 -14 q 124 51 191 -14 q 58 227 58 115 q 140 405 58 347 q 386 468 222 462 l 515 472 l 515 529 q 485 598 515 576 q 403 621 455 621 q 196 568 308 621 l 129 705 q 415 774 257 774 q 647 685 569 774 q 750 750 692 728 q 890 772 809 772 q 1127 679 1040 772 q 1214 428 1214 586 l 1214 328 l 724 328 q 776 190 727 239 q 913 140 825 140 q 1171 200 1046 140 l 1171 40 q 1055 0 1117 14 q 901 -14 992 -14 m 515 351 l 439 349 q 313 316 355 346 q 271 225 271 287 q 366 138 271 138 q 475 179 434 138 q 515 289 515 220 l 515 351 m 886 625 q 728 465 739 625 l 1019 465 q 982 583 1018 541 q 886 625 946 625 z "},"Ӗ":{"ha":778,"x_min":80,"x_max":739,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 739 1314 q 643 1129 726 1187 q 404 1071 560 1071 q 166 1126 243 1071 q 80 1314 90 1182 l 265 1314 q 300 1216 270 1244 q 408 1187 330 1187 q 510 1218 477 1187 q 551 1314 544 1249 l 739 1314 z "},"ӗ":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 749 1084 q 653 900 736 958 q 414 842 570 842 q 177 897 254 842 q 90 1084 100 953 l 275 1084 q 310 986 280 1015 q 418 958 340 958 q 520 989 487 958 q 562 1084 554 1020 l 749 1084 z "},"Ә":{"ha":1135,"x_min":111,"x_max":1054,"o":"m 555 832 q 347 801 455 832 q 163 722 239 770 l 163 904 q 352 984 257 960 q 557 1007 446 1007 q 923 871 791 1007 q 1054 494 1054 734 q 930 120 1054 254 q 582 -14 807 -14 q 230 119 349 -14 q 111 517 111 252 l 111 566 l 835 566 q 754 764 826 696 q 555 832 683 832 m 582 161 q 759 223 692 161 q 832 390 825 285 l 329 390 q 390 216 329 271 q 582 161 451 161 z "},"ә":{"ha":835,"x_min":62,"x_max":775,"o":"m 408 134 q 515 174 475 134 q 562 293 555 214 l 257 293 q 298 176 258 218 q 408 134 337 134 m 378 772 q 670 671 565 772 q 775 385 775 570 q 679 91 775 195 q 410 -14 583 -14 q 154 77 246 -14 q 62 330 62 168 l 62 431 l 567 431 q 513 568 564 519 q 371 618 462 618 q 241 605 304 618 q 106 558 178 592 l 106 718 q 230 760 165 748 q 378 772 294 772 z "},"Ӛ":{"ha":1135,"x_min":111,"x_max":1054,"o":"m 555 832 q 347 801 455 832 q 163 722 239 770 l 163 904 q 352 984 257 960 q 557 1007 446 1007 q 923 871 791 1007 q 1054 494 1054 734 q 930 120 1054 254 q 582 -14 807 -14 q 230 119 349 -14 q 111 517 111 252 l 111 566 l 835 566 q 754 764 826 696 q 555 832 683 832 m 582 161 q 759 223 692 161 q 832 390 825 285 l 329 390 q 390 216 329 271 q 582 161 451 161 m 351 1182 q 376 1250 351 1226 q 445 1274 401 1274 q 515 1249 490 1274 q 541 1182 541 1223 q 515 1117 541 1141 q 445 1092 489 1092 q 376 1116 401 1092 q 351 1182 351 1139 m 624 1182 q 651 1252 624 1230 q 720 1274 679 1274 q 790 1249 764 1274 q 816 1182 816 1225 q 789 1116 816 1141 q 720 1092 763 1092 q 651 1114 679 1092 q 624 1182 624 1136 z "},"ӛ":{"ha":835,"x_min":62,"x_max":775,"o":"m 408 134 q 515 174 475 134 q 562 293 555 214 l 257 293 q 298 176 258 218 q 408 134 337 134 m 378 772 q 670 671 565 772 q 775 385 775 570 q 679 91 775 195 q 410 -14 583 -14 q 154 77 246 -14 q 62 330 62 168 l 62 431 l 567 431 q 513 568 564 519 q 371 618 462 618 q 241 605 304 618 q 106 558 178 592 l 106 718 q 230 760 165 748 q 378 772 294 772 m 189 953 q 214 1021 189 997 q 283 1044 239 1044 q 353 1019 328 1044 q 378 953 378 994 q 353 887 378 912 q 283 863 327 863 q 214 886 239 863 q 189 953 189 910 m 462 953 q 489 1022 462 1000 q 557 1044 517 1044 q 628 1020 602 1044 q 654 953 654 996 q 627 887 654 911 q 557 863 601 863 q 489 885 517 863 q 462 953 462 907 z "},"Ӝ":{"ha":1310,"x_min":0,"x_max":1310,"o":"m 353 515 l 20 991 l 236 991 l 557 511 l 557 991 l 753 991 l 753 511 l 1074 991 l 1291 991 l 957 515 l 1310 0 l 1084 0 l 753 503 l 753 0 l 557 0 l 557 503 l 225 0 l 0 0 l 353 515 m 422 1182 q 448 1250 422 1226 q 517 1274 473 1274 q 587 1249 562 1274 q 612 1182 612 1223 q 587 1117 612 1141 q 517 1092 561 1092 q 448 1116 473 1092 q 422 1182 422 1139 m 696 1182 q 723 1252 696 1230 q 791 1274 751 1274 q 862 1249 836 1274 q 888 1182 888 1225 q 861 1116 888 1141 q 791 1092 835 1092 q 723 1114 751 1092 q 696 1182 696 1136 z "},"ӝ":{"ha":1213,"x_min":0,"x_max":1213,"o":"m 510 390 l 510 758 l 703 758 l 703 390 l 972 758 l 1186 758 l 907 395 l 1213 0 l 991 0 l 703 385 l 703 0 l 510 0 l 510 385 l 221 0 l 0 0 l 306 395 l 26 758 l 240 758 l 510 390 m 374 953 q 399 1021 374 997 q 468 1044 425 1044 q 538 1019 513 1044 q 564 953 564 994 q 538 887 564 912 q 468 863 512 863 q 399 886 425 863 q 374 953 374 910 m 647 953 q 674 1022 647 1000 q 743 1044 702 1044 q 813 1020 787 1044 q 839 953 839 996 q 812 887 839 911 q 743 863 786 863 q 674 885 702 863 q 647 953 647 907 z "},"Ӟ":{"ha":900,"x_min":64,"x_max":840,"o":"m 810 760 q 742 602 810 664 q 558 522 674 539 l 558 518 q 767 443 694 505 q 840 282 840 381 q 729 66 840 145 q 422 -14 618 -14 q 72 40 204 -14 l 72 216 q 221 169 136 186 q 382 151 307 151 q 632 297 632 151 q 552 398 632 363 q 314 433 471 433 l 221 433 l 221 597 l 304 597 q 534 627 462 597 q 606 726 606 657 q 561 807 606 777 q 425 838 515 838 q 155 757 286 838 l 64 897 q 243 980 149 954 q 454 1006 338 1006 q 713 938 616 1006 q 810 760 810 870 m 220 1182 q 245 1250 220 1226 q 314 1274 271 1274 q 384 1249 359 1274 q 410 1182 410 1223 q 384 1117 410 1141 q 314 1092 358 1092 q 245 1116 271 1092 q 220 1182 220 1139 m 493 1182 q 520 1252 493 1230 q 589 1274 548 1274 q 659 1249 633 1274 q 685 1182 685 1225 q 659 1116 685 1141 q 589 1092 632 1092 q 520 1114 548 1092 q 493 1182 493 1136 z "},"ӟ":{"ha":771,"x_min":53,"x_max":718,"o":"m 297 467 q 464 486 414 467 q 513 546 513 505 q 477 601 513 583 q 358 619 441 619 q 240 606 306 619 q 119 571 174 593 l 58 715 q 215 759 139 746 q 385 772 291 772 q 612 718 526 772 q 697 571 697 664 q 546 404 697 443 l 546 397 q 679 332 639 374 q 718 221 718 290 q 673 98 718 152 q 544 16 629 45 q 345 -14 459 -14 q 53 33 155 -14 l 53 204 q 181 161 111 177 q 315 146 250 146 q 467 169 416 146 q 517 233 517 191 q 464 301 517 279 q 301 323 411 323 l 221 323 l 221 467 l 297 467 m 155 953 q 181 1021 155 997 q 250 1044 206 1044 q 320 1019 294 1044 q 345 953 345 994 q 319 887 345 912 q 250 863 294 863 q 181 886 206 863 q 155 953 155 910 m 429 953 q 456 1022 429 1000 q 524 1044 484 1044 q 594 1020 568 1044 q 621 953 621 996 q 594 887 621 911 q 524 863 568 863 q 456 885 484 863 q 429 953 429 907 z "},"Ӡ":{"ha":821,"x_min":39,"x_max":766,"o":"m 192 582 l 436 818 l 72 818 l 72 991 l 722 991 l 722 857 l 429 578 q 680 496 593 571 q 766 289 766 422 q 656 67 766 148 q 345 -14 546 -14 q 39 40 169 -14 l 39 218 q 181 171 102 189 q 332 153 261 153 q 501 188 445 153 q 557 301 557 224 q 486 402 557 370 q 275 435 416 435 l 192 435 l 192 582 z "},"ӡ":{"ha":807,"x_min":39,"x_max":753,"o":"m 192 340 l 467 600 l 66 600 l 66 758 l 722 758 l 722 624 l 422 343 q 668 239 583 326 q 753 1 753 153 q 704 -177 753 -101 q 563 -293 656 -252 q 339 -334 470 -334 q 39 -279 169 -334 l 39 -102 q 178 -150 101 -132 q 323 -167 255 -167 q 487 -121 431 -167 q 543 11 543 -75 q 475 149 543 104 q 272 193 406 193 l 192 193 l 192 340 z "},"Ӣ":{"ha":1143,"x_min":125,"x_max":1018,"o":"m 125 991 l 314 991 l 314 513 l 311 385 l 304 239 l 309 239 l 766 991 l 1018 991 l 1018 0 l 831 0 l 831 476 q 843 760 831 572 l 838 760 l 378 0 l 125 0 l 125 991 m 340 1214 l 800 1214 l 800 1071 l 340 1071 l 340 1214 z "},"ӣ":{"ha":1000,"x_min":109,"x_max":892,"o":"m 309 758 l 309 458 q 293 227 309 411 l 643 758 l 892 758 l 892 0 l 692 0 l 692 302 q 705 530 692 383 l 357 0 l 109 0 l 109 758 l 309 758 m 271 985 l 731 985 l 731 842 l 271 842 l 271 985 z "},"Ӥ":{"ha":1143,"x_min":125,"x_max":1018,"o":"m 125 991 l 314 991 l 314 513 l 311 385 l 304 239 l 309 239 l 766 991 l 1018 991 l 1018 0 l 831 0 l 831 476 q 843 760 831 572 l 838 760 l 378 0 l 125 0 l 125 991 m 339 1182 q 365 1250 339 1226 q 433 1274 390 1274 q 504 1249 478 1274 q 529 1182 529 1223 q 503 1117 529 1141 q 433 1092 477 1092 q 365 1116 390 1092 q 339 1182 339 1139 m 612 1182 q 640 1252 612 1230 q 708 1274 667 1274 q 778 1249 752 1274 q 804 1182 804 1225 q 778 1116 804 1141 q 708 1092 751 1092 q 640 1114 667 1092 q 612 1182 612 1136 z "},"ӥ":{"ha":1000,"x_min":109,"x_max":892,"o":"m 309 758 l 309 458 q 293 227 309 411 l 643 758 l 892 758 l 892 0 l 692 0 l 692 302 q 705 530 692 383 l 357 0 l 109 0 l 109 758 l 309 758 m 269 953 q 294 1021 269 997 q 363 1044 319 1044 q 433 1019 408 1044 q 458 953 458 994 q 433 887 458 912 q 363 863 407 863 q 294 886 319 863 q 269 953 269 910 m 542 953 q 569 1022 542 1000 q 637 1044 597 1044 q 708 1020 682 1044 q 734 953 734 996 q 707 887 734 911 q 637 863 681 863 q 569 885 597 863 q 542 953 542 907 z "},"Ӧ":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 321 1182 q 347 1250 321 1226 q 416 1274 372 1274 q 486 1249 460 1274 q 511 1182 511 1223 q 486 1117 511 1141 q 416 1092 460 1092 q 347 1116 372 1092 q 321 1182 321 1139 m 595 1182 q 622 1252 595 1230 q 690 1274 650 1274 q 761 1249 734 1274 q 787 1182 787 1225 q 760 1116 787 1141 q 690 1092 734 1092 q 622 1114 650 1092 q 595 1182 595 1136 z "},"ӧ":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 199 953 q 224 1021 199 997 q 293 1044 250 1044 q 363 1019 338 1044 q 389 953 389 994 q 363 887 389 912 q 293 863 337 863 q 224 886 250 863 q 199 953 199 910 m 472 953 q 499 1022 472 1000 q 568 1044 527 1044 q 638 1020 612 1044 q 664 953 664 996 q 637 887 664 911 q 568 863 611 863 q 499 885 527 863 q 472 953 472 907 z "},"Ө":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 553 163 q 727 228 663 163 q 804 421 791 293 l 300 421 q 375 231 313 299 q 553 163 437 163 m 554 832 q 384 773 447 832 q 302 596 321 714 l 802 596 q 723 771 785 711 q 554 832 661 832 z "},"ө":{"ha":860,"x_min":62,"x_max":798,"o":"m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 431 153 q 534 192 496 153 q 582 310 572 231 l 277 310 q 324 192 287 231 q 431 153 361 153 m 429 606 q 325 567 363 606 q 277 453 287 529 l 582 453 q 535 567 572 529 q 429 606 498 606 z "},"Ӫ":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 553 163 q 727 228 663 163 q 804 421 791 293 l 300 421 q 375 231 313 299 q 553 163 437 163 m 554 832 q 384 773 447 832 q 302 596 321 714 l 802 596 q 723 771 785 711 q 554 832 661 832 m 323 1182 q 348 1250 323 1226 q 417 1274 374 1274 q 487 1249 462 1274 q 513 1182 513 1223 q 487 1117 513 1141 q 417 1092 461 1092 q 348 1116 374 1092 q 323 1182 323 1139 m 596 1182 q 624 1252 596 1230 q 692 1274 651 1274 q 762 1249 736 1274 q 788 1182 788 1225 q 762 1116 788 1141 q 692 1092 735 1092 q 624 1114 651 1092 q 596 1182 596 1136 z "},"ӫ":{"ha":860,"x_min":62,"x_max":798,"o":"m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 431 153 q 534 192 496 153 q 582 310 572 231 l 277 310 q 324 192 287 231 q 431 153 361 153 m 429 606 q 325 567 363 606 q 277 453 287 529 l 582 453 q 535 567 572 529 q 429 606 498 606 m 197 953 q 223 1021 197 997 q 292 1044 248 1044 q 362 1019 336 1044 q 387 953 387 994 q 361 887 387 912 q 292 863 336 863 q 223 886 248 863 q 197 953 197 910 m 471 953 q 498 1022 471 1000 q 566 1044 526 1044 q 636 1020 610 1044 q 663 953 663 996 q 636 887 663 911 q 566 863 610 863 q 498 885 526 863 q 471 953 471 907 z "},"Ӭ":{"ha":921,"x_min":49,"x_max":840,"o":"m 375 831 q 243 812 308 831 q 115 766 178 793 l 49 936 q 379 1006 206 1006 q 720 870 600 1006 q 840 494 840 735 q 716 118 840 249 q 359 -14 593 -14 q 66 37 199 -14 l 66 214 q 347 161 231 161 q 545 224 477 161 q 619 414 613 288 l 189 414 l 189 586 l 618 586 q 549 766 614 701 q 375 831 484 831 m 213 1182 q 238 1250 213 1226 q 307 1274 264 1274 q 377 1249 352 1274 q 403 1182 403 1223 q 377 1117 403 1141 q 307 1092 351 1092 q 238 1116 264 1092 q 213 1182 213 1139 m 486 1182 q 514 1252 486 1230 q 582 1274 541 1274 q 652 1249 626 1274 q 678 1182 678 1225 q 652 1116 678 1141 q 582 1092 625 1092 q 514 1114 541 1092 q 486 1182 486 1136 z "},"ӭ":{"ha":711,"x_min":50,"x_max":648,"o":"m 283 -14 q 50 33 141 -14 l 50 195 q 272 140 168 140 q 387 184 347 140 q 435 314 428 227 l 149 314 l 149 452 l 435 452 q 393 577 429 535 q 289 619 357 619 q 113 576 208 619 l 54 718 q 169 757 105 742 q 297 772 233 772 q 562 676 475 772 q 648 387 648 580 q 556 88 648 189 q 283 -14 465 -14 m 118 953 q 143 1021 118 997 q 212 1044 169 1044 q 282 1019 257 1044 q 308 953 308 994 q 282 887 308 912 q 212 863 256 863 q 143 886 169 863 q 118 953 118 910 m 391 953 q 419 1022 391 1000 q 487 1044 446 1044 q 557 1020 531 1044 q 583 953 583 996 q 557 887 583 911 q 487 863 530 863 q 419 885 446 863 q 391 953 391 907 z "},"Ӯ":{"ha":907,"x_min":0,"x_max":907,"o":"m 907 991 l 600 290 q 492 100 543 158 q 372 15 441 43 q 204 -14 303 -14 q 46 7 119 -14 l 46 187 q 195 163 106 163 q 286 189 251 163 q 343 279 320 215 l 0 991 l 222 991 l 467 439 l 473 439 l 486 473 l 690 991 l 907 991 m 225 1214 l 685 1214 l 685 1071 l 225 1071 l 225 1214 z "},"ӯ":{"ha":790,"x_min":0,"x_max":790,"o":"m 0 758 l 227 758 l 370 332 q 395 200 388 276 l 399 200 q 428 332 406 270 l 568 758 l 790 758 l 469 -97 q 343 -275 425 -216 q 153 -334 262 -334 q 47 -322 99 -334 l 47 -158 q 129 -167 85 -167 q 225 -133 184 -167 q 289 -32 266 -100 l 301 5 l 0 758 m 168 985 l 627 985 l 627 842 l 168 842 l 168 985 z "},"Ӱ":{"ha":907,"x_min":0,"x_max":907,"o":"m 907 991 l 600 290 q 492 100 543 158 q 372 15 441 43 q 204 -14 303 -14 q 46 7 119 -14 l 46 187 q 195 163 106 163 q 286 189 251 163 q 343 279 320 215 l 0 991 l 222 991 l 467 439 l 473 439 l 486 473 l 690 991 l 907 991 m 222 1182 q 248 1250 222 1226 q 317 1274 273 1274 q 387 1249 361 1274 q 412 1182 412 1223 q 387 1117 412 1141 q 317 1092 361 1092 q 248 1116 273 1092 q 222 1182 222 1139 m 496 1182 q 523 1252 496 1230 q 591 1274 551 1274 q 662 1249 635 1274 q 688 1182 688 1225 q 661 1116 688 1141 q 591 1092 635 1092 q 523 1114 551 1092 q 496 1182 496 1136 z "},"ӱ":{"ha":790,"x_min":0,"x_max":790,"o":"m 0 758 l 227 758 l 370 332 q 395 200 388 276 l 399 200 q 428 332 406 270 l 568 758 l 790 758 l 469 -97 q 343 -275 425 -216 q 153 -334 262 -334 q 47 -322 99 -334 l 47 -158 q 129 -167 85 -167 q 225 -133 184 -167 q 289 -32 266 -100 l 301 5 l 0 758 m 165 953 q 190 1021 165 997 q 259 1044 216 1044 q 329 1019 304 1044 q 355 953 355 994 q 329 887 355 912 q 259 863 303 863 q 190 886 216 863 q 165 953 165 910 m 438 953 q 466 1022 438 1000 q 534 1044 493 1044 q 604 1020 578 1044 q 630 953 630 996 q 604 887 630 911 q 534 863 577 863 q 466 885 493 863 q 438 953 438 907 z "},"Ӳ":{"ha":907,"x_min":0,"x_max":907,"o":"m 907 991 l 600 290 q 492 100 543 158 q 372 15 441 43 q 204 -14 303 -14 q 46 7 119 -14 l 46 187 q 195 163 106 163 q 286 189 251 163 q 343 279 320 215 l 0 991 l 222 991 l 467 439 l 473 439 l 486 473 l 690 991 l 907 991 m 231 1071 l 231 1089 q 310 1206 273 1147 q 362 1293 348 1265 l 566 1293 l 566 1279 q 467 1175 545 1243 q 340 1071 390 1107 l 231 1071 m 500 1071 l 500 1089 q 632 1293 594 1219 l 836 1293 l 836 1279 q 751 1188 819 1250 q 610 1071 683 1126 l 500 1071 z "},"ӳ":{"ha":790,"x_min":0,"x_max":790,"o":"m 0 758 l 227 758 l 370 332 q 395 200 388 276 l 399 200 q 428 332 406 270 l 568 758 l 790 758 l 469 -97 q 343 -275 425 -216 q 153 -334 262 -334 q 47 -322 99 -334 l 47 -158 q 129 -167 85 -167 q 225 -133 184 -167 q 289 -32 266 -100 l 301 5 l 0 758 m 161 842 l 161 860 q 241 977 203 918 q 293 1064 279 1036 l 497 1064 l 497 1050 q 398 946 475 1014 q 271 842 321 878 l 161 842 m 431 842 l 431 860 q 563 1064 525 990 l 767 1064 l 767 1050 q 682 959 750 1021 q 541 842 614 897 l 431 842 z "},"Ӵ":{"ha":1011,"x_min":74,"x_max":886,"o":"m 886 0 l 676 0 l 676 383 q 502 335 572 348 q 370 322 433 322 q 151 390 228 322 q 74 582 74 458 l 74 991 l 283 991 l 283 642 q 317 533 283 570 q 429 497 350 497 q 540 508 485 497 q 676 547 595 519 l 676 991 l 886 991 l 886 0 m 248 1182 q 273 1250 248 1226 q 342 1274 298 1274 q 412 1249 387 1274 q 437 1182 437 1223 q 412 1117 437 1141 q 342 1092 386 1092 q 273 1116 298 1092 q 248 1182 248 1139 m 521 1182 q 548 1252 521 1230 q 616 1274 576 1274 q 687 1249 661 1274 q 713 1182 713 1225 q 686 1116 713 1141 q 616 1092 660 1092 q 548 1114 576 1092 q 521 1182 521 1136 z "},"ӵ":{"ha":911,"x_min":83,"x_max":803,"o":"m 290 758 l 290 481 q 382 382 290 382 q 493 395 441 382 q 596 431 544 409 l 596 758 l 803 758 l 803 0 l 596 0 l 596 301 q 463 248 524 263 q 343 232 401 232 q 151 295 219 232 q 83 476 83 359 l 83 758 l 290 758 m 213 953 q 238 1021 213 997 q 307 1044 264 1044 q 377 1019 352 1044 q 403 953 403 994 q 377 887 403 912 q 307 863 351 863 q 238 886 264 863 q 213 953 213 910 m 486 953 q 514 1022 486 1000 q 582 1044 541 1044 q 652 1020 626 1044 q 678 953 678 996 q 652 887 678 911 q 582 863 625 863 q 514 885 541 863 q 486 953 486 907 z "},"Ӷ":{"ha":779,"x_min":125,"x_max":751,"o":"m 751 991 l 751 818 l 335 818 l 335 180 l 538 180 l 538 -289 l 335 -289 l 335 0 l 125 0 l 125 991 l 751 991 z "},"ӷ":{"ha":664,"x_min":109,"x_max":632,"o":"m 632 758 l 632 603 l 315 603 l 315 151 l 501 151 l 501 -272 l 315 -272 l 315 0 l 109 0 l 109 758 l 632 758 z "},"Ӹ":{"ha":1258,"x_min":125,"x_max":1133,"o":"m 803 310 q 700 78 803 155 q 396 0 597 0 l 125 0 l 125 991 l 335 991 l 335 611 l 403 611 q 698 532 593 611 q 803 310 803 453 m 335 172 l 390 172 q 542 207 494 172 q 590 310 590 241 q 544 409 590 379 q 380 439 497 439 l 335 439 l 335 172 m 1133 0 l 924 0 l 924 991 l 1133 991 l 1133 0 m 399 1182 q 424 1250 399 1226 q 493 1274 450 1274 q 563 1249 538 1274 q 589 1182 589 1223 q 563 1117 589 1141 q 493 1092 537 1092 q 424 1116 450 1092 q 399 1182 399 1139 m 672 1182 q 700 1252 672 1230 q 768 1274 727 1274 q 838 1249 812 1274 q 864 1182 864 1225 q 838 1116 864 1141 q 768 1092 811 1092 q 700 1114 727 1092 q 672 1182 672 1136 z "},"ӹ":{"ha":1181,"x_min":109,"x_max":1072,"o":"m 315 465 l 415 465 q 672 410 589 465 q 755 241 755 354 q 672 61 755 121 q 422 0 589 0 l 109 0 l 109 758 l 315 758 l 315 465 m 549 239 q 513 302 549 283 q 408 322 478 322 l 315 322 l 315 143 l 411 143 q 549 239 549 143 m 1072 0 l 865 0 l 865 758 l 1072 758 l 1072 0 m 359 953 q 384 1021 359 997 q 453 1044 410 1044 q 523 1019 498 1044 q 549 953 549 994 q 523 887 549 912 q 453 863 497 863 q 384 886 410 863 q 359 953 359 910 m 632 953 q 660 1022 632 1000 q 728 1044 687 1044 q 798 1020 772 1044 q 824 953 824 996 q 798 887 824 911 q 728 863 771 863 q 660 885 687 863 q 632 953 632 907 z "},"Ӻ":{"ha":777,"x_min":32,"x_max":749,"o":"m 749 991 l 749 819 l 335 819 l 335 576 l 607 576 l 607 404 l 335 404 l 335 0 l 125 0 l 125 404 l 32 404 l 32 576 l 125 576 l 125 991 l 749 991 m 296 -336 q 171 -319 229 -336 l 171 -157 q 252 -170 211 -170 q 335 -54 335 -170 l 335 205 l 535 205 l 535 -85 q 473 -271 535 -205 q 296 -336 411 -336 z "},"ӻ":{"ha":682,"x_min":3,"x_max":650,"o":"m 650 758 l 650 590 l 302 590 l 302 443 l 528 443 l 528 283 l 302 283 l 302 0 l 96 0 l 96 283 l 3 283 l 3 443 l 96 443 l 96 758 l 650 758 m 264 -336 q 138 -319 196 -336 l 138 -157 q 219 -170 178 -170 q 302 -54 302 -170 l 302 178 l 503 178 l 503 -85 q 440 -271 503 -205 q 264 -336 378 -336 z "},"Ӽ":{"ha":1017,"x_min":0,"x_max":989,"o":"m 926 0 l 686 0 l 456 375 l 225 0 l 0 0 l 329 511 l 21 991 l 253 991 l 467 635 l 676 991 l 903 991 l 591 500 l 926 0 m 750 -336 q 625 -319 682 -336 l 625 -157 q 705 -170 665 -170 q 789 -54 789 -170 l 789 205 l 989 205 l 989 -85 q 927 -271 989 -205 q 750 -336 865 -336 z "},"ӽ":{"ha":896,"x_min":7,"x_max":876,"o":"m 264 387 l 20 758 l 254 758 l 401 517 l 550 758 l 785 758 l 538 387 l 796 0 l 561 0 l 401 260 l 241 0 l 7 0 l 264 387 m 637 -336 q 512 -319 570 -336 l 512 -157 q 593 -170 552 -170 q 676 -54 676 -170 l 676 178 l 876 178 l 876 -85 q 814 -271 876 -205 q 637 -336 752 -336 z "},"Ӿ":{"ha":926,"x_min":0,"x_max":926,"o":"m 77 591 l 278 591 l 21 991 l 253 991 l 467 635 l 676 991 l 903 991 l 650 591 l 850 591 l 850 419 l 646 419 l 926 0 l 686 0 l 456 375 l 225 0 l 0 0 l 269 419 l 77 419 l 77 591 z "},"ӿ":{"ha":803,"x_min":7,"x_max":796,"o":"m 69 461 l 215 461 l 20 758 l 254 758 l 401 517 l 550 758 l 785 758 l 586 461 l 733 461 l 733 306 l 591 306 l 796 0 l 561 0 l 401 260 l 241 0 l 7 0 l 210 306 l 69 306 l 69 461 z "},"Ԁ":{"ha":886,"x_min":62,"x_max":761,"o":"m 62 310 q 168 532 62 454 q 468 611 274 611 l 551 611 l 551 991 l 761 991 l 761 0 l 472 0 q 62 310 62 0 m 551 439 l 497 439 q 325 409 375 439 q 275 310 275 378 q 325 207 275 241 q 481 172 374 172 l 551 172 l 551 439 z "},"ԁ":{"ha":879,"x_min":62,"x_max":771,"o":"m 349 -14 q 139 90 215 -14 q 62 378 62 194 q 140 668 62 564 q 354 772 218 772 q 572 661 497 772 l 579 661 q 564 812 564 746 l 564 1055 l 771 1055 l 771 0 l 612 0 l 572 98 l 564 98 q 349 -14 493 -14 m 421 151 q 537 197 500 151 q 578 354 574 243 l 578 376 q 540 551 578 498 q 418 604 503 604 q 310 546 349 604 q 272 375 272 487 q 311 207 272 263 q 421 151 349 151 z "},"Ԃ":{"ha":1286,"x_min":62,"x_max":1168,"o":"m 62 297 q 163 527 62 444 q 446 611 264 611 l 524 611 l 524 991 l 733 991 l 733 249 q 762 182 735 204 q 847 160 789 160 q 935 195 908 160 q 961 306 961 229 l 961 575 l 1168 575 l 1168 258 q 1086 56 1168 126 q 844 -14 1005 -14 q 706 13 771 -14 q 614 81 640 39 q 526 13 585 38 q 382 -12 467 -12 q 143 67 224 -12 q 62 297 62 147 m 524 439 l 475 439 q 322 403 368 439 q 275 294 275 368 q 307 195 275 229 q 400 160 338 160 q 490 182 457 160 q 524 244 524 204 l 524 439 z "},"ԃ":{"ha":1282,"x_min":62,"x_max":1178,"o":"m 411 -14 q 153 87 243 -14 q 62 378 62 187 q 136 667 62 562 q 342 772 210 772 q 551 661 479 772 l 558 661 q 548 735 553 687 q 543 812 543 784 l 543 1055 l 750 1055 l 750 258 q 777 184 750 208 q 864 160 804 160 q 948 195 923 160 q 974 306 974 229 l 974 475 l 1178 475 l 1178 258 q 1098 56 1178 125 q 861 -14 1019 -14 q 728 7 780 -14 q 635 79 677 28 q 537 14 604 42 q 411 -14 471 -14 m 410 151 q 519 198 485 151 q 557 354 554 244 l 557 376 q 521 552 557 500 q 408 604 485 604 q 272 375 272 604 q 305 207 272 263 q 410 151 338 151 z "},"Ԅ":{"ha":1268,"x_min":17,"x_max":1150,"o":"m 686 770 q 630 612 686 677 q 472 522 574 547 l 472 518 q 654 445 592 503 q 715 289 715 387 q 744 190 715 220 q 829 160 772 160 q 917 195 890 160 q 943 306 943 229 l 943 575 l 1150 575 l 1150 258 q 1069 56 1150 125 q 829 -14 987 -14 q 588 64 671 -14 q 505 289 505 141 q 439 398 505 361 q 248 435 373 435 l 132 435 l 132 582 l 248 582 q 481 724 481 582 q 445 806 481 777 q 332 836 408 836 q 122 768 226 836 l 17 908 q 347 1006 153 1006 q 595 942 503 1006 q 686 770 686 879 z "},"ԅ":{"ha":1208,"x_min":39,"x_max":1104,"o":"m 273 467 q 426 486 380 467 q 472 546 472 505 q 438 601 472 583 q 326 619 404 619 q 214 607 274 619 q 100 571 153 594 l 39 715 q 193 760 120 747 q 355 772 266 772 q 575 718 493 772 q 657 571 657 664 q 515 404 657 443 l 515 397 q 676 243 676 371 q 790 160 676 160 q 874 195 849 160 q 900 306 900 229 l 900 475 l 1104 475 l 1104 258 q 1024 56 1104 125 q 790 -14 945 -14 q 555 38 640 -14 q 469 186 469 90 q 420 289 469 254 q 278 323 370 323 l 174 323 l 174 467 l 273 467 z "},"Ԇ":{"ha":974,"x_min":17,"x_max":946,"o":"m 714 770 q 658 612 714 677 q 500 522 602 547 l 500 518 q 682 445 620 503 q 743 289 743 387 l 743 180 l 946 180 l 946 -289 l 743 -289 l 743 0 l 533 0 l 533 289 q 462 398 533 361 q 256 435 391 435 l 132 435 l 132 582 l 256 582 q 509 724 509 582 q 347 836 509 836 q 122 768 234 836 l 17 908 q 361 1006 159 1006 q 619 942 524 1006 q 714 770 714 879 z "},"ԇ":{"ha":918,"x_min":53,"x_max":899,"o":"m 294 467 q 458 486 410 467 q 507 546 507 505 q 471 601 507 583 q 353 619 435 619 q 234 606 300 619 q 114 571 168 593 l 53 715 q 210 759 134 746 q 379 772 286 772 q 606 718 521 772 q 692 571 692 664 q 550 404 692 443 l 550 397 q 675 332 637 374 q 713 221 713 290 l 713 151 l 899 151 l 899 -272 l 713 -272 l 713 0 l 511 0 l 511 221 q 459 299 511 274 q 298 323 408 323 l 187 323 l 187 467 l 294 467 z "},"Ԉ":{"ha":1435,"x_min":11,"x_max":1317,"o":"m 882 254 q 910 183 883 205 q 996 160 937 160 q 1083 195 1057 160 q 1109 306 1109 229 l 1109 575 l 1317 575 l 1317 258 q 1236 56 1317 125 q 996 -14 1154 -14 q 754 54 836 -14 q 672 254 672 122 l 672 817 l 457 817 l 446 726 q 372 239 404 379 q 278 42 340 99 q 111 -14 216 -15 q 11 1 54 -14 l 11 174 q 85 160 50 160 q 142 193 121 160 q 181 315 163 226 q 231 607 200 404 q 283 991 262 810 l 882 991 l 882 254 z "},"ԉ":{"ha":1299,"x_min":0,"x_max":1194,"o":"m 766 256 q 793 183 766 205 q 880 160 821 160 q 965 195 939 160 q 990 306 990 229 l 990 475 l 1194 475 l 1194 258 q 1115 56 1194 125 q 880 -14 1035 -14 q 640 54 721 -14 q 559 256 559 122 l 559 603 l 390 603 q 337 223 368 349 q 254 42 306 98 q 118 -14 202 -14 q 0 8 46 -14 l 0 174 q 66 160 33 160 q 131 216 105 160 q 178 401 157 271 q 214 758 199 531 l 766 758 l 766 256 z "},"Ԋ":{"ha":1449,"x_min":125,"x_max":1331,"o":"m 909 258 q 934 184 909 208 q 1017 160 959 160 q 1099 195 1074 160 q 1124 306 1124 229 l 1124 575 l 1331 575 l 1331 258 q 1251 56 1331 125 q 1017 -14 1171 -14 q 781 54 861 -14 q 700 253 701 122 l 700 428 l 335 428 l 335 0 l 125 0 l 125 991 l 335 991 l 335 603 l 700 603 l 700 991 l 909 991 l 909 258 z "},"ԋ":{"ha":1322,"x_min":109,"x_max":1218,"o":"m 315 758 l 315 467 l 590 467 l 590 758 l 798 758 l 798 254 q 825 183 799 205 q 907 160 852 160 q 989 195 964 160 q 1014 306 1014 229 l 1014 475 l 1218 475 l 1218 258 q 1139 55 1218 124 q 907 -14 1060 -14 q 671 55 750 -14 q 590 254 591 123 l 590 313 l 315 313 l 315 0 l 109 0 l 109 758 l 315 758 z "},"Ԍ":{"ha":1111,"x_min":81,"x_max":1031,"o":"m 557 557 l 1031 557 l 1031 473 q 917 109 1031 231 q 582 -14 802 -14 q 211 120 340 -14 q 81 497 81 254 q 140 768 81 652 q 312 944 199 883 q 579 1006 425 1006 q 921 933 766 1006 l 848 764 q 706 817 771 802 q 571 831 642 831 q 370 741 443 831 q 297 493 297 652 q 371 248 297 334 q 587 161 444 161 q 751 218 692 161 q 810 377 810 275 l 810 382 l 557 382 l 557 557 z "},"ԍ":{"ha":921,"x_min":62,"x_max":859,"o":"m 449 450 l 859 450 l 859 387 q 465 -14 859 -14 q 168 87 274 -14 q 62 374 62 189 q 173 669 62 566 q 486 772 283 772 q 772 714 640 772 l 710 555 q 598 592 659 579 q 488 606 536 606 q 325 549 377 606 q 272 371 272 492 q 460 150 272 150 q 597 189 547 150 q 647 296 647 229 l 449 296 l 449 450 z "},"Ԏ":{"ha":1053,"x_min":28,"x_max":935,"o":"m 507 258 q 533 184 507 208 q 616 160 558 160 q 702 195 676 160 q 728 306 728 229 l 728 575 l 935 575 l 935 258 q 854 56 935 125 q 618 -14 774 -14 q 378 55 458 -14 q 297 253 297 124 l 297 817 l 28 817 l 28 991 l 777 991 l 777 817 l 507 817 l 507 258 z "},"ԏ":{"ha":1019,"x_min":32,"x_max":916,"o":"m 736 758 l 736 603 l 488 603 l 488 258 q 515 184 488 208 q 602 160 542 160 q 686 195 660 160 q 711 306 711 229 l 711 475 l 916 475 l 916 258 q 836 56 916 125 q 602 -14 756 -14 q 363 54 444 -14 q 281 254 282 121 l 281 603 l 32 603 l 32 758 l 736 758 z "},"Ԑ":{"ha":900,"x_min":60,"x_max":836,"o":"m 90 760 q 137 887 90 831 q 269 975 184 944 q 461 1006 353 1006 q 668 983 581 1006 q 836 907 756 960 l 745 751 q 475 832 614 832 q 339 805 385 832 q 294 726 294 777 q 367 627 294 657 q 596 597 439 597 l 679 597 l 679 433 l 586 433 q 348 398 427 433 q 268 297 268 363 q 324 194 268 227 q 496 161 380 161 q 672 178 583 161 q 828 227 762 195 l 828 40 q 479 -14 697 -14 q 172 66 283 -14 q 60 282 60 145 q 129 443 60 381 q 322 518 198 505 l 322 522 q 152 602 214 539 q 90 760 90 665 z "},"ԑ":{"ha":772,"x_min":53,"x_max":720,"o":"m 570 467 l 570 323 l 456 323 q 307 300 357 323 q 257 228 257 277 q 431 146 257 146 q 582 161 506 146 q 718 204 659 177 l 718 39 q 424 -14 602 -14 q 148 42 243 -14 q 53 210 53 98 q 96 328 53 282 q 237 392 140 373 l 237 399 q 93 574 93 432 q 180 721 93 669 q 427 772 267 772 q 580 758 502 772 q 720 715 658 743 l 664 571 q 432 619 549 619 q 278 549 278 619 q 323 485 278 504 q 465 467 368 467 l 570 467 z "},"Ԓ":{"ha":1136,"x_min":11,"x_max":1108,"o":"m 909 0 l 700 0 l 700 817 l 457 817 l 446 726 q 372 239 404 379 q 278 42 340 99 q 111 -14 216 -15 q 11 1 54 -14 l 11 174 q 85 160 50 160 q 142 193 121 160 q 181 315 163 226 q 231 607 200 404 q 283 991 262 810 l 909 991 l 909 0 m 869 -336 q 744 -319 802 -336 l 744 -157 q 825 -170 784 -170 q 908 -54 908 -170 l 908 205 l 1108 205 l 1108 -85 q 1046 -271 1108 -205 q 869 -336 984 -336 z "},"ԓ":{"ha":1006,"x_min":0,"x_max":986,"o":"m 787 0 l 581 0 l 581 603 l 390 603 q 337 223 368 349 q 254 42 306 98 q 118 -14 202 -14 q 0 8 46 -14 l 0 174 q 66 160 33 160 q 131 216 105 160 q 178 401 157 271 q 214 758 199 531 l 787 758 l 787 0 m 747 -336 q 622 -319 680 -336 l 622 -157 q 703 -170 662 -170 q 786 -54 786 -170 l 786 178 l 986 178 l 986 -85 q 924 -271 986 -205 q 747 -336 862 -336 z "},"Ạ":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 367 -191 q 479 -89 367 -89 q 592 -191 592 -89 q 564 -265 592 -239 q 479 -292 535 -292 q 367 -191 367 -292 z "},"ạ":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 282 -191 q 395 -89 282 -89 q 507 -191 507 -89 q 479 -265 507 -239 q 395 -292 450 -292 q 282 -191 282 -292 z "},"Ả":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 653 1238 q 543 1104 653 1132 l 536 1056 l 418 1056 l 403 1156 q 472 1181 454 1164 q 490 1223 490 1198 q 476 1257 490 1245 q 439 1268 462 1268 q 345 1253 395 1268 l 345 1367 q 400 1378 365 1373 q 464 1382 436 1382 q 606 1344 559 1382 q 653 1238 653 1307 z "},"ả":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 593 1008 q 484 875 593 903 l 477 827 l 359 827 l 343 926 q 412 952 394 935 q 431 994 431 969 q 416 1027 431 1016 q 379 1039 402 1039 q 285 1023 335 1039 l 285 1137 q 341 1148 305 1144 q 404 1153 376 1153 q 546 1115 499 1153 q 593 1008 593 1078 z "},"Ấ":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 732 1071 l 623 1071 q 479 1183 547 1122 q 336 1071 402 1115 l 227 1071 l 227 1089 q 372 1279 302 1177 l 586 1279 q 668 1168 622 1226 q 732 1089 713 1110 l 732 1071 m 672 1221 q 766 1357 730 1282 l 929 1357 l 929 1343 q 775 1203 884 1282 l 672 1203 l 672 1221 z "},"ấ":{"ha":839,"x_min":58,"x_max":867,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 670 842 l 560 842 q 417 954 484 892 q 274 842 340 886 l 164 842 l 164 860 q 310 1050 240 948 l 524 1050 q 605 939 559 997 q 670 860 651 881 l 670 842 m 610 991 q 703 1128 667 1053 l 867 1128 l 867 1114 q 713 974 821 1053 l 610 974 l 610 991 z "},"Ầ":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 227 1089 q 372 1279 302 1177 l 587 1279 q 663 1175 620 1230 q 732 1089 705 1119 l 732 1071 l 623 1071 q 479 1183 557 1115 q 336 1071 408 1118 l 227 1071 l 227 1089 m 286 1203 l 184 1203 q 29 1343 73 1284 l 29 1357 l 193 1357 q 286 1221 230 1281 l 286 1203 z "},"ầ":{"ha":839,"x_min":-31,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 167 860 q 313 1050 243 948 l 527 1050 q 603 945 560 1001 q 673 860 646 890 l 673 842 l 563 842 q 420 954 497 886 q 277 842 348 889 l 167 842 l 167 860 m 227 974 l 124 974 q -31 1114 13 1055 l -31 1128 l 134 1128 q 227 991 170 1052 l 227 974 z "},"Ẩ":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 868 1336 q 783 1242 868 1259 l 779 1200 l 693 1200 l 686 1279 q 746 1291 724 1280 q 768 1321 768 1301 q 756 1345 768 1335 q 714 1356 743 1356 q 665 1349 690 1356 l 665 1435 q 728 1439 680 1439 q 830 1415 791 1439 q 868 1336 868 1390 m 732 1071 l 623 1071 q 479 1183 547 1122 q 336 1071 402 1115 l 227 1071 l 227 1089 q 372 1279 302 1177 l 586 1279 q 668 1168 622 1226 q 732 1089 713 1110 l 732 1071 z "},"ẩ":{"ha":839,"x_min":58,"x_max":808,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 808 1107 q 724 1013 808 1029 l 720 971 l 633 971 l 627 1050 q 686 1062 664 1051 q 709 1092 709 1072 q 696 1116 709 1106 q 654 1126 684 1126 q 606 1120 631 1126 l 606 1206 q 668 1210 621 1210 q 770 1185 732 1210 q 808 1107 808 1161 m 673 842 l 563 842 q 420 954 487 892 q 277 842 342 886 l 167 842 l 167 860 q 313 1050 243 948 l 526 1050 q 608 939 562 997 q 673 860 654 881 l 673 842 z "},"Ẫ":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 578 1292 q 528 1300 553 1292 q 478 1319 503 1309 q 431 1338 454 1329 q 389 1346 408 1346 q 348 1335 362 1346 q 324 1291 333 1324 l 248 1291 q 290 1410 254 1366 q 382 1454 326 1454 q 434 1445 408 1454 q 484 1426 460 1436 q 531 1407 509 1416 q 571 1398 553 1398 q 613 1411 599 1398 q 636 1455 627 1423 l 713 1455 q 669 1334 705 1377 q 578 1292 633 1292 m 732 1071 l 636 1071 q 479 1174 541 1119 q 322 1071 423 1124 l 227 1071 l 227 1089 q 387 1265 342 1200 l 572 1265 q 648 1174 605 1219 q 732 1089 692 1129 l 732 1071 z "},"ẫ":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 518 1063 q 468 1071 494 1063 q 418 1090 443 1080 q 371 1108 394 1100 q 330 1117 349 1117 q 288 1106 302 1117 q 264 1061 273 1095 l 188 1061 q 230 1181 194 1137 q 323 1225 267 1225 q 374 1216 348 1225 q 425 1197 400 1207 q 471 1178 449 1187 q 511 1169 494 1169 q 553 1181 539 1169 q 576 1226 567 1194 l 653 1226 q 609 1105 645 1147 q 518 1063 573 1063 m 673 842 l 576 842 q 420 945 481 890 q 262 842 363 895 l 167 842 l 167 860 q 327 1036 282 971 l 513 1036 q 589 945 545 989 q 673 860 632 900 l 673 842 z "},"Ậ":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 637 1071 q 479 1190 531 1134 q 323 1071 426 1135 l 186 1071 l 186 1089 q 359 1293 314 1217 l 602 1293 q 674 1197 623 1258 q 775 1089 726 1137 l 775 1071 l 637 1071 m 367 -191 q 479 -89 367 -89 q 592 -191 592 -89 q 564 -265 592 -239 q 479 -292 535 -292 q 367 -191 367 -292 z "},"ậ":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 574 841 q 416 960 468 904 q 260 841 363 905 l 123 841 l 123 859 q 296 1063 251 987 l 538 1063 q 611 967 559 1028 q 712 859 663 907 l 712 841 l 574 841 m 290 -191 q 403 -89 290 -89 q 515 -191 515 -89 q 487 -265 515 -239 q 403 -292 458 -292 q 290 -191 290 -292 z "},"Ắ":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 412 1265 q 492 1402 460 1337 l 642 1402 l 642 1388 q 501 1247 579 1313 l 412 1247 l 412 1265 m 726 1300 q 653 1132 719 1193 q 478 1071 587 1071 q 303 1129 366 1071 q 235 1300 240 1187 l 336 1300 q 381 1213 342 1241 q 479 1185 420 1185 q 578 1217 539 1185 q 623 1300 616 1249 l 726 1300 z "},"ắ":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 350 1036 q 429 1173 397 1107 l 579 1173 l 579 1158 q 439 1018 517 1084 l 350 1018 l 350 1036 m 664 1071 q 590 903 656 964 q 416 842 524 842 q 241 900 304 842 q 172 1071 178 958 l 274 1071 q 318 984 279 1012 q 417 956 357 956 q 515 987 477 956 q 560 1071 554 1019 l 664 1071 z "},"Ằ":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 547 1247 l 458 1247 q 318 1388 387 1305 l 318 1402 l 468 1402 q 547 1265 500 1337 l 547 1247 m 338 1300 q 382 1217 343 1249 q 481 1185 420 1185 q 581 1214 543 1185 q 624 1300 618 1244 l 725 1300 q 656 1129 719 1187 q 482 1071 593 1071 q 307 1132 373 1071 q 233 1300 241 1192 l 338 1300 z "},"ằ":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 485 1018 l 396 1018 q 256 1158 324 1076 l 256 1173 l 406 1173 q 485 1036 437 1107 l 485 1018 m 275 1071 q 319 988 281 1020 q 418 956 358 956 q 518 985 480 956 q 562 1071 556 1015 l 663 1071 q 594 900 656 958 q 420 842 531 842 q 244 902 311 842 q 171 1071 178 963 l 275 1071 z "},"Ẳ":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 581 1357 q 564 1300 581 1322 q 510 1265 547 1278 l 506 1238 l 433 1238 l 427 1312 q 474 1326 461 1318 q 488 1352 488 1335 q 448 1379 488 1379 q 392 1374 412 1379 l 392 1444 q 454 1449 407 1449 q 547 1426 513 1449 q 581 1357 581 1403 m 338 1300 q 382 1217 343 1249 q 481 1185 420 1185 q 581 1214 543 1185 q 624 1300 618 1244 l 725 1300 q 656 1129 719 1187 q 482 1071 593 1071 q 307 1132 373 1071 q 233 1300 241 1192 l 338 1300 z "},"ẳ":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 519 1128 q 503 1070 519 1093 q 449 1036 486 1048 l 445 1008 l 372 1008 l 366 1083 q 413 1097 400 1089 q 427 1122 427 1105 q 387 1150 427 1150 q 331 1145 351 1150 l 331 1215 q 393 1219 346 1219 q 486 1197 452 1219 q 519 1128 519 1174 m 277 1071 q 321 988 282 1020 q 420 956 359 956 q 519 985 481 956 q 563 1071 557 1015 l 664 1071 q 595 900 658 958 q 421 842 532 842 q 246 902 312 842 q 172 1071 180 963 l 277 1071 z "},"Ẵ":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 338 1272 q 378 1208 342 1232 q 481 1185 414 1185 q 624 1272 614 1185 l 725 1272 q 656 1122 719 1173 q 482 1071 594 1071 q 306 1125 372 1071 q 233 1272 241 1179 l 338 1272 m 585 1305 q 535 1314 560 1305 q 485 1333 509 1322 q 438 1351 460 1343 q 396 1360 415 1360 q 353 1348 367 1360 q 331 1304 340 1335 l 254 1304 q 294 1413 260 1372 q 389 1454 327 1454 q 440 1445 414 1454 q 491 1426 467 1436 q 538 1407 515 1416 q 578 1398 560 1398 q 620 1411 606 1398 q 643 1455 633 1423 l 720 1455 q 677 1343 712 1381 q 585 1305 642 1305 z "},"ẵ":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 277 1043 q 317 979 281 1003 q 420 956 353 956 q 563 1043 553 956 l 664 1043 q 595 893 658 944 q 421 842 533 842 q 245 896 311 842 q 172 1043 180 949 l 277 1043 m 524 1076 q 474 1085 499 1076 q 424 1103 448 1093 q 377 1122 399 1114 q 335 1131 354 1131 q 292 1118 306 1131 q 270 1075 279 1106 l 193 1075 q 233 1184 199 1143 q 328 1225 266 1225 q 379 1216 353 1225 q 430 1197 406 1207 q 477 1178 454 1187 q 517 1169 499 1169 q 558 1181 545 1169 q 582 1226 572 1194 l 659 1226 q 616 1114 651 1152 q 524 1076 581 1076 z "},"Ặ":{"ha":958,"x_min":0,"x_max":958,"o":"m 732 0 l 660 236 l 298 236 l 227 0 l 0 0 l 350 996 l 607 996 l 958 0 l 732 0 m 610 412 q 497 775 510 733 q 479 842 485 817 q 351 412 457 755 l 610 412 m 746 1300 q 663 1133 738 1196 q 476 1071 589 1071 q 288 1133 358 1071 q 212 1300 218 1194 l 328 1300 q 346 1250 330 1268 q 391 1223 362 1232 q 477 1215 420 1215 q 628 1300 617 1215 l 746 1300 m 367 -191 q 479 -89 367 -89 q 592 -191 592 -89 q 564 -265 592 -239 q 479 -292 535 -292 q 367 -191 367 -292 z "},"ặ":{"ha":839,"x_min":58,"x_max":734,"o":"m 590 0 l 550 103 l 545 103 q 437 12 492 37 q 293 -14 382 -14 q 121 49 184 -14 q 58 227 58 111 q 143 405 58 347 q 397 468 227 462 l 529 472 l 529 505 q 411 621 529 621 q 197 566 320 621 l 129 705 q 419 774 260 774 q 653 707 572 774 q 734 505 734 641 l 734 0 l 590 0 m 529 351 l 449 349 q 315 316 359 346 q 271 225 271 286 q 371 138 271 138 q 486 179 443 138 q 529 289 529 220 l 529 351 m 283 -191 q 396 -89 283 -89 q 509 -191 509 -89 q 480 -265 509 -239 q 396 -292 452 -292 q 283 -191 283 -292 m 684 1071 q 602 904 676 966 q 414 842 527 842 q 226 903 296 842 q 151 1071 156 965 l 266 1071 q 284 1021 269 1039 q 329 994 300 1002 q 416 986 358 986 q 566 1071 555 986 l 684 1071 z "},"Ẹ":{"ha":778,"x_min":125,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 296 -191 q 408 -89 296 -89 q 521 -191 521 -89 q 492 -265 521 -239 q 408 -292 464 -292 q 296 -191 296 -292 z "},"ẹ":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 297 -191 q 410 -89 297 -89 q 522 -191 522 -89 q 494 -265 522 -239 q 410 -292 465 -292 q 297 -191 297 -292 z "},"Ẻ":{"ha":778,"x_min":125,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 589 1238 q 479 1104 589 1132 l 473 1056 l 355 1056 l 339 1156 q 408 1181 390 1164 q 427 1223 427 1198 q 412 1257 427 1245 q 375 1268 398 1268 q 281 1253 331 1268 l 281 1367 q 337 1378 301 1373 q 400 1382 372 1382 q 542 1344 495 1382 q 589 1238 589 1307 z "},"ẻ":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 604 1008 q 494 875 604 903 l 488 827 l 370 827 l 354 926 q 423 952 405 935 q 441 994 441 969 q 427 1027 441 1016 q 390 1039 413 1039 q 296 1023 346 1039 l 296 1137 q 352 1148 316 1144 q 415 1153 387 1153 q 557 1115 510 1153 q 604 1008 604 1078 z "},"Ẽ":{"ha":778,"x_min":125,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 298 1142 q 258 1124 277 1142 q 230 1069 239 1106 l 129 1069 q 185 1223 136 1168 q 313 1279 233 1279 q 368 1268 341 1279 q 421 1243 395 1257 q 472 1219 447 1230 q 522 1208 497 1208 q 562 1226 543 1208 q 590 1280 581 1244 l 691 1280 q 634 1126 684 1182 q 507 1071 585 1071 q 452 1082 479 1071 q 399 1106 425 1093 q 348 1131 373 1120 q 298 1142 323 1142 z "},"ẽ":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 307 913 q 266 895 286 913 q 238 840 247 877 l 137 840 q 193 994 144 939 q 321 1050 241 1050 q 376 1039 349 1050 q 429 1014 403 1027 q 480 990 455 1001 q 530 979 505 979 q 570 997 551 979 q 598 1051 589 1015 l 699 1051 q 643 897 692 953 q 515 842 593 842 q 460 853 487 842 q 407 877 433 864 q 356 902 381 890 q 307 913 331 913 z "},"Ế":{"ha":778,"x_min":125,"x_max":861,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 664 1071 l 554 1071 q 411 1183 478 1122 q 268 1071 334 1115 l 158 1071 l 158 1089 q 304 1279 234 1177 l 517 1279 q 599 1168 553 1226 q 664 1089 645 1110 l 664 1071 m 604 1221 q 697 1357 661 1282 l 861 1357 l 861 1343 q 707 1203 815 1282 l 604 1203 l 604 1221 z "},"ế":{"ha":821,"x_min":62,"x_max":871,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 674 842 l 564 842 q 421 954 488 892 q 278 842 344 886 l 168 842 l 168 860 q 314 1050 244 948 l 528 1050 q 609 939 564 997 q 674 860 655 881 l 674 842 m 614 991 q 707 1128 671 1053 l 871 1128 l 871 1114 q 717 974 825 1053 l 614 974 l 614 991 z "},"Ề":{"ha":778,"x_min":-35,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 163 1089 q 309 1279 239 1177 l 523 1279 q 599 1175 556 1230 q 669 1089 642 1119 l 669 1071 l 559 1071 q 416 1183 493 1115 q 273 1071 344 1118 l 163 1071 l 163 1089 m 222 1203 l 120 1203 q -35 1343 9 1284 l -35 1357 l 130 1357 q 222 1221 166 1281 l 222 1203 z "},"ề":{"ha":821,"x_min":-22,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 175 860 q 321 1050 251 948 l 535 1050 q 611 945 568 1001 q 681 860 654 890 l 681 842 l 571 842 q 428 954 505 886 q 285 842 356 889 l 175 842 l 175 860 m 235 974 l 132 974 q -22 1114 21 1055 l -22 1128 l 142 1128 q 235 991 178 1052 l 235 974 z "},"Ể":{"ha":778,"x_min":125,"x_max":800,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 800 1336 q 715 1242 800 1259 l 711 1200 l 625 1200 l 618 1279 q 677 1291 655 1280 q 700 1321 700 1301 q 687 1345 700 1335 q 646 1356 675 1356 q 597 1349 622 1356 l 597 1435 q 659 1439 612 1439 q 761 1415 723 1439 q 800 1336 800 1390 m 664 1071 l 554 1071 q 411 1183 478 1122 q 268 1071 334 1115 l 158 1071 l 158 1089 q 304 1279 234 1177 l 517 1279 q 599 1168 553 1226 q 664 1089 645 1110 l 664 1071 z "},"ể":{"ha":821,"x_min":62,"x_max":810,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 810 1107 q 725 1013 810 1029 l 721 971 l 635 971 l 628 1050 q 688 1062 665 1051 q 710 1092 710 1072 q 697 1116 710 1106 q 656 1126 685 1126 q 607 1120 632 1126 l 607 1206 q 669 1210 622 1210 q 771 1185 733 1210 q 810 1107 810 1161 m 674 842 l 564 842 q 421 954 488 892 q 278 842 344 886 l 168 842 l 168 860 q 314 1050 244 948 l 528 1050 q 609 939 564 997 q 674 860 655 881 l 674 842 z "},"Ễ":{"ha":778,"x_min":125,"x_max":696,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 512 1292 q 462 1300 488 1292 q 412 1319 437 1309 q 365 1338 388 1329 q 323 1346 342 1346 q 282 1335 296 1346 q 258 1291 267 1324 l 182 1291 q 224 1410 188 1366 q 317 1454 260 1454 q 368 1445 342 1454 q 418 1426 394 1436 q 465 1407 443 1416 q 505 1398 488 1398 q 547 1411 533 1398 q 570 1455 561 1423 l 647 1455 q 603 1334 639 1377 q 512 1292 567 1292 m 667 1071 l 570 1071 q 414 1174 475 1119 q 256 1071 357 1124 l 161 1071 l 161 1089 q 321 1265 276 1200 l 507 1265 q 583 1174 539 1219 q 667 1089 626 1129 l 667 1071 z "},"ễ":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 522 1063 q 472 1071 498 1063 q 422 1090 447 1080 q 375 1108 398 1100 q 334 1117 353 1117 q 292 1106 307 1117 q 269 1061 277 1095 l 192 1061 q 234 1181 198 1137 q 327 1225 271 1225 q 378 1216 352 1225 q 429 1197 404 1207 q 475 1178 453 1187 q 515 1169 498 1169 q 557 1181 543 1169 q 581 1226 571 1194 l 657 1226 q 613 1105 649 1147 q 522 1063 577 1063 m 677 842 l 581 842 q 424 945 485 890 q 267 842 368 895 l 171 842 l 171 860 q 331 1036 286 971 l 517 1036 q 593 945 549 989 q 677 860 636 900 l 677 842 z "},"Ệ":{"ha":778,"x_min":116,"x_max":705,"o":"m 696 0 l 125 0 l 125 991 l 696 991 l 696 819 l 335 819 l 335 602 l 671 602 l 671 429 l 335 429 l 335 174 l 696 174 l 696 0 m 568 1071 q 409 1190 461 1134 q 254 1071 356 1135 l 116 1071 l 116 1089 q 290 1293 244 1217 l 532 1293 q 605 1197 553 1258 q 705 1089 656 1137 l 705 1071 l 568 1071 m 296 -191 q 408 -89 296 -89 q 521 -191 521 -89 q 492 -265 521 -239 q 408 -292 464 -292 q 296 -191 296 -292 z "},"ệ":{"ha":821,"x_min":62,"x_max":761,"o":"m 422 625 q 319 584 357 625 q 277 465 282 542 l 567 465 q 527 584 566 542 q 422 625 488 625 m 452 -14 q 165 87 269 -14 q 62 374 62 189 q 158 668 62 564 q 421 772 253 772 q 671 681 582 772 q 761 428 761 589 l 761 328 l 272 328 q 324 190 275 239 q 461 140 373 140 q 591 155 530 140 q 718 200 652 169 l 718 40 q 602 0 664 13 q 452 -14 541 -14 m 569 842 q 410 961 463 905 q 255 842 357 906 l 117 842 l 117 860 q 291 1064 245 988 l 533 1064 q 606 968 554 1029 q 707 860 658 907 l 707 842 l 569 842 m 297 -189 q 410 -87 297 -87 q 522 -189 522 -87 q 494 -264 522 -237 q 410 -290 465 -290 q 297 -189 297 -290 z "},"ỉ":{"ha":424,"x_min":79,"x_max":388,"o":"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 388 1008 q 278 875 388 903 l 271 827 l 153 827 l 138 926 q 207 952 189 935 q 225 994 225 969 q 211 1027 225 1016 q 174 1039 197 1039 q 79 1023 130 1039 l 79 1137 q 135 1148 100 1144 q 199 1153 171 1153 q 341 1115 294 1153 q 388 1008 388 1078 z "},"ị":{"ha":424,"x_min":98,"x_max":325,"o":"m 100 954 q 212 1055 100 1055 q 325 954 325 1055 q 297 879 325 906 q 212 852 269 852 q 100 954 100 852 m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 98 -191 q 211 -89 98 -89 q 323 -191 323 -89 q 295 -265 323 -239 q 211 -292 267 -292 q 98 -191 98 -292 z "},"Ọ":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 440 -191 q 553 -89 440 -89 q 665 -191 665 -89 q 637 -265 665 -239 q 553 -292 608 -292 q 440 -191 440 -292 z "},"ọ":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 315 -191 q 428 -89 315 -89 q 541 -191 541 -89 q 512 -265 541 -239 q 428 -292 484 -292 q 315 -191 315 -292 z "},"Ỏ":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 728 1238 q 618 1104 728 1132 l 611 1056 l 493 1056 l 477 1156 q 547 1181 528 1164 q 565 1223 565 1198 q 551 1257 565 1245 q 513 1268 536 1268 q 419 1253 469 1268 l 419 1367 q 475 1378 439 1373 q 538 1382 511 1382 q 681 1344 633 1382 q 728 1238 728 1307 z "},"ỏ":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 604 1008 q 494 875 604 903 l 488 827 l 370 827 l 354 926 q 423 952 405 935 q 441 994 441 969 q 427 1027 441 1016 q 390 1039 413 1039 q 296 1023 346 1039 l 296 1137 q 352 1148 316 1144 q 415 1153 387 1153 q 557 1115 510 1153 q 604 1008 604 1078 z "},"Ố":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 800 1071 l 690 1071 q 547 1183 614 1122 q 404 1071 470 1115 l 294 1071 l 294 1089 q 440 1279 370 1177 l 654 1279 q 735 1168 690 1226 q 800 1089 781 1110 l 800 1071 m 740 1221 q 833 1357 798 1282 l 997 1357 l 997 1343 q 843 1203 951 1282 l 740 1203 l 740 1221 z "},"ố":{"ha":860,"x_min":62,"x_max":875,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 678 842 l 568 842 q 425 954 492 892 q 282 842 348 886 l 172 842 l 172 860 q 318 1050 248 948 l 532 1050 q 613 939 568 997 q 678 860 659 881 l 678 842 m 618 991 q 711 1128 675 1053 l 875 1128 l 875 1114 q 721 974 829 1053 l 618 974 l 618 991 z "},"Ồ":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 297 1089 q 443 1279 373 1177 l 657 1279 q 733 1175 690 1230 q 803 1089 776 1119 l 803 1071 l 693 1071 q 550 1183 627 1115 q 407 1071 478 1118 l 297 1071 l 297 1089 m 357 1203 l 254 1203 q 100 1343 143 1284 l 100 1357 l 264 1357 q 357 1221 300 1281 l 357 1203 z "},"ồ":{"ha":860,"x_min":-22,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 175 860 q 321 1050 251 948 l 535 1050 q 611 945 568 1001 q 681 860 654 890 l 681 842 l 571 842 q 428 954 505 886 q 285 842 356 889 l 175 842 l 175 860 m 235 974 l 132 974 q -22 1114 21 1055 l -22 1128 l 142 1128 q 235 991 178 1052 l 235 974 z "},"Ổ":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 936 1336 q 851 1242 936 1259 l 847 1200 l 761 1200 l 754 1279 q 814 1291 791 1280 q 836 1321 836 1301 q 824 1345 836 1335 q 782 1356 811 1356 q 733 1349 758 1356 l 733 1435 q 795 1439 748 1439 q 898 1415 859 1439 q 936 1336 936 1390 m 800 1071 l 690 1071 q 547 1183 614 1122 q 404 1071 470 1115 l 294 1071 l 294 1089 q 440 1279 370 1177 l 654 1279 q 735 1168 690 1226 q 800 1089 781 1110 l 800 1071 z "},"ổ":{"ha":860,"x_min":62,"x_max":814,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 814 1107 q 729 1013 814 1029 l 725 971 l 639 971 l 632 1050 q 692 1062 669 1051 q 714 1092 714 1072 q 702 1116 714 1106 q 660 1126 689 1126 q 611 1120 636 1126 l 611 1206 q 673 1210 626 1210 q 775 1185 737 1210 q 814 1107 814 1161 m 678 842 l 568 842 q 425 954 492 892 q 282 842 348 886 l 172 842 l 172 860 q 318 1050 248 948 l 532 1050 q 613 939 568 997 q 678 860 659 881 l 678 842 z "},"Ỗ":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 650 1292 q 600 1300 625 1292 q 550 1319 574 1309 q 503 1338 526 1329 q 461 1346 480 1346 q 419 1335 434 1346 q 396 1291 405 1324 l 319 1291 q 362 1410 326 1366 q 454 1454 398 1454 q 506 1445 479 1454 q 556 1426 532 1436 q 603 1407 581 1416 q 643 1398 625 1398 q 685 1411 671 1398 q 708 1455 699 1423 l 785 1455 q 741 1334 777 1377 q 650 1292 705 1292 m 804 1071 l 708 1071 q 551 1174 612 1119 q 394 1071 495 1124 l 298 1071 l 298 1089 q 458 1265 414 1200 l 644 1265 q 720 1174 677 1219 q 804 1089 764 1129 l 804 1071 z "},"ỗ":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 529 1063 q 479 1071 505 1063 q 429 1090 454 1080 q 382 1108 405 1100 q 340 1117 359 1117 q 299 1106 313 1117 q 275 1061 284 1095 l 199 1061 q 241 1181 205 1137 q 334 1225 277 1225 q 385 1216 359 1225 q 435 1197 411 1207 q 482 1178 460 1187 q 522 1169 505 1169 q 564 1181 550 1169 q 587 1226 578 1194 l 664 1226 q 620 1105 656 1147 q 529 1063 584 1063 m 684 842 l 587 842 q 431 945 492 890 q 273 842 374 895 l 178 842 l 178 860 q 338 1036 293 971 l 524 1036 q 600 945 556 989 q 684 860 643 900 l 684 842 z "},"Ộ":{"ha":1105,"x_min":81,"x_max":1025,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 877 81 746 q 554 1007 326 1007 q 904 876 783 1007 q 1025 497 1025 744 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 440 -191 q 553 -89 440 -89 q 665 -191 665 -89 q 637 -265 665 -239 q 553 -292 608 -292 q 440 -191 440 -292 m 709 1071 q 550 1190 602 1134 q 395 1071 497 1135 l 257 1071 l 257 1089 q 431 1293 385 1217 l 673 1293 q 746 1197 694 1258 q 846 1089 798 1137 l 846 1071 l 709 1071 z "},"ộ":{"ha":860,"x_min":62,"x_max":798,"o":"m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 625 725 541 772 q 753 589 708 677 q 798 380 798 500 m 318 -191 q 431 -89 318 -89 q 543 -191 543 -89 q 515 -265 543 -239 q 431 -292 486 -292 q 318 -191 318 -292 m 586 842 q 427 961 479 905 q 272 842 374 906 l 134 842 l 134 860 q 308 1064 262 988 l 550 1064 q 623 968 571 1029 q 724 860 675 907 l 724 842 l 586 842 z "},"Ớ":{"ha":1146,"x_min":81,"x_max":1187,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 876 81 745 q 555 1007 326 1007 q 911 869 790 1007 q 974 1055 974 911 l 1178 1055 l 1187 1040 q 1115 852 1163 920 q 983 750 1067 784 q 1025 497 1025 642 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 1105 0 m 416 1071 l 416 1089 q 575 1293 532 1225 l 807 1293 l 807 1279 q 687 1174 772 1244 q 553 1071 602 1105 l 416 1071 z "},"ớ":{"ha":943,"x_min":62,"x_max":1007,"o":"m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 576 749 508 772 q 692 679 644 726 q 793 872 793 709 l 997 872 l 1007 857 q 959 713 989 766 q 882 624 930 660 q 762 570 833 587 q 798 380 798 485 m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 860 0 m 310 842 l 310 860 q 469 1064 427 996 l 701 1064 l 701 1050 q 581 945 666 1015 q 448 842 496 876 l 310 842 z "},"Ờ":{"ha":1146,"x_min":81,"x_max":1187,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 876 81 745 q 555 1007 326 1007 q 911 869 790 1007 q 974 1055 974 911 l 1178 1055 l 1187 1040 q 1115 852 1163 920 q 983 750 1067 784 q 1025 497 1025 642 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 1105 0 m 547 1071 q 422 1167 505 1101 q 293 1279 339 1234 l 293 1293 l 525 1293 q 684 1089 568 1225 l 684 1071 l 547 1071 z "},"ờ":{"ha":943,"x_min":62,"x_max":1007,"o":"m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 576 749 508 772 q 692 679 644 726 q 793 872 793 709 l 997 872 l 1007 857 q 959 713 989 766 q 882 624 930 660 q 762 570 833 587 q 798 380 798 485 m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 860 0 m 418 842 q 292 938 375 871 q 163 1050 210 1005 l 163 1064 l 395 1064 q 555 860 438 996 l 555 842 l 418 842 z "},"Ở":{"ha":1146,"x_min":81,"x_max":1187,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 876 81 745 q 555 1007 326 1007 q 911 869 790 1007 q 974 1055 974 911 l 1178 1055 l 1187 1040 q 1115 852 1163 920 q 983 750 1067 784 q 1025 497 1025 642 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 1105 0 m 742 1238 q 632 1104 742 1132 l 625 1056 l 507 1056 l 492 1156 q 561 1181 543 1164 q 579 1223 579 1198 q 565 1257 579 1245 q 528 1268 551 1268 q 433 1253 484 1268 l 433 1367 q 489 1378 454 1373 q 553 1382 525 1382 q 695 1344 648 1382 q 742 1238 742 1307 z "},"ở":{"ha":943,"x_min":62,"x_max":1007,"o":"m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 576 749 508 772 q 692 679 644 726 q 793 872 793 709 l 997 872 l 1007 857 q 959 713 989 766 q 882 624 930 660 q 762 570 833 587 q 798 380 798 485 m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 860 0 m 612 1008 q 503 875 612 903 l 496 827 l 378 827 l 362 926 q 431 952 413 935 q 450 994 450 969 q 435 1027 450 1016 q 398 1039 421 1039 q 304 1023 354 1039 l 304 1137 q 360 1148 324 1144 q 423 1153 395 1153 q 565 1115 518 1153 q 612 1008 612 1078 z "},"Ỡ":{"ha":1146,"x_min":81,"x_max":1187,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 876 81 745 q 555 1007 326 1007 q 911 869 790 1007 q 974 1055 974 911 l 1178 1055 l 1187 1040 q 1115 852 1163 920 q 983 750 1067 784 q 1025 497 1025 642 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 1105 0 m 448 1142 q 407 1124 427 1142 q 379 1069 388 1106 l 278 1069 q 334 1223 286 1168 q 463 1279 382 1279 q 517 1268 490 1279 q 570 1243 544 1257 q 621 1219 596 1230 q 671 1208 646 1208 q 711 1226 692 1208 q 739 1280 730 1244 l 840 1280 q 784 1126 833 1182 q 656 1071 734 1071 q 601 1082 628 1071 q 548 1106 574 1093 q 497 1131 522 1120 q 448 1142 472 1142 z "},"ỡ":{"ha":943,"x_min":62,"x_max":1007,"o":"m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 576 749 508 772 q 692 679 644 726 q 793 872 793 709 l 997 872 l 1007 857 q 959 713 989 766 q 882 624 930 660 q 762 570 833 587 q 798 380 798 485 m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 860 0 m 323 913 q 283 895 302 913 q 255 840 264 877 l 154 840 q 210 994 161 939 q 338 1050 258 1050 q 393 1039 366 1050 q 446 1014 420 1027 q 497 990 472 1001 q 547 979 522 979 q 587 997 568 979 q 615 1051 606 1015 l 716 1051 q 660 897 709 953 q 532 842 610 842 q 477 853 504 842 q 424 877 450 864 q 373 902 398 890 q 323 913 348 913 z "},"Ợ":{"ha":1146,"x_min":81,"x_max":1187,"o":"m 1025 497 q 903 119 1025 251 q 553 -14 781 -14 q 203 119 325 -14 q 81 498 81 251 q 203 876 81 745 q 555 1007 326 1007 q 911 869 790 1007 q 974 1055 974 911 l 1178 1055 l 1187 1040 q 1115 852 1163 920 q 983 750 1067 784 q 1025 497 1025 642 m 301 497 q 364 247 301 331 q 553 163 427 163 q 804 497 804 163 q 554 832 804 832 q 365 748 429 832 q 301 497 301 663 m 1105 0 m 441 -191 q 554 -89 441 -89 q 667 -191 667 -89 q 638 -265 667 -239 q 554 -292 610 -292 q 441 -191 441 -292 z "},"ợ":{"ha":943,"x_min":62,"x_max":1007,"o":"m 798 380 q 700 91 798 195 q 428 -14 602 -14 q 235 34 319 -14 q 107 172 152 82 q 62 380 62 261 q 159 669 62 566 q 432 772 256 772 q 576 749 508 772 q 692 679 644 726 q 793 872 793 709 l 997 872 l 1007 857 q 959 713 989 766 q 882 624 930 660 q 762 570 833 587 q 798 380 798 485 m 273 380 q 310 210 273 268 q 431 153 347 153 q 550 210 513 153 q 586 380 586 267 q 549 549 586 493 q 429 606 513 606 q 310 550 347 606 q 273 380 273 494 m 860 0 m 319 -191 q 432 -89 319 -89 q 545 -191 545 -89 q 516 -265 545 -239 q 432 -292 488 -292 q 319 -191 319 -292 z "},"Ụ":{"ha":1050,"x_min":118,"x_max":932,"o":"m 932 991 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 385 q 374 216 328 270 q 526 163 420 163 q 676 217 629 163 q 722 386 722 271 l 722 991 l 932 991 m 412 -191 q 525 -89 412 -89 q 637 -191 637 -89 q 609 -265 637 -239 q 525 -292 581 -292 q 412 -191 412 -292 z "},"ụ":{"ha":913,"x_min":104,"x_max":804,"o":"m 646 0 l 618 97 l 607 97 q 513 15 574 44 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 0 l 646 0 m 342 -191 q 454 -89 342 -89 q 567 -191 567 -89 q 538 -265 567 -239 q 454 -292 510 -292 q 342 -191 342 -292 z "},"Ủ":{"ha":1050,"x_min":118,"x_max":932,"o":"m 932 991 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 385 q 374 216 328 270 q 526 163 420 163 q 676 217 629 163 q 722 386 722 271 l 722 991 l 932 991 m 693 1238 q 583 1104 693 1132 l 576 1056 l 458 1056 l 443 1156 q 512 1181 494 1164 q 530 1223 530 1198 q 516 1257 530 1245 q 479 1268 502 1268 q 385 1253 435 1268 l 385 1367 q 440 1378 405 1373 q 504 1382 476 1382 q 646 1344 599 1382 q 693 1238 693 1307 z "},"ủ":{"ha":913,"x_min":104,"x_max":804,"o":"m 646 0 l 618 97 l 607 97 q 513 15 574 44 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 0 l 646 0 m 624 1008 q 514 875 624 903 l 507 827 l 389 827 l 374 926 q 443 952 425 935 q 461 994 461 969 q 447 1027 461 1016 q 410 1039 433 1039 q 315 1023 366 1039 l 315 1137 q 371 1148 336 1144 q 435 1153 407 1153 q 577 1115 530 1153 q 624 1008 624 1078 z "},"Ứ":{"ha":1229,"x_min":118,"x_max":1243,"o":"m 932 991 l 932 864 q 1006 932 982 882 q 1029 1055 1029 983 l 1234 1055 l 1243 1040 q 1185 879 1221 936 q 1087 788 1149 823 q 932 739 1025 753 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 368 q 375 213 328 262 q 526 163 423 163 q 676 215 629 163 q 722 370 722 267 l 722 991 l 932 991 m 1050 0 m 414 1071 l 414 1089 q 574 1293 531 1225 l 806 1293 l 806 1279 q 685 1174 770 1244 q 552 1071 600 1105 l 414 1071 z "},"ứ":{"ha":1055,"x_min":104,"x_max":1120,"o":"m 646 0 l 618 97 l 606 97 q 512 16 573 45 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 679 q 879 744 852 694 q 905 872 905 793 l 1109 872 l 1120 857 q 1061 694 1098 751 q 963 603 1025 637 q 804 554 901 568 l 804 0 l 646 0 m 913 0 m 340 842 l 340 860 q 500 1064 457 996 l 732 1064 l 732 1050 q 611 945 696 1015 q 478 842 526 876 l 340 842 z "},"Ừ":{"ha":1229,"x_min":118,"x_max":1243,"o":"m 932 991 l 932 864 q 1006 932 982 882 q 1029 1055 1029 983 l 1234 1055 l 1243 1040 q 1185 879 1221 936 q 1087 788 1149 823 q 932 739 1025 753 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 368 q 375 213 328 262 q 526 163 423 163 q 676 215 629 163 q 722 370 722 267 l 722 991 l 932 991 m 1050 0 m 493 1071 q 368 1167 450 1101 q 239 1279 285 1234 l 239 1293 l 471 1293 q 630 1089 513 1225 l 630 1071 l 493 1071 z "},"ừ":{"ha":1055,"x_min":104,"x_max":1120,"o":"m 646 0 l 618 97 l 606 97 q 512 16 573 45 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 679 q 879 744 852 694 q 905 872 905 793 l 1109 872 l 1120 857 q 1061 694 1098 751 q 963 603 1025 637 q 804 554 901 568 l 804 0 l 646 0 m 913 0 m 416 842 q 291 938 374 871 q 162 1050 208 1005 l 162 1064 l 394 1064 q 553 860 437 996 l 553 842 l 416 842 z "},"Ử":{"ha":1229,"x_min":118,"x_max":1243,"o":"m 932 991 l 932 864 q 1006 932 982 882 q 1029 1055 1029 983 l 1234 1055 l 1243 1040 q 1185 879 1221 936 q 1087 788 1149 823 q 932 739 1025 753 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 368 q 375 213 328 262 q 526 163 423 163 q 676 215 629 163 q 722 370 722 267 l 722 991 l 932 991 m 1050 0 m 697 1238 q 587 1104 697 1132 l 581 1056 l 463 1056 l 447 1156 q 516 1181 498 1164 q 534 1223 534 1198 q 520 1257 534 1245 q 483 1268 506 1268 q 389 1253 439 1268 l 389 1367 q 445 1378 409 1373 q 508 1382 480 1382 q 650 1344 603 1382 q 697 1238 697 1307 z "},"ử":{"ha":1055,"x_min":104,"x_max":1120,"o":"m 646 0 l 618 97 l 606 97 q 512 16 573 45 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 679 q 879 744 852 694 q 905 872 905 793 l 1109 872 l 1120 857 q 1061 694 1098 751 q 963 603 1025 637 q 804 554 901 568 l 804 0 l 646 0 m 913 0 m 628 1008 q 518 875 628 903 l 511 827 l 393 827 l 378 926 q 447 952 429 935 q 465 994 465 969 q 451 1027 465 1016 q 414 1039 437 1039 q 319 1023 370 1039 l 319 1137 q 375 1148 340 1144 q 439 1153 411 1153 q 581 1115 534 1153 q 628 1008 628 1078 z "},"Ữ":{"ha":1229,"x_min":118,"x_max":1243,"o":"m 932 991 l 932 864 q 1006 932 982 882 q 1029 1055 1029 983 l 1234 1055 l 1243 1040 q 1185 879 1221 936 q 1087 788 1149 823 q 932 739 1025 753 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 368 q 375 213 328 262 q 526 163 423 163 q 676 215 629 163 q 722 370 722 267 l 722 991 l 932 991 m 1050 0 m 414 1142 q 374 1124 393 1142 q 346 1069 355 1106 l 245 1069 q 301 1223 252 1168 q 429 1279 349 1279 q 484 1268 457 1279 q 537 1243 511 1257 q 588 1219 563 1230 q 637 1208 613 1208 q 678 1226 659 1208 q 706 1280 697 1244 l 807 1280 q 750 1126 800 1182 q 623 1071 701 1071 q 568 1082 595 1071 q 515 1106 541 1093 q 464 1131 489 1120 q 414 1142 439 1142 z "},"ữ":{"ha":1055,"x_min":104,"x_max":1120,"o":"m 646 0 l 618 97 l 606 97 q 512 16 573 45 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 679 q 879 744 852 694 q 905 872 905 793 l 1109 872 l 1120 857 q 1061 694 1098 751 q 963 603 1025 637 q 804 554 901 568 l 804 0 l 646 0 m 913 0 m 345 913 q 304 895 323 913 q 276 840 285 877 l 175 840 q 231 994 182 939 q 359 1050 279 1050 q 414 1039 387 1050 q 467 1014 441 1027 q 518 990 493 1001 q 568 979 543 979 q 608 997 589 979 q 636 1051 627 1015 l 737 1051 q 681 897 730 953 q 553 842 631 842 q 498 853 525 842 q 445 877 471 864 q 394 902 419 890 q 345 913 369 913 z "},"Ự":{"ha":1229,"x_min":118,"x_max":1243,"o":"m 932 991 l 932 864 q 1006 932 982 882 q 1029 1055 1029 983 l 1234 1055 l 1243 1040 q 1185 879 1221 936 q 1087 788 1149 823 q 932 739 1025 753 l 932 350 q 883 157 932 240 q 741 31 833 75 q 521 -14 648 -14 q 224 84 330 -14 q 118 353 118 182 l 118 991 l 328 991 l 328 368 q 375 213 328 262 q 526 163 423 163 q 676 215 629 163 q 722 370 722 267 l 722 991 l 932 991 m 1050 0 m 406 -191 q 518 -89 406 -89 q 631 -191 631 -89 q 602 -265 631 -239 q 518 -292 574 -292 q 406 -191 406 -292 z "},"ự":{"ha":1055,"x_min":104,"x_max":1120,"o":"m 646 0 l 618 97 l 606 97 q 512 16 573 45 q 374 -14 452 -14 q 172 58 240 -14 q 104 264 104 130 l 104 758 l 311 758 l 311 315 q 340 192 311 233 q 433 151 370 151 q 559 209 520 151 q 597 401 597 267 l 597 758 l 804 758 l 804 679 q 879 744 852 694 q 905 872 905 793 l 1109 872 l 1120 857 q 1061 694 1098 751 q 963 603 1025 637 q 804 554 901 568 l 804 0 l 646 0 m 913 0 m 336 -191 q 449 -89 336 -89 q 562 -191 562 -89 q 533 -265 562 -239 q 449 -292 505 -292 q 336 -191 336 -292 z "},"Ỵ":{"ha":867,"x_min":0,"x_max":867,"o":"m 433 583 l 640 991 l 867 991 l 538 386 l 538 0 l 329 0 l 329 379 l 0 991 l 228 991 l 433 583 m 319 -191 q 432 -89 319 -89 q 545 -191 545 -89 q 516 -265 545 -239 q 432 -292 488 -292 q 319 -191 319 -292 z "},"ỵ":{"ha":790,"x_min":0,"x_max":790,"o":"m 0 758 l 227 758 l 370 332 q 395 200 388 276 l 399 200 q 428 332 406 270 l 568 758 l 790 758 l 469 -97 q 343 -275 425 -216 q 153 -334 262 -334 q 47 -322 99 -334 l 47 -158 q 129 -167 85 -167 q 225 -133 184 -167 q 289 -32 266 -100 l 301 5 l 0 758 m 553 -191 q 665 -89 553 -89 q 778 -191 778 -89 q 749 -265 778 -239 q 665 -292 721 -292 q 553 -191 553 -292 z "},"Ỷ":{"ha":867,"x_min":0,"x_max":867,"o":"m 433 583 l 640 991 l 867 991 l 538 386 l 538 0 l 329 0 l 329 379 l 0 991 l 228 991 l 433 583 m 603 1238 q 493 1104 603 1132 l 486 1056 l 368 1056 l 353 1156 q 422 1181 404 1164 q 440 1223 440 1198 q 426 1257 440 1245 q 389 1268 412 1268 q 294 1253 345 1268 l 294 1367 q 350 1378 315 1373 q 414 1382 386 1382 q 556 1344 509 1382 q 603 1238 603 1307 z "},"ỷ":{"ha":790,"x_min":0,"x_max":790,"o":"m 0 758 l 227 758 l 370 332 q 395 200 388 276 l 399 200 q 428 332 406 270 l 568 758 l 790 758 l 469 -97 q 343 -275 425 -216 q 153 -334 262 -334 q 47 -322 99 -334 l 47 -158 q 129 -167 85 -167 q 225 -133 184 -167 q 289 -32 266 -100 l 301 5 l 0 758 m 566 1008 q 456 875 566 903 l 449 827 l 331 827 l 315 926 q 385 952 366 935 q 403 994 403 969 q 389 1027 403 1016 q 351 1039 374 1039 q 257 1023 307 1039 l 257 1137 q 313 1148 277 1144 q 376 1153 349 1153 q 518 1115 471 1153 q 566 1008 566 1078 z "},"Ỹ":{"ha":867,"x_min":0,"x_max":867,"o":"m 433 583 l 640 991 l 867 991 l 538 386 l 538 0 l 329 0 l 329 379 l 0 991 l 228 991 l 433 583 m 322 1142 q 282 1124 301 1142 q 254 1069 262 1106 l 153 1069 q 209 1223 160 1168 q 337 1279 257 1279 q 392 1268 365 1279 q 445 1243 418 1257 q 496 1219 471 1230 q 545 1208 521 1208 q 586 1226 566 1208 q 614 1280 605 1244 l 715 1280 q 658 1126 707 1182 q 530 1071 609 1071 q 476 1082 503 1071 q 423 1106 449 1093 q 372 1131 397 1120 q 322 1142 347 1142 z "},"ỹ":{"ha":790,"x_min":0,"x_max":790,"o":"m 0 758 l 227 758 l 370 332 q 395 200 388 276 l 399 200 q 428 332 406 270 l 568 758 l 790 758 l 469 -97 q 343 -275 425 -216 q 153 -334 262 -334 q 47 -322 99 -334 l 47 -158 q 129 -167 85 -167 q 225 -133 184 -167 q 289 -32 266 -100 l 301 5 l 0 758 m 288 913 q 248 895 267 913 q 220 840 229 877 l 119 840 q 175 994 126 939 q 303 1050 223 1050 q 358 1039 331 1050 q 411 1014 385 1027 q 462 990 437 1001 q 511 979 487 979 q 552 997 532 979 q 580 1051 571 1015 l 681 1051 q 624 897 673 953 q 496 842 575 842 q 442 853 469 842 q 389 877 415 864 q 338 902 363 890 q 288 913 313 913 z "},"₫":{"ha":901,"x_min":62,"x_max":876,"o":"m 342 -14 q 137 84 212 -14 q 62 357 62 182 q 130 639 62 548 q 349 730 197 730 q 479 702 422 730 q 572 619 536 673 l 579 619 q 564 777 564 708 l 564 811 l 350 811 l 350 946 l 564 946 l 564 1055 l 771 1055 l 771 946 l 876 946 l 876 811 l 771 811 l 771 0 l 603 0 l 559 98 l 551 98 q 342 -14 481 -14 m 429 151 q 539 193 504 151 q 578 336 575 235 l 578 355 q 544 518 578 475 q 419 562 509 562 q 316 515 344 562 q 288 354 288 469 q 321 202 288 253 q 429 151 355 151 m 721 -220 l 144 -220 l 144 -125 l 721 -125 l 721 -220 z "},"̏":{"ha":0,"x_min":-782,"x_max":-191,"o":"m -300 842 q -416 944 -342 875 q -513 1050 -490 1013 l -513 1064 l -309 1064 q -252 957 -286 1015 q -191 860 -218 898 l -191 842 l -300 842 m -570 842 q -690 948 -619 880 q -782 1050 -761 1016 l -782 1064 l -578 1064 q -522 957 -555 1015 q -460 860 -488 898 l -460 842 l -570 842 z "},"ﬀ":{"ha":1075,"x_min":28,"x_max":1138,"o":"m 528 603 l 349 603 l 349 0 l 142 0 l 142 603 l 28 603 l 28 703 l 142 758 l 142 814 q 205 1003 142 943 q 410 1063 269 1063 q 600 1031 517 1063 l 547 879 q 432 899 485 899 q 368 872 388 899 q 349 806 349 846 l 349 758 l 528 758 l 528 603 m 1065 603 l 886 603 l 886 0 l 680 0 l 680 603 l 566 603 l 566 703 l 680 758 l 680 814 q 743 1003 680 943 q 947 1063 807 1063 q 1138 1031 1055 1063 l 1085 879 q 970 899 1023 899 q 906 872 926 899 q 886 806 886 846 l 886 758 l 1065 758 l 1065 603 z "},"℠":{"ha":1021,"x_min":56,"x_max":958,"o":"m 364 642 q 317 535 364 574 q 191 497 270 497 q 56 526 115 497 l 56 624 q 193 587 134 587 q 240 601 224 587 q 256 637 256 614 q 244 669 256 656 q 207 694 232 682 q 109 750 134 730 q 72 797 85 770 q 58 859 58 823 q 102 960 58 922 q 222 999 145 999 q 363 964 287 999 l 328 879 q 269 903 290 897 q 222 908 249 908 q 182 897 197 908 q 167 863 167 886 q 181 827 167 842 q 245 787 195 812 q 340 721 317 753 q 364 642 364 690 m 629 503 l 517 861 l 513 861 l 515 786 l 515 503 l 404 503 l 404 991 l 572 991 l 681 646 l 796 991 l 958 991 l 958 503 l 844 503 l 844 779 l 847 861 l 843 861 l 725 503 l 629 503 z "},"Ţ":{"ha":804,"x_min":28,"x_max":777,"o":"m 507 0 l 297 0 l 297 817 l 28 817 l 28 991 l 777 991 l 777 817 l 507 817 l 507 0 m 563 -170 q 512 -295 563 -256 q 353 -334 460 -334 q 254 -319 300 -334 l 254 -205 q 303 -215 273 -210 q 351 -220 334 -220 q 400 -178 400 -220 q 288 -104 400 -121 l 340 0 l 471 0 l 453 -41 q 533 -92 503 -58 q 563 -170 563 -126 z "},"ţ":{"ha":603,"x_min":32,"x_max":558,"o":"m 428 151 q 558 175 482 151 l 558 21 q 368 -14 481 -14 q 188 49 244 -14 q 131 237 131 112 l 131 603 l 32 603 l 32 690 l 146 760 l 205 920 l 338 920 l 338 758 l 550 758 l 550 603 l 338 603 l 338 237 q 362 172 338 193 q 428 151 387 151 m 502 -170 q 451 -295 502 -256 q 292 -334 399 -334 q 193 -319 239 -334 l 193 -205 q 242 -215 212 -210 q 290 -220 273 -220 q 339 -178 339 -220 q 227 -104 339 -121 l 279 0 l 410 0 l 392 -41 q 472 -92 442 -58 q 502 -170 502 -126 z "},"I":{"ha":460,"x_min":125,"x_max":335,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 z "},"Ì":{"ha":460,"x_min":-39,"x_max":352,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 m 215 1071 q 90 1167 172 1101 q -39 1279 7 1234 l -39 1293 l 193 1293 q 352 1089 235 1225 l 352 1071 l 215 1071 z "},"Í":{"ha":460,"x_min":113,"x_max":505,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 m 113 1071 l 113 1089 q 273 1293 230 1225 l 505 1293 l 505 1279 q 384 1174 469 1244 q 251 1071 299 1105 l 113 1071 z "},"Î":{"ha":460,"x_min":-65,"x_max":524,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 m 387 1071 q 228 1190 280 1134 q 73 1071 175 1135 l -65 1071 l -65 1089 q 109 1293 63 1217 l 351 1293 q 424 1197 372 1258 q 524 1089 475 1137 l 524 1071 l 387 1071 z "},"Ï":{"ha":460,"x_min":-2,"x_max":463,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 m -2 1182 q 23 1250 -2 1226 q 92 1274 49 1274 q 162 1249 137 1274 q 188 1182 188 1223 q 162 1117 188 1141 q 92 1092 136 1092 q 23 1116 49 1092 q -2 1182 -2 1139 m 271 1182 q 299 1252 271 1230 q 367 1274 326 1274 q 437 1249 411 1274 q 463 1182 463 1225 q 437 1116 463 1141 q 367 1092 410 1092 q 299 1114 326 1092 q 271 1182 271 1136 z "},"Ĩ":{"ha":460,"x_min":-51,"x_max":511,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 m 119 1142 q 78 1124 98 1142 q 50 1069 59 1106 l -51 1069 q 5 1223 -43 1168 q 134 1279 54 1279 q 188 1268 161 1279 q 241 1243 215 1257 q 292 1219 267 1230 q 342 1208 317 1208 q 382 1226 363 1208 q 410 1280 401 1244 l 511 1280 q 455 1126 504 1182 q 327 1071 406 1071 q 272 1082 299 1071 q 219 1106 245 1093 q 168 1131 193 1120 q 119 1142 143 1142 z "},"Ī":{"ha":460,"x_min":2,"x_max":462,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 m 2 1214 l 462 1214 l 462 1071 l 2 1071 l 2 1214 z "},"Ĭ":{"ha":460,"x_min":-36,"x_max":498,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 m 498 1300 q 415 1133 490 1196 q 228 1071 340 1071 q 40 1133 110 1071 q -36 1300 -31 1194 l 79 1300 q 98 1250 82 1268 q 143 1223 114 1232 q 229 1215 172 1215 q 380 1300 369 1215 l 498 1300 z "},"Į":{"ha":460,"x_min":75,"x_max":350,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 m 218 -154 q 233 -196 218 -182 q 272 -210 248 -210 q 350 -197 309 -210 l 350 -318 q 244 -334 294 -334 q 121 -291 168 -334 q 75 -178 75 -248 q 100 -92 75 -132 q 197 0 126 -52 l 318 0 q 244 -82 271 -45 q 218 -154 218 -119 z "},"İ":{"ha":460,"x_min":117,"x_max":342,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 m 117 1183 q 229 1284 117 1284 q 342 1183 342 1284 q 314 1108 342 1135 q 229 1082 286 1082 q 117 1183 117 1082 z "},"Ĳ":{"ha":1000,"x_min":125,"x_max":876,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 m 562 -292 q 437 -277 490 -292 l 437 -102 q 536 -115 492 -115 q 635 -72 606 -115 q 665 62 665 -29 l 665 991 l 876 991 l 876 64 q 796 -201 876 -110 q 562 -292 717 -292 z "},"Ί":{"ha":711,"x_min":-67,"x_max":506,"o":"m 296 0 l 296 991 l 506 991 l 506 0 l 296 0 m -67 791 q -37 903 -55 828 q -12 1034 -19 977 l 180 1034 l 180 1018 q 54 770 127 892 l -67 770 l -67 791 z "},"Ι":{"ha":460,"x_min":125,"x_max":335,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 z "},"Ϊ":{"ha":460,"x_min":-2,"x_max":463,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 m -2 1182 q 23 1250 -2 1226 q 92 1274 49 1274 q 162 1249 137 1274 q 188 1182 188 1223 q 162 1117 188 1141 q 92 1092 136 1092 q 23 1116 49 1092 q -2 1182 -2 1139 m 271 1182 q 299 1252 271 1230 q 367 1274 326 1274 q 437 1249 411 1274 q 463 1182 463 1225 q 437 1116 463 1141 q 367 1092 410 1092 q 299 1114 326 1092 q 271 1182 271 1136 z "},"І":{"ha":460,"x_min":125,"x_max":335,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 z "},"Ї":{"ha":460,"x_min":-2,"x_max":463,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 m -2 1182 q 23 1250 -2 1226 q 92 1274 49 1274 q 162 1249 137 1274 q 188 1182 188 1223 q 162 1117 188 1141 q 92 1092 136 1092 q 23 1116 49 1092 q -2 1182 -2 1139 m 271 1182 q 299 1252 271 1230 q 367 1274 326 1274 q 437 1249 411 1274 q 463 1182 463 1225 q 437 1116 463 1141 q 367 1092 410 1092 q 299 1114 326 1092 q 271 1182 271 1136 z "},"Ӏ":{"ha":460,"x_min":125,"x_max":335,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 z "},"ӏ":{"ha":460,"x_min":125,"x_max":335,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 z "},"Ỉ":{"ha":460,"x_min":94,"x_max":403,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 m 403 1238 q 293 1104 403 1132 l 286 1056 l 168 1056 l 153 1156 q 222 1181 203 1164 q 240 1223 240 1198 q 226 1257 240 1245 q 189 1268 212 1268 q 94 1253 144 1268 l 94 1367 q 150 1378 115 1373 q 214 1382 186 1382 q 356 1344 309 1382 q 403 1238 403 1307 z "},"Ị":{"ha":460,"x_min":117,"x_max":342,"o":"m 125 0 l 125 991 l 335 991 l 335 0 l 125 0 m 117 -191 q 229 -89 117 -89 q 342 -191 342 -89 q 313 -265 342 -239 q 229 -292 285 -292 q 117 -191 117 -292 z "}},"familyName":"Open Sans","ascender":1485,"descender":-407,"underlinePosition":-104,"underlineThickness":69,"boundingBox":{"yMin":-407,"xMin":-860,"yMax":1485,"xMax":1832},"resolution":1000,"original_font_information":{"format":0,"copyright":"Digitized data copyright © 2010-2011, Google Corporation.","fontFamily":"Open Sans","fontSubfamily":"Bold","uniqueID":"1.10;1ASC;OpenSans-Bold","fullName":"Open Sans Bold","version":"Version 1.10","postScriptName":"OpenSans-Bold","trademark":"Open Sans is a trademark of Google and may be registered in certain jurisdictions.","manufacturer":"Ascender Corporation","manufacturerURL":"http://www.ascendercorp.com/","designerURL":"http://www.ascendercorp.com/typedesigners.html","licence":"Licensed under the Apache License, Version 2.0","licenceURL":"http://www.apache.org/licenses/LICENSE-2.0"},"cssFontWeight":"bold","cssFontStyle":"normal"}')},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),l=n(1),r=function(){function e(e,t,n,r){this.scene=e,this.isDone=!1,this.group=new i.Group;for(var a=(new i.Box3).makeEmpty(),o=0;o<t.length;o++){var q=new i.Mesh(t[o],n);if(a.isEmpty())a.setFromObject(q);else{var s=new i.Vector3,m=new i.Vector3;a.getCenter(s),a.getSize(m);var h=(new i.Box3).setFromObject(q),c=new i.Vector3,u=new i.Vector3;h.getCenter(c),h.getSize(u);var d;d=s.x+.5*m.x+.5*u.x,q.position.x=d,a.setFromObject(q)}this.group.add(q)}var p=(new i.Box3).setFromObject(this.group),f=new i.Vector3;p.getCenter(f);for(o=0;o<this.group.children.length;o++){this.group.children[o].position.x-=f.x}this.scene.add(this.group),this.group.position.copy(r);var x=this.group.position.y+5;this.tween=new l.default.Tween(this.group.position).to({y:x},500).easing(l.default.Easing.Quadratic.Out).onComplete(this.onAnimationComplete.bind(this)).start()}return e.prototype.onAnimationComplete=function(){this.isDone=!0},e.prototype.dispose=function(){this.tween.stop(),this.tween=null,this.scene.remove(this.group)},e}();t.ScorePopup=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),l=function(){function e(e){this.camera=e,this.listener=new i.AudioListener,this.camera.add(this.listener);var t=this;this.sounds={};var n=new i.AudioLoader;n.load("sounds/BGM.wav",(function(e){var n=new i.Audio(t.listener);n.setBuffer(e),n.setLoop(!0),n.setVolume(.25),t.sounds.BGM=n}),null,(function(e){console.error(e)})),n.load("sounds/CreateBuilding.wav",(function(e){var n=new i.Audio(t.listener);n.setBuffer(e),n.setLoop(!1),n.setVolume(.1),t.sounds.CreateBuilding=n}),null,(function(e){console.error(e)})),n.load("sounds/Score.wav",(function(e){var n=new i.Audio(t.listener);n.setBuffer(e),n.setLoop(!1),n.setVolume(.1),t.sounds.Score=n}),null,(function(e){console.error(e)}))}return e.prototype.playSound=function(e){this.sounds.hasOwnProperty(e)&&this.sounds[e].play()},e}();t.SoundManager=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),l=n(2),r=function(){function e(e,t,n,r){this.scene=e,this.camera=t,this.control=n,this.modelMgr=r,this.rootGroup=new i.Group,this.scene.add(this.rootGroup);var a=new i.FontLoader;this.fontData=a.parse(l),this.geometry=new i.TextBufferGeometry("Hold:",{font:this.fontData,size:8,height:2}),this.geometry.computeBoundingBox();var o=new i.Vector3;this.geometry.boundingBox.getSize(o),this.geometry.translate(-.5*o.x,-.5*o.y,-.5*o.z),this.material=new i.MeshPhongMaterial({color:65280}),this.mesh=new i.Mesh(this.geometry,this.material),this.rootGroup.add(this.mesh),this.mesh.position.set(0,0,0),this.holderRoot=new i.Group,this.rootGroup.add(this.holderRoot);var q=(new i.Box3).setFromObject(this.mesh),s=new i.Vector3;q.getSize(s),this.holderRoot.position.y-=1,this.holderRoot.position.x=.5*s.x+10;var m=new i.BoxBufferGeometry(o.x,2,5);this.underLine=new i.Mesh(m,this.material),this.rootGroup.add(this.underLine),this.underLine.position.set(0,-.5*o.y-1.5,0),this.underLine.visible=!1}return e.prototype.update=function(e){var t=new i.Vector3;this.camera.getWorldDirection(t);var n=this.control.target.clone();n.addScaledVector(t,this.boardSphere.radius);var l=(new i.Plane).setFromNormalAndCoplanarPoint(new i.Vector3(0,1,0),this.boardSphere.center),r=new i.Vector3;l.projectPoint(n,r);var a=(new i.Vector3).subVectors(r,this.control.target);a.normalize();var o=this.control.target.clone();o.addScaledVector(a,this.boardSphere.radius+10),o.y+=20,this.rootGroup.position.copy(o),this.rootGroup.lookAt(this.control.target),this.holderPickSphere=new i.Sphere,(new i.Box3).setFromObject(this.rootGroup).getBoundingSphere(this.holderPickSphere),this.holderObject&&this.holderObject.rotateY(Math.PI*e*.1)},e.prototype.pickTest=function(e){var t=new i.Vector3;return e.ray.intersectSphere(this.holderPickSphere,t)?(this.underLine.visible=!0,!0):(this.underLine.visible=!1,!1)},e.prototype.setHoldTile=function(e){var t=this,n=this.holderObject?this.holderObject.userData.level:null,l=this.modelMgr.getModelByLevelNumber(e);return l&&(this.holderObject&&this.disposeHolderObject(),this.holderObject=new i.Object3D,l.traverse((function(e){if(e instanceof i.Mesh){var n=null;if(e.material instanceof Array){n=[];for(var l=0;l<e.material.length;l++){var r=e.material[l].clone();n.push(r)}}else n=e.material.clone();var a=new i.Mesh(e.geometry,n);t.holderObject.add(a)}})),this.holderRoot.add(this.holderObject),this.holderObject.userData.level=e),n},e.prototype.disposeHolderObject=function(){this.holderObject&&(this.holderRoot.remove(this.holderObject),this.holderObject.traverse((function(e){if(e instanceof i.Mesh)if(e.geometry.dispose(),e.material instanceof Array)for(var t=0;t<e.material.length;t++)e.material[t].dispose();else e.material.dispose()})),this.holderObject=null)},e.prototype.setVisible=function(e){this.rootGroup.visible=e},e}();t.TileHolder=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),l=n(2),r=function(){function e(e,t,n,r){this.scene=e,this.camera=t,this.control=n,this.onStart=r;var a=new i.FontLoader;this.fontData=a.parse(l);var o=new i.TextBufferGeometry("Game Start",{font:this.fontData,size:10,height:5});o.computeBoundingBox();var q=new i.Vector3;o.boundingBox.getSize(q),o.translate(-.5*q.x,-.5*q.y,-.5*q.z);var s=new i.MeshPhongMaterial({color:65280});this.text=new i.Mesh(o,s),this.scene.add(this.text);var m=new i.BoxBufferGeometry(q.x,2,5);this.underLine=new i.Mesh(m,s),this.text.add(this.underLine),this.underLine.position.set(0,-.5*q.y-1.5,0),this.underLine.visible=!1,this.rayCast=new i.Raycaster,this.mousePos=new i.Vector2,this.mouseDownPos=new i.Vector2,this.pointerDownBinder=this.onPointerDown.bind(this),this.pointerMoveBinder=this.onPointerMove.bind(this),this.pointerUpBinder=this.onPointerUp.bind(this),window.addEventListener("pointerdown",this.pointerDownBinder,!1),window.addEventListener("pointermove",this.pointerMoveBinder,!1),window.addEventListener("pointerup",this.pointerUpBinder,!1)}return e.prototype.update=function(e){var t=new i.Vector3;this.camera.getWorldDirection(t);var n=this.control.target.clone();n.addScaledVector(t,this.boardSphere.radius);var l=(new i.Plane).setFromNormalAndCoplanarPoint(new i.Vector3(0,1,0),this.boardSphere.center),r=new i.Vector3;l.projectPoint(n,r);var a=(new i.Vector3).subVectors(r,this.control.target);a.normalize();var o=this.control.target.clone();o.addScaledVector(a,this.boardSphere.radius+15),this.text.position.copy(o),this.text.lookAt(this.control.target),this.pickSphere=new i.Sphere,(new i.Box3).setFromObject(this.text).getBoundingSphere(this.pickSphere)},e.prototype.onPointerDown=function(e){0===e.button&&(this.mouseDownPos.x=e.screenX,this.mouseDownPos.y=e.screenY)},e.prototype.onPointerMove=function(e){if(this.pickSphere){this.mousePos.x=e.clientX/window.innerWidth*2-1,this.mousePos.y=-e.clientY/window.innerHeight*2+1,this.rayCast.setFromCamera(this.mousePos,this.camera);var t=new i.Vector3;this.rayCast.ray.intersectSphere(this.pickSphere,t)?this.underLine.visible=!0:this.underLine.visible=!1}else this.underLine.visible=!1},e.prototype.onPointerUp=function(e){0===e.button&&(new i.Vector2(e.screenX,e.screenY).distanceTo(this.mouseDownPos)<5&&this.underLine.visible&&(window.removeEventListener("pointerdown",this.pointerDownBinder),window.removeEventListener("pointermove",this.pointerMoveBinder),window.removeEventListener("pointerup",this.pointerUpBinder),this.text.visible=!1,this.onStart()))},e}();t.GameStarter=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),l=n(2),r=function(){function e(e,t,n){var r=this;this.scene=e,this.camera=t,this.control=n,this.remainTime=300,this.timeCheck=0,this.isPlaying=!1;var a=new i.FontLoader;this.fontData=a.parse(l),this.longestInterval=0,this.geometries={};["Time:","0","1","2","3","4","5","6","7","8","9"].forEach((function(e,t){var n=new i.TextBufferGeometry(e,{font:r.fontData,size:2.5,height:2});n.computeBoundingBox();var l=new i.Vector3;n.boundingBox.getSize(l),n.translate(-.5*l.x,-.5*l.y,-.5*l.z),r.geometries[e]=n,0<t&&(r.longestInterval=Math.max(r.longestInterval,l.x))})),this.sharedMaterial=new i.MeshPhongMaterial({color:65280,specular:65280,shininess:100}),this.rootGroup=new i.Group,this.scene.add(this.rootGroup),this.updateTimeMesh(),this.initGameOverText()}return e.prototype.initGameOverText=function(){var e=new i.TextBufferGeometry("GameOver",{font:this.fontData,size:10,height:2});e.computeBoundingBox();var t=new i.Vector3;e.boundingBox.getSize(t),e.translate(-.5*t.x,-.5*t.y,-.5*t.z);var n=new i.MeshPhongMaterial({color:16711680,specular:16711680,shininess:100});this.gameOverText=new i.Mesh(e,n),this.scene.add(this.gameOverText),this.gameOverText.visible=!1},e.prototype.updateTimeMesh=function(){for(var e=this.rootGroup.children.length,t=0;t<e;t++){var n=this.rootGroup.children[0];this.rootGroup.remove(n)}var l=new i.Mesh(this.geometries["Time:"],this.sharedMaterial);this.rootGroup.add(l),l.position.set(0,0,0);var r=this.geometries["Time:"].boundingBox.clone(),a=new i.Vector3,o=new i.Vector3;r.getCenter(a),r.getSize(o);var q=new i.Vector3;this.geometries[0].boundingBox.getSize(q);for(var s=this.remainTime.toString(),m=0;m<s.length;m++)l=new i.Mesh(this.geometries[s[m]],this.sharedMaterial),this.rootGroup.add(l),l.position.x=a.x+.5*o.x+q.x+this.longestInterval*m,r.expandByObject(l);var h,c=Number.MAX_VALUE,u=Number.MIN_VALUE;for(m=1;m<this.rootGroup.children.length;m++){var d=(n=this.rootGroup.children[m]).geometry.boundingBox.clone();d.translate(n.position),c=Math.min(c,d.min.x),u=Math.max(u,d.max.x)}h=.5*(u-c);for(m=0;m<this.rootGroup.children.length;m++){(n=this.rootGroup.children[m]).translateX(-h)}},e.prototype.update=function(e){if(this.sphere){var t=new i.Vector3;this.camera.getWorldDirection(t);var n=this.control.target.clone();n.addScaledVector(t,this.sphere.radius);var l=(new i.Plane).setFromNormalAndCoplanarPoint(new i.Vector3(0,1,0),this.sphere.center),r=new i.Vector3;l.projectPoint(n,r);var a=(new i.Vector3).subVectors(r,this.control.target);a.normalize();var o=this.control.target.clone();o.addScaledVector(a,this.sphere.radius+10),o.y-=2.5,this.rootGroup.position.copy(o),this.rootGroup.lookAt(this.control.target),this.isPlaying&&(this.timeCheck+=e,this.timeCheck>=1&&(this.timeCheck=0,this.remainTime--,this.remainTime>=0?this.updateTimeMesh():(this.isPlaying=!1,this.gameLogic.doGameOver()),this.remainTime<=30?this.sharedMaterial.color=new i.Color(16711680):this.remainTime<=60?this.sharedMaterial.color=new i.Color(16756026):this.sharedMaterial.color=new i.Color(65280))),this.gameOverText&&this.gameOverText.visible&&(this.gameOverText.position.copy(o),this.gameOverText.position.y+=25,this.gameOverText.lookAt(this.control.target))}},e.prototype.setVisible=function(e){this.rootGroup.visible=e},e.prototype.setGameLogic=function(e){this.gameLogic=e},e.prototype.reset=function(){this.isPlaying=!0,this.remainTime=300,this.timeCheck=0,this.gameOverText.visible=!1},e}();t.GameTimer=r}]);